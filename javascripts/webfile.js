$(function(){ 

 // connect to canvas
var Module = {
    preRun: [],
    postRun: [],
    print: (function() {
        var element = document.getElementById('output');
        element.value = ''; // clear browser cache
        return function(text) {
            // These replacements are necessary if you render to raw HTML
            //text = text.replace(/&/g, "&amp;");
            //text = text.replace(/</g, "&lt;");
            //text = text.replace(/>/g, "&gt;");
            //text = text.replace('\n', '<br>', 'g');
            element.value += text + "\n";
            element.scrollTop = 99999; // focus on bottom
        };
    })(),
    printErr: function(text) {
        if (0) { // XXX disabled for safety typeof dump == 'function') {
            dump(text + '\n'); // fast, straight to the real console
        } else {
            console.log(text);
        }
    },
    canvas: document.getElementById('canvas'),
    setStatus: function(text) {
        if (Module.setStatus.interval) clearInterval(Module.setStatus.interval);
        var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
        var statusElement = document.getElementById('status');
        var progressElement = document.getElementById('progress');
        if (m) {
            text = m[1];
            progressElement.value = parseInt(m[2])*100;
            progressElement.max = parseInt(m[4])*100;
            progressElement.hidden = false;
        } else {
            progressElement.value = null;
            progressElement.max = null;
            progressElement.hidden = true;
        }
        statusElement.innerHTML = text;
    },
    totalDependencies: 0,
    monitorRunDependencies: function(left) {
        this.totalDependencies = Math.max(this.totalDependencies, left);
        Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies-left) + '/' + this.totalDependencies + ')' : 'All downloads complete.');
    }
};
Module.setStatus('Downloading...');

Module.preRun = function(){

    // todo
    _regcomp = function(){return 0;};
    _regexec = function(){return 0;};
    _regfree = function(){return 0;};

    // webfile_check = cwrap('webfile_check', 'string', ['string', 'number']);
    // var data = "#bin/sh";
    // webfile_check(data, data.length);
}

window.webfile = {cwrap: cwrap}

 

 try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }

  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  Module['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  addFunction: function (func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func) {
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        FUNCTION_TABLE[func].apply(null, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': HEAP32[((ptr)>>2)]=value; break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[(((ptr)+(4))>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[(((ptr)+(4))>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [STATICTOP, TOTAL_MEMORY]);
  assert(STATICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STATIC);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = ptr;
  while (HEAP8[(i++)]) {}; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i - ptr - 1;
}
Module['String_len'] = String_len;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    if (!calledRun) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===




function _magic_setflags($ms, $flags) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$flags;
      var $4=$3;
      var $5=$4 & 128;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 5; break;
    case 4: 
      var $9=$3;
      var $10=$2;
      var $11=(($10+28)|0);
      HEAP32[(($11)>>2)]=$9;
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $13=$1;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _magic_error($ms) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ms;
      var $2=$1;
      var $3=(($2+32)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 & 1;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $14 = $11;__label__ = 5; break;
    case 4: 
      var $14 = 0;__label__ = 5; break;
    case 5: 
      var $14;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _magic_errno($ms) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ms;
      var $2=$1;
      var $3=(($2+32)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 & 1;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $13 = $10;__label__ = 5; break;
    case 4: 
      var $13 = 0;__label__ = 5; break;
    case 5: 
      var $13;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _magic_getpath($magicfile, $action) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$magicfile;
      $3=$action;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$2;
      $1=$7;
      __label__ = 10; break;
    case 4: 
      var $9=_getenv(((STRING_TABLE.__str)|0));
      $2=$9;
      var $10=$2;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $13=$2;
      $1=$13;
      __label__ = 10; break;
    case 6: 
      var $15=$3;
      var $16=(($15)|0)==0;
      if ($16) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $18=_get_default_magic();
      var $21 = $18;__label__ = 9; break;
    case 8: 
      var $21 = ((STRING_TABLE.__str1)|0);__label__ = 9; break;
    case 9: 
      var $21;
      $1=$21;
      __label__ = 10; break;
    case 10: 
      var $23=$1;
      ;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}


function _get_default_magic() {
  var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $home;
      var $hmagicpath=__stackBase__;
      var $st=(__stackBase__)+(4);
      var $2=HEAP32[((_get_default_magic_default_magic)>>2)];
      var $3=(($2)|0)!=0;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=HEAP32[((_get_default_magic_default_magic)>>2)];
      _free($5);
      HEAP32[((_get_default_magic_default_magic)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      var $7=_getenv(((STRING_TABLE.__str8)|0));
      $home=$7;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=((STRING_TABLE.__str1)|0);
      __label__ = 20; break;
    case 6: 
      var $11=$home;
      var $12=_asprintf($hmagicpath, ((STRING_TABLE.__str9)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$11,tempInt));
      var $13=(($12)|0) < 0;
      if ($13) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=((STRING_TABLE.__str1)|0);
      __label__ = 20; break;
    case 8: 
      var $16=HEAP32[(($hmagicpath)>>2)];
      var $17=_stat($16, $st);
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 19; break;
    case 10: 
      var $21=(($st+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & 61440;
      var $24=(($23)|0)==16384;
      if ($24) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      var $26=HEAP32[(($hmagicpath)>>2)];
      _free($26);
      var $27=$home;
      var $28=_asprintf($hmagicpath, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=((STRING_TABLE._get_default_magic_hmagic)|0),tempInt));
      var $29=(($28)|0) < 0;
      if ($29) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=((STRING_TABLE.__str1)|0);
      __label__ = 20; break;
    case 13: 
      var $32=HEAP32[(($hmagicpath)>>2)];
      var $33=_access($32, 4);
      var $34=(($33)|0)==-1;
      if ($34) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 19; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $38=HEAP32[(($hmagicpath)>>2)];
      var $39=_asprintf(_get_default_magic_default_magic, ((STRING_TABLE.__str11)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$38,HEAP32[(((tempInt)+(4))>>2)]=((STRING_TABLE.__str1)|0),tempInt));
      var $40=(($39)|0) < 0;
      if ($40) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 19; break;
    case 18: 
      var $43=HEAP32[(($hmagicpath)>>2)];
      _free($43);
      var $44=HEAP32[((_get_default_magic_default_magic)>>2)];
      $1=$44;
      __label__ = 20; break;
    case 19: 
      HEAP32[((_get_default_magic_default_magic)>>2)]=0;
      var $46=HEAP32[(($hmagicpath)>>2)];
      _free($46);
      $1=((STRING_TABLE.__str1)|0);
      __label__ = 20; break;
    case 20: 
      var $48=$1;
      STACKTOP = __stackBase__;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_default_magic["X"]=1;

function _magic_open($flags) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ms;
      var $len;
      $2=$flags;
      var $3=_calloc(1, 124);
      var $4=$3;
      $ms=$4;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 10; break;
    case 4: 
      var $8=$ms;
      var $9=$2;
      var $10=_magic_setflags($8, $9);
      var $11=(($10)|0)==-1;
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $13=___errno();
      HEAP32[(($13)>>2)]=22;
      __label__ = 9; break;
    case 6: 
      var $15=$ms;
      var $16=(($15+12)|0);
      var $17=(($16+4)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=$ms;
      var $19=(($18+12)|0);
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$ms;
      var $22=(($21+4)|0);
      var $23=(($22)|0);
      HEAP32[(($23)>>2)]=10;
      $len=160;
      var $24=$len;
      var $25=_malloc($24);
      var $26=$25;
      var $27=$ms;
      var $28=(($27+4)|0);
      var $29=(($28+4)|0);
      HEAP32[(($29)>>2)]=$26;
      var $30=(($26)|0)==0;
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 9; break;
    case 8: 
      var $33=$ms;
      var $34=(($33+32)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$ms;
      var $36=(($35+24)|0);
      HEAP32[(($36)>>2)]=-1;
      var $37=$ms;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=0;
      var $39=$ms;
      var $40=(($39+36)|0);
      HEAP32[(($40)>>2)]=((STRING_TABLE.__str2)|0);
      var $41=$ms;
      var $42=(($41+40)|0);
      HEAP32[(($42)>>2)]=0;
      var $43=$ms;
      $1=$43;
      __label__ = 10; break;
    case 9: 
      var $45=$ms;
      var $46=$45;
      _free($46);
      $1=0;
      __label__ = 10; break;
    case 10: 
      var $48=$1;
      ;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_magic_open["X"]=1;

function _magic_close($ms) {
  ;
  var __label__;

  var $1;
  $1=$ms;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  _free_mlist($4);
  var $5=$1;
  var $6=(($5+12)|0);
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  _free($8);
  var $9=$1;
  var $10=(($9+12)|0);
  var $11=(($10)|0);
  var $12=HEAP32[(($11)>>2)];
  _free($12);
  var $13=$1;
  var $14=(($13+4)|0);
  var $15=(($14+4)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  _free($17);
  var $18=$1;
  var $19=$18;
  _free($19);
  ;
  return;
}


function _free_mlist($mlist) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $ml;
      var $next;
      var $mg;
      $1=$mlist;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 8; break;
    case 4: 
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $ml=$8;
      __label__ = 5; break;
    case 5: 
      var $10=$ml;
      var $11=$1;
      var $12=(($10)|0)!=(($11)|0);
      if ($12) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $14=$ml;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      $next=$16;
      var $17=$ml;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      $mg=$19;
      var $20=$mg;
      var $21=$ml;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$ml;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      _file_delmagic($20, $23, $26);
      var $27=$ml;
      var $28=$27;
      _free($28);
      var $29=$next;
      $ml=$29;
      __label__ = 5; break;
    case 7: 
      var $31=$ml;
      var $32=$31;
      _free($32);
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _magic_load($ms, $magicfile) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ml;
      $2=$ms;
      $3=$magicfile;
      var $4=$2;
      var $5=$3;
      var $6=_file_apprentice($4, $5, 0);
      $ml=$6;
      var $7=$ml;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      _free_mlist($12);
      var $13=$ml;
      var $14=$2;
      var $15=(($14)|0);
      HEAP32[(($15)>>2)]=$13;
      $1=0;
      __label__ = 5; break;
    case 4: 
      $1=-1;
      __label__ = 5; break;
    case 5: 
      var $18=$1;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _magic_compile($ms, $magicfile) {
  ;
  var __label__;

  var $1;
  var $2;
  var $ml;
  $1=$ms;
  $2=$magicfile;
  var $3=$1;
  var $4=$2;
  var $5=_file_apprentice($3, $4, 2);
  $ml=$5;
  var $6=$ml;
  _free_mlist($6);
  var $7=$ml;
  var $8=(($7)|0)!=0;
  var $9=$8 ? 0 : -1;
  ;
  return $9;
}


function _magic_check($ms, $magicfile) {
  ;
  var __label__;

  var $1;
  var $2;
  var $ml;
  $1=$ms;
  $2=$magicfile;
  var $3=$1;
  var $4=$2;
  var $5=_file_apprentice($3, $4, 1);
  $ml=$5;
  var $6=$ml;
  _free_mlist($6);
  var $7=$ml;
  var $8=(($7)|0)!=0;
  var $9=$8 ? 0 : -1;
  ;
  return $9;
}


function _magic_list($ms, $magicfile) {
  ;
  var __label__;

  var $1;
  var $2;
  var $ml;
  $1=$ms;
  $2=$magicfile;
  var $3=$1;
  var $4=$2;
  var $5=_file_apprentice($3, $4, 3);
  $ml=$5;
  var $6=$ml;
  _free_mlist($6);
  var $7=$ml;
  var $8=(($7)|0)!=0;
  var $9=$8 ? 0 : -1;
  ;
  return $9;
}


function _magic_descriptor($ms, $fd) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ms;
  $2=$fd;
  var $3=$1;
  var $4=$2;
  var $5=_file_or_fd($3, 0, $4);
  ;
  return $5;
}


function _file_or_fd($ms, $inname, $fd) {
  var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rv;
      var $buf;
      var $sb=__stackBase__;
      var $nbytes;
      var $ispipe;
      var $flags;
      $2=$ms;
      $3=$inname;
      $4=$fd;
      $rv=-1;
      $nbytes=0;
      $ispipe=0;
      var $5=_malloc(262209);
      $buf=$5;
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 37; break;
    case 4: 
      var $9=$2;
      var $10=_file_reset($9);
      var $11=(($10)|0)==-1;
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 33; break;
    case 6: 
      var $14=$2;
      var $15=$3;
      var $16=_file_fsmagic($14, $15, $sb);
      if ((($16)|0) == -1) {
        __label__ = 7; break;
      }
      else if ((($16)|0) == 0) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 7: 
      __label__ = 33; break;
    case 8: 
      __label__ = 10; break;
    case 9: 
      $rv=0;
      __label__ = 33; break;
    case 10: 
      var $21=$3;
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $24=$4;
      var $25=_fstat($24, $sb);
      var $26=(($25)|0)==0;
      if ($26) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $28=(($sb+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 & 61440;
      var $31=(($30)|0)==4096;
      if ($31) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $ispipe=1;
      __label__ = 14; break;
    case 14: 
      __label__ = 25; break;
    case 15: 
      $flags=0;
      var $35=$3;
      var $36=_stat($35, $sb);
      var $37=(($36)|0)==0;
      if ($37) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $39=(($sb+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40 & 61440;
      var $42=(($41)|0)==4096;
      if ($42) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $44=$flags;
      var $45=$44 | 16384;
      $flags=$45;
      $ispipe=1;
      __label__ = 18; break;
    case 18: 
      var $47=___errno();
      HEAP32[(($47)>>2)]=0;
      var $48=$3;
      var $49=$flags;
      var $50=_open($48, $49, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $4=$50;
      var $51=(($50)|0) < 0;
      if ($51) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $53=$2;
      var $54=(($sb+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$3;
      var $57=_unreadable_info($53, $55, $56);
      var $58=(($57)|0)==-1;
      if ($58) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 33; break;
    case 21: 
      $rv=0;
      __label__ = 33; break;
    case 22: 
      var $62=$4;
      var $63=_fcntl($62, 3, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $flags=$63;
      var $64=(($63)|0)!=-1;
      if ($64) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $66=$flags;
      var $67=$66 & -16385;
      $flags=$67;
      var $68=$4;
      var $69=$flags;
      var $70=_fcntl($68, 4, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$69,tempInt));
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $73=$ispipe;
      var $74=(($73)|0)!=0;
      if ($74) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 30; break;
    case 27: 
      var $77=$4;
      var $78=$buf;
      var $79=_read($77, $78, 262144);
      $nbytes=$79;
      var $80=(($79)|0)==-1;
      if ($80) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $82=$2;
      var $83=___errno();
      var $84=HEAP32[(($83)>>2)];
      var $85=$3;
      _file_error($82, $84, ((STRING_TABLE.__str3)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$85,tempInt));
      __label__ = 33; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $88=$buf;
      var $89=$nbytes;
      var $90=(($88+$89)|0);
      _memset($90, 0, 65, 1);
      var $91=$2;
      var $92=$4;
      var $93=$3;
      var $94=$buf;
      var $95=$nbytes;
      var $96=_file_buffer($91, $92, $93, $94, $95);
      var $97=(($96)|0)==-1;
      if ($97) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      $rv=0;
      __label__ = 33; break;
    case 33: 
      var $101=$buf;
      _free($101);
      var $102=$2;
      var $103=$3;
      var $104=$4;
      _close_and_restore($102, $103, $104, $sb);
      var $105=$rv;
      var $106=(($105)|0)==0;
      if ($106) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $108=$2;
      var $109=_file_getbuffer($108);
      var $112 = $109;__label__ = 36; break;
    case 35: 
      var $112 = 0;__label__ = 36; break;
    case 36: 
      var $112;
      $1=$112;
      __label__ = 37; break;
    case 37: 
      var $114=$1;
      STACKTOP = __stackBase__;
      return $114;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_or_fd["X"]=1;

function _magic_file($ms, $inname) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ms;
  $2=$inname;
  var $3=$1;
  var $4=$2;
  var $5=_file_or_fd($3, $4, 1);
  ;
  return $5;
}


function _magic_buffer($ms, $buf, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ms;
      $3=$buf;
      $4=$nb;
      var $5=$2;
      var $6=_file_reset($5);
      var $7=(($6)|0)==-1;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 7; break;
    case 4: 
      var $10=$2;
      var $11=$3;
      var $12=$4;
      var $13=_file_buffer($10, -1, 0, $11, $12);
      var $14=(($13)|0)==-1;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 7; break;
    case 6: 
      var $17=$2;
      var $18=_file_getbuffer($17);
      $1=$18;
      __label__ = 7; break;
    case 7: 
      var $20=$1;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}


function _unreadable_info($ms, $md, $file) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ms;
      $3=$md;
      $4=$file;
      var $5=$4;
      var $6=_access($5, 2);
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $9=$2;
      var $10=_file_printf($9, ((STRING_TABLE.__str4)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=(($10)|0)==-1;
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 17; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $15=$4;
      var $16=_access($15, 1);
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $19=$2;
      var $20=_file_printf($19, ((STRING_TABLE.__str5)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=(($20)|0)==-1;
      if ($21) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=-1;
      __label__ = 17; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $25=$3;
      var $26=$25 & 61440;
      var $27=(($26)|0)==32768;
      if ($27) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $29=$2;
      var $30=_file_printf($29, ((STRING_TABLE.__str6)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=(($30)|0)==-1;
      if ($31) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=-1;
      __label__ = 17; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $35=$2;
      var $36=_file_printf($35, ((STRING_TABLE.__str7)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=(($36)|0)==-1;
      if ($37) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $1=-1;
      __label__ = 17; break;
    case 16: 
      $1=0;
      __label__ = 17; break;
    case 17: 
      var $41=$1;
      STACKTOP = __stackBase__;
      return $41;
    default: assert(0, "bad label: " + __label__);
  }
}
_unreadable_info["X"]=1;

function _close_and_restore($ms, $name, $fd, $sb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$ms;
      $2=$name;
      $3=$fd;
      $4=$sb;
      var $5=$3;
      var $6=(($5)|0)==1;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      var $9=$3;
      var $10=_close($9);
      var $11=$1;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 128;
      var $15=(($14)|0)!=0;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_delmagic($p, $type, $entries) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$type;
      $3=$entries;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 9; break;
    case 4: 
      var $8=$2;
      if ((($8)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($8)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($8)|0) == 0) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $11=$1;
      var $12=((($11)-(232))|0);
      $1=$12;
      __label__ = 7; break;
    case 7: 
      var $14=$1;
      var $15=$14;
      _free($15);
      __label__ = 9; break;
    case 8: 
      _abort();
      throw "Reached an unreachable!"
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_file_tables() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p;
      var $1=HEAP32[((_init_file_tables_done)>>2)];
      var $2=(($1)|0)!=0;
      if ($2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 8; break;
    case 4: 
      var $5=HEAP32[((_init_file_tables_done)>>2)];
      var $6=((($5)+(1))|0);
      HEAP32[((_init_file_tables_done)>>2)]=$6;
      $p=((_type_tbl)|0);
      __label__ = 5; break;
    case 5: 
      var $8=$p;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $13=$p;
      var $14=(($13)|0);
      var $15=(($14)|0);
      var $16=$p;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((_file_names+($18<<2))|0);
      HEAP32[(($19)>>2)]=$15;
      var $20=$p;
      var $21=(($20+24)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$p;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((_file_formats+($25<<2))|0);
      HEAP32[(($26)>>2)]=$22;
      __label__ = 7; break;
    case 7: 
      var $28=$p;
      var $29=(($28+28)|0);
      $p=$29;
      __label__ = 5; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_apprentice($ms, $fn, $action) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $mfn;
      var $file_err;
      var $errs;
      var $mlist;
      $2=$ms;
      $3=$fn;
      $4=$action;
      $errs=-1;
      var $5=$3;
      var $6=$4;
      var $7=_magic_getpath($5, $6);
      $3=$7;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 21; break;
    case 4: 
      _init_file_tables();
      var $11=$3;
      var $12=_strdup($11);
      $mfn=$12;
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$2;
      var $16=$3;
      var $17=_strlen($16);
      _file_oomem($15, $17);
      $1=0;
      __label__ = 21; break;
    case 6: 
      var $19=$mfn;
      $3=$19;
      var $20=_malloc(20);
      var $21=$20;
      $mlist=$21;
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $24=$mfn;
      _free($24);
      var $25=$2;
      _file_oomem($25, 20);
      $1=0;
      __label__ = 21; break;
    case 8: 
      var $27=$mlist;
      var $28=$mlist;
      var $29=(($28+16)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$mlist;
      var $31=(($30+12)|0);
      HEAP32[(($31)>>2)]=$27;
      __label__ = 9; break;
    case 9: 
      var $33=$3;
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 10; break; } else { __label__ = 18; break; }
    case 10: 
      var $36=$3;
      var $37=_strchr($36, 58);
      $p=$37;
      var $38=$p;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $41=$p;
      var $42=(($41+1)|0);
      $p=$42;
      HEAP8[($41)]=0;
      __label__ = 12; break;
    case 12: 
      var $44=$3;
      var $45=HEAP8[($44)];
      var $46=(($45 << 24) >> 24);
      var $47=(($46)|0)==0;
      if ($47) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 18; break;
    case 14: 
      var $50=$2;
      var $51=$3;
      var $52=$4;
      var $53=$mlist;
      var $54=_apprentice_1($50, $51, $52, $53);
      $file_err=$54;
      var $55=$errs;
      var $56=$file_err;
      var $57=(($55)|0) > (($56)|0);
      if ($57) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $59=$errs;
      var $63 = $59;__label__ = 17; break;
    case 16: 
      var $61=$file_err;
      var $63 = $61;__label__ = 17; break;
    case 17: 
      var $63;
      $errs=$63;
      var $64=$p;
      $3=$64;
      __label__ = 9; break;
    case 18: 
      var $66=$errs;
      var $67=(($66)|0)==-1;
      if ($67) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $69=$mfn;
      _free($69);
      var $70=$mlist;
      var $71=$70;
      _free($71);
      $mlist=0;
      var $72=$2;
      _file_error($72, 0, ((STRING_TABLE.__str12)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=0;
      __label__ = 21; break;
    case 20: 
      var $74=$mfn;
      _free($74);
      var $75=$mlist;
      $1=$75;
      __label__ = 21; break;
    case 21: 
      var $77=$1;
      STACKTOP = __stackBase__;
      return $77;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_apprentice["X"]=1;

function _apprentice_1($ms, $fn, $action, $mlist) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $magic=__stackBase__;
      var $nmagic=(__stackBase__)+(4);
      var $ml;
      var $rv;
      var $mapped;
      $2=$ms;
      $3=$fn;
      $4=$action;
      $5=$mlist;
      HEAP32[(($magic)>>2)]=0;
      HEAP32[(($nmagic)>>2)]=0;
      $rv=-1;
      var $6=HEAP32[((_magicsize)>>2)];
      var $7=(($6)|0)!=232;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$2;
      _file_error($9, 0, ((STRING_TABLE.__str315)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=232,HEAP32[(((tempInt)+(4))>>2)]=232,tempInt));
      $1=-1;
      __label__ = 21; break;
    case 4: 
      var $11=$4;
      var $12=(($11)|0)==2;
      if ($12) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $14=$2;
      var $15=$3;
      var $16=$4;
      var $17=_apprentice_load($14, $magic, $nmagic, $15, $16);
      $rv=$17;
      var $18=$rv;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=-1;
      __label__ = 21; break;
    case 7: 
      var $22=$2;
      var $23=$3;
      var $24=_apprentice_compile($22, $magic, $nmagic, $23);
      $rv=$24;
      var $25=HEAP32[(($magic)>>2)];
      var $26=$25;
      _free($26);
      var $27=$rv;
      $1=$27;
      __label__ = 21; break;
    case 8: 
      var $29=$2;
      var $30=$3;
      var $31=_apprentice_map($29, $magic, $nmagic, $30);
      $rv=$31;
      var $32=(($31)|0)==-1;
      if ($32) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $34=$2;
      var $35=(($34+28)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & 64;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $40=$2;
      var $41=$3;
      _file_magwarn($40, ((STRING_TABLE.__str416)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$41,tempInt));
      __label__ = 11; break;
    case 11: 
      var $43=$2;
      var $44=$3;
      var $45=$4;
      var $46=_apprentice_load($43, $magic, $nmagic, $44, $45);
      $rv=$46;
      var $47=$rv;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=-1;
      __label__ = 21; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $52=$rv;
      $mapped=$52;
      var $53=HEAP32[(($magic)>>2)];
      var $54=(($53)|0)==0;
      if ($54) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $56=HEAP32[(($magic)>>2)];
      var $57=$mapped;
      var $58=HEAP32[(($nmagic)>>2)];
      _file_delmagic($56, $57, $58);
      $1=-1;
      __label__ = 21; break;
    case 16: 
      var $60=_malloc(20);
      var $61=$60;
      $ml=$61;
      var $62=(($61)|0)==0;
      if ($62) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $64=HEAP32[(($magic)>>2)];
      var $65=$mapped;
      var $66=HEAP32[(($nmagic)>>2)];
      _file_delmagic($64, $65, $66);
      var $67=$2;
      _file_oomem($67, 20);
      $1=-1;
      __label__ = 21; break;
    case 18: 
      var $69=HEAP32[(($magic)>>2)];
      var $70=$ml;
      var $71=(($70)|0);
      HEAP32[(($71)>>2)]=$69;
      var $72=HEAP32[(($nmagic)>>2)];
      var $73=$ml;
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$mapped;
      var $76=$ml;
      var $77=(($76+8)|0);
      HEAP32[(($77)>>2)]=$75;
      var $78=$ml;
      var $79=$5;
      var $80=(($79+16)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+12)|0);
      HEAP32[(($82)>>2)]=$78;
      var $83=$5;
      var $84=(($83+16)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$ml;
      var $87=(($86+16)|0);
      HEAP32[(($87)>>2)]=$85;
      var $88=$5;
      var $89=$ml;
      var $90=(($89+12)|0);
      HEAP32[(($90)>>2)]=$88;
      var $91=$ml;
      var $92=$5;
      var $93=(($92+16)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$4;
      var $95=(($94)|0)==3;
      if ($95) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $97=_printf(((STRING_TABLE.__str517)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $98=$5;
      _apprentice_list($98, 32);
      var $99=_printf(((STRING_TABLE.__str618)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $100=$5;
      _apprentice_list($100, 64);
      __label__ = 20; break;
    case 20: 
      $1=0;
      __label__ = 21; break;
    case 21: 
      var $103=$1;
      STACKTOP = __stackBase__;
      return $103;
    default: assert(0, "bad label: " + __label__);
  }
}
_apprentice_1["X"]=1;

function _file_signextend($ms, $m, $v$0, $v$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1=__stackBase__;
      var $2;
      var $3;
      var $4=(__stackBase__)+(8);
      $2=$ms;
      $3=$m;
      var $st$6$0=(($4)|0);
      HEAP32[(($st$6$0)>>2)]=$v$0;
      var $st$6$1=(($4+4)|0);
      HEAP32[(($st$6$1)>>2)]=$v$1;
      var $5=$3;
      var $6=(($5+2)|0);
      var $7=HEAPU8[($6)];
      var $8=(($7)&255);
      var $9=$8 & 8;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 13; break; } else { __label__ = 3; break; }
    case 3: 
      var $12=$3;
      var $13=(($12+6)|0);
      var $14=HEAPU8[($13)];
      var $15=(($14)&255);
      if ((($15)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($15)|0) == 2 || (($15)|0) == 7 || (($15)|0) == 10) {
        __label__ = 5; break;
      }
      else if ((($15)|0) == 6 || (($15)|0) == 9 || (($15)|0) == 12 || (($15)|0) == 21 || (($15)|0) == 14 || (($15)|0) == 15 || (($15)|0) == 16 || (($15)|0) == 22 || (($15)|0) == 4 || (($15)|0) == 8 || (($15)|0) == 11 || (($15)|0) == 23 || (($15)|0) == 33 || (($15)|0) == 34 || (($15)|0) == 35) {
        __label__ = 6; break;
      }
      else if ((($15)|0) == 24 || (($15)|0) == 26 || (($15)|0) == 25 || (($15)|0) == 27 || (($15)|0) == 30 || (($15)|0) == 29 || (($15)|0) == 32 || (($15)|0) == 28 || (($15)|0) == 31 || (($15)|0) == 36 || (($15)|0) == 37 || (($15)|0) == 38) {
        __label__ = 7; break;
      }
      else if ((($15)|0) == 5 || (($15)|0) == 13 || (($15)|0) == 18 || (($15)|0) == 19 || (($15)|0) == 17 || (($15)|0) == 20 || (($15)|0) == 3 || (($15)|0) == 41) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 4: 
      var $st$0$0=(($4)|0);
      var $17$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $17$1=HEAP32[(($st$0$1)>>2)];
      var $18$0=$17$0;
      var $18=$18$0&255;
      var $19$0=$18;
      var $19$1=((($18 << 24) >> 24) < 0 ? -1 : 0);
      var $st$8$0=(($4)|0);
      HEAP32[(($st$8$0)>>2)]=$19$0;
      var $st$8$1=(($4+4)|0);
      HEAP32[(($st$8$1)>>2)]=$19$1;
      __label__ = 12; break;
    case 5: 
      var $st$0$0=(($4)|0);
      var $21$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $21$1=HEAP32[(($st$0$1)>>2)];
      var $22$0=$21$0;
      var $22=$22$0&65535;
      var $23$0=$22;
      var $23$1=((($22 << 16) >> 16) < 0 ? -1 : 0);
      var $st$8$0=(($4)|0);
      HEAP32[(($st$8$0)>>2)]=$23$0;
      var $st$8$1=(($4+4)|0);
      HEAP32[(($st$8$1)>>2)]=$23$1;
      __label__ = 12; break;
    case 6: 
      var $st$0$0=(($4)|0);
      var $25$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $25$1=HEAP32[(($st$0$1)>>2)];
      var $26$0=$25$0;
      var $26=$26$0;
      var $27$0=$26;
      var $27$1=((($26)|0) < 0 ? -1 : 0);
      var $st$8$0=(($4)|0);
      HEAP32[(($st$8$0)>>2)]=$27$0;
      var $st$8$1=(($4+4)|0);
      HEAP32[(($st$8$1)>>2)]=$27$1;
      __label__ = 12; break;
    case 7: 
      var $st$0$0=(($4)|0);
      var $29$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $29$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($4)|0);
      HEAP32[(($st$4$0)>>2)]=$29$0;
      var $st$4$1=(($4+4)|0);
      HEAP32[(($st$4$1)>>2)]=$29$1;
      __label__ = 12; break;
    case 8: 
      __label__ = 12; break;
    case 9: 
      var $32=$2;
      var $33=(($32+28)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 & 64;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $38=$2;
      var $39=$3;
      var $40=(($39+6)|0);
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      _file_magwarn($38, ((STRING_TABLE.__str113)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,tempInt));
      __label__ = 11; break;
    case 11: 
      var $$emscripten$temp$0$0=-1;
      var $$emscripten$temp$0$1=0;
      var $st$2$0=(($1)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$0$0;
      var $st$2$1=(($1+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$0$1;
      __label__ = 14; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $st$0$0=(($4)|0);
      var $46$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $46$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($1)|0);
      HEAP32[(($st$4$0)>>2)]=$46$0;
      var $st$4$1=(($1+4)|0);
      HEAP32[(($st$4$1)>>2)]=$46$1;
      __label__ = 14; break;
    case 14: 
      var $st$0$0=(($1)|0);
      var $48$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($1+4)|0);
      var $48$1=HEAP32[(($st$0$1)>>2)];
      STACKTOP = __stackBase__;
      return [$48$0,$48$1];
    default: assert(0, "bad label: " + __label__);
  }
}
_file_signextend["X"]=1;

function _file_showstr($fp, $s, $len) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      $1=$fp;
      $2=$s;
      $3=$len;
      __label__ = 3; break;
    case 3: 
      var $5=$3;
      var $6=(($5)|0)==-1;
      if ($6) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $8=$2;
      var $9=(($8+1)|0);
      $2=$9;
      var $10=HEAP8[($8)];
      $c=$10;
      var $11=$c;
      var $12=(($11 << 24) >> 24);
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 24; break;
    case 6: 
      __label__ = 10; break;
    case 7: 
      var $17=$3;
      var $18=((($17)-(1))|0);
      $3=$18;
      var $19=(($17)|0)==0;
      if ($19) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 24; break;
    case 9: 
      var $22=$2;
      var $23=(($22+1)|0);
      $2=$23;
      var $24=HEAP8[($22)];
      $c=$24;
      __label__ = 10; break;
    case 10: 
      var $26=$c;
      var $27=(($26 << 24) >> 24);
      var $28=(($27)|0) >= 32;
      if ($28) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $30=$c;
      var $31=(($30 << 24) >> 24);
      var $32=(($31)|0) <= 126;
      if ($32) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $34=$c;
      var $35=(($34 << 24) >> 24);
      var $36=$1;
      var $37=_fputc($35, $36);
      __label__ = 23; break;
    case 13: 
      var $39=$1;
      var $40=_fputc(92, $39);
      var $41=$c;
      var $42=(($41 << 24) >> 24);
      if ((($42)|0) == 7) {
        __label__ = 14; break;
      }
      else if ((($42)|0) == 8) {
        __label__ = 15; break;
      }
      else if ((($42)|0) == 12) {
        __label__ = 16; break;
      }
      else if ((($42)|0) == 10) {
        __label__ = 17; break;
      }
      else if ((($42)|0) == 13) {
        __label__ = 18; break;
      }
      else if ((($42)|0) == 9) {
        __label__ = 19; break;
      }
      else if ((($42)|0) == 11) {
        __label__ = 20; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 14: 
      var $44=$1;
      var $45=_fputc(97, $44);
      __label__ = 22; break;
    case 15: 
      var $47=$1;
      var $48=_fputc(98, $47);
      __label__ = 22; break;
    case 16: 
      var $50=$1;
      var $51=_fputc(102, $50);
      __label__ = 22; break;
    case 17: 
      var $53=$1;
      var $54=_fputc(110, $53);
      __label__ = 22; break;
    case 18: 
      var $56=$1;
      var $57=_fputc(114, $56);
      __label__ = 22; break;
    case 19: 
      var $59=$1;
      var $60=_fputc(116, $59);
      __label__ = 22; break;
    case 20: 
      var $62=$1;
      var $63=_fputc(118, $62);
      __label__ = 22; break;
    case 21: 
      var $65=$1;
      var $66=$c;
      var $67=(($66 << 24) >> 24);
      var $68=$67 & 255;
      var $69=_fprintf($65, ((STRING_TABLE.__str214)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$68,tempInt));
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 3; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_showstr["X"]=1;

function _file_pstring_length_size($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 3968;
      if ((($8)|0) == 128) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 512 || (($8)|0) == 256) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 2048 || (($8)|0) == 1024) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      $1=1;
      __label__ = 7; break;
    case 4: 
      $1=2;
      __label__ = 7; break;
    case 5: 
      $1=4;
      __label__ = 7; break;
    case 6: 
      _abort();
      throw "Reached an unreachable!"
    case 7: 
      var $14=$1;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_pstring_get_length($m, $s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $len;
      $1=$m;
      $2=$s;
      $len=0;
      var $3=$1;
      var $4=(($3+24)|0);
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 3968;
      if ((($8)|0) == 128) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 512) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 256) {
        __label__ = 5; break;
      }
      else if ((($8)|0) == 2048) {
        __label__ = 6; break;
      }
      else if ((($8)|0) == 1024) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      var $10=$2;
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      $len=$12;
      __label__ = 9; break;
    case 4: 
      var $14=$2;
      var $15=(($14+1)|0);
      var $16=HEAP8[($15)];
      var $17=(($16 << 24) >> 24);
      var $18=$17 << 8;
      var $19=$2;
      var $20=(($19)|0);
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24);
      var $23=$18 | $22;
      $len=$23;
      __label__ = 9; break;
    case 5: 
      var $25=$2;
      var $26=(($25)|0);
      var $27=HEAP8[($26)];
      var $28=(($27 << 24) >> 24);
      var $29=$28 << 8;
      var $30=$2;
      var $31=(($30+1)|0);
      var $32=HEAP8[($31)];
      var $33=(($32 << 24) >> 24);
      var $34=$29 | $33;
      $len=$34;
      __label__ = 9; break;
    case 6: 
      var $36=$2;
      var $37=(($36+3)|0);
      var $38=HEAP8[($37)];
      var $39=(($38 << 24) >> 24);
      var $40=$39 << 24;
      var $41=$2;
      var $42=(($41+2)|0);
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=$44 << 16;
      var $46=$40 | $45;
      var $47=$2;
      var $48=(($47+1)|0);
      var $49=HEAP8[($48)];
      var $50=(($49 << 24) >> 24);
      var $51=$50 << 8;
      var $52=$46 | $51;
      var $53=$2;
      var $54=(($53)|0);
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      var $57=$52 | $56;
      $len=$57;
      __label__ = 9; break;
    case 7: 
      var $59=$2;
      var $60=(($59)|0);
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$62 << 24;
      var $64=$2;
      var $65=(($64+1)|0);
      var $66=HEAP8[($65)];
      var $67=(($66 << 24) >> 24);
      var $68=$67 << 16;
      var $69=$63 | $68;
      var $70=$2;
      var $71=(($70+2)|0);
      var $72=HEAP8[($71)];
      var $73=(($72 << 24) >> 24);
      var $74=$73 << 8;
      var $75=$69 | $74;
      var $76=$2;
      var $77=(($76+3)|0);
      var $78=HEAP8[($77)];
      var $79=(($78 << 24) >> 24);
      var $80=$75 | $79;
      $len=$80;
      __label__ = 9; break;
    case 8: 
      _abort();
      throw "Reached an unreachable!"
    case 9: 
      var $83=$1;
      var $84=(($83+24)|0);
      var $85=$84;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & 4096;
      var $89=(($88)|0)!=0;
      if ($89) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $91=$1;
      var $92=_file_pstring_length_size($91);
      var $93=$len;
      var $94=((($93)-($92))|0);
      $len=$94;
      __label__ = 11; break;
    case 11: 
      var $96=$len;
      ;
      return $96;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_pstring_get_length["X"]=1;

function _apprentice_load($ms, $magicp, $nmagicp, $fn, $action) {
  var __stackBase__  = STACKTOP; STACKTOP += 88; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $errs=__stackBase__;
      var $marray=(__stackBase__)+(4);
      var $marraycount=(__stackBase__)+(8);
      var $i;
      var $mentrycount;
      var $starttest;
      var $slen;
      var $files;
      var $maxfiles;
      var $filearr;
      var $mfn=(__stackBase__)+(12);
      var $st=(__stackBase__)+(16);
      var $dir;
      var $d;
      var $mlen;
      var $p;
      $2=$ms;
      $3=$magicp;
      $4=$nmagicp;
      $5=$fn;
      $6=$action;
      HEAP32[(($errs)>>2)]=0;
      $mentrycount=0;
      $files=0;
      $maxfiles=0;
      $filearr=0;
      var $7=$2;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 | 64;
      HEAP32[(($8)>>2)]=$10;
      HEAP32[((_maxmagic)>>2)]=8192;
      var $11=HEAP32[((_maxmagic)>>2)];
      var $12=_calloc($11, 12);
      var $13=$12;
      HEAP32[(($marray)>>2)]=$13;
      var $14=(($13)|0)==0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$2;
      var $17=HEAP32[((_maxmagic)>>2)];
      var $18=((($17)*(12))|0);
      _file_oomem($16, $18);
      $1=-1;
      __label__ = 86; break;
    case 4: 
      HEAP32[(($marraycount)>>2)]=0;
      var $20=$6;
      var $21=(($20)|0)==1;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=HEAP32[((_stderr)>>2)];
      var $24=_fprintf($23, ((STRING_TABLE.__str21)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE._usg_hdr)|0),tempInt));
      __label__ = 6; break;
    case 6: 
      var $26=$5;
      var $27=_stat($26, $st);
      var $28=(($27)|0)==0;
      if ($28) { __label__ = 7; break; } else { __label__ = 27; break; }
    case 7: 
      var $30=(($st+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 61440;
      var $33=(($32)|0)==16384;
      if ($33) { __label__ = 8; break; } else { __label__ = 27; break; }
    case 8: 
      var $35=$5;
      var $36=_opendir($35);
      $dir=$36;
      var $37=$dir;
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $40=HEAP32[(($errs)>>2)];
      var $41=((($40)+(1))|0);
      HEAP32[(($errs)>>2)]=$41;
      __label__ = 79; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $44=$dir;
      var $45=_readdir($44);
      $d=$45;
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 12; break; } else { __label__ = 22; break; }
    case 12: 
      var $48=$5;
      var $49=$d;
      var $50=(($49+4)|0);
      var $51=(($50)|0);
      var $52=_asprintf($mfn, ((STRING_TABLE.__str22)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$48,HEAP32[(((tempInt)+(4))>>2)]=$51,tempInt));
      var $53=(($52)|0) < 0;
      if ($53) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $55=$2;
      var $56=$5;
      var $57=_strlen($56);
      var $58=$d;
      var $59=(($58+4)|0);
      var $60=(($59)|0);
      var $61=_strlen($60);
      var $62=((($57)+($61))|0);
      var $63=((($62)+(2))|0);
      _file_oomem($55, $63);
      var $64=HEAP32[(($errs)>>2)];
      var $65=((($64)+(1))|0);
      HEAP32[(($errs)>>2)]=$65;
      var $66=$dir;
      var $67=_closedir($66);
      __label__ = 79; break;
    case 14: 
      var $69=HEAP32[(($mfn)>>2)];
      var $70=_stat($69, $st);
      var $71=(($70)|0)==-1;
      if ($71) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $73=(($st+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 & 61440;
      var $76=(($75)|0)==32768;
      if ($76) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $78=HEAP32[(($mfn)>>2)];
      _free($78);
      __label__ = 11; break;
    case 17: 
      var $80=$files;
      var $81=$maxfiles;
      var $82=(($80)>>>0) >= (($81)>>>0);
      if ($82) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $84=$maxfiles;
      var $85=((($84)+(1))|0);
      var $86=((($85<<1))|0);
      $maxfiles=$86;
      var $87=$maxfiles;
      var $88=((($87<<2))|0);
      $mlen=$88;
      var $89=$filearr;
      var $90=$89;
      var $91=$mlen;
      var $92=_realloc($90, $91);
      var $93=$92;
      $filearr=$93;
      var $94=(($93)|0)==0;
      if ($94) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $96=$2;
      var $97=$mlen;
      _file_oomem($96, $97);
      var $98=HEAP32[(($mfn)>>2)];
      _free($98);
      var $99=$dir;
      var $100=_closedir($99);
      var $101=HEAP32[(($errs)>>2)];
      var $102=((($101)+(1))|0);
      HEAP32[(($errs)>>2)]=$102;
      __label__ = 79; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $105=HEAP32[(($mfn)>>2)];
      var $106=$files;
      var $107=((($106)+(1))|0);
      $files=$107;
      var $108=$filearr;
      var $109=(($108+($106<<2))|0);
      HEAP32[(($109)>>2)]=$105;
      __label__ = 11; break;
    case 22: 
      var $111=$dir;
      var $112=_closedir($111);
      var $113=$filearr;
      var $114=$113;
      var $115=$files;
      _qsort($114, $115, 4, 2);
      $i=0;
      __label__ = 23; break;
    case 23: 
      var $117=$i;
      var $118=$files;
      var $119=(($117)>>>0) < (($118)>>>0);
      if ($119) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $121=$2;
      var $122=$6;
      var $123=$i;
      var $124=$filearr;
      var $125=(($124+($123<<2))|0);
      var $126=HEAP32[(($125)>>2)];
      _load_1($121, $122, $126, $errs, $marray, $marraycount);
      var $127=$i;
      var $128=$filearr;
      var $129=(($128+($127<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      _free($130);
      __label__ = 25; break;
    case 25: 
      var $132=$i;
      var $133=((($132)+(1))|0);
      $i=$133;
      __label__ = 23; break;
    case 26: 
      var $135=$filearr;
      var $136=$135;
      _free($136);
      __label__ = 28; break;
    case 27: 
      var $138=$2;
      var $139=$6;
      var $140=$5;
      _load_1($138, $139, $140, $errs, $marray, $marraycount);
      __label__ = 28; break;
    case 28: 
      var $142=HEAP32[(($errs)>>2)];
      var $143=(($142)|0)!=0;
      if ($143) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      __label__ = 79; break;
    case 30: 
      $i=0;
      __label__ = 31; break;
    case 31: 
      var $147=$i;
      var $148=HEAPU32[(($marraycount)>>2)];
      var $149=(($147)>>>0) < (($148)>>>0);
      if ($149) { __label__ = 32; break; } else { __label__ = 54; break; }
    case 32: 
      var $151=$i;
      var $152=HEAP32[(($marray)>>2)];
      var $153=(($152+($151)*(12))|0);
      var $154=(($153)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|0);
      var $157=HEAPU16[(($156)>>1)];
      var $158=(($157)&65535);
      var $159=(($158)|0)!=0;
      if ($159) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $161=$i;
      var $162=((($161)+(1))|0);
      $i=$162;
      __label__ = 31; break;
    case 34: 
      var $164=$i;
      $starttest=$164;
      __label__ = 35; break;
    case 35: 
      var $166=$starttest;
      var $167=HEAP32[(($marray)>>2)];
      var $168=(($167+($166)*(12))|0);
      var $169=(($168)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$i;
      var $172=HEAP32[(($marray)>>2)];
      var $173=(($172+($171)*(12))|0);
      var $174=(($173)|0);
      var $175=HEAP32[(($174)>>2)];
      _set_test_type($170, $175);
      var $176=$2;
      var $177=(($176+28)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$178 & 1;
      var $180=(($179)|0)==0;
      if ($180) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      __label__ = 50; break;
    case 37: 
      var $183=HEAP32[((_stderr)>>2)];
      var $184=$i;
      var $185=HEAP32[(($marray)>>2)];
      var $186=(($185+($184)*(12))|0);
      var $187=(($186)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+160)|0);
      var $190=(($189)|0);
      var $191=$i;
      var $192=HEAP32[(($marray)>>2)];
      var $193=(($192+($191)*(12))|0);
      var $194=(($193)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=(($195+160)|0);
      var $197=(($196)|0);
      var $198=HEAP8[($197)];
      var $199=(($198 << 24) >> 24);
      var $200=(($199)|0)==0;
      var $201=$200 ? (((__str24)|0)) : (((STRING_TABLE.__str25)|0));
      var $202=$i;
      var $203=HEAP32[(($marray)>>2)];
      var $204=(($203+($202)*(12))|0);
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+96)|0);
      var $208=(($207)|0);
      var $209=HEAP8[($208)];
      var $210=(($209 << 24) >> 24);
      var $211=(($210)|0)!=0;
      if ($211) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $213=$i;
      var $214=HEAP32[(($marray)>>2)];
      var $215=(($214+($213)*(12))|0);
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217+96)|0);
      var $219=(($218)|0);
      var $222 = $219;__label__ = 40; break;
    case 39: 
      var $222 = ((STRING_TABLE.__str26)|0);__label__ = 40; break;
    case 40: 
      var $222;
      var $223=$i;
      var $224=HEAP32[(($marray)>>2)];
      var $225=(($224+($223)*(12))|0);
      var $226=(($225)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+2)|0);
      var $229=HEAPU8[($228)];
      var $230=(($229)&255);
      var $231=$230 & 32;
      var $232=(($231)|0)!=0;
      var $233=$232 ? (((STRING_TABLE._apprentice_load_binary)|0)) : (((STRING_TABLE._apprentice_load_text)|0));
      var $234=_fprintf($183, ((STRING_TABLE.__str23)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$190,HEAP32[(((tempInt)+(4))>>2)]=$201,HEAP32[(((tempInt)+(8))>>2)]=$222,HEAP32[(((tempInt)+(12))>>2)]=$233,tempInt));
      var $235=$i;
      var $236=HEAP32[(($marray)>>2)];
      var $237=(($236+($235)*(12))|0);
      var $238=(($237)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($239+2)|0);
      var $241=HEAPU8[($240)];
      var $242=(($241)&255);
      var $243=$242 & 32;
      var $244=(($243)|0)!=0;
      if ($244) { __label__ = 41; break; } else { __label__ = 49; break; }
    case 41: 
      var $246=$i;
      var $247=HEAP32[(($marray)>>2)];
      var $248=(($247+($246)*(12))|0);
      var $249=(($248)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=(($250+96)|0);
      var $252=(($251)|0);
      var $253=_strstr($252, ((STRING_TABLE._apprentice_load_text)|0));
      $p=$253;
      var $254=$p;
      var $255=(($254)|0)!=0;
      if ($255) { __label__ = 42; break; } else { __label__ = 48; break; }
    case 42: 
      var $257=$p;
      var $258=$i;
      var $259=HEAP32[(($marray)>>2)];
      var $260=(($259+($258)*(12))|0);
      var $261=(($260)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=(($262+96)|0);
      var $264=(($263)|0);
      var $265=(($257)|0)==(($264)|0);
      if ($265) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      var $267=$p;
      var $268=((($267)-(1))|0);
      var $269=HEAPU8[($268)];
      var $270=(($269)&255);
      var $271=_isspace($270);
      var $272=(($271)|0)!=0;
      if ($272) { __label__ = 44; break; } else { __label__ = 48; break; }
    case 44: 
      var $274=$p;
      var $275=(($274+5)|0);
      var $276=$i;
      var $277=HEAP32[(($marray)>>2)];
      var $278=(($277+($276)*(12))|0);
      var $279=(($278)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+96)|0);
      var $282=(($281)|0);
      var $283=$275;
      var $284=$282;
      var $285=((($283)-($284))|0);
      var $286=(($285)|0)==64;
      if ($286) { __label__ = 47; break; } else { __label__ = 45; break; }
    case 45: 
      var $288=$p;
      var $289=(($288+5)|0);
      var $290=HEAP8[($289)];
      var $291=(($290 << 24) >> 24);
      var $292=(($291)|0)==0;
      if ($292) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      var $294=$p;
      var $295=(($294+5)|0);
      var $296=HEAPU8[($295)];
      var $297=(($296)&255);
      var $298=_isspace($297);
      var $299=(($298)|0)!=0;
      if ($299) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $301=HEAP32[((_stderr)>>2)];
      var $302=_fprintf($301, ((STRING_TABLE.__str27)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $306=$i;
      var $307=((($306)+(1))|0);
      $i=$307;
      var $308=HEAPU32[(($marraycount)>>2)];
      var $309=(($307)>>>0) < (($308)>>>0);
      if ($309) { __label__ = 51; break; } else { var $321 = 0;__label__ = 52; break; }
    case 51: 
      var $311=$i;
      var $312=HEAP32[(($marray)>>2)];
      var $313=(($312+($311)*(12))|0);
      var $314=(($313)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=(($315)|0);
      var $317=HEAPU16[(($316)>>1)];
      var $318=(($317)&65535);
      var $319=(($318)|0)!=0;
      var $321 = $319;__label__ = 52; break;
    case 52: 
      var $321;
      if ($321) { __label__ = 35; break; } else { __label__ = 53; break; }
    case 53: 
      __label__ = 31; break;
    case 54: 
      var $324=HEAP32[(($marray)>>2)];
      var $325=$324;
      var $326=HEAP32[(($marraycount)>>2)];
      _qsort($325, $326, 12, 4);
      $i=0;
      __label__ = 55; break;
    case 55: 
      var $328=$i;
      var $329=HEAPU32[(($marraycount)>>2)];
      var $330=(($328)>>>0) < (($329)>>>0);
      if ($330) { __label__ = 56; break; } else { __label__ = 68; break; }
    case 56: 
      var $332=$i;
      var $333=HEAP32[(($marray)>>2)];
      var $334=(($333+($332)*(12))|0);
      var $335=(($334)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336)|0);
      var $338=HEAPU16[(($337)>>1)];
      var $339=(($338)&65535);
      var $340=(($339)|0)==0;
      if ($340) { __label__ = 57; break; } else { __label__ = 66; break; }
    case 57: 
      var $342=$i;
      var $343=HEAP32[(($marray)>>2)];
      var $344=(($343+($342)*(12))|0);
      var $345=(($344)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=(($346+6)|0);
      var $348=HEAPU8[($347)];
      var $349=(($348)&255);
      var $350=(($349)|0)==3;
      if ($350) { __label__ = 58; break; } else { __label__ = 66; break; }
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $353=$i;
      var $354=((($353)+(1))|0);
      $i=$354;
      var $355=HEAPU32[(($marraycount)>>2)];
      var $356=(($354)>>>0) < (($355)>>>0);
      if ($356) { __label__ = 60; break; } else { __label__ = 63; break; }
    case 60: 
      var $358=$i;
      var $359=HEAP32[(($marray)>>2)];
      var $360=(($359+($358)*(12))|0);
      var $361=(($360)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=(($362)|0);
      var $364=HEAPU16[(($363)>>1)];
      var $365=(($364)&65535);
      var $366=(($365)|0)==0;
      if ($366) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      __label__ = 63; break;
    case 62: 
      __label__ = 59; break;
    case 63: 
      var $370=$i;
      var $371=HEAP32[(($marraycount)>>2)];
      var $372=(($370)|0)!=(($371)|0);
      if ($372) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $374=$i;
      var $375=HEAP32[(($marray)>>2)];
      var $376=(($375+($374)*(12))|0);
      var $377=(($376)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=(($378+20)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=$2;
      var $382=(($381+40)|0);
      HEAP32[(($382)>>2)]=$380;
      var $383=$2;
      _file_magwarn($383, ((STRING_TABLE.__str28)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 65; break;
    case 65: 
      __label__ = 68; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $387=$i;
      var $388=((($387)+(1))|0);
      $i=$388;
      __label__ = 55; break;
    case 68: 
      $i=0;
      __label__ = 69; break;
    case 69: 
      var $391=$i;
      var $392=HEAPU32[(($marraycount)>>2)];
      var $393=(($391)>>>0) < (($392)>>>0);
      if ($393) { __label__ = 70; break; } else { __label__ = 72; break; }
    case 70: 
      var $395=$i;
      var $396=HEAP32[(($marray)>>2)];
      var $397=(($396+($395)*(12))|0);
      var $398=(($397+4)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=$mentrycount;
      var $401=((($400)+($399))|0);
      $mentrycount=$401;
      __label__ = 71; break;
    case 71: 
      var $403=$i;
      var $404=((($403)+(1))|0);
      $i=$404;
      __label__ = 69; break;
    case 72: 
      var $406=$mentrycount;
      var $407=((($406)*(232))|0);
      $slen=$407;
      var $408=$slen;
      var $409=_malloc($408);
      var $410=$409;
      var $411=$3;
      HEAP32[(($411)>>2)]=$410;
      var $412=(($410)|0)==0;
      if ($412) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $414=$2;
      var $415=$slen;
      _file_oomem($414, $415);
      var $416=HEAP32[(($errs)>>2)];
      var $417=((($416)+(1))|0);
      HEAP32[(($errs)>>2)]=$417;
      __label__ = 79; break;
    case 74: 
      $mentrycount=0;
      $i=0;
      __label__ = 75; break;
    case 75: 
      var $420=$i;
      var $421=HEAPU32[(($marraycount)>>2)];
      var $422=(($420)>>>0) < (($421)>>>0);
      if ($422) { __label__ = 76; break; } else { __label__ = 78; break; }
    case 76: 
      var $424=$3;
      var $425=HEAP32[(($424)>>2)];
      var $426=$mentrycount;
      var $427=(($425+($426)*(232))|0);
      var $428=$427;
      var $429=$i;
      var $430=HEAP32[(($marray)>>2)];
      var $431=(($430+($429)*(12))|0);
      var $432=(($431)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=$433;
      var $435=$i;
      var $436=HEAP32[(($marray)>>2)];
      var $437=(($436+($435)*(12))|0);
      var $438=(($437+4)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=((($439)*(232))|0);
      assert($440 % 1 === 0, 'memcpy given ' + $440 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($428, $434, $440, 4);
      var $441=$i;
      var $442=HEAP32[(($marray)>>2)];
      var $443=(($442+($441)*(12))|0);
      var $444=(($443+4)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=$mentrycount;
      var $447=((($446)+($445))|0);
      $mentrycount=$447;
      __label__ = 77; break;
    case 77: 
      var $449=$i;
      var $450=((($449)+(1))|0);
      $i=$450;
      __label__ = 75; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      $i=0;
      __label__ = 80; break;
    case 80: 
      var $454=$i;
      var $455=HEAPU32[(($marraycount)>>2)];
      var $456=(($454)>>>0) < (($455)>>>0);
      if ($456) { __label__ = 81; break; } else { __label__ = 83; break; }
    case 81: 
      var $458=$i;
      var $459=HEAP32[(($marray)>>2)];
      var $460=(($459+($458)*(12))|0);
      var $461=(($460)|0);
      var $462=HEAP32[(($461)>>2)];
      var $463=$462;
      _free($463);
      __label__ = 82; break;
    case 82: 
      var $465=$i;
      var $466=((($465)+(1))|0);
      $i=$466;
      __label__ = 80; break;
    case 83: 
      var $468=HEAP32[(($marray)>>2)];
      var $469=$468;
      _free($469);
      var $470=HEAP32[(($errs)>>2)];
      var $471=(($470)|0)!=0;
      if ($471) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $473=$3;
      HEAP32[(($473)>>2)]=0;
      var $474=$4;
      HEAP32[(($474)>>2)]=0;
      var $475=HEAP32[(($errs)>>2)];
      $1=$475;
      __label__ = 86; break;
    case 85: 
      var $477=$mentrycount;
      var $478=$4;
      HEAP32[(($478)>>2)]=$477;
      $1=0;
      __label__ = 86; break;
    case 86: 
      var $480=$1;
      STACKTOP = __stackBase__;
      return $480;
    default: assert(0, "bad label: " + __label__);
  }
}
_apprentice_load["X"]=1;

function _apprentice_compile($ms, $magicp, $nmagicp, $fn) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $fd;
      var $dbname;
      var $rv;
      $1=$ms;
      $2=$magicp;
      $3=$nmagicp;
      $4=$fn;
      $fd=-1;
      $rv=-1;
      var $5=$1;
      var $6=$4;
      var $7=_mkdbname($5, $6, 1);
      $dbname=$7;
      var $8=$dbname;
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 15; break;
    case 4: 
      var $12=$dbname;
      var $13=_open($12, 1537, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=420,tempInt));
      $fd=$13;
      var $14=(($13)|0)==-1;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$1;
      var $17=___errno();
      var $18=HEAP32[(($17)>>2)];
      var $19=$dbname;
      _file_error($16, $18, ((STRING_TABLE.__str18)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
      __label__ = 15; break;
    case 6: 
      var $21=$fd;
      var $22=_write($21, _ar, 8);
      var $23=(($22)|0)!=8;
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $25=$1;
      var $26=___errno();
      var $27=HEAP32[(($26)>>2)];
      var $28=$dbname;
      _file_error($25, $27, ((STRING_TABLE.__str19)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,tempInt));
      __label__ = 15; break;
    case 8: 
      var $30=$fd;
      var $31=_lseek($30, 232, 0);
      var $32=(($31)|0)!=232;
      if ($32) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $34=$1;
      var $35=___errno();
      var $36=HEAP32[(($35)>>2)];
      var $37=$dbname;
      _file_error($34, $36, ((STRING_TABLE.__str20)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$37,tempInt));
      __label__ = 15; break;
    case 10: 
      var $39=$fd;
      var $40=$2;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=$3;
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)*(232))|0);
      var $46=_write($39, $42, $45);
      var $47=$3;
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)*(232))|0);
      var $50=(($46)|0)!=(($49)|0);
      if ($50) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $52=$1;
      var $53=___errno();
      var $54=HEAP32[(($53)>>2)];
      var $55=$dbname;
      _file_error($52, $54, ((STRING_TABLE.__str19)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$55,tempInt));
      __label__ = 15; break;
    case 12: 
      var $57=$fd;
      var $58=(($57)|0)!=-1;
      if ($58) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $60=$fd;
      var $61=_close($60);
      __label__ = 14; break;
    case 14: 
      $rv=0;
      __label__ = 15; break;
    case 15: 
      var $64=$dbname;
      _free($64);
      var $65=$rv;
      STACKTOP = __stackBase__;
      return $65;
    default: assert(0, "bad label: " + __label__);
  }
}
_apprentice_compile["X"]=1;

function _swap4($sv) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP32[(($1)>>2)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+3)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+2)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+1)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=HEAP32[(($rv)>>2)];
  STACKTOP = __stackBase__;
  return $24;
}


function _apprentice_map($ms, $magicp, $nmagicp, $fn) {
  var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $fd;
      var $st=__stackBase__;
      var $ptr;
      var $version;
      var $needsbyteswap;
      var $dbname;
      var $mm;
      $2=$ms;
      $3=$magicp;
      $4=$nmagicp;
      $5=$fn;
      $dbname=0;
      $mm=0;
      var $6=$2;
      var $7=$5;
      var $8=_mkdbname($6, $7, 0);
      $dbname=$8;
      var $9=$dbname;
      var $10=(($9)|0)==0;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 35; break;
    case 4: 
      var $13=$dbname;
      var $14=_open($13, 0, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $fd=$14;
      var $15=(($14)|0)==-1;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 35; break;
    case 6: 
      var $18=$fd;
      var $19=_fstat($18, $st);
      var $20=(($19)|0)==-1;
      if ($20) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $22=$2;
      var $23=___errno();
      var $24=HEAP32[(($23)>>2)];
      var $25=$dbname;
      _file_error($22, $24, ((STRING_TABLE.__str1022)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$25,tempInt));
      __label__ = 29; break;
    case 8: 
      var $27=(($st+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0) < 8;
      if ($29) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $31=$2;
      var $32=$dbname;
      _file_error($31, 0, ((STRING_TABLE.__str1123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,tempInt));
      __label__ = 29; break;
    case 10: 
      var $34=(($st+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_malloc($35);
      $mm=$36;
      var $37=(($36)|0)==0;
      if ($37) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $39=$2;
      var $40=(($st+28)|0);
      var $41=HEAP32[(($40)>>2)];
      _file_oomem($39, $41);
      __label__ = 29; break;
    case 12: 
      var $43=$fd;
      var $44=$mm;
      var $45=(($st+28)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=_read($43, $44, $46);
      var $48=(($st+28)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($47)|0)!=(($49)|0);
      if ($50) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $52=$2;
      _file_badread($52);
      __label__ = 29; break;
    case 14: 
      var $54=$mm;
      var $55=$54;
      var $56=$3;
      HEAP32[(($56)>>2)]=$55;
      var $57=$fd;
      var $58=_close($57);
      $fd=-1;
      var $59=$3;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60;
      var $62=$61;
      $ptr=$62;
      var $63=$ptr;
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|0)!=-249691108;
      if ($65) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $67=$ptr;
      var $68=HEAP32[(($67)>>2)];
      var $69=_swap4($68);
      var $70=(($69)|0)!=-249691108;
      if ($70) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $72=$2;
      var $73=$dbname;
      _file_error($72, 0, ((STRING_TABLE.__str1224)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$73,tempInt));
      __label__ = 29; break;
    case 17: 
      $needsbyteswap=1;
      __label__ = 19; break;
    case 18: 
      $needsbyteswap=0;
      __label__ = 19; break;
    case 19: 
      var $77=$needsbyteswap;
      var $78=(($77)|0)!=0;
      if ($78) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $80=$ptr;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=_swap4($82);
      $version=$83;
      __label__ = 22; break;
    case 21: 
      var $85=$ptr;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      $version=$87;
      __label__ = 22; break;
    case 22: 
      var $89=$version;
      var $90=(($89)|0)!=8;
      if ($90) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $92=$2;
      var $93=$dbname;
      var $94=$version;
      _file_error($92, 0, ((STRING_TABLE.__str13)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str14)|0),HEAP32[(((tempInt)+(4))>>2)]=8,HEAP32[(((tempInt)+(8))>>2)]=$93,HEAP32[(((tempInt)+(12))>>2)]=$94,tempInt));
      __label__ = 29; break;
    case 24: 
      var $96=(($st+28)|0);
      var $97=HEAPU32[(($96)>>2)];
      var $98=Math.floor(((($97)>>>0))/(232));
      var $99=$4;
      HEAP32[(($99)>>2)]=$98;
      var $100=$4;
      var $101=HEAPU32[(($100)>>2)];
      var $102=(($101)>>>0) > 0;
      if ($102) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $104=$4;
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)-(1))|0);
      HEAP32[(($104)>>2)]=$106;
      __label__ = 26; break;
    case 26: 
      var $108=$3;
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+232)|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=$needsbyteswap;
      var $112=(($111)|0)!=0;
      if ($112) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $114=$3;
      var $115=HEAP32[(($114)>>2)];
      var $116=$4;
      var $117=HEAP32[(($116)>>2)];
      _byteswap($115, $117);
      __label__ = 28; break;
    case 28: 
      var $119=$dbname;
      _free($119);
      $1=1;
      __label__ = 36; break;
    case 29: 
      var $121=$fd;
      var $122=(($121)|0)!=-1;
      if ($122) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $124=$fd;
      var $125=_close($124);
      __label__ = 31; break;
    case 31: 
      var $127=$mm;
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $130=$mm;
      _free($130);
      __label__ = 34; break;
    case 33: 
      var $132=$3;
      HEAP32[(($132)>>2)]=0;
      var $133=$4;
      HEAP32[(($133)>>2)]=0;
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $136=$dbname;
      _free($136);
      $1=-1;
      __label__ = 36; break;
    case 36: 
      var $138=$1;
      STACKTOP = __stackBase__;
      return $138;
    default: assert(0, "bad label: " + __label__);
  }
}
_apprentice_map["X"]=1;

function _apprentice_list($mlist, $mode) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $magindex;
      var $ml;
      var $m;
      $1=$mlist;
      $2=$mode;
      $magindex=0;
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $ml=$5;
      __label__ = 3; break;
    case 3: 
      var $7=$ml;
      var $8=$1;
      var $9=(($7)|0)!=(($8)|0);
      if ($9) { __label__ = 4; break; } else { __label__ = 24; break; }
    case 4: 
      $magindex=0;
      __label__ = 5; break;
    case 5: 
      var $12=$magindex;
      var $13=$ml;
      var $14=(($13+4)|0);
      var $15=HEAPU32[(($14)>>2)];
      var $16=(($12)>>>0) < (($15)>>>0);
      if ($16) { __label__ = 6; break; } else { __label__ = 22; break; }
    case 6: 
      var $18=$magindex;
      var $19=$ml;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+($18)*(232))|0);
      $m=$22;
      var $23=$m;
      var $24=(($23+2)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=$2;
      var $28=$26 & $27;
      var $29=$2;
      var $30=(($28)|0)!=(($29)|0);
      if ($30) { __label__ = 7; break; } else { __label__ = 13; break; }
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $33=$magindex;
      var $34=((($33)+(1))|0);
      var $35=$ml;
      var $36=(($35+4)|0);
      var $37=HEAPU32[(($36)>>2)];
      var $38=(($34)>>>0) < (($37)>>>0);
      if ($38) { __label__ = 9; break; } else { var $51 = 0;__label__ = 10; break; }
    case 9: 
      var $40=$magindex;
      var $41=((($40)+(1))|0);
      var $42=$ml;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+($41)*(232))|0);
      var $46=(($45)|0);
      var $47=HEAPU16[(($46)>>1)];
      var $48=(($47)&65535);
      var $49=(($48)|0)!=0;
      var $51 = $49;__label__ = 10; break;
    case 10: 
      var $51;
      if ($51) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $53=$magindex;
      var $54=((($53)+(1))|0);
      $magindex=$54;
      __label__ = 8; break;
    case 12: 
      __label__ = 21; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $58=$magindex;
      var $59=((($58)+(1))|0);
      var $60=$ml;
      var $61=(($60+4)|0);
      var $62=HEAPU32[(($61)>>2)];
      var $63=(($59)>>>0) < (($62)>>>0);
      if ($63) { __label__ = 15; break; } else { var $98 = 0;__label__ = 18; break; }
    case 15: 
      var $65=$magindex;
      var $66=((($65)+(1))|0);
      var $67=$ml;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($66)*(232))|0);
      var $71=(($70)|0);
      var $72=HEAPU16[(($71)>>1)];
      var $73=(($72)&65535);
      var $74=(($73)|0)!=0;
      if ($74) { __label__ = 16; break; } else { var $98 = 0;__label__ = 18; break; }
    case 16: 
      var $76=$magindex;
      var $77=$ml;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+($76)*(232))|0);
      var $81=(($80+96)|0);
      var $82=(($81)|0);
      var $83=HEAP8[($82)];
      var $84=(($83 << 24) >> 24);
      var $85=(($84)|0)==0;
      if ($85) { __label__ = 17; break; } else { var $98 = 0;__label__ = 18; break; }
    case 17: 
      var $87=$magindex;
      var $88=$ml;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+($87)*(232))|0);
      var $92=(($91+160)|0);
      var $93=(($92)|0);
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=(($95)|0)==0;
      var $98 = $96;__label__ = 18; break;
    case 18: 
      var $98;
      if ($98) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $100=$magindex;
      var $101=((($100)+(1))|0);
      $magindex=$101;
      __label__ = 14; break;
    case 20: 
      var $103=$m;
      var $104=_apprentice_magic_strength($103);
      var $105=$magindex;
      var $106=$ml;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+($105)*(232))|0);
      var $110=(($109+96)|0);
      var $111=(($110)|0);
      var $112=$magindex;
      var $113=$ml;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+($112)*(232))|0);
      var $117=(($116+160)|0);
      var $118=(($117)|0);
      var $119=_printf(((STRING_TABLE.__str719)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$104,HEAP32[(((tempInt)+(4))>>2)]=$111,HEAP32[(((tempInt)+(8))>>2)]=$118,tempInt));
      __label__ = 21; break;
    case 21: 
      var $121=$magindex;
      var $122=((($121)+(1))|0);
      $magindex=$122;
      __label__ = 5; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $125=$ml;
      var $126=(($125+12)|0);
      var $127=HEAP32[(($126)>>2)];
      $ml=$127;
      __label__ = 3; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_apprentice_list["X"]=1;

function _mkdbname($ms, $fn, $strip) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $q;
      var $buf=__stackBase__;
      $2=$ms;
      $3=$fn;
      $4=$strip;
      var $5=$4;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $8=$3;
      var $9=_strrchr($8, 47);
      $p=$9;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$p;
      var $13=(($12+1)|0);
      $p=$13;
      $3=$13;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $16=$3;
      $q=$16;
      __label__ = 7; break;
    case 7: 
      var $18=$q;
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24)!=0;
      if ($20) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $23=$q;
      var $24=(($23+1)|0);
      $q=$24;
      __label__ = 7; break;
    case 10: 
      $p=((STRING_TABLE._ext+4)|0);
      __label__ = 11; break;
    case 11: 
      var $27=$p;
      var $28=(($27)>>>0) >= (((((STRING_TABLE._ext)|0)))>>>0);
      if ($28) { __label__ = 12; break; } else { var $34 = 0;__label__ = 13; break; }
    case 12: 
      var $30=$q;
      var $31=$3;
      var $32=(($30)>>>0) >= (($31)>>>0);
      var $34 = $32;__label__ = 13; break;
    case 13: 
      var $34;
      if ($34) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $36=$p;
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=$q;
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($38)|0)!=(($41)|0);
      if ($42) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 18; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $46=$p;
      var $47=((($46)-(1))|0);
      $p=$47;
      var $48=$q;
      var $49=((($48)-(1))|0);
      $q=$49;
      __label__ = 11; break;
    case 18: 
      var $51=$p;
      var $52=(($51)>>>0) >= (((((STRING_TABLE._ext)|0)))>>>0);
      if ($52) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $55=$q;
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24)!=0;
      if ($57) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $59=$q;
      var $60=(($59+1)|0);
      $q=$60;
      __label__ = 20; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $63=$q;
      var $64=(($63+1)|0);
      $q=$64;
      var $65=$2;
      var $66=(($65+28)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 1040;
      var $69=(($68)|0)!=0;
      if ($69) { __label__ = 24; break; } else { __label__ = 27; break; }
    case 24: 
      var $71=$q;
      var $72=$3;
      var $73=$71;
      var $74=$72;
      var $75=((($73)-($74))|0);
      var $76=$3;
      var $77=_asprintf($buf, ((STRING_TABLE.__str15)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$75,HEAP32[(((tempInt)+(4))>>2)]=$76,HEAP32[(((tempInt)+(8))>>2)]=((STRING_TABLE._ext)|0),tempInt));
      var $78=HEAP32[(($buf)>>2)];
      var $79=_access($78, 4);
      var $80=(($79)|0)!=-1;
      if ($80) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $82=$2;
      var $83=(($82+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 & 16;
      HEAP32[(($83)>>2)]=$85;
      var $86=HEAP32[(($buf)>>2)];
      $1=$86;
      __label__ = 30; break;
    case 26: 
      var $88=HEAP32[(($buf)>>2)];
      _free($88);
      __label__ = 27; break;
    case 27: 
      var $90=$q;
      var $91=$3;
      var $92=$90;
      var $93=$91;
      var $94=((($92)-($93))|0);
      var $95=$3;
      var $96=_asprintf($buf, ((STRING_TABLE.__str16)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$94,HEAP32[(((tempInt)+(4))>>2)]=$95,HEAP32[(((tempInt)+(8))>>2)]=((STRING_TABLE._ext)|0),tempInt));
      var $97=$p;
      var $98=_strstr($97, ((STRING_TABLE.__str17)|0));
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $101=$2;
      var $102=(($101+28)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 & 16;
      HEAP32[(($102)>>2)]=$104;
      __label__ = 29; break;
    case 29: 
      var $106=HEAP32[(($buf)>>2)];
      $1=$106;
      __label__ = 30; break;
    case 30: 
      var $108=$1;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + __label__);
  }
}
_mkdbname["X"]=1;

function _byteswap($magic, $nmagic) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$magic;
      $2=$nmagic;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $4=$i;
      var $5=$2;
      var $6=(($4)>>>0) < (($5)>>>0);
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $8=$i;
      var $9=$1;
      var $10=(($9+($8)*(232))|0);
      _bs1($10);
      __label__ = 5; break;
    case 5: 
      var $12=$i;
      var $13=((($12)+(1))|0);
      $i=$13;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _apprentice_magic_strength($m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $val;
      $2=$m;
      $val=20;
      var $3=$2;
      var $4=(($3+6)|0);
      var $5=HEAPU8[($4)];
      var $6=(($5)&255);
      if ((($6)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($6)|0) == 2 || (($6)|0) == 10 || (($6)|0) == 7) {
        __label__ = 7; break;
      }
      else if ((($6)|0) == 4 || (($6)|0) == 11 || (($6)|0) == 8 || (($6)|0) == 23) {
        __label__ = 8; break;
      }
      else if ((($6)|0) == 13 || (($6)|0) == 5) {
        __label__ = 9; break;
      }
      else if ((($6)|0) == 18 || (($6)|0) == 19) {
        __label__ = 10; break;
      }
      else if ((($6)|0) == 20 || (($6)|0) == 17) {
        __label__ = 11; break;
      }
      else if ((($6)|0) == 6 || (($6)|0) == 12 || (($6)|0) == 9 || (($6)|0) == 21 || (($6)|0) == 14 || (($6)|0) == 16 || (($6)|0) == 15 || (($6)|0) == 22 || (($6)|0) == 33 || (($6)|0) == 34 || (($6)|0) == 35) {
        __label__ = 15; break;
      }
      else if ((($6)|0) == 24 || (($6)|0) == 26 || (($6)|0) == 25 || (($6)|0) == 27 || (($6)|0) == 28 || (($6)|0) == 29 || (($6)|0) == 30 || (($6)|0) == 31 || (($6)|0) == 32 || (($6)|0) == 36 || (($6)|0) == 37 || (($6)|0) == 38) {
        __label__ = 16; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 3: 
      var $8=$2;
      var $9=(($8+11)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      _abort();
      throw "Reached an unreachable!"
    case 5: 
      $1=0;
      __label__ = 36; break;
    case 6: 
      var $16=$val;
      var $17=((($16)+(10))|0);
      $val=$17;
      __label__ = 18; break;
    case 7: 
      var $19=$val;
      var $20=((($19)+(20))|0);
      $val=$20;
      __label__ = 18; break;
    case 8: 
      var $22=$val;
      var $23=((($22)+(40))|0);
      $val=$23;
      __label__ = 18; break;
    case 9: 
      var $25=$2;
      var $26=(($25+5)|0);
      var $27=HEAPU8[($26)];
      var $28=(($27)&255);
      var $29=((($28)*(10))|0);
      var $30=$val;
      var $31=((($30)+($29))|0);
      $val=$31;
      __label__ = 18; break;
    case 10: 
      var $33=$2;
      var $34=(($33+5)|0);
      var $35=HEAPU8[($34)];
      var $36=(($35)&255);
      var $37=((($36)*(10))|0);
      var $38=((((($37)|0))/(2))&-1);
      var $39=$val;
      var $40=((($39)+($38))|0);
      $val=$40;
      __label__ = 18; break;
    case 11: 
      var $42=$2;
      var $43=(($42+5)|0);
      var $44=HEAPU8[($43)];
      var $45=(($44)&255);
      var $46=$2;
      var $47=(($46+5)|0);
      var $48=HEAPU8[($47)];
      var $49=(($48)&255);
      var $50=(((10)/((($49)|0)))&-1);
      var $51=(($50)|0) > 1;
      if ($51) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $53=$2;
      var $54=(($53+5)|0);
      var $55=HEAPU8[($54)];
      var $56=(($55)&255);
      var $57=(((10)/((($56)|0)))&-1);
      var $60 = $57;__label__ = 14; break;
    case 13: 
      var $60 = 1;__label__ = 14; break;
    case 14: 
      var $60;
      var $61=((($45)*($60))|0);
      var $62=$val;
      var $63=((($62)+($61))|0);
      $val=$63;
      __label__ = 18; break;
    case 15: 
      var $65=$val;
      var $66=((($65)+(40))|0);
      $val=$66;
      __label__ = 18; break;
    case 16: 
      var $68=$val;
      var $69=((($68)+(80))|0);
      $val=$69;
      __label__ = 18; break;
    case 17: 
      $val=0;
      var $71=HEAP32[((_stderr)>>2)];
      var $72=$2;
      var $73=(($72+6)|0);
      var $74=HEAPU8[($73)];
      var $75=(($74)&255);
      var $76=_fprintf($71, ((STRING_TABLE.__str820)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$75,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 18: 
      var $78=$2;
      var $79=(($78+4)|0);
      var $80=HEAPU8[($79)];
      var $81=(($80)&255);
      if ((($81)|0) == 120 || (($81)|0) == 33) {
        __label__ = 19; break;
      }
      else if ((($81)|0) == 61) {
        __label__ = 20; break;
      }
      else if ((($81)|0) == 62 || (($81)|0) == 60) {
        __label__ = 21; break;
      }
      else if ((($81)|0) == 94 || (($81)|0) == 38) {
        __label__ = 22; break;
      }
      else {
      __label__ = 23; break;
      }
      
    case 19: 
      $val=0;
      __label__ = 24; break;
    case 20: 
      var $84=$val;
      var $85=((($84)+(10))|0);
      $val=$85;
      __label__ = 24; break;
    case 21: 
      var $87=$val;
      var $88=((($87)-(20))|0);
      $val=$88;
      __label__ = 24; break;
    case 22: 
      var $90=$val;
      var $91=((($90)-(10))|0);
      $val=$91;
      __label__ = 24; break;
    case 23: 
      var $93=HEAP32[((_stderr)>>2)];
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=HEAPU8[($95)];
      var $97=(($96)&255);
      var $98=_fprintf($93, ((STRING_TABLE.__str921)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$97,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      var $100=$val;
      var $101=(($100)|0)==0;
      if ($101) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      $val=1;
      __label__ = 26; break;
    case 26: 
      var $104=$2;
      var $105=(($104+11)|0);
      var $106=HEAPU8[($105)];
      var $107=(($106)&255);
      if ((($107)|0) == 0) {
        __label__ = 27; break;
      }
      else if ((($107)|0) == 43) {
        __label__ = 28; break;
      }
      else if ((($107)|0) == 45) {
        __label__ = 29; break;
      }
      else if ((($107)|0) == 42) {
        __label__ = 30; break;
      }
      else if ((($107)|0) == 47) {
        __label__ = 31; break;
      }
      else {
      __label__ = 32; break;
      }
      
    case 27: 
      __label__ = 33; break;
    case 28: 
      var $110=$2;
      var $111=(($110+3)|0);
      var $112=HEAPU8[($111)];
      var $113=(($112)&255);
      var $114=$val;
      var $115=((($114)+($113))|0);
      $val=$115;
      __label__ = 33; break;
    case 29: 
      var $117=$2;
      var $118=(($117+3)|0);
      var $119=HEAPU8[($118)];
      var $120=(($119)&255);
      var $121=$val;
      var $122=((($121)-($120))|0);
      $val=$122;
      __label__ = 33; break;
    case 30: 
      var $124=$2;
      var $125=(($124+3)|0);
      var $126=HEAPU8[($125)];
      var $127=(($126)&255);
      var $128=$val;
      var $129=((($128)*($127))|0);
      $val=$129;
      __label__ = 33; break;
    case 31: 
      var $131=$2;
      var $132=(($131+3)|0);
      var $133=HEAPU8[($132)];
      var $134=(($133)&255);
      var $135=$val;
      var $136=Math.floor(((($135)>>>0))/((($134)>>>0)));
      $val=$136;
      __label__ = 33; break;
    case 32: 
      _abort();
      throw "Reached an unreachable!"
    case 33: 
      var $139=$2;
      var $140=(($139+96)|0);
      var $141=(($140)|0);
      var $142=HEAP8[($141)];
      var $143=(($142 << 24) >> 24);
      var $144=(($143)|0)==0;
      if ($144) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $146=$val;
      var $147=((($146)+(1))|0);
      $val=$147;
      __label__ = 35; break;
    case 35: 
      var $149=$val;
      $1=$149;
      __label__ = 36; break;
    case 36: 
      var $151=$1;
      STACKTOP = __stackBase__;
      return $151;
    default: assert(0, "bad label: " + __label__);
  }
}
_apprentice_magic_strength["X"]=1;

function _swap2($sv) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP16[(($1)>>1)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+1)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=HEAP16[(($rv)>>1)];
  STACKTOP = __stackBase__;
  return $14;
}


function _swap8($sv$0, $sv$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(8);
  var $s;
  var $d;
  var $st$4$0=(($1)|0);
  HEAP32[(($st$4$0)>>2)]=$sv$0;
  var $st$4$1=(($1+4)|0);
  HEAP32[(($st$4$1)>>2)]=$sv$1;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+7)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+6)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+5)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19+4)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=$s;
  var $25=(($24+3)|0);
  var $26=HEAP8[($25)];
  var $27=$d;
  var $28=(($27+4)|0);
  HEAP8[($28)]=$26;
  var $29=$s;
  var $30=(($29+2)|0);
  var $31=HEAP8[($30)];
  var $32=$d;
  var $33=(($32+5)|0);
  HEAP8[($33)]=$31;
  var $34=$s;
  var $35=(($34+1)|0);
  var $36=HEAP8[($35)];
  var $37=$d;
  var $38=(($37+6)|0);
  HEAP8[($38)]=$36;
  var $39=$s;
  var $40=(($39)|0);
  var $41=HEAP8[($40)];
  var $42=$d;
  var $43=(($42+7)|0);
  HEAP8[($43)]=$41;
  var $st$60$0=(($rv)|0);
  var $44$0=HEAP32[(($st$60$0)>>2)];
  var $st$60$1=(($rv+4)|0);
  var $44$1=HEAP32[(($st$60$1)>>2)];
  STACKTOP = __stackBase__;
  return [$44$0,$44$1];
}
_swap8["X"]=1;

function _bs1($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$m;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP16[(($3)>>1)];
      var $5=_swap2($4);
      var $6=$1;
      var $7=(($6)|0);
      HEAP16[(($7)>>1)]=$5;
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_swap4($10);
      var $12=$1;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$1;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_swap4($16);
      var $18=$1;
      var $19=(($18+16)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$1;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=_swap4($22);
      var $24=$1;
      var $25=(($24+20)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$1;
      var $27=(($26+6)|0);
      var $28=HEAPU8[($27)];
      var $29=(($28)&255);
      var $30=(($29)|0)==5;
      if ($30) { __label__ = 9; break; } else { __label__ = 3; break; }
    case 3: 
      var $32=$1;
      var $33=(($32+6)|0);
      var $34=HEAPU8[($33)];
      var $35=(($34)&255);
      var $36=(($35)|0)==13;
      if ($36) { __label__ = 9; break; } else { __label__ = 4; break; }
    case 4: 
      var $38=$1;
      var $39=(($38+6)|0);
      var $40=HEAPU8[($39)];
      var $41=(($40)&255);
      var $42=(($41)|0)==18;
      if ($42) { __label__ = 9; break; } else { __label__ = 5; break; }
    case 5: 
      var $44=$1;
      var $45=(($44+6)|0);
      var $46=HEAPU8[($45)];
      var $47=(($46)&255);
      var $48=(($47)|0)==19;
      if ($48) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $50=$1;
      var $51=(($50+6)|0);
      var $52=HEAPU8[($51)];
      var $53=(($52)&255);
      var $54=(($53)|0)==17;
      if ($54) { __label__ = 9; break; } else { __label__ = 7; break; }
    case 7: 
      var $56=$1;
      var $57=(($56+6)|0);
      var $58=HEAPU8[($57)];
      var $59=(($58)&255);
      var $60=(($59)|0)==20;
      if ($60) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+6)|0);
      var $64=HEAPU8[($63)];
      var $65=(($64)&255);
      var $66=(($65)|0)==3;
      if ($66) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $68=$1;
      var $69=(($68+24)|0);
      var $70=$69;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=_swap4($72);
      var $74=$1;
      var $75=(($74+24)|0);
      var $76=$75;
      var $77=(($76)|0);
      HEAP32[(($77)>>2)]=$73;
      var $78=$1;
      var $79=(($78+24)|0);
      var $80=$79;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=_swap4($82);
      var $84=$1;
      var $85=(($84+24)|0);
      var $86=$85;
      var $87=(($86+4)|0);
      HEAP32[(($87)>>2)]=$83;
      __label__ = 11; break;
    case 10: 
      var $89=$1;
      var $90=(($89+32)|0);
      var $91=$90;
      var $st$3$0=(($91)|0);
      var $92$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($91+4)|0);
      var $92$1=HEAP32[(($st$3$1)>>2)];
      var $93=_swap8($92$0, $92$1);
      var $93$0=$93[0];
      var $93$1=$93[1];
      var $94=$1;
      var $95=(($94+32)|0);
      var $96=$95;
      var $st$13$0=(($96)|0);
      HEAP32[(($st$13$0)>>2)]=$93$0;
      var $st$13$1=(($96+4)|0);
      HEAP32[(($st$13$1)>>2)]=$93$1;
      var $97=$1;
      var $98=(($97+24)|0);
      var $99=$98;
      var $st$20$0=(($99)|0);
      var $100$0=HEAP32[(($st$20$0)>>2)];
      var $st$20$1=(($99+4)|0);
      var $100$1=HEAP32[(($st$20$1)>>2)];
      var $101=_swap8($100$0, $100$1);
      var $101$0=$101[0];
      var $101$1=$101[1];
      var $102=$1;
      var $103=(($102+24)|0);
      var $104=$103;
      var $st$30$0=(($104)|0);
      HEAP32[(($st$30$0)>>2)]=$101$0;
      var $st$30$1=(($104+4)|0);
      HEAP32[(($st$30$1)>>2)]=$101$1;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_bs1["X"]=1;

function _cmpstrp($p1, $p2) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$p1;
  $2=$p2;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=_strcmp($5, $8);
  ;
  return $9;
}


function _load_1($ms, $action, $fn, $errs, $marray, $marraycount) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lineno;
      var $llen=__stackBase__;
      var $line=(__stackBase__)+(4);
      var $len;
      var $f;
      var $i;
      $1=$ms;
      $2=$action;
      $3=$fn;
      $4=$errs;
      $5=$marray;
      $6=$marraycount;
      $lineno=0;
      HEAP32[(($llen)>>2)]=0;
      HEAP32[(($line)>>2)]=0;
      var $7=$3;
      var $8=$1;
      var $9=(($8+36)|0);
      HEAP32[(($9)>>2)]=$7;
      var $10=_fopen($7, ((STRING_TABLE.__str29)|0));
      $f=$10;
      var $11=$f;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $14=___errno();
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)!=2;
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$1;
      var $19=___errno();
      var $20=HEAP32[(($19)>>2)];
      var $21=$3;
      _file_error($18, $20, ((STRING_TABLE.__str30)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$21,tempInt));
      __label__ = 5; break;
    case 5: 
      var $23=$4;
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[(($23)>>2)]=$25;
      __label__ = 36; break;
    case 6: 
      var $27=$1;
      var $28=(($27+40)|0);
      HEAP32[(($28)>>2)]=1;
      __label__ = 7; break;
    case 7: 
      var $30=$f;
      var $31=_getline($line, $llen, $30);
      $len=$31;
      var $32=(($31)|0)!=-1;
      if ($32) { __label__ = 8; break; } else { __label__ = 35; break; }
    case 8: 
      var $34=$len;
      var $35=(($34)|0)==0;
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 34; break;
    case 10: 
      var $38=$len;
      var $39=((($38)-(1))|0);
      var $40=HEAP32[(($line)>>2)];
      var $41=(($40+$39)|0);
      var $42=HEAP8[($41)];
      var $43=(($42 << 24) >> 24);
      var $44=(($43)|0)==10;
      if ($44) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $46=$lineno;
      var $47=((($46)+(1))|0);
      $lineno=$47;
      var $48=$len;
      var $49=((($48)-(1))|0);
      var $50=HEAP32[(($line)>>2)];
      var $51=(($50+$49)|0);
      HEAP8[($51)]=0;
      __label__ = 12; break;
    case 12: 
      var $53=HEAP32[(($line)>>2)];
      var $54=(($53)|0);
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      if ((($56)|0) == 0 || (($56)|0) == 35) {
        __label__ = 13; break;
      }
      else if ((($56)|0) == 33) {
        __label__ = 14; break;
      }
      else {
      __label__ = 30; break;
      }
      
    case 13: 
      __label__ = 34; break;
    case 14: 
      var $59=HEAP32[(($line)>>2)];
      var $60=(($59+1)|0);
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=(($62)|0)==58;
      if ($63) { __label__ = 15; break; } else { __label__ = 29; break; }
    case 15: 
      $i=0;
      __label__ = 16; break;
    case 16: 
      var $66=$i;
      var $67=((_bang+($66)*(12))|0);
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|0)!=0;
      if ($70) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $72=$len;
      var $73=((($72)-(2))|0);
      var $74=$i;
      var $75=((_bang+($74)*(12))|0);
      var $76=(($75+4)|0);
      var $77=HEAPU32[(($76)>>2)];
      var $78=(($73)>>>0) > (($77)>>>0);
      if ($78) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $80=$i;
      var $81=((_bang+($80)*(12))|0);
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=HEAP32[(($line)>>2)];
      var $85=(($84+2)|0);
      var $86=$i;
      var $87=((_bang+($86)*(12))|0);
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=_memcmp($83, $85, $89);
      var $91=(($90)|0)==0;
      if ($91) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 22; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $95=$i;
      var $96=((($95)+(1))|0);
      $i=$96;
      __label__ = 16; break;
    case 22: 
      var $98=$i;
      var $99=((_bang+($98)*(12))|0);
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101)|0)==0;
      if ($102) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $104=$1;
      var $105=HEAP32[(($line)>>2)];
      _file_error($104, 0, ((STRING_TABLE.__str31)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$105,tempInt));
      var $106=$4;
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)+(1))|0);
      HEAP32[(($106)>>2)]=$108;
      __label__ = 34; break;
    case 24: 
      var $110=$6;
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111)|0)==0;
      if ($112) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $114=$1;
      var $115=$i;
      var $116=((_bang+($115)*(12))|0);
      var $117=(($116)|0);
      var $118=HEAP32[(($117)>>2)];
      _file_error($114, 0, ((STRING_TABLE.__str32)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$118,tempInt));
      var $119=$4;
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)+(1))|0);
      HEAP32[(($119)>>2)]=$121;
      __label__ = 34; break;
    case 26: 
      var $123=$i;
      var $124=((_bang+($123)*(12))|0);
      var $125=(($124+8)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$1;
      var $128=$6;
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)-(1))|0);
      var $131=$5;
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+($130)*(12))|0);
      var $134=HEAP32[(($line)>>2)];
      var $135=$i;
      var $136=((_bang+($135)*(12))|0);
      var $137=(($136+4)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($134+$138)|0);
      var $140=(($139+2)|0);
      var $141=FUNCTION_TABLE[$126]($127, $133, $140);
      var $142=(($141)|0)!=0;
      if ($142) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $144=$4;
      var $145=HEAP32[(($144)>>2)];
      var $146=((($145)+(1))|0);
      HEAP32[(($144)>>2)]=$146;
      __label__ = 34; break;
    case 28: 
      __label__ = 34; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $150=$1;
      var $151=$5;
      var $152=$6;
      var $153=HEAP32[(($line)>>2)];
      var $154=$lineno;
      var $155=$2;
      var $156=_parse($150, $151, $152, $153, $154, $155);
      var $157=(($156)|0)!=0;
      if ($157) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $159=$4;
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)+(1))|0);
      HEAP32[(($159)>>2)]=$161;
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $165=$1;
      var $166=(($165+40)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=((($167)+(1))|0);
      HEAP32[(($166)>>2)]=$168;
      __label__ = 7; break;
    case 35: 
      var $170=HEAP32[(($line)>>2)];
      _free($170);
      var $171=$f;
      var $172=_fclose($171);
      __label__ = 36; break;
    case 36: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_load_1["X"]=1;

function _set_test_type($mstart, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$mstart;
      $2=$m;
      var $3=$2;
      var $4=(($3+6)|0);
      var $5=HEAPU8[($4)];
      var $6=(($5)&255);
      if ((($6)|0) == 1 || (($6)|0) == 2 || (($6)|0) == 4 || (($6)|0) == 6 || (($6)|0) == 7 || (($6)|0) == 8 || (($6)|0) == 9 || (($6)|0) == 10 || (($6)|0) == 11 || (($6)|0) == 12 || (($6)|0) == 14 || (($6)|0) == 15 || (($6)|0) == 16 || (($6)|0) == 21 || (($6)|0) == 22 || (($6)|0) == 23 || (($6)|0) == 24 || (($6)|0) == 25 || (($6)|0) == 26 || (($6)|0) == 27 || (($6)|0) == 28 || (($6)|0) == 29 || (($6)|0) == 30 || (($6)|0) == 31 || (($6)|0) == 32 || (($6)|0) == 33 || (($6)|0) == 34 || (($6)|0) == 35 || (($6)|0) == 36 || (($6)|0) == 37 || (($6)|0) == 38) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 5 || (($6)|0) == 13 || (($6)|0) == 18 || (($6)|0) == 19) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 17 || (($6)|0) == 20) {
        __label__ = 8; break;
      }
      else if ((($6)|0) == 3) {
        __label__ = 18; break;
      }
      else if ((($6)|0) == 0) {
        __label__ = 19; break;
      }
      else {
      __label__ = 20; break;
      }
      
    case 3: 
      var $8=$1;
      var $9=(($8+2)|0);
      var $10=HEAPU8[($9)];
      var $11=(($10)&255);
      var $12=$11 | 32;
      var $13=(($12) & 255);
      HEAP8[($9)]=$13;
      __label__ = 21; break;
    case 4: 
      var $15=$1;
      var $16=(($15+24)|0);
      var $17=$16;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 & 32;
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$1;
      var $24=(($23+2)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=$26 | 64;
      var $28=(($27) & 255);
      HEAP8[($24)]=$28;
      __label__ = 7; break;
    case 6: 
      var $30=$1;
      var $31=(($30+2)|0);
      var $32=HEAPU8[($31)];
      var $33=(($32)&255);
      var $34=$33 | 32;
      var $35=(($34) & 255);
      HEAP8[($31)]=$35;
      __label__ = 7; break;
    case 7: 
      __label__ = 21; break;
    case 8: 
      var $38=$1;
      var $39=(($38+24)|0);
      var $40=$39;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & 64;
      var $44=(($43)|0)!=0;
      if ($44) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $46=$1;
      var $47=(($46+2)|0);
      var $48=HEAPU8[($47)];
      var $49=(($48)&255);
      var $50=$49 | 32;
      var $51=(($50) & 255);
      HEAP8[($47)]=$51;
      __label__ = 10; break;
    case 10: 
      var $53=$1;
      var $54=(($53+24)|0);
      var $55=$54;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 & 32;
      var $59=(($58)|0)!=0;
      if ($59) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $61=$1;
      var $62=(($61+2)|0);
      var $63=HEAPU8[($62)];
      var $64=(($63)&255);
      var $65=$64 | 64;
      var $66=(($65) & 255);
      HEAP8[($62)]=$66;
      __label__ = 12; break;
    case 12: 
      var $68=$1;
      var $69=(($68+2)|0);
      var $70=HEAPU8[($69)];
      var $71=(($70)&255);
      var $72=$71 & 96;
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 21; break;
    case 14: 
      var $76=$2;
      var $77=(($76+32)|0);
      var $78=$77;
      var $79=(($78)|0);
      var $80=$2;
      var $81=(($80+5)|0);
      var $82=HEAPU8[($81)];
      var $83=(($82)&255);
      var $84=_file_looks_utf8($79, $83, 0, 0);
      var $85=(($84)|0) <= 0;
      if ($85) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $87=$1;
      var $88=(($87+2)|0);
      var $89=HEAPU8[($88)];
      var $90=(($89)&255);
      var $91=$90 | 32;
      var $92=(($91) & 255);
      HEAP8[($88)]=$92;
      __label__ = 17; break;
    case 16: 
      var $94=$1;
      var $95=(($94+2)|0);
      var $96=HEAPU8[($95)];
      var $97=(($96)&255);
      var $98=$97 | 64;
      var $99=(($98) & 255);
      HEAP8[($95)]=$99;
      __label__ = 17; break;
    case 17: 
      __label__ = 21; break;
    case 18: 
      __label__ = 21; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_set_test_type["X"]=1;

function _apprentice_sort($a, $b) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ma;
      var $mb;
      var $sa;
      var $sb;
      $2=$a;
      $3=$b;
      var $4=$2;
      var $5=$4;
      $ma=$5;
      var $6=$3;
      var $7=$6;
      $mb=$7;
      var $8=$ma;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_apprentice_magic_strength($10);
      $sa=$11;
      var $12=$mb;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_apprentice_magic_strength($14);
      $sb=$15;
      var $16=$sa;
      var $17=$sb;
      var $18=(($16)|0)==(($17)|0);
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 7; break;
    case 4: 
      var $21=$sa;
      var $22=$sb;
      var $23=(($21)>>>0) > (($22)>>>0);
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=-1;
      __label__ = 7; break;
    case 6: 
      $1=1;
      __label__ = 7; break;
    case 7: 
      var $27=$1;
      ;
      return $27;
    default: assert(0, "bad label: " + __label__);
  }
}


function _parse($ms, $mentryp, $nmentryp, $line, $lineno, $action) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $i;
      var $me;
      var $m;
      var $l=__stackBase__;
      var $t=(__stackBase__)+(4);
      var $op;
      var $cont_level;
      var $nm;
      var $cnt;
      var $mp;
      var $len;
      var $val=(__stackBase__)+(8);
      var $have_range;
      $2=$ms;
      $3=$mentryp;
      $4=$nmentryp;
      $5=$line;
      $6=$lineno;
      $7=$action;
      var $8=$5;
      HEAP32[(($l)>>2)]=$8;
      $cont_level=0;
      __label__ = 3; break;
    case 3: 
      var $10=HEAP32[(($l)>>2)];
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=(($12)|0)==62;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=HEAP32[(($l)>>2)];
      var $16=(($15+1)|0);
      HEAP32[(($l)>>2)]=$16;
      var $17=$cont_level;
      var $18=((($17)+(1))|0);
      $cont_level=$18;
      __label__ = 3; break;
    case 5: 
      var $20=$cont_level;
      var $21=(($20)|0)==0;
      if ($21) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $23=$cont_level;
      var $24=HEAPU32[((_parse_last_cont_level)>>2)];
      var $25=(($23)>>>0) > (($24)>>>0);
      if ($25) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $27=$2;
      var $28=$cont_level;
      var $29=_file_check_mem($27, $28);
      var $30=(($29)|0)==-1;
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=-1;
      __label__ = 226; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $34=$cont_level;
      HEAP32[((_parse_last_cont_level)>>2)]=$34;
      var $35=$cont_level;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 11; break; } else { __label__ = 18; break; }
    case 11: 
      var $38=$4;
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0)==0;
      if ($40) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $42=$2;
      _file_error($42, 0, ((STRING_TABLE.__str33)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      __label__ = 226; break;
    case 13: 
      var $44=$4;
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      var $47=$3;
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($46)*(12))|0);
      $me=$49;
      var $50=$me;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$me;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($52)|0)==(($55)|0);
      if ($56) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $58=$me;
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)+(10))|0);
      $cnt=$61;
      var $62=$me;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      var $66=$cnt;
      var $67=((($66)*(232))|0);
      var $68=_realloc($65, $67);
      var $69=$68;
      $nm=$69;
      var $70=(($69)|0)==0;
      if ($70) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $72=$2;
      var $73=$cnt;
      var $74=((($73)*(232))|0);
      _file_oomem($72, $74);
      $1=-1;
      __label__ = 226; break;
    case 16: 
      var $76=$nm;
      $m=$76;
      var $77=$me;
      var $78=(($77)|0);
      HEAP32[(($78)>>2)]=$76;
      var $79=$cnt;
      var $80=$me;
      var $81=(($80+8)|0);
      HEAP32[(($81)>>2)]=$79;
      __label__ = 17; break;
    case 17: 
      var $83=$me;
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)+(1))|0);
      HEAP32[(($84)>>2)]=$86;
      var $87=$me;
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+($85)*(232))|0);
      $m=$90;
      var $91=$m;
      var $92=$91;
      for (var $$dest = $92>>2, $$stop = $$dest + 58; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $93=$cont_level;
      var $94=(($93) & 65535);
      var $95=$m;
      var $96=(($95)|0);
      HEAP16[(($96)>>1)]=$94;
      __label__ = 28; break;
    case 18: 
      var $98=$4;
      var $99=HEAP32[(($98)>>2)];
      var $100=HEAP32[((_maxmagic)>>2)];
      var $101=(($99)|0)==(($100)|0);
      if ($101) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $103=HEAP32[((_maxmagic)>>2)];
      var $104=((($103)+(200))|0);
      HEAP32[((_maxmagic)>>2)]=$104;
      var $105=$3;
      var $106=HEAP32[(($105)>>2)];
      var $107=$106;
      var $108=HEAP32[((_maxmagic)>>2)];
      var $109=((($108)*(12))|0);
      var $110=_realloc($107, $109);
      var $111=$110;
      $mp=$111;
      var $112=(($111)|0)==0;
      if ($112) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $114=$2;
      var $115=HEAP32[((_maxmagic)>>2)];
      var $116=((($115)*(12))|0);
      _file_oomem($114, $116);
      $1=-1;
      __label__ = 226; break;
    case 21: 
      var $118=$4;
      var $119=HEAP32[(($118)>>2)];
      var $120=$mp;
      var $121=(($120+($119)*(12))|0);
      var $122=$121;
      for (var $$dest = $122>>2, $$stop = $$dest + 600; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $123=$mp;
      var $124=$3;
      HEAP32[(($124)>>2)]=$123;
      __label__ = 22; break;
    case 22: 
      var $126=$4;
      var $127=HEAP32[(($126)>>2)];
      var $128=$3;
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+($127)*(12))|0);
      $me=$130;
      var $131=$me;
      var $132=(($131)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|0)==0;
      if ($134) { __label__ = 23; break; } else { __label__ = 26; break; }
    case 23: 
      $len=2320;
      var $136=$len;
      var $137=_malloc($136);
      var $138=$137;
      $m=$138;
      var $139=(($138)|0)==0;
      if ($139) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $141=$2;
      var $142=$len;
      _file_oomem($141, $142);
      $1=-1;
      __label__ = 226; break;
    case 25: 
      var $144=$m;
      var $145=$me;
      var $146=(($145)|0);
      HEAP32[(($146)>>2)]=$144;
      var $147=$me;
      var $148=(($147+8)|0);
      HEAP32[(($148)>>2)]=10;
      __label__ = 27; break;
    case 26: 
      var $150=$me;
      var $151=(($150)|0);
      var $152=HEAP32[(($151)>>2)];
      $m=$152;
      __label__ = 27; break;
    case 27: 
      var $154=$m;
      var $155=$154;
      for (var $$dest = $155>>2, $$stop = $$dest + 58; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $156=$m;
      var $157=(($156+11)|0);
      HEAP8[($157)]=0;
      var $158=$m;
      var $159=(($158)|0);
      HEAP16[(($159)>>1)]=0;
      var $160=$me;
      var $161=(($160+4)|0);
      HEAP32[(($161)>>2)]=1;
      __label__ = 28; break;
    case 28: 
      var $163=$6;
      var $164=$m;
      var $165=(($164+20)|0);
      HEAP32[(($165)>>2)]=$163;
      var $166=HEAP32[(($l)>>2)];
      var $167=HEAP8[($166)];
      var $168=(($167 << 24) >> 24);
      var $169=(($168)|0)==38;
      if ($169) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $171=HEAP32[(($l)>>2)];
      var $172=(($171+1)|0);
      HEAP32[(($l)>>2)]=$172;
      var $173=$m;
      var $174=(($173+2)|0);
      var $175=HEAPU8[($174)];
      var $176=(($175)&255);
      var $177=$176 | 2;
      var $178=(($177) & 255);
      HEAP8[($174)]=$178;
      __label__ = 30; break;
    case 30: 
      var $180=HEAP32[(($l)>>2)];
      var $181=HEAP8[($180)];
      var $182=(($181 << 24) >> 24);
      var $183=(($182)|0)==40;
      if ($183) { __label__ = 31; break; } else { __label__ = 36; break; }
    case 31: 
      var $185=HEAP32[(($l)>>2)];
      var $186=(($185+1)|0);
      HEAP32[(($l)>>2)]=$186;
      var $187=$m;
      var $188=(($187+2)|0);
      var $189=HEAPU8[($188)];
      var $190=(($189)&255);
      var $191=$190 | 1;
      var $192=(($191) & 255);
      HEAP8[($188)]=$192;
      var $193=$m;
      var $194=(($193+2)|0);
      var $195=HEAPU8[($194)];
      var $196=(($195)&255);
      var $197=$196 & 2;
      var $198=(($197)|0)!=0;
      if ($198) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $200=$m;
      var $201=(($200+2)|0);
      var $202=HEAPU8[($201)];
      var $203=(($202)&255);
      var $204=$203 & -3;
      var $205=$204 | 4;
      var $206=(($205) & 255);
      var $207=$m;
      var $208=(($207+2)|0);
      HEAP8[($208)]=$206;
      __label__ = 33; break;
    case 33: 
      var $210=HEAP32[(($l)>>2)];
      var $211=HEAP8[($210)];
      var $212=(($211 << 24) >> 24);
      var $213=(($212)|0)==38;
      if ($213) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $215=HEAP32[(($l)>>2)];
      var $216=(($215+1)|0);
      HEAP32[(($l)>>2)]=$216;
      var $217=$m;
      var $218=(($217+2)|0);
      var $219=HEAPU8[($218)];
      var $220=(($219)&255);
      var $221=$220 | 2;
      var $222=(($221) & 255);
      HEAP8[($218)]=$222;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $225=$m;
      var $226=(($225)|0);
      var $227=HEAPU16[(($226)>>1)];
      var $228=(($227)&65535);
      var $229=(($228)|0)==0;
      if ($229) { __label__ = 37; break; } else { __label__ = 41; break; }
    case 37: 
      var $231=$m;
      var $232=(($231+2)|0);
      var $233=HEAPU8[($232)];
      var $234=(($233)&255);
      var $235=$234 & 6;
      var $236=(($235)|0)!=0;
      if ($236) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $238=$2;
      var $239=(($238+28)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=$240 & 64;
      var $242=(($241)|0)!=0;
      if ($242) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $244=$2;
      _file_magwarn($244, ((STRING_TABLE.__str34)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $247=HEAP32[(($l)>>2)];
      var $248=_strtol($247, $t, 0);
      var $249=$m;
      var $250=(($249+12)|0);
      HEAP32[(($250)>>2)]=$248;
      var $251=HEAP32[(($l)>>2)];
      var $252=HEAP32[(($t)>>2)];
      var $253=(($251)|0)==(($252)|0);
      if ($253) { __label__ = 42; break; } else { __label__ = 45; break; }
    case 42: 
      var $255=$2;
      var $256=(($255+28)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$257 & 64;
      var $259=(($258)|0)!=0;
      if ($259) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $261=$2;
      var $262=HEAP32[(($l)>>2)];
      _file_magwarn($261, ((STRING_TABLE.__str35)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$262,tempInt));
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $265=HEAP32[(($t)>>2)];
      HEAP32[(($l)>>2)]=$265;
      var $266=$m;
      var $267=(($266+2)|0);
      var $268=HEAPU8[($267)];
      var $269=(($268)&255);
      var $270=$269 & 1;
      var $271=(($270)|0)!=0;
      if ($271) { __label__ = 46; break; } else { __label__ = 82; break; }
    case 46: 
      var $273=$m;
      var $274=(($273+7)|0);
      HEAP8[($274)]=4;
      var $275=$m;
      var $276=(($275+16)|0);
      HEAP32[(($276)>>2)]=0;
      var $277=HEAP32[(($l)>>2)];
      var $278=HEAP8[($277)];
      var $279=(($278 << 24) >> 24);
      var $280=(($279)|0)==46;
      if ($280) { __label__ = 47; break; } else { __label__ = 62; break; }
    case 47: 
      var $282=HEAP32[(($l)>>2)];
      var $283=(($282+1)|0);
      HEAP32[(($l)>>2)]=$283;
      var $284=HEAP32[(($l)>>2)];
      var $285=HEAP8[($284)];
      var $286=(($285 << 24) >> 24);
      if ((($286)|0) == 108) {
        __label__ = 48; break;
      }
      else if ((($286)|0) == 76) {
        __label__ = 49; break;
      }
      else if ((($286)|0) == 109) {
        __label__ = 50; break;
      }
      else if ((($286)|0) == 104 || (($286)|0) == 115) {
        __label__ = 51; break;
      }
      else if ((($286)|0) == 72 || (($286)|0) == 83) {
        __label__ = 52; break;
      }
      else if ((($286)|0) == 99 || (($286)|0) == 98 || (($286)|0) == 67 || (($286)|0) == 66) {
        __label__ = 53; break;
      }
      else if ((($286)|0) == 101 || (($286)|0) == 102 || (($286)|0) == 103) {
        __label__ = 54; break;
      }
      else if ((($286)|0) == 69 || (($286)|0) == 70 || (($286)|0) == 71) {
        __label__ = 55; break;
      }
      else if ((($286)|0) == 105) {
        __label__ = 56; break;
      }
      else if ((($286)|0) == 73) {
        __label__ = 57; break;
      }
      else {
      __label__ = 58; break;
      }
      
    case 48: 
      var $288=$m;
      var $289=(($288+7)|0);
      HEAP8[($289)]=11;
      __label__ = 61; break;
    case 49: 
      var $291=$m;
      var $292=(($291+7)|0);
      HEAP8[($292)]=8;
      __label__ = 61; break;
    case 50: 
      var $294=$m;
      var $295=(($294+7)|0);
      HEAP8[($295)]=23;
      __label__ = 61; break;
    case 51: 
      var $297=$m;
      var $298=(($297+7)|0);
      HEAP8[($298)]=10;
      __label__ = 61; break;
    case 52: 
      var $300=$m;
      var $301=(($300+7)|0);
      HEAP8[($301)]=7;
      __label__ = 61; break;
    case 53: 
      var $303=$m;
      var $304=(($303+7)|0);
      HEAP8[($304)]=1;
      __label__ = 61; break;
    case 54: 
      var $306=$m;
      var $307=(($306+7)|0);
      HEAP8[($307)]=38;
      __label__ = 61; break;
    case 55: 
      var $309=$m;
      var $310=(($309+7)|0);
      HEAP8[($310)]=37;
      __label__ = 61; break;
    case 56: 
      var $312=$m;
      var $313=(($312+7)|0);
      HEAP8[($313)]=40;
      __label__ = 61; break;
    case 57: 
      var $315=$m;
      var $316=(($315+7)|0);
      HEAP8[($316)]=39;
      __label__ = 61; break;
    case 58: 
      var $318=$2;
      var $319=(($318+28)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=$320 & 64;
      var $322=(($321)|0)!=0;
      if ($322) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $324=$2;
      var $325=HEAP32[(($l)>>2)];
      var $326=HEAP8[($325)];
      var $327=(($326 << 24) >> 24);
      _file_magwarn($324, ((STRING_TABLE.__str36)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$327,tempInt));
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $330=HEAP32[(($l)>>2)];
      var $331=(($330+1)|0);
      HEAP32[(($l)>>2)]=$331;
      __label__ = 62; break;
    case 62: 
      var $333=$m;
      var $334=(($333+8)|0);
      HEAP8[($334)]=0;
      var $335=HEAP32[(($l)>>2)];
      var $336=HEAP8[($335)];
      var $337=(($336 << 24) >> 24);
      var $338=(($337)|0)==126;
      if ($338) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $340=$m;
      var $341=(($340+8)|0);
      var $342=HEAPU8[($341)];
      var $343=(($342)&255);
      var $344=$343 | 64;
      var $345=(($344) & 255);
      HEAP8[($341)]=$345;
      var $346=HEAP32[(($l)>>2)];
      var $347=(($346+1)|0);
      HEAP32[(($l)>>2)]=$347;
      __label__ = 64; break;
    case 64: 
      var $349=HEAP32[(($l)>>2)];
      var $350=HEAP8[($349)];
      var $351=_get_op($350);
      $op=$351;
      var $352=(($351)|0)!=-1;
      if ($352) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $354=$op;
      var $355=$m;
      var $356=(($355+8)|0);
      var $357=HEAPU8[($356)];
      var $358=(($357)&255);
      var $359=$358 | $354;
      var $360=(($359) & 255);
      HEAP8[($356)]=$360;
      var $361=HEAP32[(($l)>>2)];
      var $362=(($361+1)|0);
      HEAP32[(($l)>>2)]=$362;
      __label__ = 66; break;
    case 66: 
      var $364=HEAP32[(($l)>>2)];
      var $365=HEAP8[($364)];
      var $366=(($365 << 24) >> 24);
      var $367=(($366)|0)==40;
      if ($367) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $369=$m;
      var $370=(($369+8)|0);
      var $371=HEAPU8[($370)];
      var $372=(($371)&255);
      var $373=$372 | 128;
      var $374=(($373) & 255);
      HEAP8[($370)]=$374;
      var $375=HEAP32[(($l)>>2)];
      var $376=(($375+1)|0);
      HEAP32[(($l)>>2)]=$376;
      __label__ = 68; break;
    case 68: 
      var $378=HEAP32[(($l)>>2)];
      var $379=HEAPU8[($378)];
      var $380=(($379)&255);
      var $381=_isdigit($380);
      var $382=(($381)|0)!=0;
      if ($382) { __label__ = 70; break; } else { __label__ = 69; break; }
    case 69: 
      var $384=HEAP32[(($l)>>2)];
      var $385=HEAP8[($384)];
      var $386=(($385 << 24) >> 24);
      var $387=(($386)|0)==45;
      if ($387) { __label__ = 70; break; } else { __label__ = 75; break; }
    case 70: 
      var $389=HEAP32[(($l)>>2)];
      var $390=_strtol($389, $t, 0);
      var $391=$m;
      var $392=(($391+16)|0);
      HEAP32[(($392)>>2)]=$390;
      var $393=HEAP32[(($l)>>2)];
      var $394=HEAP32[(($t)>>2)];
      var $395=(($393)|0)==(($394)|0);
      if ($395) { __label__ = 71; break; } else { __label__ = 74; break; }
    case 71: 
      var $397=$2;
      var $398=(($397+28)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=$399 & 64;
      var $401=(($400)|0)!=0;
      if ($401) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $403=$2;
      var $404=HEAP32[(($l)>>2)];
      _file_magwarn($403, ((STRING_TABLE.__str37)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$404,tempInt));
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      var $407=HEAP32[(($t)>>2)];
      HEAP32[(($l)>>2)]=$407;
      __label__ = 75; break;
    case 75: 
      var $409=HEAP32[(($l)>>2)];
      var $410=(($409+1)|0);
      HEAP32[(($l)>>2)]=$410;
      var $411=HEAP8[($409)];
      var $412=(($411 << 24) >> 24);
      var $413=(($412)|0)!=41;
      if ($413) { __label__ = 78; break; } else { __label__ = 76; break; }
    case 76: 
      var $415=$m;
      var $416=(($415+8)|0);
      var $417=HEAPU8[($416)];
      var $418=(($417)&255);
      var $419=$418 & 128;
      var $420=(($419)|0)!=0;
      if ($420) { __label__ = 77; break; } else { __label__ = 81; break; }
    case 77: 
      var $422=HEAP32[(($l)>>2)];
      var $423=(($422+1)|0);
      HEAP32[(($l)>>2)]=$423;
      var $424=HEAP8[($422)];
      var $425=(($424 << 24) >> 24);
      var $426=(($425)|0)!=41;
      if ($426) { __label__ = 78; break; } else { __label__ = 81; break; }
    case 78: 
      var $428=$2;
      var $429=(($428+28)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=$430 & 64;
      var $432=(($431)|0)!=0;
      if ($432) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $434=$2;
      _file_magwarn($434, ((STRING_TABLE.__str38)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      var $439=HEAP32[(($l)>>2)];
      var $440=HEAPU8[($439)];
      var $441=(($440)&255);
      var $442=(($441)>>>0) <= 127;
      if ($442) { __label__ = 84; break; } else { var $450 = 0;__label__ = 85; break; }
    case 84: 
      var $444=HEAP32[(($l)>>2)];
      var $445=HEAPU8[($444)];
      var $446=(($445)&255);
      var $447=_isspace($446);
      var $448=(($447)|0)!=0;
      var $450 = $448;__label__ = 85; break;
    case 85: 
      var $450;
      if ($450) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $452=HEAP32[(($l)>>2)];
      var $453=(($452+1)|0);
      HEAP32[(($l)>>2)]=$453;
      __label__ = 83; break;
    case 87: 
      var $455=HEAP32[(($l)>>2)];
      var $456=_get_cond($455, $l);
      var $457=(($456) & 255);
      var $458=$m;
      var $459=(($458+10)|0);
      HEAP8[($459)]=$457;
      var $460=$2;
      var $461=$m;
      var $462=(($461+10)|0);
      var $463=HEAPU8[($462)];
      var $464=(($463)&255);
      var $465=$cont_level;
      var $466=_check_cond($460, $464, $465);
      var $467=(($466)|0)==-1;
      if ($467) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      $1=-1;
      __label__ = 226; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      var $471=HEAP32[(($l)>>2)];
      var $472=HEAPU8[($471)];
      var $473=(($472)&255);
      var $474=(($473)>>>0) <= 127;
      if ($474) { __label__ = 91; break; } else { var $482 = 0;__label__ = 92; break; }
    case 91: 
      var $476=HEAP32[(($l)>>2)];
      var $477=HEAPU8[($476)];
      var $478=(($477)&255);
      var $479=_isspace($478);
      var $480=(($479)|0)!=0;
      var $482 = $480;__label__ = 92; break;
    case 92: 
      var $482;
      if ($482) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $484=HEAP32[(($l)>>2)];
      var $485=(($484+1)|0);
      HEAP32[(($l)>>2)]=$485;
      __label__ = 90; break;
    case 94: 
      var $487=HEAP32[(($l)>>2)];
      var $488=HEAP8[($487)];
      var $489=(($488 << 24) >> 24);
      var $490=(($489)|0)==117;
      if ($490) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      var $492=HEAP32[(($l)>>2)];
      var $493=(($492+1)|0);
      HEAP32[(($l)>>2)]=$493;
      var $494=$m;
      var $495=(($494+2)|0);
      var $496=HEAPU8[($495)];
      var $497=(($496)&255);
      var $498=$497 | 8;
      var $499=(($498) & 255);
      HEAP8[($495)]=$499;
      __label__ = 96; break;
    case 96: 
      var $501=HEAP32[(($l)>>2)];
      var $502=_get_type($501, $l);
      var $503=(($502) & 255);
      var $504=$m;
      var $505=(($504+6)|0);
      HEAP8[($505)]=$503;
      var $506=$m;
      var $507=(($506+6)|0);
      var $508=HEAPU8[($507)];
      var $509=(($508)&255);
      var $510=(($509)|0)==0;
      if ($510) { __label__ = 97; break; } else { __label__ = 100; break; }
    case 97: 
      var $512=$2;
      var $513=(($512+28)|0);
      var $514=HEAP32[(($513)>>2)];
      var $515=$514 & 64;
      var $516=(($515)|0)!=0;
      if ($516) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $518=$2;
      var $519=HEAP32[(($l)>>2)];
      _file_magwarn($518, ((STRING_TABLE.__str39)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$519,tempInt));
      __label__ = 99; break;
    case 99: 
      $1=-1;
      __label__ = 226; break;
    case 100: 
      var $522=$m;
      var $523=(($522+9)|0);
      HEAP8[($523)]=0;
      var $524=HEAP32[(($l)>>2)];
      var $525=HEAP8[($524)];
      var $526=(($525 << 24) >> 24);
      var $527=(($526)|0)==126;
      if ($527) { __label__ = 101; break; } else { __label__ = 113; break; }
    case 101: 
      var $529=$m;
      var $530=(($529+6)|0);
      var $531=HEAPU8[($530)];
      var $532=(($531)&255);
      var $533=(($532)|0)==5;
      if ($533) { __label__ = 109; break; } else { __label__ = 102; break; }
    case 102: 
      var $535=$m;
      var $536=(($535+6)|0);
      var $537=HEAPU8[($536)];
      var $538=(($537)&255);
      var $539=(($538)|0)==13;
      if ($539) { __label__ = 109; break; } else { __label__ = 103; break; }
    case 103: 
      var $541=$m;
      var $542=(($541+6)|0);
      var $543=HEAPU8[($542)];
      var $544=(($543)&255);
      var $545=(($544)|0)==18;
      if ($545) { __label__ = 109; break; } else { __label__ = 104; break; }
    case 104: 
      var $547=$m;
      var $548=(($547+6)|0);
      var $549=HEAPU8[($548)];
      var $550=(($549)&255);
      var $551=(($550)|0)==19;
      if ($551) { __label__ = 109; break; } else { __label__ = 105; break; }
    case 105: 
      var $553=$m;
      var $554=(($553+6)|0);
      var $555=HEAPU8[($554)];
      var $556=(($555)&255);
      var $557=(($556)|0)==17;
      if ($557) { __label__ = 109; break; } else { __label__ = 106; break; }
    case 106: 
      var $559=$m;
      var $560=(($559+6)|0);
      var $561=HEAPU8[($560)];
      var $562=(($561)&255);
      var $563=(($562)|0)==20;
      if ($563) { __label__ = 109; break; } else { __label__ = 107; break; }
    case 107: 
      var $565=$m;
      var $566=(($565+6)|0);
      var $567=HEAPU8[($566)];
      var $568=(($567)&255);
      var $569=(($568)|0)==3;
      if ($569) { __label__ = 109; break; } else { __label__ = 108; break; }
    case 108: 
      var $571=$m;
      var $572=(($571+9)|0);
      var $573=HEAPU8[($572)];
      var $574=(($573)&255);
      var $575=$574 | 64;
      var $576=(($575) & 255);
      HEAP8[($572)]=$576;
      __label__ = 112; break;
    case 109: 
      var $578=$2;
      var $579=(($578+28)|0);
      var $580=HEAP32[(($579)>>2)];
      var $581=$580 & 64;
      var $582=(($581)|0)!=0;
      if ($582) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      var $584=$2;
      _file_magwarn($584, ((STRING_TABLE.__str40)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 111; break;
    case 111: 
      __label__ = 112; break;
    case 112: 
      var $587=HEAP32[(($l)>>2)];
      var $588=(($587+1)|0);
      HEAP32[(($l)>>2)]=$588;
      __label__ = 113; break;
    case 113: 
      var $590=$m;
      var $591=(($590+24)|0);
      var $592=$591;
      var $593=(($592)|0);
      HEAP32[(($593)>>2)]=0;
      var $594=$m;
      var $595=(($594+6)|0);
      var $596=HEAPU8[($595)];
      var $597=(($596)&255);
      var $598=(($597)|0)==13;
      var $599=$598 ? 128 : 0;
      var $600=$m;
      var $601=(($600+24)|0);
      var $602=$601;
      var $603=(($602+4)|0);
      HEAP32[(($603)>>2)]=$599;
      var $604=HEAP32[(($l)>>2)];
      var $605=HEAP8[($604)];
      var $606=_get_op($605);
      $op=$606;
      var $607=(($606)|0)!=-1;
      if ($607) { __label__ = 114; break; } else { __label__ = 173; break; }
    case 114: 
      var $609=$m;
      var $610=(($609+6)|0);
      var $611=HEAPU8[($610)];
      var $612=(($611)&255);
      var $613=(($612)|0)==5;
      if ($613) { __label__ = 122; break; } else { __label__ = 115; break; }
    case 115: 
      var $615=$m;
      var $616=(($615+6)|0);
      var $617=HEAPU8[($616)];
      var $618=(($617)&255);
      var $619=(($618)|0)==13;
      if ($619) { __label__ = 122; break; } else { __label__ = 116; break; }
    case 116: 
      var $621=$m;
      var $622=(($621+6)|0);
      var $623=HEAPU8[($622)];
      var $624=(($623)&255);
      var $625=(($624)|0)==18;
      if ($625) { __label__ = 122; break; } else { __label__ = 117; break; }
    case 117: 
      var $627=$m;
      var $628=(($627+6)|0);
      var $629=HEAPU8[($628)];
      var $630=(($629)&255);
      var $631=(($630)|0)==19;
      if ($631) { __label__ = 122; break; } else { __label__ = 118; break; }
    case 118: 
      var $633=$m;
      var $634=(($633+6)|0);
      var $635=HEAPU8[($634)];
      var $636=(($635)&255);
      var $637=(($636)|0)==17;
      if ($637) { __label__ = 122; break; } else { __label__ = 119; break; }
    case 119: 
      var $639=$m;
      var $640=(($639+6)|0);
      var $641=HEAPU8[($640)];
      var $642=(($641)&255);
      var $643=(($642)|0)==20;
      if ($643) { __label__ = 122; break; } else { __label__ = 120; break; }
    case 120: 
      var $645=$m;
      var $646=(($645+6)|0);
      var $647=HEAPU8[($646)];
      var $648=(($647)&255);
      var $649=(($648)|0)==3;
      if ($649) { __label__ = 122; break; } else { __label__ = 121; break; }
    case 121: 
      var $651=HEAP32[(($l)>>2)];
      var $652=(($651+1)|0);
      HEAP32[(($l)>>2)]=$652;
      var $653=$op;
      var $654=$m;
      var $655=(($654+9)|0);
      var $656=HEAPU8[($655)];
      var $657=(($656)&255);
      var $658=$657 | $653;
      var $659=(($658) & 255);
      HEAP8[($655)]=$659;
      var $660=HEAP32[(($l)>>2)];
      var $661=_strtoull($660, $t, 0);
      var $661$0=$661[0];
      var $661$1=$661[1];
      var $st$15$0=(($val)|0);
      HEAP32[(($st$15$0)>>2)]=$661$0;
      var $st$15$1=(($val+4)|0);
      HEAP32[(($st$15$1)>>2)]=$661$1;
      var $662=HEAP32[(($t)>>2)];
      HEAP32[(($l)>>2)]=$662;
      var $663=$2;
      var $664=$m;
      var $st$23$0=(($val)|0);
      var $665$0=HEAP32[(($st$23$0)>>2)];
      var $st$23$1=(($val+4)|0);
      var $665$1=HEAP32[(($st$23$1)>>2)];
      var $666=_file_signextend($663, $664, $665$0, $665$1);
      var $666$0=$666[0];
      var $666$1=$666[1];
      var $667=$m;
      var $668=(($667+24)|0);
      var $669=$668;
      var $st$33$0=(($669)|0);
      HEAP32[(($st$33$0)>>2)]=$666$0;
      var $st$33$1=(($669+4)|0);
      HEAP32[(($st$33$1)>>2)]=$666$1;
      _eatsize($l);
      __label__ = 172; break;
    case 122: 
      var $671=$op;
      var $672=(($671)|0)==6;
      if ($672) { __label__ = 123; break; } else { __label__ = 168; break; }
    case 123: 
      $have_range=0;
      __label__ = 124; break;
    case 124: 
      var $675=HEAP32[(($l)>>2)];
      var $676=(($675+1)|0);
      HEAP32[(($l)>>2)]=$676;
      var $677=HEAPU8[($676)];
      var $678=(($677)&255);
      var $679=_isspace($678);
      var $680=(($679)|0)!=0;
      var $681=$680 ^ 1;
      if ($681) { __label__ = 125; break; } else { __label__ = 165; break; }
    case 125: 
      var $683=HEAP32[(($l)>>2)];
      var $684=HEAP8[($683)];
      var $685=(($684 << 24) >> 24);
      if ((($685)|0) == 48 || (($685)|0) == 49 || (($685)|0) == 50 || (($685)|0) == 51 || (($685)|0) == 52 || (($685)|0) == 53 || (($685)|0) == 54 || (($685)|0) == 55 || (($685)|0) == 56 || (($685)|0) == 57) {
        __label__ = 126; break;
      }
      else if ((($685)|0) == 87) {
        __label__ = 132; break;
      }
      else if ((($685)|0) == 119) {
        __label__ = 133; break;
      }
      else if ((($685)|0) == 99) {
        __label__ = 134; break;
      }
      else if ((($685)|0) == 67) {
        __label__ = 135; break;
      }
      else if ((($685)|0) == 115) {
        __label__ = 136; break;
      }
      else if ((($685)|0) == 98) {
        __label__ = 137; break;
      }
      else if ((($685)|0) == 116) {
        __label__ = 138; break;
      }
      else if ((($685)|0) == 66) {
        __label__ = 139; break;
      }
      else if ((($685)|0) == 72) {
        __label__ = 142; break;
      }
      else if ((($685)|0) == 104) {
        __label__ = 145; break;
      }
      else if ((($685)|0) == 76) {
        __label__ = 148; break;
      }
      else if ((($685)|0) == 108) {
        __label__ = 151; break;
      }
      else if ((($685)|0) == 74) {
        __label__ = 154; break;
      }
      else {
      __label__ = 157; break;
      }
      
    case 126: 
      var $687=$have_range;
      var $688=(($687)|0)!=0;
      if ($688) { __label__ = 127; break; } else { __label__ = 129; break; }
    case 127: 
      var $690=$2;
      var $691=(($690+28)|0);
      var $692=HEAP32[(($691)>>2)];
      var $693=$692 & 64;
      var $694=(($693)|0)!=0;
      if ($694) { __label__ = 128; break; } else { __label__ = 129; break; }
    case 128: 
      var $696=$2;
      _file_magwarn($696, ((STRING_TABLE.__str41)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 129; break;
    case 129: 
      $have_range=1;
      var $698=HEAP32[(($l)>>2)];
      var $699=_strtol($698, $t, 0);
      var $700=$m;
      var $701=(($700+24)|0);
      var $702=$701;
      var $703=(($702)|0);
      HEAP32[(($703)>>2)]=$699;
      var $704=$m;
      var $705=(($704+24)|0);
      var $706=$705;
      var $707=(($706)|0);
      var $708=HEAP32[(($707)>>2)];
      var $709=(($708)|0)==0;
      if ($709) { __label__ = 130; break; } else { __label__ = 131; break; }
    case 130: 
      var $711=$2;
      _file_magwarn($711, ((STRING_TABLE.__str42)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 131; break;
    case 131: 
      var $713=HEAP32[(($t)>>2)];
      var $714=((($713)-(1))|0);
      HEAP32[(($l)>>2)]=$714;
      __label__ = 161; break;
    case 132: 
      var $716=$m;
      var $717=(($716+24)|0);
      var $718=$717;
      var $719=(($718+4)|0);
      var $720=HEAP32[(($719)>>2)];
      var $721=$720 | 1;
      HEAP32[(($719)>>2)]=$721;
      __label__ = 161; break;
    case 133: 
      var $723=$m;
      var $724=(($723+24)|0);
      var $725=$724;
      var $726=(($725+4)|0);
      var $727=HEAP32[(($726)>>2)];
      var $728=$727 | 2;
      HEAP32[(($726)>>2)]=$728;
      __label__ = 161; break;
    case 134: 
      var $730=$m;
      var $731=(($730+24)|0);
      var $732=$731;
      var $733=(($732+4)|0);
      var $734=HEAP32[(($733)>>2)];
      var $735=$734 | 4;
      HEAP32[(($733)>>2)]=$735;
      __label__ = 161; break;
    case 135: 
      var $737=$m;
      var $738=(($737+24)|0);
      var $739=$738;
      var $740=(($739+4)|0);
      var $741=HEAP32[(($740)>>2)];
      var $742=$741 | 8;
      HEAP32[(($740)>>2)]=$742;
      __label__ = 161; break;
    case 136: 
      var $744=$m;
      var $745=(($744+24)|0);
      var $746=$745;
      var $747=(($746+4)|0);
      var $748=HEAP32[(($747)>>2)];
      var $749=$748 | 16;
      HEAP32[(($747)>>2)]=$749;
      __label__ = 161; break;
    case 137: 
      var $751=$m;
      var $752=(($751+24)|0);
      var $753=$752;
      var $754=(($753+4)|0);
      var $755=HEAP32[(($754)>>2)];
      var $756=$755 | 64;
      HEAP32[(($754)>>2)]=$756;
      __label__ = 161; break;
    case 138: 
      var $758=$m;
      var $759=(($758+24)|0);
      var $760=$759;
      var $761=(($760+4)|0);
      var $762=HEAP32[(($761)>>2)];
      var $763=$762 | 32;
      HEAP32[(($761)>>2)]=$763;
      __label__ = 161; break;
    case 139: 
      var $765=$m;
      var $766=(($765+6)|0);
      var $767=HEAPU8[($766)];
      var $768=(($767)&255);
      var $769=(($768)|0)!=13;
      if ($769) { __label__ = 140; break; } else { __label__ = 141; break; }
    case 140: 
      __label__ = 158; break;
    case 141: 
      var $772=$m;
      var $773=(($772+24)|0);
      var $774=$773;
      var $775=(($774+4)|0);
      var $776=HEAP32[(($775)>>2)];
      var $777=$776 & -3969;
      var $778=$777 | 128;
      var $779=$m;
      var $780=(($779+24)|0);
      var $781=$780;
      var $782=(($781+4)|0);
      HEAP32[(($782)>>2)]=$778;
      __label__ = 161; break;
    case 142: 
      var $784=$m;
      var $785=(($784+6)|0);
      var $786=HEAPU8[($785)];
      var $787=(($786)&255);
      var $788=(($787)|0)!=13;
      if ($788) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: 
      __label__ = 158; break;
    case 144: 
      var $791=$m;
      var $792=(($791+24)|0);
      var $793=$792;
      var $794=(($793+4)|0);
      var $795=HEAP32[(($794)>>2)];
      var $796=$795 & -3969;
      var $797=$796 | 256;
      var $798=$m;
      var $799=(($798+24)|0);
      var $800=$799;
      var $801=(($800+4)|0);
      HEAP32[(($801)>>2)]=$797;
      __label__ = 161; break;
    case 145: 
      var $803=$m;
      var $804=(($803+6)|0);
      var $805=HEAPU8[($804)];
      var $806=(($805)&255);
      var $807=(($806)|0)!=13;
      if ($807) { __label__ = 146; break; } else { __label__ = 147; break; }
    case 146: 
      __label__ = 158; break;
    case 147: 
      var $810=$m;
      var $811=(($810+24)|0);
      var $812=$811;
      var $813=(($812+4)|0);
      var $814=HEAP32[(($813)>>2)];
      var $815=$814 & -3969;
      var $816=$815 | 512;
      var $817=$m;
      var $818=(($817+24)|0);
      var $819=$818;
      var $820=(($819+4)|0);
      HEAP32[(($820)>>2)]=$816;
      __label__ = 161; break;
    case 148: 
      var $822=$m;
      var $823=(($822+6)|0);
      var $824=HEAPU8[($823)];
      var $825=(($824)&255);
      var $826=(($825)|0)!=13;
      if ($826) { __label__ = 149; break; } else { __label__ = 150; break; }
    case 149: 
      __label__ = 158; break;
    case 150: 
      var $829=$m;
      var $830=(($829+24)|0);
      var $831=$830;
      var $832=(($831+4)|0);
      var $833=HEAP32[(($832)>>2)];
      var $834=$833 & -3969;
      var $835=$834 | 1024;
      var $836=$m;
      var $837=(($836+24)|0);
      var $838=$837;
      var $839=(($838+4)|0);
      HEAP32[(($839)>>2)]=$835;
      __label__ = 161; break;
    case 151: 
      var $841=$m;
      var $842=(($841+6)|0);
      var $843=HEAPU8[($842)];
      var $844=(($843)&255);
      var $845=(($844)|0)!=13;
      if ($845) { __label__ = 152; break; } else { __label__ = 153; break; }
    case 152: 
      __label__ = 158; break;
    case 153: 
      var $848=$m;
      var $849=(($848+24)|0);
      var $850=$849;
      var $851=(($850+4)|0);
      var $852=HEAP32[(($851)>>2)];
      var $853=$852 & -3969;
      var $854=$853 | 2048;
      var $855=$m;
      var $856=(($855+24)|0);
      var $857=$856;
      var $858=(($857+4)|0);
      HEAP32[(($858)>>2)]=$854;
      __label__ = 161; break;
    case 154: 
      var $860=$m;
      var $861=(($860+6)|0);
      var $862=HEAPU8[($861)];
      var $863=(($862)&255);
      var $864=(($863)|0)!=13;
      if ($864) { __label__ = 155; break; } else { __label__ = 156; break; }
    case 155: 
      __label__ = 158; break;
    case 156: 
      var $867=$m;
      var $868=(($867+24)|0);
      var $869=$868;
      var $870=(($869+4)|0);
      var $871=HEAP32[(($870)>>2)];
      var $872=$871 | 4096;
      HEAP32[(($870)>>2)]=$872;
      __label__ = 161; break;
    case 157: 
      __label__ = 158; break;
    case 158: 
      var $875=$2;
      var $876=(($875+28)|0);
      var $877=HEAP32[(($876)>>2)];
      var $878=$877 & 64;
      var $879=(($878)|0)!=0;
      if ($879) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: 
      var $881=$2;
      var $882=HEAP32[(($l)>>2)];
      var $883=HEAP8[($882)];
      var $884=(($883 << 24) >> 24);
      _file_magwarn($881, ((STRING_TABLE.__str43)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$884,tempInt));
      __label__ = 160; break;
    case 160: 
      $1=-1;
      __label__ = 226; break;
    case 161: 
      var $887=HEAP32[(($l)>>2)];
      var $888=(($887+1)|0);
      var $889=HEAP8[($888)];
      var $890=(($889 << 24) >> 24);
      var $891=(($890)|0)==47;
      if ($891) { __label__ = 162; break; } else { __label__ = 164; break; }
    case 162: 
      var $893=HEAP32[(($l)>>2)];
      var $894=(($893+2)|0);
      var $895=HEAPU8[($894)];
      var $896=(($895)&255);
      var $897=_isspace($896);
      var $898=(($897)|0)!=0;
      if ($898) { __label__ = 164; break; } else { __label__ = 163; break; }
    case 163: 
      var $900=HEAP32[(($l)>>2)];
      var $901=(($900+1)|0);
      HEAP32[(($l)>>2)]=$901;
      __label__ = 164; break;
    case 164: 
      __label__ = 124; break;
    case 165: 
      var $904=$2;
      var $905=$m;
      var $906=_string_modifier_check($904, $905);
      var $907=(($906)|0)==-1;
      if ($907) { __label__ = 166; break; } else { __label__ = 167; break; }
    case 166: 
      $1=-1;
      __label__ = 226; break;
    case 167: 
      __label__ = 171; break;
    case 168: 
      var $911=$2;
      var $912=(($911+28)|0);
      var $913=HEAP32[(($912)>>2)];
      var $914=$913 & 64;
      var $915=(($914)|0)!=0;
      if ($915) { __label__ = 169; break; } else { __label__ = 170; break; }
    case 169: 
      var $917=$2;
      var $918=HEAP32[(($t)>>2)];
      var $919=HEAP8[($918)];
      var $920=(($919 << 24) >> 24);
      _file_magwarn($917, ((STRING_TABLE.__str44)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$920,tempInt));
      __label__ = 170; break;
    case 170: 
      $1=-1;
      __label__ = 226; break;
    case 171: 
      __label__ = 172; break;
    case 172: 
      __label__ = 173; break;
    case 173: 
      __label__ = 174; break;
    case 174: 
      var $926=HEAP32[(($l)>>2)];
      var $927=HEAPU8[($926)];
      var $928=(($927)&255);
      var $929=(($928)>>>0) <= 127;
      if ($929) { __label__ = 175; break; } else { var $937 = 0;__label__ = 176; break; }
    case 175: 
      var $931=HEAP32[(($l)>>2)];
      var $932=HEAPU8[($931)];
      var $933=(($932)&255);
      var $934=_isspace($933);
      var $935=(($934)|0)!=0;
      var $937 = $935;__label__ = 176; break;
    case 176: 
      var $937;
      if ($937) { __label__ = 177; break; } else { __label__ = 178; break; }
    case 177: 
      var $939=HEAP32[(($l)>>2)];
      var $940=(($939+1)|0);
      HEAP32[(($l)>>2)]=$940;
      __label__ = 174; break;
    case 178: 
      var $942=HEAP32[(($l)>>2)];
      var $943=HEAP8[($942)];
      var $944=(($943 << 24) >> 24);
      if ((($944)|0) == 62 || (($944)|0) == 60) {
        __label__ = 179; break;
      }
      else if ((($944)|0) == 38 || (($944)|0) == 94 || (($944)|0) == 61) {
        __label__ = 184; break;
      }
      else if ((($944)|0) == 33) {
        __label__ = 187; break;
      }
      else {
      __label__ = 188; break;
      }
      
    case 179: 
      var $946=HEAP32[(($l)>>2)];
      var $947=HEAP8[($946)];
      var $948=$m;
      var $949=(($948+4)|0);
      HEAP8[($949)]=$947;
      var $950=HEAP32[(($l)>>2)];
      var $951=(($950+1)|0);
      HEAP32[(($l)>>2)]=$951;
      var $952=HEAP32[(($l)>>2)];
      var $953=HEAP8[($952)];
      var $954=(($953 << 24) >> 24);
      var $955=(($954)|0)==61;
      if ($955) { __label__ = 180; break; } else { __label__ = 183; break; }
    case 180: 
      var $957=$2;
      var $958=(($957+28)|0);
      var $959=HEAP32[(($958)>>2)];
      var $960=$959 & 64;
      var $961=(($960)|0)!=0;
      if ($961) { __label__ = 181; break; } else { __label__ = 182; break; }
    case 181: 
      var $963=$2;
      var $964=$m;
      var $965=(($964+4)|0);
      var $966=HEAPU8[($965)];
      var $967=(($966)&255);
      _file_magwarn($963, ((STRING_TABLE.__str45)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$967,tempInt));
      $1=-1;
      __label__ = 226; break;
    case 182: 
      var $969=HEAP32[(($l)>>2)];
      var $970=(($969+1)|0);
      HEAP32[(($l)>>2)]=$970;
      __label__ = 183; break;
    case 183: 
      __label__ = 194; break;
    case 184: 
      var $973=HEAP32[(($l)>>2)];
      var $974=HEAP8[($973)];
      var $975=$m;
      var $976=(($975+4)|0);
      HEAP8[($976)]=$974;
      var $977=HEAP32[(($l)>>2)];
      var $978=(($977+1)|0);
      HEAP32[(($l)>>2)]=$978;
      var $979=HEAP32[(($l)>>2)];
      var $980=HEAP8[($979)];
      var $981=(($980 << 24) >> 24);
      var $982=(($981)|0)==61;
      if ($982) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $984=HEAP32[(($l)>>2)];
      var $985=(($984+1)|0);
      HEAP32[(($l)>>2)]=$985;
      __label__ = 186; break;
    case 186: 
      __label__ = 194; break;
    case 187: 
      var $988=HEAP32[(($l)>>2)];
      var $989=HEAP8[($988)];
      var $990=$m;
      var $991=(($990+4)|0);
      HEAP8[($991)]=$989;
      var $992=HEAP32[(($l)>>2)];
      var $993=(($992+1)|0);
      HEAP32[(($l)>>2)]=$993;
      __label__ = 194; break;
    case 188: 
      var $995=$m;
      var $996=(($995+4)|0);
      HEAP8[($996)]=61;
      var $997=HEAP32[(($l)>>2)];
      var $998=HEAP8[($997)];
      var $999=(($998 << 24) >> 24);
      var $1000=(($999)|0)==120;
      if ($1000) { __label__ = 189; break; } else { __label__ = 193; break; }
    case 189: 
      var $1002=HEAP32[(($l)>>2)];
      var $1003=(($1002+1)|0);
      var $1004=HEAPU8[($1003)];
      var $1005=(($1004)&255);
      var $1006=(($1005)>>>0) <= 127;
      if ($1006) { __label__ = 190; break; } else { __label__ = 191; break; }
    case 190: 
      var $1008=HEAP32[(($l)>>2)];
      var $1009=(($1008+1)|0);
      var $1010=HEAPU8[($1009)];
      var $1011=(($1010)&255);
      var $1012=_isspace($1011);
      var $1013=(($1012)|0)!=0;
      if ($1013) { __label__ = 192; break; } else { __label__ = 191; break; }
    case 191: 
      var $1015=HEAP32[(($l)>>2)];
      var $1016=(($1015+1)|0);
      var $1017=HEAP8[($1016)];
      var $1018=(($1017 << 24) >> 24)!=0;
      if ($1018) { __label__ = 193; break; } else { __label__ = 192; break; }
    case 192: 
      var $1020=HEAP32[(($l)>>2)];
      var $1021=HEAP8[($1020)];
      var $1022=$m;
      var $1023=(($1022+4)|0);
      HEAP8[($1023)]=$1021;
      var $1024=HEAP32[(($l)>>2)];
      var $1025=(($1024+1)|0);
      HEAP32[(($l)>>2)]=$1025;
      __label__ = 193; break;
    case 193: 
      __label__ = 194; break;
    case 194: 
      var $1028=$m;
      var $1029=(($1028+4)|0);
      var $1030=HEAPU8[($1029)];
      var $1031=(($1030)&255);
      var $1032=(($1031)|0)!=120;
      if ($1032) { __label__ = 195; break; } else { __label__ = 197; break; }
    case 195: 
      var $1034=$2;
      var $1035=$m;
      var $1036=$7;
      var $1037=_getvalue($1034, $1035, $l, $1036);
      var $1038=(($1037)|0)!=0;
      if ($1038) { __label__ = 196; break; } else { __label__ = 197; break; }
    case 196: 
      $1=-1;
      __label__ = 226; break;
    case 197: 
      __label__ = 198; break;
    case 198: 
      var $1042=HEAP32[(($l)>>2)];
      var $1043=HEAPU8[($1042)];
      var $1044=(($1043)&255);
      var $1045=(($1044)>>>0) <= 127;
      if ($1045) { __label__ = 199; break; } else { var $1053 = 0;__label__ = 200; break; }
    case 199: 
      var $1047=HEAP32[(($l)>>2)];
      var $1048=HEAPU8[($1047)];
      var $1049=(($1048)&255);
      var $1050=_isspace($1049);
      var $1051=(($1050)|0)!=0;
      var $1053 = $1051;__label__ = 200; break;
    case 200: 
      var $1053;
      if ($1053) { __label__ = 201; break; } else { __label__ = 202; break; }
    case 201: 
      var $1055=HEAP32[(($l)>>2)];
      var $1056=(($1055+1)|0);
      HEAP32[(($l)>>2)]=$1056;
      __label__ = 198; break;
    case 202: 
      var $1058=HEAP32[(($l)>>2)];
      var $1059=(($1058)|0);
      var $1060=HEAP8[($1059)];
      var $1061=(($1060 << 24) >> 24);
      var $1062=(($1061)|0)==8;
      if ($1062) { __label__ = 203; break; } else { __label__ = 204; break; }
    case 203: 
      var $1064=HEAP32[(($l)>>2)];
      var $1065=(($1064+1)|0);
      HEAP32[(($l)>>2)]=$1065;
      var $1066=$m;
      var $1067=(($1066+2)|0);
      var $1068=HEAPU8[($1067)];
      var $1069=(($1068)&255);
      var $1070=$1069 | 16;
      var $1071=(($1070) & 255);
      HEAP8[($1067)]=$1071;
      __label__ = 208; break;
    case 204: 
      var $1073=HEAP32[(($l)>>2)];
      var $1074=(($1073)|0);
      var $1075=HEAP8[($1074)];
      var $1076=(($1075 << 24) >> 24);
      var $1077=(($1076)|0)==92;
      if ($1077) { __label__ = 205; break; } else { __label__ = 207; break; }
    case 205: 
      var $1079=HEAP32[(($l)>>2)];
      var $1080=(($1079+1)|0);
      var $1081=HEAP8[($1080)];
      var $1082=(($1081 << 24) >> 24);
      var $1083=(($1082)|0)==98;
      if ($1083) { __label__ = 206; break; } else { __label__ = 207; break; }
    case 206: 
      var $1085=HEAP32[(($l)>>2)];
      var $1086=(($1085+1)|0);
      HEAP32[(($l)>>2)]=$1086;
      var $1087=HEAP32[(($l)>>2)];
      var $1088=(($1087+1)|0);
      HEAP32[(($l)>>2)]=$1088;
      var $1089=$m;
      var $1090=(($1089+2)|0);
      var $1091=HEAPU8[($1090)];
      var $1092=(($1091)&255);
      var $1093=$1092 | 16;
      var $1094=(($1093) & 255);
      HEAP8[($1090)]=$1094;
      __label__ = 207; break;
    case 207: 
      __label__ = 208; break;
    case 208: 
      $i=0;
      __label__ = 209; break;
    case 209: 
      var $1098=HEAP32[(($l)>>2)];
      var $1099=(($1098+1)|0);
      HEAP32[(($l)>>2)]=$1099;
      var $1100=HEAP8[($1098)];
      var $1101=$i;
      var $1102=((($1101)+(1))|0);
      $i=$1102;
      var $1103=$m;
      var $1104=(($1103+96)|0);
      var $1105=(($1104+$1101)|0);
      HEAP8[($1105)]=$1100;
      var $1106=(($1100 << 24) >> 24);
      var $1107=(($1106)|0)!=0;
      if ($1107) { __label__ = 210; break; } else { var $1112 = 0;__label__ = 211; break; }
    case 210: 
      var $1109=$i;
      var $1110=(($1109)>>>0) < 64;
      var $1112 = $1110;__label__ = 211; break;
    case 211: 
      var $1112;
      if ($1112) { __label__ = 212; break; } else { __label__ = 213; break; }
    case 212: 
      __label__ = 209; break;
    case 213: 
      var $1115=$i;
      var $1116=(($1115)|0)==64;
      if ($1116) { __label__ = 214; break; } else { __label__ = 217; break; }
    case 214: 
      var $1118=$m;
      var $1119=(($1118+96)|0);
      var $1120=(($1119+63)|0);
      HEAP8[($1120)]=0;
      var $1121=$2;
      var $1122=(($1121+28)|0);
      var $1123=HEAP32[(($1122)>>2)];
      var $1124=$1123 & 64;
      var $1125=(($1124)|0)!=0;
      if ($1125) { __label__ = 215; break; } else { __label__ = 216; break; }
    case 215: 
      var $1127=$2;
      var $1128=$m;
      var $1129=(($1128+96)|0);
      var $1130=(($1129)|0);
      _file_magwarn($1127, ((STRING_TABLE.__str46)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1130,tempInt));
      __label__ = 216; break;
    case 216: 
      __label__ = 217; break;
    case 217: 
      var $1133=$2;
      var $1134=(($1133+28)|0);
      var $1135=HEAP32[(($1134)>>2)];
      var $1136=$1135 & 64;
      var $1137=(($1136)|0)!=0;
      if ($1137) { __label__ = 218; break; } else { __label__ = 221; break; }
    case 218: 
      var $1139=$2;
      var $1140=$m;
      var $1141=_check_format($1139, $1140);
      var $1142=(($1141)|0)==-1;
      if ($1142) { __label__ = 219; break; } else { __label__ = 220; break; }
    case 219: 
      $1=-1;
      __label__ = 226; break;
    case 220: 
      __label__ = 221; break;
    case 221: 
      var $1146=$7;
      var $1147=(($1146)|0)==1;
      if ($1147) { __label__ = 222; break; } else { __label__ = 223; break; }
    case 222: 
      var $1149=$m;
      _file_mdump($1149);
      __label__ = 223; break;
    case 223: 
      var $1151=$m;
      var $1152=(($1151+160)|0);
      var $1153=(($1152)|0);
      HEAP8[($1153)]=0;
      var $1154=$m;
      var $1155=(($1154)|0);
      var $1156=HEAPU16[(($1155)>>1)];
      var $1157=(($1156)&65535);
      var $1158=(($1157)|0)==0;
      if ($1158) { __label__ = 224; break; } else { __label__ = 225; break; }
    case 224: 
      var $1160=$4;
      var $1161=HEAP32[(($1160)>>2)];
      var $1162=((($1161)+(1))|0);
      HEAP32[(($1160)>>2)]=$1162;
      __label__ = 225; break;
    case 225: 
      $1=0;
      __label__ = 226; break;
    case 226: 
      var $1165=$1;
      STACKTOP = __stackBase__;
      return $1165;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse["X"]=1;

function _get_op($c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$c;
      var $3=$2;
      var $4=(($3 << 24) >> 24);
      if ((($4)|0) == 38) {
        __label__ = 3; break;
      }
      else if ((($4)|0) == 124) {
        __label__ = 4; break;
      }
      else if ((($4)|0) == 94) {
        __label__ = 5; break;
      }
      else if ((($4)|0) == 43) {
        __label__ = 6; break;
      }
      else if ((($4)|0) == 45) {
        __label__ = 7; break;
      }
      else if ((($4)|0) == 42) {
        __label__ = 8; break;
      }
      else if ((($4)|0) == 47) {
        __label__ = 9; break;
      }
      else if ((($4)|0) == 37) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      $1=0;
      __label__ = 12; break;
    case 4: 
      $1=1;
      __label__ = 12; break;
    case 5: 
      $1=2;
      __label__ = 12; break;
    case 6: 
      $1=3;
      __label__ = 12; break;
    case 7: 
      $1=4;
      __label__ = 12; break;
    case 8: 
      $1=5;
      __label__ = 12; break;
    case 9: 
      $1=6;
      __label__ = 12; break;
    case 10: 
      $1=7;
      __label__ = 12; break;
    case 11: 
      $1=-1;
      __label__ = 12; break;
    case 12: 
      var $15=$1;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _get_cond($l, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      $1=$l;
      $2=$t;
      $p=((_get_cond_cond_tbl)|0);
      __label__ = 3; break;
    case 3: 
      var $4=$p;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $9=$1;
      var $10=$p;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=$p;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_strncmp($9, $12, $15);
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $19=$p;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+$21)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=_isspace($25);
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $29=$2;
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $32=$1;
      var $33=$p;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($32+$35)|0);
      var $37=$2;
      HEAP32[(($37)>>2)]=$36;
      __label__ = 8; break;
    case 8: 
      __label__ = 11; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $41=$p;
      var $42=(($41+16)|0);
      $p=$42;
      __label__ = 3; break;
    case 11: 
      var $44=$p;
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      ;
      return $46;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_cond["X"]=1;

function _check_cond($ms, $cond, $cont_level) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $last_cond;
      $2=$ms;
      $3=$cond;
      $4=$cont_level;
      var $5=$4;
      var $6=$2;
      var $7=(($6+4)|0);
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+($5<<4))|0);
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      $last_cond=$12;
      var $13=$3;
      if ((($13)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($13)|0) == 2) {
        __label__ = 9; break;
      }
      else if ((($13)|0) == 3) {
        __label__ = 15; break;
      }
      else if ((($13)|0) == 0) {
        __label__ = 21; break;
      }
      else {
      __label__ = 22; break;
      }
      
    case 3: 
      var $15=$last_cond;
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $18=$last_cond;
      var $19=(($18)|0)!=2;
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $21=$2;
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 64;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $27=$2;
      _file_magwarn($27, ((STRING_TABLE.__str65)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 7; break;
    case 7: 
      $1=-1;
      __label__ = 23; break;
    case 8: 
      $last_cond=1;
      __label__ = 22; break;
    case 9: 
      var $31=$last_cond;
      var $32=(($31)|0)!=1;
      if ($32) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $34=$last_cond;
      var $35=(($34)|0)!=2;
      if ($35) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & 64;
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $43=$2;
      _file_magwarn($43, ((STRING_TABLE.__str66)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 13; break;
    case 13: 
      $1=-1;
      __label__ = 23; break;
    case 14: 
      $last_cond=2;
      __label__ = 22; break;
    case 15: 
      var $47=$last_cond;
      var $48=(($47)|0)!=1;
      if ($48) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $50=$last_cond;
      var $51=(($50)|0)!=2;
      if ($51) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $53=$2;
      var $54=(($53+28)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 64;
      var $57=(($56)|0)!=0;
      if ($57) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $59=$2;
      _file_magwarn($59, ((STRING_TABLE.__str67)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 19; break;
    case 19: 
      $1=-1;
      __label__ = 23; break;
    case 20: 
      $last_cond=0;
      __label__ = 22; break;
    case 21: 
      $last_cond=0;
      __label__ = 22; break;
    case 22: 
      var $64=$last_cond;
      var $65=$4;
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($65<<4))|0);
      var $71=(($70+12)|0);
      HEAP32[(($71)>>2)]=$64;
      $1=0;
      __label__ = 23; break;
    case 23: 
      var $73=$1;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_cond["X"]=1;

function _get_type($l, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      $1=$l;
      $2=$t;
      $p=((_type_tbl)|0);
      __label__ = 3; break;
    case 3: 
      var $4=$p;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $9=$1;
      var $10=$p;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=$p;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_strncmp($9, $12, $15);
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $19=$2;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $22=$1;
      var $23=$p;
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22+$25)|0);
      var $27=$2;
      HEAP32[(($27)>>2)]=$26;
      __label__ = 7; break;
    case 7: 
      __label__ = 10; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $31=$p;
      var $32=(($31+28)|0);
      $p=$32;
      __label__ = 3; break;
    case 10: 
      var $34=$p;
      var $35=(($34+20)|0);
      var $36=HEAP32[(($35)>>2)];
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _eatsize($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l;
      $1=$p;
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      $l=$3;
      var $4=$l;
      var $5=HEAPU8[($4)];
      var $6=(($5)&255);
      var $7=_isupper($6);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$l;
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=_tolower($12);
      var $19 = $13;__label__ = 5; break;
    case 4: 
      var $15=$l;
      var $16=HEAP8[($15)];
      var $17=(($16 << 24) >> 24);
      var $19 = $17;__label__ = 5; break;
    case 5: 
      var $19;
      var $20=(($19)|0)==117;
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $22=$l;
      var $23=(($22+1)|0);
      $l=$23;
      __label__ = 7; break;
    case 7: 
      var $25=$l;
      var $26=HEAPU8[($25)];
      var $27=(($26)&255);
      var $28=_isupper($27);
      var $29=(($28)|0)!=0;
      if ($29) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $31=$l;
      var $32=HEAPU8[($31)];
      var $33=(($32)&255);
      var $34=_tolower($33);
      var $40 = $34;__label__ = 10; break;
    case 9: 
      var $36=$l;
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $40 = $38;__label__ = 10; break;
    case 10: 
      var $40;
      if ((($40)|0) == 108 || (($40)|0) == 115 || (($40)|0) == 104 || (($40)|0) == 98 || (($40)|0) == 99) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 11: 
      var $42=$l;
      var $43=(($42+1)|0);
      $l=$43;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $46=$l;
      var $47=$1;
      HEAP32[(($47)>>2)]=$46;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_eatsize["X"]=1;

function _string_modifier_check($ms, $m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$m;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 64;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 24; break;
    case 4: 
      var $11=$3;
      var $12=(($11+6)|0);
      var $13=HEAPU8[($12)];
      var $14=(($13)&255);
      var $15=(($14)|0)!=13;
      if ($15) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $17=$3;
      var $18=(($17+24)|0);
      var $19=$18;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 3968;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $25=$2;
      _file_magwarn($25, ((STRING_TABLE.__str59)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      __label__ = 24; break;
    case 7: 
      var $27=$3;
      var $28=(($27+6)|0);
      var $29=HEAPU8[($28)];
      var $30=(($29)&255);
      if ((($30)|0) == 18 || (($30)|0) == 19) {
        __label__ = 8; break;
      }
      else if ((($30)|0) == 5 || (($30)|0) == 13) {
        __label__ = 11; break;
      }
      else if ((($30)|0) == 20) {
        __label__ = 14; break;
      }
      else if ((($30)|0) == 17) {
        __label__ = 17; break;
      }
      else {
      __label__ = 22; break;
      }
      
    case 8: 
      var $32=$3;
      var $33=(($32+24)|0);
      var $34=$33;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)!=0;
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $39=$2;
      _file_magwarn($39, ((STRING_TABLE.__str60)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      __label__ = 24; break;
    case 10: 
      __label__ = 23; break;
    case 11: 
      var $42=$3;
      var $43=(($42+24)|0);
      var $44=$43;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & 16;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $50=$2;
      _file_magwarn($50, ((STRING_TABLE.__str61)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=115,tempInt));
      $1=-1;
      __label__ = 24; break;
    case 13: 
      __label__ = 23; break;
    case 14: 
      var $53=$3;
      var $54=(($53+24)|0);
      var $55=$54;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0)==0;
      if ($58) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $60=$2;
      _file_magwarn($60, ((STRING_TABLE.__str62)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=100,tempInt));
      var $61=$3;
      var $62=(($61+24)|0);
      var $63=$62;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=100;
      $1=-1;
      __label__ = 24; break;
    case 16: 
      __label__ = 23; break;
    case 17: 
      var $67=$3;
      var $68=(($67+24)|0);
      var $69=$68;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & 1;
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $75=$2;
      _file_magwarn($75, ((STRING_TABLE.__str63)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=87,tempInt));
      $1=-1;
      __label__ = 24; break;
    case 19: 
      var $77=$3;
      var $78=(($77+24)|0);
      var $79=$78;
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 2;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $85=$2;
      _file_magwarn($85, ((STRING_TABLE.__str63)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=119,tempInt));
      $1=-1;
      __label__ = 24; break;
    case 21: 
      __label__ = 23; break;
    case 22: 
      var $88=$2;
      var $89=$3;
      var $90=(($89+6)|0);
      var $91=HEAPU8[($90)];
      var $92=(($91)&255);
      _file_magwarn($88, ((STRING_TABLE.__str64)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$92,tempInt));
      $1=-1;
      __label__ = 24; break;
    case 23: 
      $1=0;
      __label__ = 24; break;
    case 24: 
      var $95=$1;
      STACKTOP = __stackBase__;
      return $95;
    default: assert(0, "bad label: " + __label__);
  }
}
_string_modifier_check["X"]=1;

function _getvalue($ms, $m, $p, $action) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ep=__stackBase__;
      var $ep1=(__stackBase__)+(4);
      var $ep2=(__stackBase__)+(8);
      $2=$ms;
      $3=$m;
      $4=$p;
      $5=$action;
      var $6=$3;
      var $7=(($6+6)|0);
      var $8=HEAPU8[($7)];
      var $9=(($8)&255);
      if ((($9)|0) == 18 || (($9)|0) == 19 || (($9)|0) == 5 || (($9)|0) == 13 || (($9)|0) == 17 || (($9)|0) == 20) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 33 || (($9)|0) == 34 || (($9)|0) == 35) {
        __label__ = 8; break;
      }
      else if ((($9)|0) == 36 || (($9)|0) == 37 || (($9)|0) == 38) {
        __label__ = 11; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 3: 
      var $11=$2;
      var $12=$3;
      var $13=$4;
      var $14=HEAP32[(($13)>>2)];
      var $15=$5;
      var $16=(($15)|0)==2;
      var $17=(($16)&1);
      var $18=_getstr($11, $12, $14, $17);
      var $19=$4;
      HEAP32[(($19)>>2)]=$18;
      var $20=$4;
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $24=$2;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & 64;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $30=$2;
      var $31=$3;
      var $32=(($31+32)|0);
      var $33=$32;
      var $34=(($33)|0);
      _file_magwarn($30, ((STRING_TABLE.__str51)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$34,tempInt));
      __label__ = 6; break;
    case 6: 
      $1=-1;
      __label__ = 17; break;
    case 7: 
      $1=0;
      __label__ = 17; break;
    case 8: 
      var $38=$3;
      var $39=(($38+4)|0);
      var $40=HEAPU8[($39)];
      var $41=(($40)&255);
      var $42=(($41)|0)!=120;
      if ($42) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $44=$4;
      var $45=HEAP32[(($44)>>2)];
      var $46=_strtod($45, $ep);
      var $47=$46;
      var $48=$3;
      var $49=(($48+32)|0);
      var $50=$49;
      HEAPF32[(($50)>>2)]=$47;
      var $51=HEAP32[(($ep)>>2)];
      var $52=$4;
      HEAP32[(($52)>>2)]=$51;
      __label__ = 10; break;
    case 10: 
      $1=0;
      __label__ = 17; break;
    case 11: 
      var $55=$3;
      var $56=(($55+4)|0);
      var $57=HEAPU8[($56)];
      var $58=(($57)&255);
      var $59=(($58)|0)!=120;
      if ($59) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $61=$4;
      var $62=HEAP32[(($61)>>2)];
      var $63=_strtod($62, $ep1);
      var $64=$3;
      var $65=(($64+32)|0);
      var $66=$65;
      (tempDoubleF64[0]=$63,HEAP32[(($66)>>2)]=tempDoubleI32[0],HEAP32[((($66)+(4))>>2)]=tempDoubleI32[1]);
      var $67=HEAP32[(($ep1)>>2)];
      var $68=$4;
      HEAP32[(($68)>>2)]=$67;
      __label__ = 13; break;
    case 13: 
      $1=0;
      __label__ = 17; break;
    case 14: 
      var $71=$3;
      var $72=(($71+4)|0);
      var $73=HEAPU8[($72)];
      var $74=(($73)&255);
      var $75=(($74)|0)!=120;
      if ($75) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $77=$2;
      var $78=$3;
      var $79=$4;
      var $80=HEAP32[(($79)>>2)];
      var $81=_strtoull($80, $ep2, 0);
      var $81$0=$81[0];
      var $81$1=$81[1];
      var $82=_file_signextend($77, $78, $81$0, $81$1);
      var $82$0=$82[0];
      var $82$1=$82[1];
      var $83=$3;
      var $84=(($83+32)|0);
      var $85=$84;
      var $st$13$0=(($85)|0);
      HEAP32[(($st$13$0)>>2)]=$82$0;
      var $st$13$1=(($85+4)|0);
      HEAP32[(($st$13$1)>>2)]=$82$1;
      var $86=HEAP32[(($ep2)>>2)];
      var $87=$4;
      HEAP32[(($87)>>2)]=$86;
      var $88=$4;
      _eatsize($88);
      __label__ = 16; break;
    case 16: 
      $1=0;
      __label__ = 17; break;
    case 17: 
      var $91=$1;
      STACKTOP = __stackBase__;
      return $91;
    default: assert(0, "bad label: " + __label__);
  }
}
_getvalue["X"]=1;

function _check_format($ms, $m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ptr;
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+96)|0);
      var $6=(($5)|0);
      $ptr=$6;
      __label__ = 3; break;
    case 3: 
      var $8=$ptr;
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24)!=0;
      if ($10) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $12=$ptr;
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24);
      var $15=(($14)|0)==37;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 8; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $19=$ptr;
      var $20=(($19+1)|0);
      $ptr=$20;
      __label__ = 3; break;
    case 8: 
      var $22=$ptr;
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=1;
      __label__ = 26; break;
    case 10: 
      var $28=$3;
      var $29=(($28+6)|0);
      var $30=HEAPU8[($29)];
      var $31=(($30)&255);
      var $32=(($31)>>>0) >= 42;
      if ($32) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $34=$2;
      _file_magwarn($34, ((STRING_TABLE.__str47)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      __label__ = 26; break;
    case 12: 
      var $36=$3;
      var $37=(($36+6)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=((_file_formats+($39<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0)==0;
      if ($42) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $44=$2;
      var $45=$3;
      var $46=(($45+96)|0);
      var $47=(($46)|0);
      var $48=$3;
      var $49=(($48+6)|0);
      var $50=HEAPU8[($49)];
      var $51=(($50)&255);
      var $52=((_file_names+($51<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      _file_magwarn($44, ((STRING_TABLE.__str48)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$47,HEAP32[(((tempInt)+(4))>>2)]=$53,tempInt));
      $1=-1;
      __label__ = 26; break;
    case 14: 
      var $55=$ptr;
      var $56=(($55+1)|0);
      $ptr=$56;
      var $57=$ptr;
      var $58=$3;
      var $59=(($58+6)|0);
      var $60=HEAPU8[($59)];
      var $61=(($60)&255);
      var $62=((_file_formats+($61<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=_check_format_type($57, $63);
      var $65=(($64)|0)==-1;
      if ($65) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $67=$2;
      var $68=$ptr;
      var $69=HEAP8[($68)];
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)!=0;
      if ($71) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $73=$ptr;
      var $74=HEAP8[($73)];
      var $75=(($74 << 24) >> 24);
      var $78 = $75;__label__ = 18; break;
    case 17: 
      var $78 = 63;__label__ = 18; break;
    case 18: 
      var $78;
      var $79=$3;
      var $80=(($79+6)|0);
      var $81=HEAPU8[($80)];
      var $82=(($81)&255);
      var $83=((_file_names+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$3;
      var $86=(($85+96)|0);
      var $87=(($86)|0);
      _file_magwarn($67, ((STRING_TABLE.__str49)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$78,HEAP32[(((tempInt)+(4))>>2)]=$84,HEAP32[(((tempInt)+(8))>>2)]=$87,tempInt));
      $1=-1;
      __label__ = 26; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $90=$ptr;
      var $91=HEAP8[($90)];
      var $92=(($91 << 24) >> 24)!=0;
      if ($92) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $94=$ptr;
      var $95=HEAP8[($94)];
      var $96=(($95 << 24) >> 24);
      var $97=(($96)|0)==37;
      if ($97) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $99=$2;
      var $100=$3;
      var $101=(($100+6)|0);
      var $102=HEAPU8[($101)];
      var $103=(($102)&255);
      var $104=((_file_names+($103<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$3;
      var $107=(($106+96)|0);
      var $108=(($107)|0);
      _file_magwarn($99, ((STRING_TABLE.__str50)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$108,tempInt));
      $1=-1;
      __label__ = 26; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $111=$ptr;
      var $112=(($111+1)|0);
      $ptr=$112;
      __label__ = 20; break;
    case 25: 
      $1=0;
      __label__ = 26; break;
    case 26: 
      var $115=$1;
      STACKTOP = __stackBase__;
      return $115;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_format["X"]=1;

function _getstr($ms, $m, $s, $warn) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $origs;
      var $p;
      var $plen;
      var $origp;
      var $pmax;
      var $c;
      var $val;
      $2=$ms;
      $3=$m;
      $4=$s;
      $5=$warn;
      var $6=$4;
      $origs=$6;
      var $7=$3;
      var $8=(($7+32)|0);
      var $9=$8;
      var $10=(($9)|0);
      $p=$10;
      $plen=64;
      var $11=$p;
      $origp=$11;
      var $12=$p;
      var $13=$plen;
      var $14=(($12+$13)|0);
      var $15=((($14)-(1))|0);
      $pmax=$15;
      __label__ = 3; break;
    case 3: 
      var $17=$4;
      var $18=(($17+1)|0);
      $4=$18;
      var $19=HEAP8[($17)];
      var $20=(($19 << 24) >> 24);
      $c=$20;
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 4; break; } else { __label__ = 53; break; }
    case 4: 
      var $23=$c;
      var $24=(($23) & 255);
      var $25=(($24)&255);
      var $26=_isspace($25);
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 53; break;
    case 6: 
      var $30=$p;
      var $31=$pmax;
      var $32=(($30)>>>0) >= (($31)>>>0);
      if ($32) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $34=$2;
      var $35=$origs;
      _file_error($34, 0, ((STRING_TABLE.__str52)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$35,tempInt));
      $1=0;
      __label__ = 57; break;
    case 8: 
      var $37=$c;
      var $38=(($37)|0)==92;
      if ($38) { __label__ = 9; break; } else { __label__ = 51; break; }
    case 9: 
      var $40=$4;
      var $41=(($40+1)|0);
      $4=$41;
      var $42=HEAP8[($40)];
      var $43=(($42 << 24) >> 24);
      $c=$43;
      if ((($43)|0) == 0) {
        __label__ = 10; break;
      }
      else if ((($43)|0) == 9) {
        __label__ = 13; break;
      }
      else if ((($43)|0) == 32 || (($43)|0) == 62 || (($43)|0) == 60 || (($43)|0) == 38 || (($43)|0) == 94 || (($43)|0) == 61 || (($43)|0) == 33 || (($43)|0) == 92) {
        __label__ = 26; break;
      }
      else if ((($43)|0) == 97) {
        __label__ = 27; break;
      }
      else if ((($43)|0) == 98) {
        __label__ = 28; break;
      }
      else if ((($43)|0) == 102) {
        __label__ = 29; break;
      }
      else if ((($43)|0) == 110) {
        __label__ = 30; break;
      }
      else if ((($43)|0) == 114) {
        __label__ = 31; break;
      }
      else if ((($43)|0) == 116) {
        __label__ = 32; break;
      }
      else if ((($43)|0) == 118) {
        __label__ = 33; break;
      }
      else if ((($43)|0) == 48 || (($43)|0) == 49 || (($43)|0) == 50 || (($43)|0) == 51 || (($43)|0) == 52 || (($43)|0) == 53 || (($43)|0) == 54 || (($43)|0) == 55) {
        __label__ = 34; break;
      }
      else if ((($43)|0) == 120) {
        __label__ = 43; break;
      }
      else {
      __label__ = 16; break;
      }
      
    case 10: 
      var $45=$5;
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $48=$2;
      _file_magwarn($48, ((STRING_TABLE.__str53)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 12; break;
    case 12: 
      __label__ = 54; break;
    case 13: 
      var $51=$5;
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $54=$2;
      _file_magwarn($54, ((STRING_TABLE.__str54)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $5=0;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $57=$5;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 17: 
      var $60=$c;
      var $61=(($60) & 255);
      var $62=(($61)&255);
      var $63=_isprint($62);
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $66=$c;
      var $67=_strchr(((STRING_TABLE.__str55)|0), $66);
      var $68=(($67)|0)==0;
      if ($68) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $70=$3;
      var $71=(($70+6)|0);
      var $72=HEAPU8[($71)];
      var $73=(($72)&255);
      var $74=(($73)|0)!=17;
      if ($74) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $76=$c;
      var $77=_strchr(((STRING_TABLE.__str56)|0), $76);
      var $78=(($77)|0)==0;
      if ($78) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $80=$2;
      var $81=$c;
      _file_magwarn($80, ((STRING_TABLE.__str57)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$81,tempInt));
      __label__ = 22; break;
    case 22: 
      __label__ = 24; break;
    case 23: 
      var $84=$2;
      var $85=$c;
      _file_magwarn($84, ((STRING_TABLE.__str58)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$85,tempInt));
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $89=$c;
      var $90=(($89) & 255);
      var $91=$p;
      var $92=(($91+1)|0);
      $p=$92;
      HEAP8[($91)]=$90;
      __label__ = 50; break;
    case 27: 
      var $94=$p;
      var $95=(($94+1)|0);
      $p=$95;
      HEAP8[($94)]=7;
      __label__ = 50; break;
    case 28: 
      var $97=$p;
      var $98=(($97+1)|0);
      $p=$98;
      HEAP8[($97)]=8;
      __label__ = 50; break;
    case 29: 
      var $100=$p;
      var $101=(($100+1)|0);
      $p=$101;
      HEAP8[($100)]=12;
      __label__ = 50; break;
    case 30: 
      var $103=$p;
      var $104=(($103+1)|0);
      $p=$104;
      HEAP8[($103)]=10;
      __label__ = 50; break;
    case 31: 
      var $106=$p;
      var $107=(($106+1)|0);
      $p=$107;
      HEAP8[($106)]=13;
      __label__ = 50; break;
    case 32: 
      var $109=$p;
      var $110=(($109+1)|0);
      $p=$110;
      HEAP8[($109)]=9;
      __label__ = 50; break;
    case 33: 
      var $112=$p;
      var $113=(($112+1)|0);
      $p=$113;
      HEAP8[($112)]=11;
      __label__ = 50; break;
    case 34: 
      var $115=$c;
      var $116=((($115)-(48))|0);
      $val=$116;
      var $117=$4;
      var $118=(($117+1)|0);
      $4=$118;
      var $119=HEAP8[($117)];
      var $120=(($119 << 24) >> 24);
      $c=$120;
      var $121=$c;
      var $122=(($121)|0) >= 48;
      if ($122) { __label__ = 35; break; } else { __label__ = 41; break; }
    case 35: 
      var $124=$c;
      var $125=(($124)|0) <= 55;
      if ($125) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      var $127=$val;
      var $128=$127 << 3;
      var $129=$c;
      var $130=((($129)-(48))|0);
      var $131=$128 | $130;
      $val=$131;
      var $132=$4;
      var $133=(($132+1)|0);
      $4=$133;
      var $134=HEAP8[($132)];
      var $135=(($134 << 24) >> 24);
      $c=$135;
      var $136=$c;
      var $137=(($136)|0) >= 48;
      if ($137) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $139=$c;
      var $140=(($139)|0) <= 55;
      if ($140) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $142=$val;
      var $143=$142 << 3;
      var $144=$c;
      var $145=((($144)-(48))|0);
      var $146=$143 | $145;
      $val=$146;
      __label__ = 40; break;
    case 39: 
      var $148=$4;
      var $149=((($148)-(1))|0);
      $4=$149;
      __label__ = 40; break;
    case 40: 
      __label__ = 42; break;
    case 41: 
      var $152=$4;
      var $153=((($152)-(1))|0);
      $4=$153;
      __label__ = 42; break;
    case 42: 
      var $155=$val;
      var $156=(($155) & 255);
      var $157=$p;
      var $158=(($157+1)|0);
      $p=$158;
      HEAP8[($157)]=$156;
      __label__ = 50; break;
    case 43: 
      $val=120;
      var $160=$4;
      var $161=(($160+1)|0);
      $4=$161;
      var $162=HEAP8[($160)];
      var $163=(($162 << 24) >> 24);
      var $164=_hextoint($163);
      $c=$164;
      var $165=$c;
      var $166=(($165)|0) >= 0;
      if ($166) { __label__ = 44; break; } else { __label__ = 48; break; }
    case 44: 
      var $168=$c;
      $val=$168;
      var $169=$4;
      var $170=(($169+1)|0);
      $4=$170;
      var $171=HEAP8[($169)];
      var $172=(($171 << 24) >> 24);
      var $173=_hextoint($172);
      $c=$173;
      var $174=$c;
      var $175=(($174)|0) >= 0;
      if ($175) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $177=$val;
      var $178=$177 << 4;
      var $179=$c;
      var $180=((($178)+($179))|0);
      $val=$180;
      __label__ = 47; break;
    case 46: 
      var $182=$4;
      var $183=((($182)-(1))|0);
      $4=$183;
      __label__ = 47; break;
    case 47: 
      __label__ = 49; break;
    case 48: 
      var $186=$4;
      var $187=((($186)-(1))|0);
      $4=$187;
      __label__ = 49; break;
    case 49: 
      var $189=$val;
      var $190=(($189) & 255);
      var $191=$p;
      var $192=(($191+1)|0);
      $p=$192;
      HEAP8[($191)]=$190;
      __label__ = 50; break;
    case 50: 
      __label__ = 52; break;
    case 51: 
      var $195=$c;
      var $196=(($195) & 255);
      var $197=$p;
      var $198=(($197+1)|0);
      $p=$198;
      HEAP8[($197)]=$196;
      __label__ = 52; break;
    case 52: 
      __label__ = 3; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $202=$p;
      HEAP8[($202)]=0;
      var $203=$p;
      var $204=$origp;
      var $205=$203;
      var $206=$204;
      var $207=((($205)-($206))|0);
      var $208=(($207) & 255);
      var $209=$3;
      var $210=(($209+5)|0);
      HEAP8[($210)]=$208;
      var $211=$3;
      var $212=(($211+6)|0);
      var $213=HEAPU8[($212)];
      var $214=(($213)&255);
      var $215=(($214)|0)==13;
      if ($215) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $217=$3;
      var $218=_file_pstring_length_size($217);
      var $219=(($218) & 255);
      var $220=(($219)&255);
      var $221=$3;
      var $222=(($221+5)|0);
      var $223=HEAPU8[($222)];
      var $224=(($223)&255);
      var $225=((($224)+($220))|0);
      var $226=(($225) & 255);
      HEAP8[($222)]=$226;
      __label__ = 56; break;
    case 56: 
      var $228=$4;
      $1=$228;
      __label__ = 57; break;
    case 57: 
      var $230=$1;
      STACKTOP = __stackBase__;
      return $230;
    default: assert(0, "bad label: " + __label__);
  }
}
_getstr["X"]=1;

function _hextoint($c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$c;
      var $3=$2;
      var $4=(($3) & 255);
      var $5=(($4)&255);
      var $6=(($5)>>>0) <= 127;
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $1=-1;
      __label__ = 13; break;
    case 4: 
      var $9=$2;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=_isdigit($11);
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$2;
      var $16=((($15)-(48))|0);
      $1=$16;
      __label__ = 13; break;
    case 6: 
      var $18=$2;
      var $19=(($18)|0) >= 97;
      if ($19) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $21=$2;
      var $22=(($21)|0) <= 102;
      if ($22) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $24=$2;
      var $25=((($24)+(10))|0);
      var $26=((($25)-(97))|0);
      $1=$26;
      __label__ = 13; break;
    case 9: 
      var $28=$2;
      var $29=(($28)|0) >= 65;
      if ($29) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $31=$2;
      var $32=(($31)|0) <= 70;
      if ($32) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $34=$2;
      var $35=((($34)+(10))|0);
      var $36=((($35)-(65))|0);
      $1=$36;
      __label__ = 13; break;
    case 12: 
      $1=-1;
      __label__ = 13; break;
    case 13: 
      var $39=$1;
      ;
      return $39;
    default: assert(0, "bad label: " + __label__);
  }
}


function _check_format_type($ptr, $type) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $quad_t;
      $2=$ptr;
      $3=$type;
      $quad_t=0;
      var $4=$2;
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|0)==0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 65; break;
    case 4: 
      var $10=$3;
      if ((($10)|0) == 3) {
        __label__ = 5; break;
      }
      else if ((($10)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($10)|0) == 4 || (($10)|0) == 5) {
        __label__ = 36; break;
      }
      else if ((($10)|0) == 2) {
        __label__ = 51; break;
      }
      else {
      __label__ = 64; break;
      }
      
    case 5: 
      $quad_t=1;
      __label__ = 6; break;
    case 6: 
      var $13=$2;
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $16=(($15)|0)==45;
      if ($16) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $18=$2;
      var $19=(($18+1)|0);
      $2=$19;
      __label__ = 8; break;
    case 8: 
      var $21=$2;
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=(($23)|0)==46;
      if ($24) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $26=$2;
      var $27=(($26+1)|0);
      $2=$27;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $30=$2;
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=_isdigit($32);
      var $34=(($33)|0)!=0;
      if ($34) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $36=$2;
      var $37=(($36+1)|0);
      $2=$37;
      __label__ = 11; break;
    case 13: 
      var $39=$2;
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($41)|0)==46;
      if ($42) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $44=$2;
      var $45=(($44+1)|0);
      $2=$45;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $48=$2;
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=_isdigit($50);
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $54=$2;
      var $55=(($54+1)|0);
      $2=$55;
      __label__ = 16; break;
    case 18: 
      var $57=$quad_t;
      var $58=(($57)|0)!=0;
      if ($58) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: 
      var $60=$2;
      var $61=(($60+1)|0);
      $2=$61;
      var $62=HEAP8[($60)];
      var $63=(($62 << 24) >> 24);
      var $64=(($63)|0)!=108;
      if ($64) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $1=-1;
      __label__ = 65; break;
    case 21: 
      var $67=$2;
      var $68=(($67+1)|0);
      $2=$68;
      var $69=HEAP8[($67)];
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)!=108;
      if ($71) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $1=-1;
      __label__ = 65; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $75=$2;
      var $76=(($75+1)|0);
      $2=$76;
      var $77=HEAP8[($75)];
      var $78=(($77 << 24) >> 24);
      if ((($78)|0) == 108) {
        __label__ = 25; break;
      }
      else if ((($78)|0) == 104) {
        __label__ = 28; break;
      }
      else if ((($78)|0) == 105 || (($78)|0) == 99 || (($78)|0) == 100 || (($78)|0) == 117 || (($78)|0) == 120 || (($78)|0) == 88) {
        __label__ = 34; break;
      }
      else {
      __label__ = 35; break;
      }
      
    case 25: 
      var $80=$2;
      var $81=(($80+1)|0);
      $2=$81;
      var $82=HEAP8[($80)];
      var $83=(($82 << 24) >> 24);
      if ((($83)|0) == 105 || (($83)|0) == 100 || (($83)|0) == 117 || (($83)|0) == 120 || (($83)|0) == 88) {
        __label__ = 26; break;
      }
      else {
      __label__ = 27; break;
      }
      
    case 26: 
      $1=0;
      __label__ = 65; break;
    case 27: 
      $1=-1;
      __label__ = 65; break;
    case 28: 
      var $87=$2;
      var $88=(($87+1)|0);
      $2=$88;
      var $89=HEAP8[($87)];
      var $90=(($89 << 24) >> 24);
      if ((($90)|0) == 104) {
        __label__ = 29; break;
      }
      else if ((($90)|0) == 100) {
        __label__ = 32; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 29: 
      var $92=$2;
      var $93=(($92+1)|0);
      $2=$93;
      var $94=HEAP8[($92)];
      var $95=(($94 << 24) >> 24);
      if ((($95)|0) == 105 || (($95)|0) == 100 || (($95)|0) == 117 || (($95)|0) == 120 || (($95)|0) == 88) {
        __label__ = 30; break;
      }
      else {
      __label__ = 31; break;
      }
      
    case 30: 
      $1=0;
      __label__ = 65; break;
    case 31: 
      $1=-1;
      __label__ = 65; break;
    case 32: 
      $1=0;
      __label__ = 65; break;
    case 33: 
      $1=-1;
      __label__ = 65; break;
    case 34: 
      $1=0;
      __label__ = 65; break;
    case 35: 
      $1=-1;
      __label__ = 65; break;
    case 36: 
      var $103=$2;
      var $104=HEAP8[($103)];
      var $105=(($104 << 24) >> 24);
      var $106=(($105)|0)==45;
      if ($106) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $108=$2;
      var $109=(($108+1)|0);
      $2=$109;
      __label__ = 38; break;
    case 38: 
      var $111=$2;
      var $112=HEAP8[($111)];
      var $113=(($112 << 24) >> 24);
      var $114=(($113)|0)==46;
      if ($114) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $116=$2;
      var $117=(($116+1)|0);
      $2=$117;
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $120=$2;
      var $121=HEAPU8[($120)];
      var $122=(($121)&255);
      var $123=_isdigit($122);
      var $124=(($123)|0)!=0;
      if ($124) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $126=$2;
      var $127=(($126+1)|0);
      $2=$127;
      __label__ = 41; break;
    case 43: 
      var $129=$2;
      var $130=HEAP8[($129)];
      var $131=(($130 << 24) >> 24);
      var $132=(($131)|0)==46;
      if ($132) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $134=$2;
      var $135=(($134+1)|0);
      $2=$135;
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      var $138=$2;
      var $139=HEAPU8[($138)];
      var $140=(($139)&255);
      var $141=_isdigit($140);
      var $142=(($141)|0)!=0;
      if ($142) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $144=$2;
      var $145=(($144+1)|0);
      $2=$145;
      __label__ = 46; break;
    case 48: 
      var $147=$2;
      var $148=(($147+1)|0);
      $2=$148;
      var $149=HEAP8[($147)];
      var $150=(($149 << 24) >> 24);
      if ((($150)|0) == 101 || (($150)|0) == 69 || (($150)|0) == 102 || (($150)|0) == 70 || (($150)|0) == 103 || (($150)|0) == 71) {
        __label__ = 49; break;
      }
      else {
      __label__ = 50; break;
      }
      
    case 49: 
      $1=0;
      __label__ = 65; break;
    case 50: 
      $1=-1;
      __label__ = 65; break;
    case 51: 
      var $154=$2;
      var $155=HEAP8[($154)];
      var $156=(($155 << 24) >> 24);
      var $157=(($156)|0)==45;
      if ($157) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $159=$2;
      var $160=(($159+1)|0);
      $2=$160;
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $163=$2;
      var $164=HEAPU8[($163)];
      var $165=(($164)&255);
      var $166=_isdigit($165);
      var $167=(($166)|0)!=0;
      if ($167) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $169=$2;
      var $170=(($169+1)|0);
      $2=$170;
      __label__ = 54; break;
    case 56: 
      var $172=$2;
      var $173=HEAP8[($172)];
      var $174=(($173 << 24) >> 24);
      var $175=(($174)|0)==46;
      if ($175) { __label__ = 57; break; } else { __label__ = 61; break; }
    case 57: 
      var $177=$2;
      var $178=(($177+1)|0);
      $2=$178;
      __label__ = 58; break;
    case 58: 
      var $180=$2;
      var $181=HEAPU8[($180)];
      var $182=(($181)&255);
      var $183=_isdigit($182);
      var $184=(($183)|0)!=0;
      if ($184) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $186=$2;
      var $187=(($186+1)|0);
      $2=$187;
      __label__ = 58; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $190=$2;
      var $191=(($190+1)|0);
      $2=$191;
      var $192=HEAP8[($190)];
      var $193=(($192 << 24) >> 24);
      if ((($193)|0) == 115) {
        __label__ = 62; break;
      }
      else {
      __label__ = 63; break;
      }
      
    case 62: 
      $1=0;
      __label__ = 65; break;
    case 63: 
      $1=-1;
      __label__ = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      var $198=$1;
      ;
      return $198;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_format_type["X"]=1;

function _parse_mime($ms, $me, $line) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $l;
      var $m;
      $2=$ms;
      $3=$me;
      $4=$line;
      var $5=$4;
      $l=$5;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17 = 0;__label__ = 5; break;
    case 4: 
      var $12=$3;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      var $18=$3;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17)*(232))|0);
      $m=$21;
      var $22=$m;
      var $23=(($22+160)|0);
      var $24=(($23)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=$2;
      var $30=$m;
      var $31=(($30+160)|0);
      var $32=(($31)|0);
      var $33=$l;
      _file_magwarn($29, ((STRING_TABLE.__str79)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,HEAP32[(((tempInt)+(4))>>2)]=$33,tempInt));
      $1=-1;
      __label__ = 29; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $36=$l;
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=(($38)>>>0) <= 127;
      if ($39) { __label__ = 9; break; } else { var $47 = 0;__label__ = 10; break; }
    case 9: 
      var $41=$l;
      var $42=HEAPU8[($41)];
      var $43=(($42)&255);
      var $44=_isspace($43);
      var $45=(($44)|0)!=0;
      var $47 = $45;__label__ = 10; break;
    case 10: 
      var $47;
      if ($47) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $49=$l;
      var $50=(($49+1)|0);
      $l=$50;
      __label__ = 8; break;
    case 12: 
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $53=$l;
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 14; break; } else { var $78 = 0;__label__ = 18; break; }
    case 14: 
      var $58=$l;
      var $59=HEAPU8[($58)];
      var $60=(($59)&255);
      var $61=(($60)>>>0) <= 127;
      if ($61) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $63=$l;
      var $64=HEAPU8[($63)];
      var $65=(($64)&255);
      var $66=_isalnum($65);
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $69=$l;
      var $70=HEAP8[($69)];
      var $71=(($70 << 24) >> 24);
      var $72=_strchr(((STRING_TABLE.__str77)|0), $71);
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 17; break; } else { var $78 = 0;__label__ = 18; break; }
    case 17: 
      var $75=$i;
      var $76=(($75)>>>0) < 64;
      var $78 = $76;__label__ = 18; break;
    case 18: 
      var $78;
      if ($78) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $81=$l;
      var $82=(($81+1)|0);
      $l=$82;
      var $83=HEAP8[($81)];
      var $84=$i;
      var $85=((($84)+(1))|0);
      $i=$85;
      var $86=$m;
      var $87=(($86+160)|0);
      var $88=(($87+$84)|0);
      HEAP8[($88)]=$83;
      __label__ = 13; break;
    case 21: 
      var $90=$i;
      var $91=(($90)|0)==64;
      if ($91) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $93=$m;
      var $94=(($93+160)|0);
      var $95=(($94+63)|0);
      HEAP8[($95)]=0;
      var $96=$2;
      var $97=(($96+28)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$98 & 64;
      var $100=(($99)|0)!=0;
      if ($100) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $102=$2;
      var $103=$m;
      var $104=(($103+160)|0);
      var $105=(($104)|0);
      var $106=$i;
      _file_magwarn($102, ((STRING_TABLE.__str80)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$106,tempInt));
      __label__ = 24; break;
    case 24: 
      __label__ = 26; break;
    case 25: 
      var $109=$i;
      var $110=$m;
      var $111=(($110+160)|0);
      var $112=(($111+$109)|0);
      HEAP8[($112)]=0;
      __label__ = 26; break;
    case 26: 
      var $114=$i;
      var $115=(($114)>>>0) > 0;
      if ($115) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      $1=0;
      __label__ = 29; break;
    case 28: 
      $1=-1;
      __label__ = 29; break;
    case 29: 
      var $119=$1;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_mime["X"]=1;

function _parse_apple($ms, $me, $line) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $l;
      var $m;
      $2=$ms;
      $3=$me;
      $4=$line;
      var $5=$4;
      $l=$5;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17 = 0;__label__ = 5; break;
    case 4: 
      var $12=$3;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      var $17 = $15;__label__ = 5; break;
    case 5: 
      var $17;
      var $18=$3;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17)*(232))|0);
      $m=$21;
      var $22=$m;
      var $23=(($22+224)|0);
      var $24=(($23)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $29=$2;
      var $30=$m;
      var $31=(($30+160)|0);
      var $32=(($31)|0);
      var $33=$l;
      _file_magwarn($29, ((STRING_TABLE.__str76)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,HEAP32[(((tempInt)+(4))>>2)]=$33,tempInt));
      $1=-1;
      __label__ = 29; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $36=$l;
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=(($38)>>>0) <= 127;
      if ($39) { __label__ = 9; break; } else { var $47 = 0;__label__ = 10; break; }
    case 9: 
      var $41=$l;
      var $42=HEAPU8[($41)];
      var $43=(($42)&255);
      var $44=_isspace($43);
      var $45=(($44)|0)!=0;
      var $47 = $45;__label__ = 10; break;
    case 10: 
      var $47;
      if ($47) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $49=$l;
      var $50=(($49+1)|0);
      $l=$50;
      __label__ = 8; break;
    case 12: 
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $53=$l;
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 14; break; } else { var $78 = 0;__label__ = 18; break; }
    case 14: 
      var $58=$l;
      var $59=HEAPU8[($58)];
      var $60=(($59)&255);
      var $61=(($60)>>>0) <= 127;
      if ($61) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $63=$l;
      var $64=HEAPU8[($63)];
      var $65=(($64)&255);
      var $66=_isalnum($65);
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $69=$l;
      var $70=HEAP8[($69)];
      var $71=(($70 << 24) >> 24);
      var $72=_strchr(((STRING_TABLE.__str77)|0), $71);
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 17; break; } else { var $78 = 0;__label__ = 18; break; }
    case 17: 
      var $75=$i;
      var $76=(($75)>>>0) < 8;
      var $78 = $76;__label__ = 18; break;
    case 18: 
      var $78;
      if ($78) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $81=$l;
      var $82=(($81+1)|0);
      $l=$82;
      var $83=HEAP8[($81)];
      var $84=$i;
      var $85=((($84)+(1))|0);
      $i=$85;
      var $86=$m;
      var $87=(($86+224)|0);
      var $88=(($87+$84)|0);
      HEAP8[($88)]=$83;
      __label__ = 13; break;
    case 21: 
      var $90=$i;
      var $91=(($90)|0)==8;
      if ($91) { __label__ = 22; break; } else { __label__ = 26; break; }
    case 22: 
      var $93=$l;
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=(($95)|0)!=0;
      if ($96) { __label__ = 23; break; } else { __label__ = 26; break; }
    case 23: 
      var $98=$2;
      var $99=(($98+28)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$100 & 64;
      var $102=(($101)|0)!=0;
      if ($102) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $104=$2;
      var $105=$4;
      var $106=$i;
      _file_magwarn($104, ((STRING_TABLE.__str78)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$106,tempInt));
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $109=$i;
      var $110=(($109)>>>0) > 0;
      if ($110) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      $1=0;
      __label__ = 29; break;
    case 28: 
      $1=-1;
      __label__ = 29; break;
    case 29: 
      var $114=$1;
      STACKTOP = __stackBase__;
      return $114;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_apple["X"]=1;

function _parse_strength($ms, $me, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l;
      var $el=__stackBase__;
      var $factor;
      var $m;
      $2=$ms;
      $3=$me;
      $4=$line;
      var $5=$4;
      $l=$5;
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0);
      $m=$9;
      var $10=$m;
      var $11=(($10+11)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$2;
      var $17=$m;
      var $18=(($17+11)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=$m;
      var $22=(($21+3)|0);
      var $23=HEAPU8[($22)];
      var $24=(($23)&255);
      _file_magwarn($16, ((STRING_TABLE.__str71)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$20,HEAP32[(((tempInt)+(4))>>2)]=$24,tempInt));
      $1=-1;
      __label__ = 27; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $27=$l;
      var $28=HEAPU8[($27)];
      var $29=(($28)&255);
      var $30=(($29)>>>0) <= 127;
      if ($30) { __label__ = 6; break; } else { var $38 = 0;__label__ = 7; break; }
    case 6: 
      var $32=$l;
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=_isspace($34);
      var $36=(($35)|0)!=0;
      var $38 = $36;__label__ = 7; break;
    case 7: 
      var $38;
      if ($38) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $40=$l;
      var $41=(($40+1)|0);
      $l=$41;
      __label__ = 5; break;
    case 9: 
      var $43=$l;
      var $44=HEAP8[($43)];
      var $45=(($44 << 24) >> 24);
      if ((($45)|0) == 0 || (($45)|0) == 43 || (($45)|0) == 45 || (($45)|0) == 42 || (($45)|0) == 47) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 10: 
      var $47=$l;
      var $48=(($47+1)|0);
      $l=$48;
      var $49=HEAP8[($47)];
      var $50=$m;
      var $51=(($50+11)|0);
      HEAP8[($51)]=$49;
      __label__ = 12; break;
    case 11: 
      var $53=$2;
      var $54=$l;
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      _file_magwarn($53, ((STRING_TABLE.__str72)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$56,tempInt));
      $1=-1;
      __label__ = 27; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $59=$l;
      var $60=HEAPU8[($59)];
      var $61=(($60)&255);
      var $62=(($61)>>>0) <= 127;
      if ($62) { __label__ = 14; break; } else { var $70 = 0;__label__ = 15; break; }
    case 14: 
      var $64=$l;
      var $65=HEAPU8[($64)];
      var $66=(($65)&255);
      var $67=_isspace($66);
      var $68=(($67)|0)!=0;
      var $70 = $68;__label__ = 15; break;
    case 15: 
      var $70;
      if ($70) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $72=$l;
      var $73=(($72+1)|0);
      $l=$73;
      __label__ = 13; break;
    case 17: 
      var $75=$l;
      var $76=_strtol($75, $el, 0);
      $factor=$76;
      var $77=$factor;
      var $78=(($77)>>>0) > 255;
      if ($78) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $80=$2;
      var $81=$factor;
      _file_magwarn($80, ((STRING_TABLE.__str73)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$81,tempInt));
      __label__ = 26; break;
    case 19: 
      var $83=HEAP32[(($el)>>2)];
      var $84=HEAP8[($83)];
      var $85=(($84 << 24) >> 24);
      var $86=(($85)|0)!=0;
      if ($86) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $88=HEAP32[(($el)>>2)];
      var $89=HEAPU8[($88)];
      var $90=(($89)&255);
      var $91=_isspace($90);
      var $92=(($91)|0)!=0;
      if ($92) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $94=$2;
      var $95=$l;
      _file_magwarn($94, ((STRING_TABLE.__str74)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$95,tempInt));
      __label__ = 26; break;
    case 22: 
      var $97=$factor;
      var $98=(($97) & 255);
      var $99=$m;
      var $100=(($99+3)|0);
      HEAP8[($100)]=$98;
      var $101=$m;
      var $102=(($101+3)|0);
      var $103=HEAPU8[($102)];
      var $104=(($103)&255);
      var $105=(($104)|0)==0;
      if ($105) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $107=$m;
      var $108=(($107+11)|0);
      var $109=HEAPU8[($108)];
      var $110=(($109)&255);
      var $111=(($110)|0)==47;
      if ($111) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $113=$2;
      var $114=$m;
      var $115=(($114+11)|0);
      var $116=HEAPU8[($115)];
      var $117=(($116)&255);
      var $118=$m;
      var $119=(($118+3)|0);
      var $120=HEAPU8[($119)];
      var $121=(($120)&255);
      _file_magwarn($113, ((STRING_TABLE.__str75)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$117,HEAP32[(((tempInt)+(4))>>2)]=$121,tempInt));
      __label__ = 26; break;
    case 25: 
      $1=0;
      __label__ = 27; break;
    case 26: 
      var $124=$m;
      var $125=(($124+11)|0);
      HEAP8[($125)]=0;
      var $126=$m;
      var $127=(($126+3)|0);
      HEAP8[($127)]=0;
      $1=-1;
      __label__ = 27; break;
    case 27: 
      var $129=$1;
      STACKTOP = __stackBase__;
      return $129;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_strength["X"]=1;

function _file_softmagic($ms, $buf, $nbytes, $mode, $text) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $ml;
      var $rv;
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      $5=$mode;
      $6=$text;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      $ml=$11;
      __label__ = 3; break;
    case 3: 
      var $13=$ml;
      var $14=$2;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|0)!=(($16)|0);
      if ($17) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $19=$2;
      var $20=$ml;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$ml;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$3;
      var $27=$4;
      var $28=$5;
      var $29=$6;
      var $30=_match($19, $22, $25, $26, $27, $28, $29);
      $rv=$30;
      var $31=(($30)|0)!=0;
      if ($31) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $33=$rv;
      $1=$33;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $36=$ml;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      $ml=$38;
      __label__ = 3; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $41=$1;
      ;
      return $41;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_softmagic["X"]=1;

function _match($ms, $magic, $nmagic, $s, $nbytes, $mode, $text) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $magindex;
      var $cont_level;
      var $need_separator;
      var $returnval;
      var $e;
      var $firstline;
      var $printed_something;
      var $print;
      var $flush;
      var $m;
      $2=$ms;
      $3=$magic;
      $4=$nmagic;
      $5=$s;
      $6=$nbytes;
      $7=$mode;
      $8=$text;
      $magindex=0;
      $cont_level=0;
      $need_separator=0;
      $returnval=0;
      $firstline=1;
      $printed_something=0;
      var $9=$2;
      var $10=(($9+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 3088;
      var $13=(($12)|0)==0;
      var $14=(($13)&1);
      $print=$14;
      var $15=$2;
      var $16=$cont_level;
      var $17=_file_check_mem($15, $16);
      var $18=(($17)|0)==-1;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 120; break;
    case 4: 
      $magindex=0;
      __label__ = 5; break;
    case 5: 
      var $22=$magindex;
      var $23=$4;
      var $24=(($22)>>>0) < (($23)>>>0);
      if ($24) { __label__ = 6; break; } else { __label__ = 119; break; }
    case 6: 
      $flush=0;
      var $26=$magindex;
      var $27=$3;
      var $28=(($27+($26)*(232))|0);
      $m=$28;
      var $29=$m;
      var $30=(($29+6)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=(($32)|0)==5;
      if ($33) { __label__ = 13; break; } else { __label__ = 7; break; }
    case 7: 
      var $35=$m;
      var $36=(($35+6)|0);
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=(($38)|0)==13;
      if ($39) { __label__ = 13; break; } else { __label__ = 8; break; }
    case 8: 
      var $41=$m;
      var $42=(($41+6)|0);
      var $43=HEAPU8[($42)];
      var $44=(($43)&255);
      var $45=(($44)|0)==18;
      if ($45) { __label__ = 13; break; } else { __label__ = 9; break; }
    case 9: 
      var $47=$m;
      var $48=(($47+6)|0);
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=(($50)|0)==19;
      if ($51) { __label__ = 13; break; } else { __label__ = 10; break; }
    case 10: 
      var $53=$m;
      var $54=(($53+6)|0);
      var $55=HEAPU8[($54)];
      var $56=(($55)&255);
      var $57=(($56)|0)==17;
      if ($57) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 11: 
      var $59=$m;
      var $60=(($59+6)|0);
      var $61=HEAPU8[($60)];
      var $62=(($61)&255);
      var $63=(($62)|0)==20;
      if ($63) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $65=$m;
      var $66=(($65+6)|0);
      var $67=HEAPU8[($66)];
      var $68=(($67)&255);
      var $69=(($68)|0)==3;
      if ($69) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $71=$8;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $74=$m;
      var $75=(($74+24)|0);
      var $76=$75;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & 96;
      var $80=(($79)|0)==64;
      if ($80) { __label__ = 18; break; } else { __label__ = 15; break; }
    case 15: 
      var $82=$8;
      var $83=(($82)|0)!=0;
      if ($83) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $85=$m;
      var $86=(($85+24)|0);
      var $87=$86;
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$89 & 96;
      var $91=(($90)|0)==32;
      if ($91) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $93=$m;
      var $94=(($93+2)|0);
      var $95=HEAPU8[($94)];
      var $96=(($95)&255);
      var $97=$7;
      var $98=$96 & $97;
      var $99=$7;
      var $100=(($98)|0)!=(($99)|0);
      if ($100) { __label__ = 18; break; } else { __label__ = 24; break; }
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $103=$magindex;
      var $104=((($103)+(1))|0);
      var $105=$3;
      var $106=(($105+($104)*(232))|0);
      var $107=(($106)|0);
      var $108=HEAPU16[(($107)>>1)];
      var $109=(($108)&65535);
      var $110=(($109)|0)!=0;
      if ($110) { __label__ = 20; break; } else { var $117 = 0;__label__ = 21; break; }
    case 20: 
      var $112=$magindex;
      var $113=((($112)+(1))|0);
      $magindex=$113;
      var $114=$4;
      var $115=(($113)>>>0) < (($114)>>>0);
      var $117 = $115;__label__ = 21; break;
    case 21: 
      var $117;
      if ($117) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 19; break;
    case 23: 
      __label__ = 118; break;
    case 24: 
      var $121=$m;
      var $122=(($121+12)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+20)|0);
      HEAP32[(($125)>>2)]=$123;
      var $126=$m;
      var $127=(($126+20)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($129+40)|0);
      HEAP32[(($130)>>2)]=$128;
      var $131=$2;
      var $132=$5;
      var $133=$m;
      var $134=$6;
      var $135=$cont_level;
      var $136=$8;
      var $137=_mget($131, $132, $133, $134, $135, $136);
      if ((($137)|0) == -1) {
        __label__ = 25; break;
      }
      else if ((($137)|0) == 0) {
        __label__ = 26; break;
      }
      else {
      __label__ = 27; break;
      }
      
    case 25: 
      $1=-1;
      __label__ = 120; break;
    case 26: 
      var $140=$m;
      var $141=(($140+4)|0);
      var $142=HEAPU8[($141)];
      var $143=(($142)&255);
      var $144=(($143)|0)!=33;
      var $145=(($144)&1);
      $flush=$145;
      __label__ = 34; break;
    case 27: 
      var $147=$m;
      var $148=(($147+6)|0);
      var $149=HEAPU8[($148)];
      var $150=(($149)&255);
      var $151=(($150)|0)==41;
      if ($151) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      $returnval=1;
      __label__ = 29; break;
    case 29: 
      var $154=$2;
      var $155=$m;
      var $156=_magiccheck($154, $155);
      if ((($156)|0) == -1) {
        __label__ = 30; break;
      }
      else if ((($156)|0) == 0) {
        __label__ = 31; break;
      }
      else {
      __label__ = 32; break;
      }
      
    case 30: 
      $1=-1;
      __label__ = 120; break;
    case 31: 
      var $159=$flush;
      var $160=((($159)+(1))|0);
      $flush=$160;
      __label__ = 33; break;
    case 32: 
      $flush=0;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $164=$flush;
      var $165=(($164)|0)!=0;
      if ($165) { __label__ = 35; break; } else { __label__ = 41; break; }
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $168=$magindex;
      var $169=$4;
      var $170=((($169)-(1))|0);
      var $171=(($168)>>>0) < (($170)>>>0);
      if ($171) { __label__ = 37; break; } else { var $182 = 0;__label__ = 38; break; }
    case 37: 
      var $173=$magindex;
      var $174=((($173)+(1))|0);
      var $175=$3;
      var $176=(($175+($174)*(232))|0);
      var $177=(($176)|0);
      var $178=HEAPU16[(($177)>>1)];
      var $179=(($178)&65535);
      var $180=(($179)|0)!=0;
      var $182 = $180;__label__ = 38; break;
    case 38: 
      var $182;
      if ($182) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $184=$magindex;
      var $185=((($184)+(1))|0);
      $magindex=$185;
      __label__ = 36; break;
    case 40: 
      __label__ = 118; break;
    case 41: 
      var $188=$2;
      var $189=$m;
      var $190=_handle_annotation($188, $189);
      $e=$190;
      var $191=(($190)|0)!=0;
      if ($191) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $193=$e;
      $1=$193;
      __label__ = 120; break;
    case 43: 
      var $195=$m;
      var $196=(($195+96)|0);
      var $197=(($196)|0);
      var $198=HEAP8[($197)];
      var $199=(($198 << 24) >> 24)!=0;
      if ($199) { __label__ = 44; break; } else { __label__ = 47; break; }
    case 44: 
      $need_separator=1;
      $printed_something=1;
      var $201=$2;
      var $202=$firstline;
      var $203=_print_sep($201, $202);
      var $204=(($203)|0)==-1;
      if ($204) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      $1=-1;
      __label__ = 120; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $208=$print;
      var $209=(($208)|0)!=0;
      if ($209) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $211=$2;
      var $212=$m;
      var $213=_mprint($211, $212);
      var $214=(($213)|0)==-1;
      if ($214) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      $1=-1;
      __label__ = 120; break;
    case 50: 
      var $217=$2;
      var $218=$m;
      var $219=_moffset($217, $218);
      var $220=$cont_level;
      var $221=$2;
      var $222=(($221+4)|0);
      var $223=(($222+4)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($224+($220<<4))|0);
      var $226=(($225)|0);
      HEAP32[(($226)>>2)]=$219;
      var $227=$2;
      var $228=$cont_level;
      var $229=((($228)+(1))|0);
      $cont_level=$229;
      var $230=_file_check_mem($227, $229);
      var $231=(($230)|0)==-1;
      if ($231) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      $1=-1;
      __label__ = 120; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $235=$magindex;
      var $236=((($235)+(1))|0);
      var $237=$3;
      var $238=(($237+($236)*(232))|0);
      var $239=(($238)|0);
      var $240=HEAPU16[(($239)>>1)];
      var $241=(($240)&65535);
      var $242=(($241)|0)!=0;
      if ($242) { __label__ = 54; break; } else { var $249 = 0;__label__ = 55; break; }
    case 54: 
      var $244=$magindex;
      var $245=((($244)+(1))|0);
      $magindex=$245;
      var $246=$4;
      var $247=(($245)>>>0) < (($246)>>>0);
      var $249 = $247;__label__ = 55; break;
    case 55: 
      var $249;
      if ($249) { __label__ = 56; break; } else { __label__ = 110; break; }
    case 56: 
      var $251=$magindex;
      var $252=$3;
      var $253=(($252+($251)*(232))|0);
      $m=$253;
      var $254=$m;
      var $255=(($254+20)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=$2;
      var $258=(($257+40)|0);
      HEAP32[(($258)>>2)]=$256;
      var $259=$cont_level;
      var $260=$m;
      var $261=(($260)|0);
      var $262=HEAPU16[(($261)>>1)];
      var $263=(($262)&65535);
      var $264=(($259)>>>0) < (($263)>>>0);
      if ($264) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      __label__ = 53; break;
    case 58: 
      var $267=$cont_level;
      var $268=$m;
      var $269=(($268)|0);
      var $270=HEAPU16[(($269)>>1)];
      var $271=(($270)&65535);
      var $272=(($267)>>>0) > (($271)>>>0);
      if ($272) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $274=$m;
      var $275=(($274)|0);
      var $276=HEAPU16[(($275)>>1)];
      var $277=(($276)&65535);
      $cont_level=$277;
      __label__ = 60; break;
    case 60: 
      var $279=$m;
      var $280=(($279+12)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=$2;
      var $283=(($282+20)|0);
      HEAP32[(($283)>>2)]=$281;
      var $284=$m;
      var $285=(($284+2)|0);
      var $286=HEAPU8[($285)];
      var $287=(($286)&255);
      var $288=$287 & 2;
      var $289=(($288)|0)!=0;
      if ($289) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $291=$cont_level;
      var $292=((($291)-(1))|0);
      var $293=$2;
      var $294=(($293+4)|0);
      var $295=(($294+4)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296+($292<<4))|0);
      var $298=(($297)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=$2;
      var $301=(($300+20)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=((($302)+($299))|0);
      HEAP32[(($301)>>2)]=$303;
      __label__ = 62; break;
    case 62: 
      var $305=$m;
      var $306=(($305+10)|0);
      var $307=HEAPU8[($306)];
      var $308=(($307)&255);
      var $309=(($308)|0)==3;
      if ($309) { __label__ = 64; break; } else { __label__ = 63; break; }
    case 63: 
      var $311=$m;
      var $312=(($311+10)|0);
      var $313=HEAPU8[($312)];
      var $314=(($313)&255);
      var $315=(($314)|0)==2;
      if ($315) { __label__ = 64; break; } else { __label__ = 67; break; }
    case 64: 
      var $317=$cont_level;
      var $318=$2;
      var $319=(($318+4)|0);
      var $320=(($319+4)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321+($317<<4))|0);
      var $323=(($322+8)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324)|0)==1;
      if ($325) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      __label__ = 53; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $329=$2;
      var $330=$5;
      var $331=$m;
      var $332=$6;
      var $333=$cont_level;
      var $334=$8;
      var $335=_mget($329, $330, $331, $332, $333, $334);
      if ((($335)|0) == -1) {
        __label__ = 68; break;
      }
      else if ((($335)|0) == 0) {
        __label__ = 69; break;
      }
      else {
      __label__ = 72; break;
      }
      
    case 68: 
      $1=-1;
      __label__ = 120; break;
    case 69: 
      var $338=$m;
      var $339=(($338+4)|0);
      var $340=HEAPU8[($339)];
      var $341=(($340)&255);
      var $342=(($341)|0)!=33;
      if ($342) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      __label__ = 53; break;
    case 71: 
      $flush=1;
      __label__ = 75; break;
    case 72: 
      var $346=$m;
      var $347=(($346+6)|0);
      var $348=HEAPU8[($347)];
      var $349=(($348)&255);
      var $350=(($349)|0)==41;
      if ($350) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      $returnval=1;
      __label__ = 74; break;
    case 74: 
      $flush=0;
      __label__ = 75; break;
    case 75: 
      var $354=$flush;
      var $355=(($354)|0)!=0;
      if ($355) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $362 = 1;__label__ = 78; break;
    case 77: 
      var $358=$2;
      var $359=$m;
      var $360=_magiccheck($358, $359);
      var $362 = $360;__label__ = 78; break;
    case 78: 
      var $362;
      if ((($362)|0) == -1) {
        __label__ = 79; break;
      }
      else if ((($362)|0) == 0) {
        __label__ = 80; break;
      }
      else {
      __label__ = 81; break;
      }
      
    case 79: 
      $1=-1;
      __label__ = 120; break;
    case 80: 
      var $365=$cont_level;
      var $366=$2;
      var $367=(($366+4)|0);
      var $368=(($367+4)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=(($369+($365<<4))|0);
      var $371=(($370+8)|0);
      HEAP32[(($371)>>2)]=0;
      __label__ = 109; break;
    case 81: 
      var $373=$cont_level;
      var $374=$2;
      var $375=(($374+4)|0);
      var $376=(($375+4)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=(($377+($373<<4))|0);
      var $379=(($378+8)|0);
      HEAP32[(($379)>>2)]=1;
      var $380=$m;
      var $381=(($380+6)|0);
      var $382=HEAPU8[($381)];
      var $383=(($382)&255);
      var $384=(($383)|0)!=3;
      if ($384) { __label__ = 82; break; } else { __label__ = 83; break; }
    case 82: 
      var $386=$cont_level;
      var $387=$2;
      var $388=(($387+4)|0);
      var $389=(($388+4)|0);
      var $390=HEAP32[(($389)>>2)];
      var $391=(($390+($386<<4))|0);
      var $392=(($391+4)|0);
      HEAP32[(($392)>>2)]=1;
      __label__ = 86; break;
    case 83: 
      var $394=$cont_level;
      var $395=$2;
      var $396=(($395+4)|0);
      var $397=(($396+4)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=(($398+($394<<4))|0);
      var $400=(($399+4)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=(($401)|0)!=0;
      if ($402) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $404=$cont_level;
      var $405=$2;
      var $406=(($405+4)|0);
      var $407=(($406+4)|0);
      var $408=HEAP32[(($407)>>2)];
      var $409=(($408+($404<<4))|0);
      var $410=(($409+4)|0);
      HEAP32[(($410)>>2)]=0;
      __label__ = 109; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      var $413=$2;
      var $414=$m;
      var $415=_handle_annotation($413, $414);
      $e=$415;
      var $416=(($415)|0)!=0;
      if ($416) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $418=$e;
      $1=$418;
      __label__ = 120; break;
    case 88: 
      var $420=$m;
      var $421=(($420+96)|0);
      var $422=(($421)|0);
      var $423=HEAP8[($422)];
      var $424=(($423 << 24) >> 24)!=0;
      if ($424) { __label__ = 89; break; } else { __label__ = 94; break; }
    case 89: 
      var $426=$printed_something;
      var $427=(($426)|0)!=0;
      if ($427) { __label__ = 93; break; } else { __label__ = 90; break; }
    case 90: 
      $printed_something=1;
      var $429=$2;
      var $430=$firstline;
      var $431=_print_sep($429, $430);
      var $432=(($431)|0)==-1;
      if ($432) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      $1=-1;
      __label__ = 120; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      __label__ = 94; break;
    case 94: 
      var $437=$need_separator;
      var $438=(($437)|0)!=0;
      if ($438) { __label__ = 95; break; } else { __label__ = 101; break; }
    case 95: 
      var $440=$m;
      var $441=(($440+2)|0);
      var $442=HEAPU8[($441)];
      var $443=(($442)&255);
      var $444=$443 & 16;
      var $445=(($444)|0)==0;
      if ($445) { __label__ = 96; break; } else { __label__ = 101; break; }
    case 96: 
      var $447=$m;
      var $448=(($447+96)|0);
      var $449=(($448)|0);
      var $450=HEAP8[($449)];
      var $451=(($450 << 24) >> 24);
      var $452=(($451)|0)!=0;
      if ($452) { __label__ = 97; break; } else { __label__ = 101; break; }
    case 97: 
      var $454=$print;
      var $455=(($454)|0)!=0;
      if ($455) { __label__ = 98; break; } else { __label__ = 100; break; }
    case 98: 
      var $457=$2;
      var $458=_file_printf($457, ((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $459=(($458)|0)==-1;
      if ($459) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      $1=-1;
      __label__ = 120; break;
    case 100: 
      $need_separator=0;
      __label__ = 101; break;
    case 101: 
      var $463=$print;
      var $464=(($463)|0)!=0;
      if ($464) { __label__ = 102; break; } else { __label__ = 104; break; }
    case 102: 
      var $466=$2;
      var $467=$m;
      var $468=_mprint($466, $467);
      var $469=(($468)|0)==-1;
      if ($469) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      $1=-1;
      __label__ = 120; break;
    case 104: 
      var $472=$2;
      var $473=$m;
      var $474=_moffset($472, $473);
      var $475=$cont_level;
      var $476=$2;
      var $477=(($476+4)|0);
      var $478=(($477+4)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=(($479+($475<<4))|0);
      var $481=(($480)|0);
      HEAP32[(($481)>>2)]=$474;
      var $482=$m;
      var $483=(($482+96)|0);
      var $484=(($483)|0);
      var $485=HEAP8[($484)];
      var $486=(($485 << 24) >> 24)!=0;
      if ($486) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: 
      $need_separator=1;
      __label__ = 106; break;
    case 106: 
      var $489=$2;
      var $490=$cont_level;
      var $491=((($490)+(1))|0);
      $cont_level=$491;
      var $492=_file_check_mem($489, $491);
      var $493=(($492)|0)==-1;
      if ($493) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      $1=-1;
      __label__ = 120; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 53; break;
    case 110: 
      var $498=$printed_something;
      var $499=(($498)|0)!=0;
      if ($499) { __label__ = 111; break; } else { __label__ = 114; break; }
    case 111: 
      $firstline=0;
      var $501=$print;
      var $502=(($501)|0)!=0;
      if ($502) { __label__ = 112; break; } else { __label__ = 113; break; }
    case 112: 
      $returnval=1;
      __label__ = 113; break;
    case 113: 
      __label__ = 114; break;
    case 114: 
      var $506=$2;
      var $507=(($506+28)|0);
      var $508=HEAP32[(($507)>>2)];
      var $509=$508 & 32;
      var $510=(($509)|0)==0;
      if ($510) { __label__ = 115; break; } else { __label__ = 117; break; }
    case 115: 
      var $512=$printed_something;
      var $513=(($512)|0)!=0;
      if ($513) { __label__ = 116; break; } else { __label__ = 117; break; }
    case 116: 
      var $515=$returnval;
      $1=$515;
      __label__ = 120; break;
    case 117: 
      __label__ = 118; break;
    case 118: 
      var $518=$magindex;
      var $519=((($518)+(1))|0);
      $magindex=$519;
      __label__ = 5; break;
    case 119: 
      var $521=$returnval;
      $1=$521;
      __label__ = 120; break;
    case 120: 
      var $523=$1;
      STACKTOP = __stackBase__;
      return $523;
    default: assert(0, "bad label: " + __label__);
  }
}
_match["X"]=1;

function _strndup($str, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $len;
      var $copy;
      $2=$str;
      $3=$n;
      $len=0;
      __label__ = 3; break;
    case 3: 
      var $5=$len;
      var $6=$3;
      var $7=(($5)>>>0) < (($6)>>>0);
      if ($7) { __label__ = 4; break; } else { var $16 = 0;__label__ = 5; break; }
    case 4: 
      var $9=$len;
      var $10=$2;
      var $11=(($10+$9)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=(($13)|0)!=0;
      var $16 = $14;__label__ = 5; break;
    case 5: 
      var $16;
      if ($16) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $19=$len;
      var $20=((($19)+(1))|0);
      $len=$20;
      __label__ = 3; break;
    case 8: 
      var $22=$len;
      var $23=((($22)+(1))|0);
      var $24=_malloc($23);
      $copy=$24;
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=0;
      __label__ = 11; break;
    case 10: 
      var $28=$copy;
      var $29=$2;
      var $30=$len;
      assert($30 % 1 === 0, 'memcpy given ' + $30 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($28, $29, $30, 1);
      var $31=$len;
      var $32=$copy;
      var $33=(($32+$31)|0);
      HEAP8[($33)]=0;
      var $34=$copy;
      $1=$34;
      __label__ = 11; break;
    case 11: 
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _mget($ms, $s, $m, $nbytes, $cont_level, $text) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $offset;
      var $count;
      var $p;
      var $off;
      var $q;
      $2=$ms;
      $3=$s;
      $4=$m;
      $5=$nbytes;
      $6=$cont_level;
      $7=$text;
      var $8=$2;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      $offset=$10;
      var $11=$4;
      var $12=(($11+24)|0);
      var $13=$12;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      $count=$15;
      var $16=$2;
      var $17=(($16+60)|0);
      $p=$17;
      var $18=$2;
      var $19=$p;
      var $20=$4;
      var $21=(($20+6)|0);
      var $22=HEAPU8[($21)];
      var $23=(($22)&255);
      var $24=$4;
      var $25=(($24+2)|0);
      var $26=HEAPU8[($25)];
      var $27=(($26)&255);
      var $28=$27 & 1;
      var $29=$3;
      var $30=$offset;
      var $31=$5;
      var $32=$count;
      var $33=_mcopy($18, $19, $23, $28, $29, $30, $31, $32);
      var $34=(($33)|0)==-1;
      if ($34) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 195; break;
    case 4: 
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & 1;
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $43=$offset;
      var $44=$p;
      var $45=$44;
      _mdebug($43, $45, 64);
      var $46=$4;
      _file_mdump($46);
      __label__ = 6; break;
    case 6: 
      var $48=$4;
      var $49=(($48+2)|0);
      var $50=HEAPU8[($49)];
      var $51=(($50)&255);
      var $52=$51 & 1;
      var $53=(($52)|0)!=0;
      if ($53) { __label__ = 7; break; } else { __label__ = 165; break; }
    case 7: 
      var $55=$4;
      var $56=(($55+16)|0);
      var $57=HEAP32[(($56)>>2)];
      $off=$57;
      var $58=$4;
      var $59=(($58+8)|0);
      var $60=HEAPU8[($59)];
      var $61=(($60)&255);
      var $62=$61 & 128;
      var $63=(($62)|0)!=0;
      if ($63) { __label__ = 8; break; } else { __label__ = 18; break; }
    case 8: 
      var $65=$3;
      var $66=$offset;
      var $67=(($65+$66)|0);
      var $68=$off;
      var $69=(($67+$68)|0);
      var $70=$69;
      $q=$70;
      var $71=$4;
      var $72=(($71+7)|0);
      var $73=HEAPU8[($72)];
      var $74=(($73)&255);
      if ((($74)|0) == 1) {
        __label__ = 9; break;
      }
      else if ((($74)|0) == 2) {
        __label__ = 10; break;
      }
      else if ((($74)|0) == 7) {
        __label__ = 11; break;
      }
      else if ((($74)|0) == 10) {
        __label__ = 12; break;
      }
      else if ((($74)|0) == 4) {
        __label__ = 13; break;
      }
      else if ((($74)|0) == 8 || (($74)|0) == 39) {
        __label__ = 14; break;
      }
      else if ((($74)|0) == 40 || (($74)|0) == 11) {
        __label__ = 15; break;
      }
      else if ((($74)|0) == 23) {
        __label__ = 16; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 9: 
      var $76=$q;
      var $77=$76;
      var $78=HEAPU8[($77)];
      var $79=(($78)&255);
      $off=$79;
      __label__ = 17; break;
    case 10: 
      var $81=$q;
      var $82=$81;
      var $83=HEAPU16[(($82)>>1)];
      var $84=(($83)&65535);
      $off=$84;
      __label__ = 17; break;
    case 11: 
      var $86=$q;
      var $87=$86;
      var $88=(($87)|0);
      var $89=HEAPU8[($88)];
      var $90=(($89)&255);
      var $91=$90 << 8;
      var $92=$q;
      var $93=$92;
      var $94=(($93+1)|0);
      var $95=HEAPU8[($94)];
      var $96=(($95)&255);
      var $97=$91 | $96;
      var $98=(($97) & 65535);
      var $99=(($98 << 16) >> 16);
      $off=$99;
      __label__ = 17; break;
    case 12: 
      var $101=$q;
      var $102=$101;
      var $103=(($102+1)|0);
      var $104=HEAPU8[($103)];
      var $105=(($104)&255);
      var $106=$105 << 8;
      var $107=$q;
      var $108=$107;
      var $109=(($108)|0);
      var $110=HEAPU8[($109)];
      var $111=(($110)&255);
      var $112=$106 | $111;
      var $113=(($112) & 65535);
      var $114=(($113 << 16) >> 16);
      $off=$114;
      __label__ = 17; break;
    case 13: 
      var $116=$q;
      var $117=$116;
      var $118=HEAP32[(($117)>>2)];
      $off=$118;
      __label__ = 17; break;
    case 14: 
      var $120=$q;
      var $121=$120;
      var $122=(($121)|0);
      var $123=HEAPU8[($122)];
      var $124=(($123)&255);
      var $125=$124 << 24;
      var $126=$q;
      var $127=$126;
      var $128=(($127+1)|0);
      var $129=HEAPU8[($128)];
      var $130=(($129)&255);
      var $131=$130 << 16;
      var $132=$125 | $131;
      var $133=$q;
      var $134=$133;
      var $135=(($134+2)|0);
      var $136=HEAPU8[($135)];
      var $137=(($136)&255);
      var $138=$137 << 8;
      var $139=$132 | $138;
      var $140=$q;
      var $141=$140;
      var $142=(($141+3)|0);
      var $143=HEAPU8[($142)];
      var $144=(($143)&255);
      var $145=$139 | $144;
      $off=$145;
      __label__ = 17; break;
    case 15: 
      var $147=$q;
      var $148=$147;
      var $149=(($148+3)|0);
      var $150=HEAPU8[($149)];
      var $151=(($150)&255);
      var $152=$151 << 24;
      var $153=$q;
      var $154=$153;
      var $155=(($154+2)|0);
      var $156=HEAPU8[($155)];
      var $157=(($156)&255);
      var $158=$157 << 16;
      var $159=$152 | $158;
      var $160=$q;
      var $161=$160;
      var $162=(($161+1)|0);
      var $163=HEAPU8[($162)];
      var $164=(($163)&255);
      var $165=$164 << 8;
      var $166=$159 | $165;
      var $167=$q;
      var $168=$167;
      var $169=(($168)|0);
      var $170=HEAPU8[($169)];
      var $171=(($170)&255);
      var $172=$166 | $171;
      $off=$172;
      __label__ = 17; break;
    case 16: 
      var $174=$q;
      var $175=$174;
      var $176=(($175+1)|0);
      var $177=HEAPU8[($176)];
      var $178=(($177)&255);
      var $179=$178 << 24;
      var $180=$q;
      var $181=$180;
      var $182=(($181)|0);
      var $183=HEAPU8[($182)];
      var $184=(($183)&255);
      var $185=$184 << 16;
      var $186=$179 | $185;
      var $187=$q;
      var $188=$187;
      var $189=(($188+3)|0);
      var $190=HEAPU8[($189)];
      var $191=(($190)&255);
      var $192=$191 << 8;
      var $193=$186 | $192;
      var $194=$q;
      var $195=$194;
      var $196=(($195+2)|0);
      var $197=HEAPU8[($196)];
      var $198=(($197)&255);
      var $199=$193 | $198;
      $off=$199;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $202=$4;
      var $203=(($202+7)|0);
      var $204=HEAPU8[($203)];
      var $205=(($204)&255);
      if ((($205)|0) == 1) {
        __label__ = 19; break;
      }
      else if ((($205)|0) == 7) {
        __label__ = 36; break;
      }
      else if ((($205)|0) == 10) {
        __label__ = 53; break;
      }
      else if ((($205)|0) == 2) {
        __label__ = 70; break;
      }
      else if ((($205)|0) == 8 || (($205)|0) == 39) {
        __label__ = 87; break;
      }
      else if ((($205)|0) == 11 || (($205)|0) == 40) {
        __label__ = 104; break;
      }
      else if ((($205)|0) == 23) {
        __label__ = 121; break;
      }
      else if ((($205)|0) == 4) {
        __label__ = 138; break;
      }
      else {
      __label__ = 155; break;
      }
      
    case 19: 
      var $207=$5;
      var $208=$offset;
      var $209=((($208)+(1))|0);
      var $210=(($207)>>>0) < (($209)>>>0);
      if ($210) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $1=0;
      __label__ = 195; break;
    case 21: 
      var $213=$off;
      var $214=(($213)|0)!=0;
      if ($214) { __label__ = 22; break; } else { __label__ = 32; break; }
    case 22: 
      var $216=$4;
      var $217=(($216+8)|0);
      var $218=HEAPU8[($217)];
      var $219=(($218)&255);
      var $220=$219 & 7;
      if ((($220)|0) == 0) {
        __label__ = 23; break;
      }
      else if ((($220)|0) == 1) {
        __label__ = 24; break;
      }
      else if ((($220)|0) == 2) {
        __label__ = 25; break;
      }
      else if ((($220)|0) == 3) {
        __label__ = 26; break;
      }
      else if ((($220)|0) == 4) {
        __label__ = 27; break;
      }
      else if ((($220)|0) == 5) {
        __label__ = 28; break;
      }
      else if ((($220)|0) == 6) {
        __label__ = 29; break;
      }
      else if ((($220)|0) == 7) {
        __label__ = 30; break;
      }
      else {
      __label__ = 31; break;
      }
      
    case 23: 
      var $222=$p;
      var $223=$222;
      var $224=HEAPU8[($223)];
      var $225=(($224)&255);
      var $226=$off;
      var $227=$225 & $226;
      $offset=$227;
      __label__ = 31; break;
    case 24: 
      var $229=$p;
      var $230=$229;
      var $231=HEAPU8[($230)];
      var $232=(($231)&255);
      var $233=$off;
      var $234=$232 | $233;
      $offset=$234;
      __label__ = 31; break;
    case 25: 
      var $236=$p;
      var $237=$236;
      var $238=HEAPU8[($237)];
      var $239=(($238)&255);
      var $240=$off;
      var $241=$239 ^ $240;
      $offset=$241;
      __label__ = 31; break;
    case 26: 
      var $243=$p;
      var $244=$243;
      var $245=HEAPU8[($244)];
      var $246=(($245)&255);
      var $247=$off;
      var $248=((($246)+($247))|0);
      $offset=$248;
      __label__ = 31; break;
    case 27: 
      var $250=$p;
      var $251=$250;
      var $252=HEAPU8[($251)];
      var $253=(($252)&255);
      var $254=$off;
      var $255=((($253)-($254))|0);
      $offset=$255;
      __label__ = 31; break;
    case 28: 
      var $257=$p;
      var $258=$257;
      var $259=HEAPU8[($258)];
      var $260=(($259)&255);
      var $261=$off;
      var $262=((($260)*($261))|0);
      $offset=$262;
      __label__ = 31; break;
    case 29: 
      var $264=$p;
      var $265=$264;
      var $266=HEAPU8[($265)];
      var $267=(($266)&255);
      var $268=$off;
      var $269=((((($267)|0))/((($268)|0)))&-1);
      $offset=$269;
      __label__ = 31; break;
    case 30: 
      var $271=$p;
      var $272=$271;
      var $273=HEAPU8[($272)];
      var $274=(($273)&255);
      var $275=$off;
      var $276=((($274)|0))%((($275)|0));
      $offset=$276;
      __label__ = 31; break;
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $279=$p;
      var $280=$279;
      var $281=HEAPU8[($280)];
      var $282=(($281)&255);
      $offset=$282;
      __label__ = 33; break;
    case 33: 
      var $284=$4;
      var $285=(($284+8)|0);
      var $286=HEAPU8[($285)];
      var $287=(($286)&255);
      var $288=$287 & 64;
      var $289=(($288)|0)!=0;
      if ($289) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $291=$offset;
      var $292=$291 ^ -1;
      $offset=$292;
      __label__ = 35; break;
    case 35: 
      __label__ = 155; break;
    case 36: 
      var $295=$5;
      var $296=$offset;
      var $297=((($296)+(2))|0);
      var $298=(($295)>>>0) < (($297)>>>0);
      if ($298) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      $1=0;
      __label__ = 195; break;
    case 38: 
      var $301=$off;
      var $302=(($301)|0)!=0;
      if ($302) { __label__ = 39; break; } else { __label__ = 49; break; }
    case 39: 
      var $304=$4;
      var $305=(($304+8)|0);
      var $306=HEAPU8[($305)];
      var $307=(($306)&255);
      var $308=$307 & 7;
      if ((($308)|0) == 0) {
        __label__ = 40; break;
      }
      else if ((($308)|0) == 1) {
        __label__ = 41; break;
      }
      else if ((($308)|0) == 2) {
        __label__ = 42; break;
      }
      else if ((($308)|0) == 3) {
        __label__ = 43; break;
      }
      else if ((($308)|0) == 4) {
        __label__ = 44; break;
      }
      else if ((($308)|0) == 5) {
        __label__ = 45; break;
      }
      else if ((($308)|0) == 6) {
        __label__ = 46; break;
      }
      else if ((($308)|0) == 7) {
        __label__ = 47; break;
      }
      else {
      __label__ = 48; break;
      }
      
    case 40: 
      var $310=$p;
      var $311=$310;
      var $312=(($311)|0);
      var $313=HEAPU8[($312)];
      var $314=(($313)&255);
      var $315=$314 << 8;
      var $316=$p;
      var $317=$316;
      var $318=(($317+1)|0);
      var $319=HEAPU8[($318)];
      var $320=(($319)&255);
      var $321=$315 | $320;
      var $322=(($321) & 65535);
      var $323=(($322 << 16) >> 16);
      var $324=$off;
      var $325=$323 & $324;
      $offset=$325;
      __label__ = 48; break;
    case 41: 
      var $327=$p;
      var $328=$327;
      var $329=(($328)|0);
      var $330=HEAPU8[($329)];
      var $331=(($330)&255);
      var $332=$331 << 8;
      var $333=$p;
      var $334=$333;
      var $335=(($334+1)|0);
      var $336=HEAPU8[($335)];
      var $337=(($336)&255);
      var $338=$332 | $337;
      var $339=(($338) & 65535);
      var $340=(($339 << 16) >> 16);
      var $341=$off;
      var $342=$340 | $341;
      $offset=$342;
      __label__ = 48; break;
    case 42: 
      var $344=$p;
      var $345=$344;
      var $346=(($345)|0);
      var $347=HEAPU8[($346)];
      var $348=(($347)&255);
      var $349=$348 << 8;
      var $350=$p;
      var $351=$350;
      var $352=(($351+1)|0);
      var $353=HEAPU8[($352)];
      var $354=(($353)&255);
      var $355=$349 | $354;
      var $356=(($355) & 65535);
      var $357=(($356 << 16) >> 16);
      var $358=$off;
      var $359=$357 ^ $358;
      $offset=$359;
      __label__ = 48; break;
    case 43: 
      var $361=$p;
      var $362=$361;
      var $363=(($362)|0);
      var $364=HEAPU8[($363)];
      var $365=(($364)&255);
      var $366=$365 << 8;
      var $367=$p;
      var $368=$367;
      var $369=(($368+1)|0);
      var $370=HEAPU8[($369)];
      var $371=(($370)&255);
      var $372=$366 | $371;
      var $373=(($372) & 65535);
      var $374=(($373 << 16) >> 16);
      var $375=$off;
      var $376=((($374)+($375))|0);
      $offset=$376;
      __label__ = 48; break;
    case 44: 
      var $378=$p;
      var $379=$378;
      var $380=(($379)|0);
      var $381=HEAPU8[($380)];
      var $382=(($381)&255);
      var $383=$382 << 8;
      var $384=$p;
      var $385=$384;
      var $386=(($385+1)|0);
      var $387=HEAPU8[($386)];
      var $388=(($387)&255);
      var $389=$383 | $388;
      var $390=(($389) & 65535);
      var $391=(($390 << 16) >> 16);
      var $392=$off;
      var $393=((($391)-($392))|0);
      $offset=$393;
      __label__ = 48; break;
    case 45: 
      var $395=$p;
      var $396=$395;
      var $397=(($396)|0);
      var $398=HEAPU8[($397)];
      var $399=(($398)&255);
      var $400=$399 << 8;
      var $401=$p;
      var $402=$401;
      var $403=(($402+1)|0);
      var $404=HEAPU8[($403)];
      var $405=(($404)&255);
      var $406=$400 | $405;
      var $407=(($406) & 65535);
      var $408=(($407 << 16) >> 16);
      var $409=$off;
      var $410=((($408)*($409))|0);
      $offset=$410;
      __label__ = 48; break;
    case 46: 
      var $412=$p;
      var $413=$412;
      var $414=(($413)|0);
      var $415=HEAPU8[($414)];
      var $416=(($415)&255);
      var $417=$416 << 8;
      var $418=$p;
      var $419=$418;
      var $420=(($419+1)|0);
      var $421=HEAPU8[($420)];
      var $422=(($421)&255);
      var $423=$417 | $422;
      var $424=(($423) & 65535);
      var $425=(($424 << 16) >> 16);
      var $426=$off;
      var $427=((((($425)|0))/((($426)|0)))&-1);
      $offset=$427;
      __label__ = 48; break;
    case 47: 
      var $429=$p;
      var $430=$429;
      var $431=(($430)|0);
      var $432=HEAPU8[($431)];
      var $433=(($432)&255);
      var $434=$433 << 8;
      var $435=$p;
      var $436=$435;
      var $437=(($436+1)|0);
      var $438=HEAPU8[($437)];
      var $439=(($438)&255);
      var $440=$434 | $439;
      var $441=(($440) & 65535);
      var $442=(($441 << 16) >> 16);
      var $443=$off;
      var $444=((($442)|0))%((($443)|0));
      $offset=$444;
      __label__ = 48; break;
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $447=$p;
      var $448=$447;
      var $449=(($448)|0);
      var $450=HEAPU8[($449)];
      var $451=(($450)&255);
      var $452=$451 << 8;
      var $453=$p;
      var $454=$453;
      var $455=(($454+1)|0);
      var $456=HEAPU8[($455)];
      var $457=(($456)&255);
      var $458=$452 | $457;
      var $459=(($458) & 65535);
      var $460=(($459 << 16) >> 16);
      $offset=$460;
      __label__ = 50; break;
    case 50: 
      var $462=$4;
      var $463=(($462+8)|0);
      var $464=HEAPU8[($463)];
      var $465=(($464)&255);
      var $466=$465 & 64;
      var $467=(($466)|0)!=0;
      if ($467) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $469=$offset;
      var $470=$469 ^ -1;
      $offset=$470;
      __label__ = 52; break;
    case 52: 
      __label__ = 155; break;
    case 53: 
      var $473=$5;
      var $474=$offset;
      var $475=((($474)+(2))|0);
      var $476=(($473)>>>0) < (($475)>>>0);
      if ($476) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      $1=0;
      __label__ = 195; break;
    case 55: 
      var $479=$off;
      var $480=(($479)|0)!=0;
      if ($480) { __label__ = 56; break; } else { __label__ = 66; break; }
    case 56: 
      var $482=$4;
      var $483=(($482+8)|0);
      var $484=HEAPU8[($483)];
      var $485=(($484)&255);
      var $486=$485 & 7;
      if ((($486)|0) == 0) {
        __label__ = 57; break;
      }
      else if ((($486)|0) == 1) {
        __label__ = 58; break;
      }
      else if ((($486)|0) == 2) {
        __label__ = 59; break;
      }
      else if ((($486)|0) == 3) {
        __label__ = 60; break;
      }
      else if ((($486)|0) == 4) {
        __label__ = 61; break;
      }
      else if ((($486)|0) == 5) {
        __label__ = 62; break;
      }
      else if ((($486)|0) == 6) {
        __label__ = 63; break;
      }
      else if ((($486)|0) == 7) {
        __label__ = 64; break;
      }
      else {
      __label__ = 65; break;
      }
      
    case 57: 
      var $488=$p;
      var $489=$488;
      var $490=(($489+1)|0);
      var $491=HEAPU8[($490)];
      var $492=(($491)&255);
      var $493=$492 << 8;
      var $494=$p;
      var $495=$494;
      var $496=(($495)|0);
      var $497=HEAPU8[($496)];
      var $498=(($497)&255);
      var $499=$493 | $498;
      var $500=(($499) & 65535);
      var $501=(($500 << 16) >> 16);
      var $502=$off;
      var $503=$501 & $502;
      $offset=$503;
      __label__ = 65; break;
    case 58: 
      var $505=$p;
      var $506=$505;
      var $507=(($506+1)|0);
      var $508=HEAPU8[($507)];
      var $509=(($508)&255);
      var $510=$509 << 8;
      var $511=$p;
      var $512=$511;
      var $513=(($512)|0);
      var $514=HEAPU8[($513)];
      var $515=(($514)&255);
      var $516=$510 | $515;
      var $517=(($516) & 65535);
      var $518=(($517 << 16) >> 16);
      var $519=$off;
      var $520=$518 | $519;
      $offset=$520;
      __label__ = 65; break;
    case 59: 
      var $522=$p;
      var $523=$522;
      var $524=(($523+1)|0);
      var $525=HEAPU8[($524)];
      var $526=(($525)&255);
      var $527=$526 << 8;
      var $528=$p;
      var $529=$528;
      var $530=(($529)|0);
      var $531=HEAPU8[($530)];
      var $532=(($531)&255);
      var $533=$527 | $532;
      var $534=(($533) & 65535);
      var $535=(($534 << 16) >> 16);
      var $536=$off;
      var $537=$535 ^ $536;
      $offset=$537;
      __label__ = 65; break;
    case 60: 
      var $539=$p;
      var $540=$539;
      var $541=(($540+1)|0);
      var $542=HEAPU8[($541)];
      var $543=(($542)&255);
      var $544=$543 << 8;
      var $545=$p;
      var $546=$545;
      var $547=(($546)|0);
      var $548=HEAPU8[($547)];
      var $549=(($548)&255);
      var $550=$544 | $549;
      var $551=(($550) & 65535);
      var $552=(($551 << 16) >> 16);
      var $553=$off;
      var $554=((($552)+($553))|0);
      $offset=$554;
      __label__ = 65; break;
    case 61: 
      var $556=$p;
      var $557=$556;
      var $558=(($557+1)|0);
      var $559=HEAPU8[($558)];
      var $560=(($559)&255);
      var $561=$560 << 8;
      var $562=$p;
      var $563=$562;
      var $564=(($563)|0);
      var $565=HEAPU8[($564)];
      var $566=(($565)&255);
      var $567=$561 | $566;
      var $568=(($567) & 65535);
      var $569=(($568 << 16) >> 16);
      var $570=$off;
      var $571=((($569)-($570))|0);
      $offset=$571;
      __label__ = 65; break;
    case 62: 
      var $573=$p;
      var $574=$573;
      var $575=(($574+1)|0);
      var $576=HEAPU8[($575)];
      var $577=(($576)&255);
      var $578=$577 << 8;
      var $579=$p;
      var $580=$579;
      var $581=(($580)|0);
      var $582=HEAPU8[($581)];
      var $583=(($582)&255);
      var $584=$578 | $583;
      var $585=(($584) & 65535);
      var $586=(($585 << 16) >> 16);
      var $587=$off;
      var $588=((($586)*($587))|0);
      $offset=$588;
      __label__ = 65; break;
    case 63: 
      var $590=$p;
      var $591=$590;
      var $592=(($591+1)|0);
      var $593=HEAPU8[($592)];
      var $594=(($593)&255);
      var $595=$594 << 8;
      var $596=$p;
      var $597=$596;
      var $598=(($597)|0);
      var $599=HEAPU8[($598)];
      var $600=(($599)&255);
      var $601=$595 | $600;
      var $602=(($601) & 65535);
      var $603=(($602 << 16) >> 16);
      var $604=$off;
      var $605=((((($603)|0))/((($604)|0)))&-1);
      $offset=$605;
      __label__ = 65; break;
    case 64: 
      var $607=$p;
      var $608=$607;
      var $609=(($608+1)|0);
      var $610=HEAPU8[($609)];
      var $611=(($610)&255);
      var $612=$611 << 8;
      var $613=$p;
      var $614=$613;
      var $615=(($614)|0);
      var $616=HEAPU8[($615)];
      var $617=(($616)&255);
      var $618=$612 | $617;
      var $619=(($618) & 65535);
      var $620=(($619 << 16) >> 16);
      var $621=$off;
      var $622=((($620)|0))%((($621)|0));
      $offset=$622;
      __label__ = 65; break;
    case 65: 
      __label__ = 67; break;
    case 66: 
      var $625=$p;
      var $626=$625;
      var $627=(($626+1)|0);
      var $628=HEAPU8[($627)];
      var $629=(($628)&255);
      var $630=$629 << 8;
      var $631=$p;
      var $632=$631;
      var $633=(($632)|0);
      var $634=HEAPU8[($633)];
      var $635=(($634)&255);
      var $636=$630 | $635;
      var $637=(($636) & 65535);
      var $638=(($637 << 16) >> 16);
      $offset=$638;
      __label__ = 67; break;
    case 67: 
      var $640=$4;
      var $641=(($640+8)|0);
      var $642=HEAPU8[($641)];
      var $643=(($642)&255);
      var $644=$643 & 64;
      var $645=(($644)|0)!=0;
      if ($645) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $647=$offset;
      var $648=$647 ^ -1;
      $offset=$648;
      __label__ = 69; break;
    case 69: 
      __label__ = 155; break;
    case 70: 
      var $651=$5;
      var $652=$offset;
      var $653=((($652)+(2))|0);
      var $654=(($651)>>>0) < (($653)>>>0);
      if ($654) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      $1=0;
      __label__ = 195; break;
    case 72: 
      var $657=$off;
      var $658=(($657)|0)!=0;
      if ($658) { __label__ = 73; break; } else { __label__ = 83; break; }
    case 73: 
      var $660=$4;
      var $661=(($660+8)|0);
      var $662=HEAPU8[($661)];
      var $663=(($662)&255);
      var $664=$663 & 7;
      if ((($664)|0) == 0) {
        __label__ = 74; break;
      }
      else if ((($664)|0) == 1) {
        __label__ = 75; break;
      }
      else if ((($664)|0) == 2) {
        __label__ = 76; break;
      }
      else if ((($664)|0) == 3) {
        __label__ = 77; break;
      }
      else if ((($664)|0) == 4) {
        __label__ = 78; break;
      }
      else if ((($664)|0) == 5) {
        __label__ = 79; break;
      }
      else if ((($664)|0) == 6) {
        __label__ = 80; break;
      }
      else if ((($664)|0) == 7) {
        __label__ = 81; break;
      }
      else {
      __label__ = 82; break;
      }
      
    case 74: 
      var $666=$p;
      var $667=$666;
      var $668=HEAPU16[(($667)>>1)];
      var $669=(($668)&65535);
      var $670=$off;
      var $671=$669 & $670;
      $offset=$671;
      __label__ = 82; break;
    case 75: 
      var $673=$p;
      var $674=$673;
      var $675=HEAPU16[(($674)>>1)];
      var $676=(($675)&65535);
      var $677=$off;
      var $678=$676 | $677;
      $offset=$678;
      __label__ = 82; break;
    case 76: 
      var $680=$p;
      var $681=$680;
      var $682=HEAPU16[(($681)>>1)];
      var $683=(($682)&65535);
      var $684=$off;
      var $685=$683 ^ $684;
      $offset=$685;
      __label__ = 82; break;
    case 77: 
      var $687=$p;
      var $688=$687;
      var $689=HEAPU16[(($688)>>1)];
      var $690=(($689)&65535);
      var $691=$off;
      var $692=((($690)+($691))|0);
      $offset=$692;
      __label__ = 82; break;
    case 78: 
      var $694=$p;
      var $695=$694;
      var $696=HEAPU16[(($695)>>1)];
      var $697=(($696)&65535);
      var $698=$off;
      var $699=((($697)-($698))|0);
      $offset=$699;
      __label__ = 82; break;
    case 79: 
      var $701=$p;
      var $702=$701;
      var $703=HEAPU16[(($702)>>1)];
      var $704=(($703)&65535);
      var $705=$off;
      var $706=((($704)*($705))|0);
      $offset=$706;
      __label__ = 82; break;
    case 80: 
      var $708=$p;
      var $709=$708;
      var $710=HEAPU16[(($709)>>1)];
      var $711=(($710)&65535);
      var $712=$off;
      var $713=((((($711)|0))/((($712)|0)))&-1);
      $offset=$713;
      __label__ = 82; break;
    case 81: 
      var $715=$p;
      var $716=$715;
      var $717=HEAPU16[(($716)>>1)];
      var $718=(($717)&65535);
      var $719=$off;
      var $720=((($718)|0))%((($719)|0));
      $offset=$720;
      __label__ = 82; break;
    case 82: 
      __label__ = 84; break;
    case 83: 
      var $723=$p;
      var $724=$723;
      var $725=HEAPU16[(($724)>>1)];
      var $726=(($725)&65535);
      $offset=$726;
      __label__ = 84; break;
    case 84: 
      var $728=$4;
      var $729=(($728+8)|0);
      var $730=HEAPU8[($729)];
      var $731=(($730)&255);
      var $732=$731 & 64;
      var $733=(($732)|0)!=0;
      if ($733) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      var $735=$offset;
      var $736=$735 ^ -1;
      $offset=$736;
      __label__ = 86; break;
    case 86: 
      __label__ = 155; break;
    case 87: 
      var $739=$5;
      var $740=$offset;
      var $741=((($740)+(4))|0);
      var $742=(($739)>>>0) < (($741)>>>0);
      if ($742) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      $1=0;
      __label__ = 195; break;
    case 89: 
      var $745=$off;
      var $746=(($745)|0)!=0;
      if ($746) { __label__ = 90; break; } else { __label__ = 100; break; }
    case 90: 
      var $748=$4;
      var $749=(($748+8)|0);
      var $750=HEAPU8[($749)];
      var $751=(($750)&255);
      var $752=$751 & 7;
      if ((($752)|0) == 0) {
        __label__ = 91; break;
      }
      else if ((($752)|0) == 1) {
        __label__ = 92; break;
      }
      else if ((($752)|0) == 2) {
        __label__ = 93; break;
      }
      else if ((($752)|0) == 3) {
        __label__ = 94; break;
      }
      else if ((($752)|0) == 4) {
        __label__ = 95; break;
      }
      else if ((($752)|0) == 5) {
        __label__ = 96; break;
      }
      else if ((($752)|0) == 6) {
        __label__ = 97; break;
      }
      else if ((($752)|0) == 7) {
        __label__ = 98; break;
      }
      else {
      __label__ = 99; break;
      }
      
    case 91: 
      var $754=$p;
      var $755=$754;
      var $756=(($755)|0);
      var $757=HEAPU8[($756)];
      var $758=(($757)&255);
      var $759=$758 << 24;
      var $760=$p;
      var $761=$760;
      var $762=(($761+1)|0);
      var $763=HEAPU8[($762)];
      var $764=(($763)&255);
      var $765=$764 << 16;
      var $766=$759 | $765;
      var $767=$p;
      var $768=$767;
      var $769=(($768+2)|0);
      var $770=HEAPU8[($769)];
      var $771=(($770)&255);
      var $772=$771 << 8;
      var $773=$766 | $772;
      var $774=$p;
      var $775=$774;
      var $776=(($775+3)|0);
      var $777=HEAPU8[($776)];
      var $778=(($777)&255);
      var $779=$773 | $778;
      var $780=$off;
      var $781=$779 & $780;
      $offset=$781;
      __label__ = 99; break;
    case 92: 
      var $783=$p;
      var $784=$783;
      var $785=(($784)|0);
      var $786=HEAPU8[($785)];
      var $787=(($786)&255);
      var $788=$787 << 24;
      var $789=$p;
      var $790=$789;
      var $791=(($790+1)|0);
      var $792=HEAPU8[($791)];
      var $793=(($792)&255);
      var $794=$793 << 16;
      var $795=$788 | $794;
      var $796=$p;
      var $797=$796;
      var $798=(($797+2)|0);
      var $799=HEAPU8[($798)];
      var $800=(($799)&255);
      var $801=$800 << 8;
      var $802=$795 | $801;
      var $803=$p;
      var $804=$803;
      var $805=(($804+3)|0);
      var $806=HEAPU8[($805)];
      var $807=(($806)&255);
      var $808=$802 | $807;
      var $809=$off;
      var $810=$808 | $809;
      $offset=$810;
      __label__ = 99; break;
    case 93: 
      var $812=$p;
      var $813=$812;
      var $814=(($813)|0);
      var $815=HEAPU8[($814)];
      var $816=(($815)&255);
      var $817=$816 << 24;
      var $818=$p;
      var $819=$818;
      var $820=(($819+1)|0);
      var $821=HEAPU8[($820)];
      var $822=(($821)&255);
      var $823=$822 << 16;
      var $824=$817 | $823;
      var $825=$p;
      var $826=$825;
      var $827=(($826+2)|0);
      var $828=HEAPU8[($827)];
      var $829=(($828)&255);
      var $830=$829 << 8;
      var $831=$824 | $830;
      var $832=$p;
      var $833=$832;
      var $834=(($833+3)|0);
      var $835=HEAPU8[($834)];
      var $836=(($835)&255);
      var $837=$831 | $836;
      var $838=$off;
      var $839=$837 ^ $838;
      $offset=$839;
      __label__ = 99; break;
    case 94: 
      var $841=$p;
      var $842=$841;
      var $843=(($842)|0);
      var $844=HEAPU8[($843)];
      var $845=(($844)&255);
      var $846=$845 << 24;
      var $847=$p;
      var $848=$847;
      var $849=(($848+1)|0);
      var $850=HEAPU8[($849)];
      var $851=(($850)&255);
      var $852=$851 << 16;
      var $853=$846 | $852;
      var $854=$p;
      var $855=$854;
      var $856=(($855+2)|0);
      var $857=HEAPU8[($856)];
      var $858=(($857)&255);
      var $859=$858 << 8;
      var $860=$853 | $859;
      var $861=$p;
      var $862=$861;
      var $863=(($862+3)|0);
      var $864=HEAPU8[($863)];
      var $865=(($864)&255);
      var $866=$860 | $865;
      var $867=$off;
      var $868=((($866)+($867))|0);
      $offset=$868;
      __label__ = 99; break;
    case 95: 
      var $870=$p;
      var $871=$870;
      var $872=(($871)|0);
      var $873=HEAPU8[($872)];
      var $874=(($873)&255);
      var $875=$874 << 24;
      var $876=$p;
      var $877=$876;
      var $878=(($877+1)|0);
      var $879=HEAPU8[($878)];
      var $880=(($879)&255);
      var $881=$880 << 16;
      var $882=$875 | $881;
      var $883=$p;
      var $884=$883;
      var $885=(($884+2)|0);
      var $886=HEAPU8[($885)];
      var $887=(($886)&255);
      var $888=$887 << 8;
      var $889=$882 | $888;
      var $890=$p;
      var $891=$890;
      var $892=(($891+3)|0);
      var $893=HEAPU8[($892)];
      var $894=(($893)&255);
      var $895=$889 | $894;
      var $896=$off;
      var $897=((($895)-($896))|0);
      $offset=$897;
      __label__ = 99; break;
    case 96: 
      var $899=$p;
      var $900=$899;
      var $901=(($900)|0);
      var $902=HEAPU8[($901)];
      var $903=(($902)&255);
      var $904=$903 << 24;
      var $905=$p;
      var $906=$905;
      var $907=(($906+1)|0);
      var $908=HEAPU8[($907)];
      var $909=(($908)&255);
      var $910=$909 << 16;
      var $911=$904 | $910;
      var $912=$p;
      var $913=$912;
      var $914=(($913+2)|0);
      var $915=HEAPU8[($914)];
      var $916=(($915)&255);
      var $917=$916 << 8;
      var $918=$911 | $917;
      var $919=$p;
      var $920=$919;
      var $921=(($920+3)|0);
      var $922=HEAPU8[($921)];
      var $923=(($922)&255);
      var $924=$918 | $923;
      var $925=$off;
      var $926=((($924)*($925))|0);
      $offset=$926;
      __label__ = 99; break;
    case 97: 
      var $928=$p;
      var $929=$928;
      var $930=(($929)|0);
      var $931=HEAPU8[($930)];
      var $932=(($931)&255);
      var $933=$932 << 24;
      var $934=$p;
      var $935=$934;
      var $936=(($935+1)|0);
      var $937=HEAPU8[($936)];
      var $938=(($937)&255);
      var $939=$938 << 16;
      var $940=$933 | $939;
      var $941=$p;
      var $942=$941;
      var $943=(($942+2)|0);
      var $944=HEAPU8[($943)];
      var $945=(($944)&255);
      var $946=$945 << 8;
      var $947=$940 | $946;
      var $948=$p;
      var $949=$948;
      var $950=(($949+3)|0);
      var $951=HEAPU8[($950)];
      var $952=(($951)&255);
      var $953=$947 | $952;
      var $954=$off;
      var $955=((((($953)|0))/((($954)|0)))&-1);
      $offset=$955;
      __label__ = 99; break;
    case 98: 
      var $957=$p;
      var $958=$957;
      var $959=(($958)|0);
      var $960=HEAPU8[($959)];
      var $961=(($960)&255);
      var $962=$961 << 24;
      var $963=$p;
      var $964=$963;
      var $965=(($964+1)|0);
      var $966=HEAPU8[($965)];
      var $967=(($966)&255);
      var $968=$967 << 16;
      var $969=$962 | $968;
      var $970=$p;
      var $971=$970;
      var $972=(($971+2)|0);
      var $973=HEAPU8[($972)];
      var $974=(($973)&255);
      var $975=$974 << 8;
      var $976=$969 | $975;
      var $977=$p;
      var $978=$977;
      var $979=(($978+3)|0);
      var $980=HEAPU8[($979)];
      var $981=(($980)&255);
      var $982=$976 | $981;
      var $983=$off;
      var $984=((($982)|0))%((($983)|0));
      $offset=$984;
      __label__ = 99; break;
    case 99: 
      __label__ = 101; break;
    case 100: 
      var $987=$p;
      var $988=$987;
      var $989=(($988)|0);
      var $990=HEAPU8[($989)];
      var $991=(($990)&255);
      var $992=$991 << 24;
      var $993=$p;
      var $994=$993;
      var $995=(($994+1)|0);
      var $996=HEAPU8[($995)];
      var $997=(($996)&255);
      var $998=$997 << 16;
      var $999=$992 | $998;
      var $1000=$p;
      var $1001=$1000;
      var $1002=(($1001+2)|0);
      var $1003=HEAPU8[($1002)];
      var $1004=(($1003)&255);
      var $1005=$1004 << 8;
      var $1006=$999 | $1005;
      var $1007=$p;
      var $1008=$1007;
      var $1009=(($1008+3)|0);
      var $1010=HEAPU8[($1009)];
      var $1011=(($1010)&255);
      var $1012=$1006 | $1011;
      $offset=$1012;
      __label__ = 101; break;
    case 101: 
      var $1014=$4;
      var $1015=(($1014+8)|0);
      var $1016=HEAPU8[($1015)];
      var $1017=(($1016)&255);
      var $1018=$1017 & 64;
      var $1019=(($1018)|0)!=0;
      if ($1019) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: 
      var $1021=$offset;
      var $1022=$1021 ^ -1;
      $offset=$1022;
      __label__ = 103; break;
    case 103: 
      __label__ = 155; break;
    case 104: 
      var $1025=$5;
      var $1026=$offset;
      var $1027=((($1026)+(4))|0);
      var $1028=(($1025)>>>0) < (($1027)>>>0);
      if ($1028) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: 
      $1=0;
      __label__ = 195; break;
    case 106: 
      var $1031=$off;
      var $1032=(($1031)|0)!=0;
      if ($1032) { __label__ = 107; break; } else { __label__ = 117; break; }
    case 107: 
      var $1034=$4;
      var $1035=(($1034+8)|0);
      var $1036=HEAPU8[($1035)];
      var $1037=(($1036)&255);
      var $1038=$1037 & 7;
      if ((($1038)|0) == 0) {
        __label__ = 108; break;
      }
      else if ((($1038)|0) == 1) {
        __label__ = 109; break;
      }
      else if ((($1038)|0) == 2) {
        __label__ = 110; break;
      }
      else if ((($1038)|0) == 3) {
        __label__ = 111; break;
      }
      else if ((($1038)|0) == 4) {
        __label__ = 112; break;
      }
      else if ((($1038)|0) == 5) {
        __label__ = 113; break;
      }
      else if ((($1038)|0) == 6) {
        __label__ = 114; break;
      }
      else if ((($1038)|0) == 7) {
        __label__ = 115; break;
      }
      else {
      __label__ = 116; break;
      }
      
    case 108: 
      var $1040=$p;
      var $1041=$1040;
      var $1042=(($1041+3)|0);
      var $1043=HEAPU8[($1042)];
      var $1044=(($1043)&255);
      var $1045=$1044 << 24;
      var $1046=$p;
      var $1047=$1046;
      var $1048=(($1047+2)|0);
      var $1049=HEAPU8[($1048)];
      var $1050=(($1049)&255);
      var $1051=$1050 << 16;
      var $1052=$1045 | $1051;
      var $1053=$p;
      var $1054=$1053;
      var $1055=(($1054+1)|0);
      var $1056=HEAPU8[($1055)];
      var $1057=(($1056)&255);
      var $1058=$1057 << 8;
      var $1059=$1052 | $1058;
      var $1060=$p;
      var $1061=$1060;
      var $1062=(($1061)|0);
      var $1063=HEAPU8[($1062)];
      var $1064=(($1063)&255);
      var $1065=$1059 | $1064;
      var $1066=$off;
      var $1067=$1065 & $1066;
      $offset=$1067;
      __label__ = 116; break;
    case 109: 
      var $1069=$p;
      var $1070=$1069;
      var $1071=(($1070+3)|0);
      var $1072=HEAPU8[($1071)];
      var $1073=(($1072)&255);
      var $1074=$1073 << 24;
      var $1075=$p;
      var $1076=$1075;
      var $1077=(($1076+2)|0);
      var $1078=HEAPU8[($1077)];
      var $1079=(($1078)&255);
      var $1080=$1079 << 16;
      var $1081=$1074 | $1080;
      var $1082=$p;
      var $1083=$1082;
      var $1084=(($1083+1)|0);
      var $1085=HEAPU8[($1084)];
      var $1086=(($1085)&255);
      var $1087=$1086 << 8;
      var $1088=$1081 | $1087;
      var $1089=$p;
      var $1090=$1089;
      var $1091=(($1090)|0);
      var $1092=HEAPU8[($1091)];
      var $1093=(($1092)&255);
      var $1094=$1088 | $1093;
      var $1095=$off;
      var $1096=$1094 | $1095;
      $offset=$1096;
      __label__ = 116; break;
    case 110: 
      var $1098=$p;
      var $1099=$1098;
      var $1100=(($1099+3)|0);
      var $1101=HEAPU8[($1100)];
      var $1102=(($1101)&255);
      var $1103=$1102 << 24;
      var $1104=$p;
      var $1105=$1104;
      var $1106=(($1105+2)|0);
      var $1107=HEAPU8[($1106)];
      var $1108=(($1107)&255);
      var $1109=$1108 << 16;
      var $1110=$1103 | $1109;
      var $1111=$p;
      var $1112=$1111;
      var $1113=(($1112+1)|0);
      var $1114=HEAPU8[($1113)];
      var $1115=(($1114)&255);
      var $1116=$1115 << 8;
      var $1117=$1110 | $1116;
      var $1118=$p;
      var $1119=$1118;
      var $1120=(($1119)|0);
      var $1121=HEAPU8[($1120)];
      var $1122=(($1121)&255);
      var $1123=$1117 | $1122;
      var $1124=$off;
      var $1125=$1123 ^ $1124;
      $offset=$1125;
      __label__ = 116; break;
    case 111: 
      var $1127=$p;
      var $1128=$1127;
      var $1129=(($1128+3)|0);
      var $1130=HEAPU8[($1129)];
      var $1131=(($1130)&255);
      var $1132=$1131 << 24;
      var $1133=$p;
      var $1134=$1133;
      var $1135=(($1134+2)|0);
      var $1136=HEAPU8[($1135)];
      var $1137=(($1136)&255);
      var $1138=$1137 << 16;
      var $1139=$1132 | $1138;
      var $1140=$p;
      var $1141=$1140;
      var $1142=(($1141+1)|0);
      var $1143=HEAPU8[($1142)];
      var $1144=(($1143)&255);
      var $1145=$1144 << 8;
      var $1146=$1139 | $1145;
      var $1147=$p;
      var $1148=$1147;
      var $1149=(($1148)|0);
      var $1150=HEAPU8[($1149)];
      var $1151=(($1150)&255);
      var $1152=$1146 | $1151;
      var $1153=$off;
      var $1154=((($1152)+($1153))|0);
      $offset=$1154;
      __label__ = 116; break;
    case 112: 
      var $1156=$p;
      var $1157=$1156;
      var $1158=(($1157+3)|0);
      var $1159=HEAPU8[($1158)];
      var $1160=(($1159)&255);
      var $1161=$1160 << 24;
      var $1162=$p;
      var $1163=$1162;
      var $1164=(($1163+2)|0);
      var $1165=HEAPU8[($1164)];
      var $1166=(($1165)&255);
      var $1167=$1166 << 16;
      var $1168=$1161 | $1167;
      var $1169=$p;
      var $1170=$1169;
      var $1171=(($1170+1)|0);
      var $1172=HEAPU8[($1171)];
      var $1173=(($1172)&255);
      var $1174=$1173 << 8;
      var $1175=$1168 | $1174;
      var $1176=$p;
      var $1177=$1176;
      var $1178=(($1177)|0);
      var $1179=HEAPU8[($1178)];
      var $1180=(($1179)&255);
      var $1181=$1175 | $1180;
      var $1182=$off;
      var $1183=((($1181)-($1182))|0);
      $offset=$1183;
      __label__ = 116; break;
    case 113: 
      var $1185=$p;
      var $1186=$1185;
      var $1187=(($1186+3)|0);
      var $1188=HEAPU8[($1187)];
      var $1189=(($1188)&255);
      var $1190=$1189 << 24;
      var $1191=$p;
      var $1192=$1191;
      var $1193=(($1192+2)|0);
      var $1194=HEAPU8[($1193)];
      var $1195=(($1194)&255);
      var $1196=$1195 << 16;
      var $1197=$1190 | $1196;
      var $1198=$p;
      var $1199=$1198;
      var $1200=(($1199+1)|0);
      var $1201=HEAPU8[($1200)];
      var $1202=(($1201)&255);
      var $1203=$1202 << 8;
      var $1204=$1197 | $1203;
      var $1205=$p;
      var $1206=$1205;
      var $1207=(($1206)|0);
      var $1208=HEAPU8[($1207)];
      var $1209=(($1208)&255);
      var $1210=$1204 | $1209;
      var $1211=$off;
      var $1212=((($1210)*($1211))|0);
      $offset=$1212;
      __label__ = 116; break;
    case 114: 
      var $1214=$p;
      var $1215=$1214;
      var $1216=(($1215+3)|0);
      var $1217=HEAPU8[($1216)];
      var $1218=(($1217)&255);
      var $1219=$1218 << 24;
      var $1220=$p;
      var $1221=$1220;
      var $1222=(($1221+2)|0);
      var $1223=HEAPU8[($1222)];
      var $1224=(($1223)&255);
      var $1225=$1224 << 16;
      var $1226=$1219 | $1225;
      var $1227=$p;
      var $1228=$1227;
      var $1229=(($1228+1)|0);
      var $1230=HEAPU8[($1229)];
      var $1231=(($1230)&255);
      var $1232=$1231 << 8;
      var $1233=$1226 | $1232;
      var $1234=$p;
      var $1235=$1234;
      var $1236=(($1235)|0);
      var $1237=HEAPU8[($1236)];
      var $1238=(($1237)&255);
      var $1239=$1233 | $1238;
      var $1240=$off;
      var $1241=((((($1239)|0))/((($1240)|0)))&-1);
      $offset=$1241;
      __label__ = 116; break;
    case 115: 
      var $1243=$p;
      var $1244=$1243;
      var $1245=(($1244+3)|0);
      var $1246=HEAPU8[($1245)];
      var $1247=(($1246)&255);
      var $1248=$1247 << 24;
      var $1249=$p;
      var $1250=$1249;
      var $1251=(($1250+2)|0);
      var $1252=HEAPU8[($1251)];
      var $1253=(($1252)&255);
      var $1254=$1253 << 16;
      var $1255=$1248 | $1254;
      var $1256=$p;
      var $1257=$1256;
      var $1258=(($1257+1)|0);
      var $1259=HEAPU8[($1258)];
      var $1260=(($1259)&255);
      var $1261=$1260 << 8;
      var $1262=$1255 | $1261;
      var $1263=$p;
      var $1264=$1263;
      var $1265=(($1264)|0);
      var $1266=HEAPU8[($1265)];
      var $1267=(($1266)&255);
      var $1268=$1262 | $1267;
      var $1269=$off;
      var $1270=((($1268)|0))%((($1269)|0));
      $offset=$1270;
      __label__ = 116; break;
    case 116: 
      __label__ = 118; break;
    case 117: 
      var $1273=$p;
      var $1274=$1273;
      var $1275=(($1274+3)|0);
      var $1276=HEAPU8[($1275)];
      var $1277=(($1276)&255);
      var $1278=$1277 << 24;
      var $1279=$p;
      var $1280=$1279;
      var $1281=(($1280+2)|0);
      var $1282=HEAPU8[($1281)];
      var $1283=(($1282)&255);
      var $1284=$1283 << 16;
      var $1285=$1278 | $1284;
      var $1286=$p;
      var $1287=$1286;
      var $1288=(($1287+1)|0);
      var $1289=HEAPU8[($1288)];
      var $1290=(($1289)&255);
      var $1291=$1290 << 8;
      var $1292=$1285 | $1291;
      var $1293=$p;
      var $1294=$1293;
      var $1295=(($1294)|0);
      var $1296=HEAPU8[($1295)];
      var $1297=(($1296)&255);
      var $1298=$1292 | $1297;
      $offset=$1298;
      __label__ = 118; break;
    case 118: 
      var $1300=$4;
      var $1301=(($1300+8)|0);
      var $1302=HEAPU8[($1301)];
      var $1303=(($1302)&255);
      var $1304=$1303 & 64;
      var $1305=(($1304)|0)!=0;
      if ($1305) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: 
      var $1307=$offset;
      var $1308=$1307 ^ -1;
      $offset=$1308;
      __label__ = 120; break;
    case 120: 
      __label__ = 155; break;
    case 121: 
      var $1311=$5;
      var $1312=$offset;
      var $1313=((($1312)+(4))|0);
      var $1314=(($1311)>>>0) < (($1313)>>>0);
      if ($1314) { __label__ = 122; break; } else { __label__ = 123; break; }
    case 122: 
      $1=0;
      __label__ = 195; break;
    case 123: 
      var $1317=$off;
      var $1318=(($1317)|0)!=0;
      if ($1318) { __label__ = 124; break; } else { __label__ = 134; break; }
    case 124: 
      var $1320=$4;
      var $1321=(($1320+8)|0);
      var $1322=HEAPU8[($1321)];
      var $1323=(($1322)&255);
      var $1324=$1323 & 7;
      if ((($1324)|0) == 0) {
        __label__ = 125; break;
      }
      else if ((($1324)|0) == 1) {
        __label__ = 126; break;
      }
      else if ((($1324)|0) == 2) {
        __label__ = 127; break;
      }
      else if ((($1324)|0) == 3) {
        __label__ = 128; break;
      }
      else if ((($1324)|0) == 4) {
        __label__ = 129; break;
      }
      else if ((($1324)|0) == 5) {
        __label__ = 130; break;
      }
      else if ((($1324)|0) == 6) {
        __label__ = 131; break;
      }
      else if ((($1324)|0) == 7) {
        __label__ = 132; break;
      }
      else {
      __label__ = 133; break;
      }
      
    case 125: 
      var $1326=$p;
      var $1327=$1326;
      var $1328=(($1327+1)|0);
      var $1329=HEAPU8[($1328)];
      var $1330=(($1329)&255);
      var $1331=$1330 << 24;
      var $1332=$p;
      var $1333=$1332;
      var $1334=(($1333)|0);
      var $1335=HEAPU8[($1334)];
      var $1336=(($1335)&255);
      var $1337=$1336 << 16;
      var $1338=$1331 | $1337;
      var $1339=$p;
      var $1340=$1339;
      var $1341=(($1340+3)|0);
      var $1342=HEAPU8[($1341)];
      var $1343=(($1342)&255);
      var $1344=$1343 << 8;
      var $1345=$1338 | $1344;
      var $1346=$p;
      var $1347=$1346;
      var $1348=(($1347+2)|0);
      var $1349=HEAPU8[($1348)];
      var $1350=(($1349)&255);
      var $1351=$1345 | $1350;
      var $1352=$off;
      var $1353=$1351 & $1352;
      $offset=$1353;
      __label__ = 133; break;
    case 126: 
      var $1355=$p;
      var $1356=$1355;
      var $1357=(($1356+1)|0);
      var $1358=HEAPU8[($1357)];
      var $1359=(($1358)&255);
      var $1360=$1359 << 24;
      var $1361=$p;
      var $1362=$1361;
      var $1363=(($1362)|0);
      var $1364=HEAPU8[($1363)];
      var $1365=(($1364)&255);
      var $1366=$1365 << 16;
      var $1367=$1360 | $1366;
      var $1368=$p;
      var $1369=$1368;
      var $1370=(($1369+3)|0);
      var $1371=HEAPU8[($1370)];
      var $1372=(($1371)&255);
      var $1373=$1372 << 8;
      var $1374=$1367 | $1373;
      var $1375=$p;
      var $1376=$1375;
      var $1377=(($1376+2)|0);
      var $1378=HEAPU8[($1377)];
      var $1379=(($1378)&255);
      var $1380=$1374 | $1379;
      var $1381=$off;
      var $1382=$1380 | $1381;
      $offset=$1382;
      __label__ = 133; break;
    case 127: 
      var $1384=$p;
      var $1385=$1384;
      var $1386=(($1385+1)|0);
      var $1387=HEAPU8[($1386)];
      var $1388=(($1387)&255);
      var $1389=$1388 << 24;
      var $1390=$p;
      var $1391=$1390;
      var $1392=(($1391)|0);
      var $1393=HEAPU8[($1392)];
      var $1394=(($1393)&255);
      var $1395=$1394 << 16;
      var $1396=$1389 | $1395;
      var $1397=$p;
      var $1398=$1397;
      var $1399=(($1398+3)|0);
      var $1400=HEAPU8[($1399)];
      var $1401=(($1400)&255);
      var $1402=$1401 << 8;
      var $1403=$1396 | $1402;
      var $1404=$p;
      var $1405=$1404;
      var $1406=(($1405+2)|0);
      var $1407=HEAPU8[($1406)];
      var $1408=(($1407)&255);
      var $1409=$1403 | $1408;
      var $1410=$off;
      var $1411=$1409 ^ $1410;
      $offset=$1411;
      __label__ = 133; break;
    case 128: 
      var $1413=$p;
      var $1414=$1413;
      var $1415=(($1414+1)|0);
      var $1416=HEAPU8[($1415)];
      var $1417=(($1416)&255);
      var $1418=$1417 << 24;
      var $1419=$p;
      var $1420=$1419;
      var $1421=(($1420)|0);
      var $1422=HEAPU8[($1421)];
      var $1423=(($1422)&255);
      var $1424=$1423 << 16;
      var $1425=$1418 | $1424;
      var $1426=$p;
      var $1427=$1426;
      var $1428=(($1427+3)|0);
      var $1429=HEAPU8[($1428)];
      var $1430=(($1429)&255);
      var $1431=$1430 << 8;
      var $1432=$1425 | $1431;
      var $1433=$p;
      var $1434=$1433;
      var $1435=(($1434+2)|0);
      var $1436=HEAPU8[($1435)];
      var $1437=(($1436)&255);
      var $1438=$1432 | $1437;
      var $1439=$off;
      var $1440=((($1438)+($1439))|0);
      $offset=$1440;
      __label__ = 133; break;
    case 129: 
      var $1442=$p;
      var $1443=$1442;
      var $1444=(($1443+1)|0);
      var $1445=HEAPU8[($1444)];
      var $1446=(($1445)&255);
      var $1447=$1446 << 24;
      var $1448=$p;
      var $1449=$1448;
      var $1450=(($1449)|0);
      var $1451=HEAPU8[($1450)];
      var $1452=(($1451)&255);
      var $1453=$1452 << 16;
      var $1454=$1447 | $1453;
      var $1455=$p;
      var $1456=$1455;
      var $1457=(($1456+3)|0);
      var $1458=HEAPU8[($1457)];
      var $1459=(($1458)&255);
      var $1460=$1459 << 8;
      var $1461=$1454 | $1460;
      var $1462=$p;
      var $1463=$1462;
      var $1464=(($1463+2)|0);
      var $1465=HEAPU8[($1464)];
      var $1466=(($1465)&255);
      var $1467=$1461 | $1466;
      var $1468=$off;
      var $1469=((($1467)-($1468))|0);
      $offset=$1469;
      __label__ = 133; break;
    case 130: 
      var $1471=$p;
      var $1472=$1471;
      var $1473=(($1472+1)|0);
      var $1474=HEAPU8[($1473)];
      var $1475=(($1474)&255);
      var $1476=$1475 << 24;
      var $1477=$p;
      var $1478=$1477;
      var $1479=(($1478)|0);
      var $1480=HEAPU8[($1479)];
      var $1481=(($1480)&255);
      var $1482=$1481 << 16;
      var $1483=$1476 | $1482;
      var $1484=$p;
      var $1485=$1484;
      var $1486=(($1485+3)|0);
      var $1487=HEAPU8[($1486)];
      var $1488=(($1487)&255);
      var $1489=$1488 << 8;
      var $1490=$1483 | $1489;
      var $1491=$p;
      var $1492=$1491;
      var $1493=(($1492+2)|0);
      var $1494=HEAPU8[($1493)];
      var $1495=(($1494)&255);
      var $1496=$1490 | $1495;
      var $1497=$off;
      var $1498=((($1496)*($1497))|0);
      $offset=$1498;
      __label__ = 133; break;
    case 131: 
      var $1500=$p;
      var $1501=$1500;
      var $1502=(($1501+1)|0);
      var $1503=HEAPU8[($1502)];
      var $1504=(($1503)&255);
      var $1505=$1504 << 24;
      var $1506=$p;
      var $1507=$1506;
      var $1508=(($1507)|0);
      var $1509=HEAPU8[($1508)];
      var $1510=(($1509)&255);
      var $1511=$1510 << 16;
      var $1512=$1505 | $1511;
      var $1513=$p;
      var $1514=$1513;
      var $1515=(($1514+3)|0);
      var $1516=HEAPU8[($1515)];
      var $1517=(($1516)&255);
      var $1518=$1517 << 8;
      var $1519=$1512 | $1518;
      var $1520=$p;
      var $1521=$1520;
      var $1522=(($1521+2)|0);
      var $1523=HEAPU8[($1522)];
      var $1524=(($1523)&255);
      var $1525=$1519 | $1524;
      var $1526=$off;
      var $1527=((((($1525)|0))/((($1526)|0)))&-1);
      $offset=$1527;
      __label__ = 133; break;
    case 132: 
      var $1529=$p;
      var $1530=$1529;
      var $1531=(($1530+1)|0);
      var $1532=HEAPU8[($1531)];
      var $1533=(($1532)&255);
      var $1534=$1533 << 24;
      var $1535=$p;
      var $1536=$1535;
      var $1537=(($1536)|0);
      var $1538=HEAPU8[($1537)];
      var $1539=(($1538)&255);
      var $1540=$1539 << 16;
      var $1541=$1534 | $1540;
      var $1542=$p;
      var $1543=$1542;
      var $1544=(($1543+3)|0);
      var $1545=HEAPU8[($1544)];
      var $1546=(($1545)&255);
      var $1547=$1546 << 8;
      var $1548=$1541 | $1547;
      var $1549=$p;
      var $1550=$1549;
      var $1551=(($1550+2)|0);
      var $1552=HEAPU8[($1551)];
      var $1553=(($1552)&255);
      var $1554=$1548 | $1553;
      var $1555=$off;
      var $1556=((($1554)|0))%((($1555)|0));
      $offset=$1556;
      __label__ = 133; break;
    case 133: 
      __label__ = 135; break;
    case 134: 
      var $1559=$p;
      var $1560=$1559;
      var $1561=(($1560+1)|0);
      var $1562=HEAPU8[($1561)];
      var $1563=(($1562)&255);
      var $1564=$1563 << 24;
      var $1565=$p;
      var $1566=$1565;
      var $1567=(($1566)|0);
      var $1568=HEAPU8[($1567)];
      var $1569=(($1568)&255);
      var $1570=$1569 << 16;
      var $1571=$1564 | $1570;
      var $1572=$p;
      var $1573=$1572;
      var $1574=(($1573+3)|0);
      var $1575=HEAPU8[($1574)];
      var $1576=(($1575)&255);
      var $1577=$1576 << 8;
      var $1578=$1571 | $1577;
      var $1579=$p;
      var $1580=$1579;
      var $1581=(($1580+2)|0);
      var $1582=HEAPU8[($1581)];
      var $1583=(($1582)&255);
      var $1584=$1578 | $1583;
      $offset=$1584;
      __label__ = 135; break;
    case 135: 
      var $1586=$4;
      var $1587=(($1586+8)|0);
      var $1588=HEAPU8[($1587)];
      var $1589=(($1588)&255);
      var $1590=$1589 & 64;
      var $1591=(($1590)|0)!=0;
      if ($1591) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      var $1593=$offset;
      var $1594=$1593 ^ -1;
      $offset=$1594;
      __label__ = 137; break;
    case 137: 
      __label__ = 155; break;
    case 138: 
      var $1597=$5;
      var $1598=$offset;
      var $1599=((($1598)+(4))|0);
      var $1600=(($1597)>>>0) < (($1599)>>>0);
      if ($1600) { __label__ = 139; break; } else { __label__ = 140; break; }
    case 139: 
      $1=0;
      __label__ = 195; break;
    case 140: 
      var $1603=$off;
      var $1604=(($1603)|0)!=0;
      if ($1604) { __label__ = 141; break; } else { __label__ = 151; break; }
    case 141: 
      var $1606=$4;
      var $1607=(($1606+8)|0);
      var $1608=HEAPU8[($1607)];
      var $1609=(($1608)&255);
      var $1610=$1609 & 7;
      if ((($1610)|0) == 0) {
        __label__ = 142; break;
      }
      else if ((($1610)|0) == 1) {
        __label__ = 143; break;
      }
      else if ((($1610)|0) == 2) {
        __label__ = 144; break;
      }
      else if ((($1610)|0) == 3) {
        __label__ = 145; break;
      }
      else if ((($1610)|0) == 4) {
        __label__ = 146; break;
      }
      else if ((($1610)|0) == 5) {
        __label__ = 147; break;
      }
      else if ((($1610)|0) == 6) {
        __label__ = 148; break;
      }
      else if ((($1610)|0) == 7) {
        __label__ = 149; break;
      }
      else {
      __label__ = 150; break;
      }
      
    case 142: 
      var $1612=$p;
      var $1613=$1612;
      var $1614=HEAP32[(($1613)>>2)];
      var $1615=$off;
      var $1616=$1614 & $1615;
      $offset=$1616;
      __label__ = 150; break;
    case 143: 
      var $1618=$p;
      var $1619=$1618;
      var $1620=HEAP32[(($1619)>>2)];
      var $1621=$off;
      var $1622=$1620 | $1621;
      $offset=$1622;
      __label__ = 150; break;
    case 144: 
      var $1624=$p;
      var $1625=$1624;
      var $1626=HEAP32[(($1625)>>2)];
      var $1627=$off;
      var $1628=$1626 ^ $1627;
      $offset=$1628;
      __label__ = 150; break;
    case 145: 
      var $1630=$p;
      var $1631=$1630;
      var $1632=HEAP32[(($1631)>>2)];
      var $1633=$off;
      var $1634=((($1632)+($1633))|0);
      $offset=$1634;
      __label__ = 150; break;
    case 146: 
      var $1636=$p;
      var $1637=$1636;
      var $1638=HEAP32[(($1637)>>2)];
      var $1639=$off;
      var $1640=((($1638)-($1639))|0);
      $offset=$1640;
      __label__ = 150; break;
    case 147: 
      var $1642=$p;
      var $1643=$1642;
      var $1644=HEAP32[(($1643)>>2)];
      var $1645=$off;
      var $1646=((($1644)*($1645))|0);
      $offset=$1646;
      __label__ = 150; break;
    case 148: 
      var $1648=$p;
      var $1649=$1648;
      var $1650=HEAPU32[(($1649)>>2)];
      var $1651=$off;
      var $1652=Math.floor(((($1650)>>>0))/((($1651)>>>0)));
      $offset=$1652;
      __label__ = 150; break;
    case 149: 
      var $1654=$p;
      var $1655=$1654;
      var $1656=HEAPU32[(($1655)>>2)];
      var $1657=$off;
      var $1658=((($1656)>>>0))%((($1657)>>>0));
      $offset=$1658;
      __label__ = 150; break;
    case 150: 
      __label__ = 152; break;
    case 151: 
      var $1661=$p;
      var $1662=$1661;
      var $1663=HEAP32[(($1662)>>2)];
      $offset=$1663;
      __label__ = 152; break;
    case 152: 
      var $1665=$4;
      var $1666=(($1665+8)|0);
      var $1667=HEAPU8[($1666)];
      var $1668=(($1667)&255);
      var $1669=$1668 & 64;
      var $1670=(($1669)|0)!=0;
      if ($1670) { __label__ = 153; break; } else { __label__ = 154; break; }
    case 153: 
      var $1672=$offset;
      var $1673=$1672 ^ -1;
      $offset=$1673;
      __label__ = 154; break;
    case 154: 
      __label__ = 155; break;
    case 155: 
      var $1676=$4;
      var $1677=(($1676+7)|0);
      var $1678=HEAPU8[($1677)];
      var $1679=(($1678)&255);
      if ((($1679)|0) == 40 || (($1679)|0) == 39) {
        __label__ = 156; break;
      }
      else {
      __label__ = 157; break;
      }
      
    case 156: 
      var $1681=$offset;
      var $1682=$1681 >>> 0;
      var $1683=$1682 & 127;
      var $1684=$1683 << 0;
      var $1685=$offset;
      var $1686=$1685 >>> 8;
      var $1687=$1686 & 127;
      var $1688=$1687 << 7;
      var $1689=$1684 | $1688;
      var $1690=$offset;
      var $1691=$1690 >>> 16;
      var $1692=$1691 & 127;
      var $1693=$1692 << 14;
      var $1694=$1689 | $1693;
      var $1695=$offset;
      var $1696=$1695 >>> 24;
      var $1697=$1696 & 127;
      var $1698=$1697 << 21;
      var $1699=$1694 | $1698;
      var $1700=((($1699)+(10))|0);
      $offset=$1700;
      __label__ = 158; break;
    case 157: 
      __label__ = 158; break;
    case 158: 
      var $1703=$4;
      var $1704=(($1703+2)|0);
      var $1705=HEAPU8[($1704)];
      var $1706=(($1705)&255);
      var $1707=$1706 & 4;
      var $1708=(($1707)|0)!=0;
      if ($1708) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: 
      var $1710=$6;
      var $1711=((($1710)-(1))|0);
      var $1712=$2;
      var $1713=(($1712+4)|0);
      var $1714=(($1713+4)|0);
      var $1715=HEAP32[(($1714)>>2)];
      var $1716=(($1715+($1711<<4))|0);
      var $1717=(($1716)|0);
      var $1718=HEAP32[(($1717)>>2)];
      var $1719=$offset;
      var $1720=((($1719)+($1718))|0);
      $offset=$1720;
      __label__ = 160; break;
    case 160: 
      var $1722=$2;
      var $1723=$p;
      var $1724=$4;
      var $1725=(($1724+6)|0);
      var $1726=HEAPU8[($1725)];
      var $1727=(($1726)&255);
      var $1728=$3;
      var $1729=$offset;
      var $1730=$5;
      var $1731=$count;
      var $1732=_mcopy($1722, $1723, $1727, 0, $1728, $1729, $1730, $1731);
      var $1733=(($1732)|0)==-1;
      if ($1733) { __label__ = 161; break; } else { __label__ = 162; break; }
    case 161: 
      $1=-1;
      __label__ = 195; break;
    case 162: 
      var $1736=$offset;
      var $1737=$2;
      var $1738=(($1737+20)|0);
      HEAP32[(($1738)>>2)]=$1736;
      var $1739=$2;
      var $1740=(($1739+28)|0);
      var $1741=HEAP32[(($1740)>>2)];
      var $1742=$1741 & 1;
      var $1743=(($1742)|0)!=0;
      if ($1743) { __label__ = 163; break; } else { __label__ = 164; break; }
    case 163: 
      var $1745=$offset;
      var $1746=$p;
      var $1747=$1746;
      _mdebug($1745, $1747, 64);
      var $1748=$4;
      _file_mdump($1748);
      __label__ = 164; break;
    case 164: 
      __label__ = 165; break;
    case 165: 
      var $1751=$4;
      var $1752=(($1751+6)|0);
      var $1753=HEAPU8[($1752)];
      var $1754=(($1753)&255);
      if ((($1754)|0) == 1) {
        __label__ = 166; break;
      }
      else if ((($1754)|0) == 2 || (($1754)|0) == 7 || (($1754)|0) == 10) {
        __label__ = 169; break;
      }
      else if ((($1754)|0) == 4 || (($1754)|0) == 8 || (($1754)|0) == 11 || (($1754)|0) == 23 || (($1754)|0) == 6 || (($1754)|0) == 9 || (($1754)|0) == 12 || (($1754)|0) == 21 || (($1754)|0) == 14 || (($1754)|0) == 15 || (($1754)|0) == 16 || (($1754)|0) == 22 || (($1754)|0) == 33 || (($1754)|0) == 34 || (($1754)|0) == 35) {
        __label__ = 172; break;
      }
      else if ((($1754)|0) == 36 || (($1754)|0) == 37 || (($1754)|0) == 38) {
        __label__ = 175; break;
      }
      else if ((($1754)|0) == 5 || (($1754)|0) == 13 || (($1754)|0) == 20) {
        __label__ = 178; break;
      }
      else if ((($1754)|0) == 17) {
        __label__ = 181; break;
      }
      else if ((($1754)|0) == 41) {
        __label__ = 184; break;
      }
      else if ((($1754)|0) == 3) {
        __label__ = 190; break;
      }
      else {
      __label__ = 191; break;
      }
      
    case 166: 
      var $1756=$5;
      var $1757=$offset;
      var $1758=((($1757)+(1))|0);
      var $1759=(($1756)>>>0) < (($1758)>>>0);
      if ($1759) { __label__ = 167; break; } else { __label__ = 168; break; }
    case 167: 
      $1=0;
      __label__ = 195; break;
    case 168: 
      __label__ = 192; break;
    case 169: 
      var $1763=$5;
      var $1764=$offset;
      var $1765=((($1764)+(2))|0);
      var $1766=(($1763)>>>0) < (($1765)>>>0);
      if ($1766) { __label__ = 170; break; } else { __label__ = 171; break; }
    case 170: 
      $1=0;
      __label__ = 195; break;
    case 171: 
      __label__ = 192; break;
    case 172: 
      var $1770=$5;
      var $1771=$offset;
      var $1772=((($1771)+(4))|0);
      var $1773=(($1770)>>>0) < (($1772)>>>0);
      if ($1773) { __label__ = 173; break; } else { __label__ = 174; break; }
    case 173: 
      $1=0;
      __label__ = 195; break;
    case 174: 
      __label__ = 192; break;
    case 175: 
      var $1777=$5;
      var $1778=$offset;
      var $1779=((($1778)+(8))|0);
      var $1780=(($1777)>>>0) < (($1779)>>>0);
      if ($1780) { __label__ = 176; break; } else { __label__ = 177; break; }
    case 176: 
      $1=0;
      __label__ = 195; break;
    case 177: 
      __label__ = 192; break;
    case 178: 
      var $1784=$5;
      var $1785=$offset;
      var $1786=$4;
      var $1787=(($1786+5)|0);
      var $1788=HEAPU8[($1787)];
      var $1789=(($1788)&255);
      var $1790=((($1785)+($1789))|0);
      var $1791=(($1784)>>>0) < (($1790)>>>0);
      if ($1791) { __label__ = 179; break; } else { __label__ = 180; break; }
    case 179: 
      $1=0;
      __label__ = 195; break;
    case 180: 
      __label__ = 192; break;
    case 181: 
      var $1795=$5;
      var $1796=$offset;
      var $1797=(($1795)>>>0) < (($1796)>>>0);
      if ($1797) { __label__ = 182; break; } else { __label__ = 183; break; }
    case 182: 
      $1=0;
      __label__ = 195; break;
    case 183: 
      __label__ = 192; break;
    case 184: 
      var $1801=$2;
      var $1802=(($1801+28)|0);
      var $1803=HEAP32[(($1802)>>2)];
      var $1804=$1803 & 3088;
      var $1805=(($1804)|0)==0;
      if ($1805) { __label__ = 185; break; } else { __label__ = 187; break; }
    case 185: 
      var $1807=$2;
      var $1808=$4;
      var $1809=(($1808+96)|0);
      var $1810=(($1809)|0);
      var $1811=_file_printf($1807, ((STRING_TABLE.__str1192)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1810,tempInt));
      var $1812=(($1811)|0)==-1;
      if ($1812) { __label__ = 186; break; } else { __label__ = 187; break; }
    case 186: 
      $1=-1;
      __label__ = 195; break;
    case 187: 
      var $1815=$5;
      var $1816=$offset;
      var $1817=(($1815)>>>0) < (($1816)>>>0);
      if ($1817) { __label__ = 188; break; } else { __label__ = 189; break; }
    case 188: 
      $1=0;
      __label__ = 195; break;
    case 189: 
      var $1820=$2;
      var $1821=$3;
      var $1822=$offset;
      var $1823=(($1821+$1822)|0);
      var $1824=$5;
      var $1825=$offset;
      var $1826=((($1824)-($1825))|0);
      var $1827=$7;
      var $1828=_file_softmagic($1820, $1823, $1826, 32, $1827);
      $1=$1828;
      __label__ = 195; break;
    case 190: 
      __label__ = 191; break;
    case 191: 
      __label__ = 192; break;
    case 192: 
      var $1832=$2;
      var $1833=$4;
      var $1834=_mconvert($1832, $1833);
      var $1835=(($1834)|0)!=0;
      if ($1835) { __label__ = 194; break; } else { __label__ = 193; break; }
    case 193: 
      $1=0;
      __label__ = 195; break;
    case 194: 
      $1=1;
      __label__ = 195; break;
    case 195: 
      var $1839=$1;
      STACKTOP = __stackBase__;
      return $1839;
    default: assert(0, "bad label: " + __label__);
  }
}
_mget["X"]=1;

function _magiccheck($ms, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 552; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l=__stackBase__;
      var $v=(__stackBase__)+(8);
      var $fl;
      var $fv;
      var $dl;
      var $dv;
      var $matched;
      var $p;
      var $slen;
      var $idx;
      var $rc;
      var $rx=(__stackBase__)+(16);
      var $errmsg=(__stackBase__)+(32);
      var $pmatch=(__stackBase__)+(544);
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+32)|0);
      var $6=$5;
      var $st$22$0=(($6)|0);
      var $7$0=HEAP32[(($st$22$0)>>2)];
      var $st$22$1=(($6+4)|0);
      var $7$1=HEAP32[(($st$22$1)>>2)];
      var $st$26$0=(($l)|0);
      HEAP32[(($st$26$0)>>2)]=$7$0;
      var $st$26$1=(($l+4)|0);
      HEAP32[(($st$26$1)>>2)]=$7$1;
      var $8=$2;
      var $9=(($8+60)|0);
      $p=$9;
      var $10=$3;
      var $11=(($10+6)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      if ((($13)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($13)|0) == 2 || (($13)|0) == 7 || (($13)|0) == 10) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 4 || (($13)|0) == 8 || (($13)|0) == 11 || (($13)|0) == 23 || (($13)|0) == 6 || (($13)|0) == 9 || (($13)|0) == 12 || (($13)|0) == 21 || (($13)|0) == 14 || (($13)|0) == 15 || (($13)|0) == 16 || (($13)|0) == 22) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 24 || (($13)|0) == 25 || (($13)|0) == 26 || (($13)|0) == 27 || (($13)|0) == 29 || (($13)|0) == 28 || (($13)|0) == 30 || (($13)|0) == 32 || (($13)|0) == 31) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 33 || (($13)|0) == 34 || (($13)|0) == 35) {
        __label__ = 7; break;
      }
      else if ((($13)|0) == 36 || (($13)|0) == 37 || (($13)|0) == 38) {
        __label__ = 15; break;
      }
      else if ((($13)|0) == 3) {
        __label__ = 23; break;
      }
      else if ((($13)|0) == 5 || (($13)|0) == 13) {
        __label__ = 24; break;
      }
      else if ((($13)|0) == 18 || (($13)|0) == 19) {
        __label__ = 25; break;
      }
      else if ((($13)|0) == 20) {
        __label__ = 26; break;
      }
      else if ((($13)|0) == 17) {
        __label__ = 42; break;
      }
      else if ((($13)|0) == 41) {
        __label__ = 54; break;
      }
      else {
      __label__ = 55; break;
      }
      
    case 3: 
      var $15=$p;
      var $16=$15;
      var $17=HEAP8[($16)];
      var $18$0=(($17)&255);
      var $18$1=0;
      var $st$5$0=(($v)|0);
      HEAP32[(($st$5$0)>>2)]=$18$0;
      var $st$5$1=(($v+4)|0);
      HEAP32[(($st$5$1)>>2)]=$18$1;
      __label__ = 56; break;
    case 4: 
      var $20=$p;
      var $21=$20;
      var $22=HEAP16[(($21)>>1)];
      var $23$0=(($22)&65535);
      var $23$1=0;
      var $st$5$0=(($v)|0);
      HEAP32[(($st$5$0)>>2)]=$23$0;
      var $st$5$1=(($v+4)|0);
      HEAP32[(($st$5$1)>>2)]=$23$1;
      __label__ = 56; break;
    case 5: 
      var $25=$p;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28$0=$27;
      var $28$1=0;
      var $st$5$0=(($v)|0);
      HEAP32[(($st$5$0)>>2)]=$28$0;
      var $st$5$1=(($v+4)|0);
      HEAP32[(($st$5$1)>>2)]=$28$1;
      __label__ = 56; break;
    case 6: 
      var $30=$p;
      var $31=$30;
      var $st$2$0=(($31)|0);
      var $32$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($31+4)|0);
      var $32$1=HEAP32[(($st$2$1)>>2)];
      var $st$6$0=(($v)|0);
      HEAP32[(($st$6$0)>>2)]=$32$0;
      var $st$6$1=(($v+4)|0);
      HEAP32[(($st$6$1)>>2)]=$32$1;
      __label__ = 56; break;
    case 7: 
      var $34=$3;
      var $35=(($34+32)|0);
      var $36=$35;
      var $37=HEAPF32[(($36)>>2)];
      $fl=$37;
      var $38=$p;
      var $39=$38;
      var $40=HEAPF32[(($39)>>2)];
      $fv=$40;
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=HEAPU8[($42)];
      var $44=(($43)&255);
      if ((($44)|0) == 120) {
        __label__ = 8; break;
      }
      else if ((($44)|0) == 33) {
        __label__ = 9; break;
      }
      else if ((($44)|0) == 61) {
        __label__ = 10; break;
      }
      else if ((($44)|0) == 62) {
        __label__ = 11; break;
      }
      else if ((($44)|0) == 60) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 8: 
      $matched=1;
      __label__ = 14; break;
    case 9: 
      var $47=$fv;
      var $48=$fl;
      var $49=$47 != $48;
      var $50=(($49)&1);
      $matched=$50;
      __label__ = 14; break;
    case 10: 
      var $52=$fv;
      var $53=$fl;
      var $54=$52 == $53;
      var $55=(($54)&1);
      $matched=$55;
      __label__ = 14; break;
    case 11: 
      var $57=$fv;
      var $58=$fl;
      var $59=$57 > $58;
      var $60=(($59)&1);
      $matched=$60;
      __label__ = 14; break;
    case 12: 
      var $62=$fv;
      var $63=$fl;
      var $64=$62 < $63;
      var $65=(($64)&1);
      $matched=$65;
      __label__ = 14; break;
    case 13: 
      $matched=0;
      var $67=$2;
      var $68=$3;
      var $69=(($68+4)|0);
      var $70=HEAPU8[($69)];
      var $71=(($70)&255);
      _file_magerror($67, ((STRING_TABLE.__str1293)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$71,tempInt));
      $1=-1;
      __label__ = 90; break;
    case 14: 
      var $73=$matched;
      $1=$73;
      __label__ = 90; break;
    case 15: 
      var $75=$3;
      var $76=(($75+32)|0);
      var $77=$76;
      var $78=(tempDoubleI32[0]=HEAP32[(($77)>>2)],tempDoubleI32[1]=HEAP32[((($77)+(4))>>2)],tempDoubleF64[0]);
      $dl=$78;
      var $79=$p;
      var $80=$79;
      var $81=(tempDoubleI32[0]=HEAP32[(($80)>>2)],tempDoubleI32[1]=HEAP32[((($80)+(4))>>2)],tempDoubleF64[0]);
      $dv=$81;
      var $82=$3;
      var $83=(($82+4)|0);
      var $84=HEAPU8[($83)];
      var $85=(($84)&255);
      if ((($85)|0) == 120) {
        __label__ = 16; break;
      }
      else if ((($85)|0) == 33) {
        __label__ = 17; break;
      }
      else if ((($85)|0) == 61) {
        __label__ = 18; break;
      }
      else if ((($85)|0) == 62) {
        __label__ = 19; break;
      }
      else if ((($85)|0) == 60) {
        __label__ = 20; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 16: 
      $matched=1;
      __label__ = 22; break;
    case 17: 
      var $88=$dv;
      var $89=$dl;
      var $90=$88 != $89;
      var $91=(($90)&1);
      $matched=$91;
      __label__ = 22; break;
    case 18: 
      var $93=$dv;
      var $94=$dl;
      var $95=$93 == $94;
      var $96=(($95)&1);
      $matched=$96;
      __label__ = 22; break;
    case 19: 
      var $98=$dv;
      var $99=$dl;
      var $100=$98 > $99;
      var $101=(($100)&1);
      $matched=$101;
      __label__ = 22; break;
    case 20: 
      var $103=$dv;
      var $104=$dl;
      var $105=$103 < $104;
      var $106=(($105)&1);
      $matched=$106;
      __label__ = 22; break;
    case 21: 
      $matched=0;
      var $108=$2;
      var $109=$3;
      var $110=(($109+4)|0);
      var $111=HEAPU8[($110)];
      var $112=(($111)&255);
      _file_magerror($108, ((STRING_TABLE.__str1394)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$112,tempInt));
      $1=-1;
      __label__ = 90; break;
    case 22: 
      var $114=$matched;
      $1=$114;
      __label__ = 90; break;
    case 23: 
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$0$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$0$1;
      var $$emscripten$temp$1$0=0;
      var $$emscripten$temp$1$1=0;
      var $st$8$0=(($v)|0);
      HEAP32[(($st$8$0)>>2)]=$$emscripten$temp$1$0;
      var $st$8$1=(($v+4)|0);
      HEAP32[(($st$8$1)>>2)]=$$emscripten$temp$1$1;
      __label__ = 56; break;
    case 24: 
      var $$emscripten$temp$2$0=0;
      var $$emscripten$temp$2$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$2$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$2$1;
      var $117=$3;
      var $118=(($117+32)|0);
      var $119=$118;
      var $120=(($119)|0);
      var $121=$p;
      var $122=$121;
      var $123=(($122)|0);
      var $124=$3;
      var $125=(($124+5)|0);
      var $126=HEAPU8[($125)];
      var $127=(($126)&255);
      var $128=$3;
      var $129=(($128+24)|0);
      var $130=$129;
      var $131=(($130+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=_file_strncmp($120, $123, $127, $132);
      var $133$0=$133[0];
      var $133$1=$133[1];
      var $st$25$0=(($v)|0);
      HEAP32[(($st$25$0)>>2)]=$133$0;
      var $st$25$1=(($v+4)|0);
      HEAP32[(($st$25$1)>>2)]=$133$1;
      __label__ = 56; break;
    case 25: 
      var $$emscripten$temp$3$0=0;
      var $$emscripten$temp$3$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$3$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$3$1;
      var $135=$3;
      var $136=(($135+32)|0);
      var $137=$136;
      var $138=(($137)|0);
      var $139=$p;
      var $140=$139;
      var $141=(($140)|0);
      var $142=$3;
      var $143=(($142+5)|0);
      var $144=HEAPU8[($143)];
      var $145=(($144)&255);
      var $146=$3;
      var $147=(($146+24)|0);
      var $148=$147;
      var $149=(($148+4)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=_file_strncmp16($138, $141, $145, $150);
      var $151$0=$151[0];
      var $151$1=$151[1];
      var $st$25$0=(($v)|0);
      HEAP32[(($st$25$0)>>2)]=$151$0;
      var $st$25$1=(($v+4)|0);
      HEAP32[(($st$25$1)>>2)]=$151$1;
      __label__ = 56; break;
    case 26: 
      var $153=$2;
      var $154=(($153+44)|0);
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156)|0)==0;
      if ($157) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      $1=0;
      __label__ = 90; break;
    case 28: 
      var $160=$3;
      var $161=(($160+5)|0);
      var $162=HEAPU8[($161)];
      var $163=(($162)&255);
      var $164=(($163)>>>0) < 64;
      if ($164) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $166=$3;
      var $167=(($166+5)|0);
      var $168=HEAPU8[($167)];
      var $169=(($168)&255);
      var $172 = $169;__label__ = 31; break;
    case 30: 
      var $172 = 64;__label__ = 31; break;
    case 31: 
      var $172;
      $slen=$172;
      var $$emscripten$temp$4$0=0;
      var $$emscripten$temp$4$1=0;
      var $st$4$0=(($l)|0);
      HEAP32[(($st$4$0)>>2)]=$$emscripten$temp$4$0;
      var $st$4$1=(($l+4)|0);
      HEAP32[(($st$4$1)>>2)]=$$emscripten$temp$4$1;
      var $$emscripten$temp$5$0=0;
      var $$emscripten$temp$5$1=0;
      var $st$10$0=(($v)|0);
      HEAP32[(($st$10$0)>>2)]=$$emscripten$temp$5$0;
      var $st$10$1=(($v+4)|0);
      HEAP32[(($st$10$1)>>2)]=$$emscripten$temp$5$1;
      $idx=0;
      __label__ = 32; break;
    case 32: 
      var $174=$3;
      var $175=(($174+24)|0);
      var $176=$175;
      var $177=(($176)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=(($178)|0)==0;
      if ($179) { var $189 = 1;__label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $181=$idx;
      var $182=$3;
      var $183=(($182+24)|0);
      var $184=$183;
      var $185=(($184)|0);
      var $186=HEAPU32[(($185)>>2)];
      var $187=(($181)>>>0) < (($186)>>>0);
      var $189 = $187;__label__ = 34; break;
    case 34: 
      var $189;
      if ($189) { __label__ = 35; break; } else { __label__ = 41; break; }
    case 35: 
      var $191=$slen;
      var $192=$idx;
      var $193=((($191)+($192))|0);
      var $194=$2;
      var $195=(($194+44)|0);
      var $196=(($195+4)|0);
      var $197=HEAPU32[(($196)>>2)];
      var $198=(($193)>>>0) > (($197)>>>0);
      if ($198) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      __label__ = 41; break;
    case 37: 
      var $201=$3;
      var $202=(($201+32)|0);
      var $203=$202;
      var $204=(($203)|0);
      var $205=$2;
      var $206=(($205+44)|0);
      var $207=(($206)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$idx;
      var $210=(($208+$209)|0);
      var $211=$slen;
      var $212=$3;
      var $213=(($212+24)|0);
      var $214=$213;
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=_file_strncmp($204, $210, $211, $216);
      var $217$0=$217[0];
      var $217$1=$217[1];
      var $st$19$0=(($v)|0);
      HEAP32[(($st$19$0)>>2)]=$217$0;
      var $st$19$1=(($v+4)|0);
      HEAP32[(($st$19$1)>>2)]=$217$1;
      var $st$23$0=(($v)|0);
      var $218$0=HEAP32[(($st$23$0)>>2)];
      var $st$23$1=(($v+4)|0);
      var $218$1=HEAP32[(($st$23$1)>>2)];
      var $$emscripten$temp$6$0=0;
      var $$emscripten$temp$6$1=0;
      var $219=$218$0 == $$emscripten$temp$6$0 && $218$1 == $$emscripten$temp$6$1;
      if ($219) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $221=$idx;
      var $222=$2;
      var $223=(($222+44)|0);
      var $224=(($223+8)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=((($225)+($221))|0);
      HEAP32[(($224)>>2)]=$226;
      __label__ = 41; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $229=$idx;
      var $230=((($229)+(1))|0);
      $idx=$230;
      __label__ = 32; break;
    case 41: 
      __label__ = 56; break;
    case 42: 
      var $233=$2;
      var $234=(($233+44)|0);
      var $235=(($234)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236)|0)==0;
      if ($237) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      $1=0;
      __label__ = 90; break;
    case 44: 
      var $$emscripten$temp$7$0=0;
      var $$emscripten$temp$7$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$7$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$7$1;
      var $240=$3;
      var $241=(($240+32)|0);
      var $242=$241;
      var $243=(($242)|0);
      var $244=$3;
      var $245=(($244+24)|0);
      var $246=$245;
      var $247=(($246+4)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$248 & 12;
      var $250=(($249)|0)!=0;
      var $251=$250 ? 2 : 0;
      var $252=9 | $251;
      var $253=_llvm_regcomp($rx, $243, $252);
      $rc=$253;
      var $254=$rc;
      var $255=(($254)|0)!=0;
      if ($255) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $257=$rc;
      var $258=(($errmsg)|0);
      var $259=_llvm_regerror($257, $rx, $258, 512);
      var $260=$2;
      var $261=$rc;
      var $262=(($errmsg)|0);
      _file_magerror($260, ((STRING_TABLE.__str889)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$261,HEAP32[(((tempInt)+(4))>>2)]=$262,tempInt));
      var $$emscripten$temp$8$0=-1;
      var $$emscripten$temp$8$1=-1;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$$emscripten$temp$8$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$$emscripten$temp$8$1;
      __label__ = 51; break;
    case 46: 
      var $264=(($pmatch)|0);
      var $265=(($264)|0);
      HEAP32[(($265)>>2)]=0;
      var $266=$2;
      var $267=(($266+44)|0);
      var $268=(($267+4)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($pmatch)|0);
      var $271=(($270+4)|0);
      HEAP32[(($271)>>2)]=$269;
      var $272=$2;
      var $273=(($272+44)|0);
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($pmatch)|0);
      var $277=_llvm_regexec($rx, $275, 1, $276, 4);
      $rc=$277;
      var $278=$rc;
      if ((($278)|0) == 0) {
        __label__ = 47; break;
      }
      else if ((($278)|0) == 1) {
        __label__ = 48; break;
      }
      else {
      __label__ = 49; break;
      }
      
    case 47: 
      var $280=(($pmatch)|0);
      var $281=(($280)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$2;
      var $284=(($283+44)|0);
      var $285=(($284)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($286+$282)|0);
      HEAP32[(($285)>>2)]=$287;
      var $288=(($pmatch)|0);
      var $289=(($288)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=$2;
      var $292=(($291+44)|0);
      var $293=(($292+8)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=((($294)+($290))|0);
      HEAP32[(($293)>>2)]=$295;
      var $296=(($pmatch)|0);
      var $297=(($296+4)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=(($pmatch)|0);
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=((($298)-($301))|0);
      var $303=$2;
      var $304=(($303+44)|0);
      var $305=(($304+12)|0);
      HEAP32[(($305)>>2)]=$302;
      var $$emscripten$temp$9$0=0;
      var $$emscripten$temp$9$1=0;
      var $st$31$0=(($v)|0);
      HEAP32[(($st$31$0)>>2)]=$$emscripten$temp$9$0;
      var $st$31$1=(($v+4)|0);
      HEAP32[(($st$31$1)>>2)]=$$emscripten$temp$9$1;
      __label__ = 50; break;
    case 48: 
      var $$emscripten$temp$10$0=1;
      var $$emscripten$temp$10$1=0;
      var $st$2$0=(($v)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$10$0;
      var $st$2$1=(($v+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$10$1;
      __label__ = 50; break;
    case 49: 
      var $308=$rc;
      var $309=(($errmsg)|0);
      var $310=_llvm_regerror($308, $rx, $309, 512);
      var $311=$2;
      var $312=$rc;
      var $313=(($errmsg)|0);
      _file_magerror($311, ((STRING_TABLE.__str1495)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$312,HEAP32[(((tempInt)+(4))>>2)]=$313,tempInt));
      var $$emscripten$temp$11$0=-1;
      var $$emscripten$temp$11$1=-1;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$$emscripten$temp$11$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$$emscripten$temp$11$1;
      __label__ = 50; break;
    case 50: 
      _llvm_regfree($rx);
      __label__ = 51; break;
    case 51: 
      var $st$0$0=(($v)|0);
      var $316$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $316$1=HEAP32[(($st$0$1)>>2)];
      var $$emscripten$temp$12$0=-1;
      var $$emscripten$temp$12$1=-1;
      var $317=$316$0 == $$emscripten$temp$12$0 && $316$1 == $$emscripten$temp$12$1;
      if ($317) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      $1=-1;
      __label__ = 90; break;
    case 53: 
      __label__ = 56; break;
    case 54: 
      $1=1;
      __label__ = 90; break;
    case 55: 
      var $322=$2;
      var $323=$3;
      var $324=(($323+6)|0);
      var $325=HEAPU8[($324)];
      var $326=(($325)&255);
      _file_magerror($322, ((STRING_TABLE.__str1596)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$326,tempInt));
      $1=-1;
      __label__ = 90; break;
    case 56: 
      var $328=$2;
      var $329=$3;
      var $st$2$0=(($v)|0);
      var $330$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($v+4)|0);
      var $330$1=HEAP32[(($st$2$1)>>2)];
      var $331=_file_signextend($328, $329, $330$0, $330$1);
      var $331$0=$331[0];
      var $331$1=$331[1];
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$331$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$331$1;
      var $332=$3;
      var $333=(($332+4)|0);
      var $334=HEAPU8[($333)];
      var $335=(($334)&255);
      if ((($335)|0) == 120) {
        __label__ = 57; break;
      }
      else if ((($335)|0) == 33) {
        __label__ = 60; break;
      }
      else if ((($335)|0) == 61) {
        __label__ = 63; break;
      }
      else if ((($335)|0) == 62) {
        __label__ = 66; break;
      }
      else if ((($335)|0) == 60) {
        __label__ = 74; break;
      }
      else if ((($335)|0) == 38) {
        __label__ = 82; break;
      }
      else if ((($335)|0) == 94) {
        __label__ = 85; break;
      }
      else {
      __label__ = 88; break;
      }
      
    case 57: 
      var $337=$2;
      var $338=(($337+28)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=$339 & 1;
      var $341=(($340)|0)!=0;
      if ($341) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $343=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $344$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $344$1=HEAP32[(($st$1$1)>>2)];
      var $$emscripten$temp$13=((STRING_TABLE.__str1697)|0);
      var $345=_fprintf($343, $$emscripten$temp$13, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$344$0,HEAP32[(((tempInt)+(4))>>2)]=$344$1,tempInt));
      __label__ = 59; break;
    case 59: 
      $matched=1;
      __label__ = 89; break;
    case 60: 
      var $st$0$0=(($v)|0);
      var $348$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $348$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $349$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $349$1=HEAP32[(($st$4$1)>>2)];
      var $350=$348$0 != $349$0 || $348$1 != $349$1;
      var $351=(($350)&1);
      $matched=$351;
      var $352=$2;
      var $353=(($352+28)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=$354 & 1;
      var $356=(($355)|0)!=0;
      if ($356) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $358=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $359$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $359$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $360$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $360$1=HEAP32[(($st$5$1)>>2)];
      var $361=$matched;
      var $$emscripten$temp$14=((STRING_TABLE.__str1798)|0);
      var $362=_fprintf($358, $$emscripten$temp$14, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$359$0,HEAP32[(((tempInt)+(4))>>2)]=$359$1,HEAP32[(((tempInt)+(8))>>2)]=$360$0,HEAP32[(((tempInt)+(12))>>2)]=$360$1,HEAP32[(((tempInt)+(16))>>2)]=$361,tempInt));
      __label__ = 62; break;
    case 62: 
      __label__ = 89; break;
    case 63: 
      var $st$0$0=(($v)|0);
      var $365$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $365$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $366$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $366$1=HEAP32[(($st$4$1)>>2)];
      var $367=$365$0 == $366$0 && $365$1 == $366$1;
      var $368=(($367)&1);
      $matched=$368;
      var $369=$2;
      var $370=(($369+28)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371 & 1;
      var $373=(($372)|0)!=0;
      if ($373) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $375=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $376$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $376$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $377$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $377$1=HEAP32[(($st$5$1)>>2)];
      var $378=$matched;
      var $$emscripten$temp$15=((STRING_TABLE.__str1899)|0);
      var $379=_fprintf($375, $$emscripten$temp$15, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$376$0,HEAP32[(((tempInt)+(4))>>2)]=$376$1,HEAP32[(((tempInt)+(8))>>2)]=$377$0,HEAP32[(((tempInt)+(12))>>2)]=$377$1,HEAP32[(((tempInt)+(16))>>2)]=$378,tempInt));
      __label__ = 65; break;
    case 65: 
      __label__ = 89; break;
    case 66: 
      var $382=$3;
      var $383=(($382+2)|0);
      var $384=HEAPU8[($383)];
      var $385=(($384)&255);
      var $386=$385 & 8;
      var $387=(($386)|0)!=0;
      if ($387) { __label__ = 67; break; } else { __label__ = 70; break; }
    case 67: 
      var $st$0$0=(($v)|0);
      var $389$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $389$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $390$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $390$1=HEAP32[(($st$4$1)>>2)];
      var $391=($389$1>>>0) > ($390$1>>>0) || (($389$1>>>0) == ($390$1>>>0) && ($389$0>>>0) >  ($390$0>>>0));
      var $392=(($391)&1);
      $matched=$392;
      var $393=$2;
      var $394=(($393+28)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=$395 & 1;
      var $397=(($396)|0)!=0;
      if ($397) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $399=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $400$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $400$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $401$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $401$1=HEAP32[(($st$5$1)>>2)];
      var $402=$matched;
      var $$emscripten$temp$16=((STRING_TABLE.__str19100)|0);
      var $403=_fprintf($399, $$emscripten$temp$16, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$400$0,HEAP32[(((tempInt)+(4))>>2)]=$400$1,HEAP32[(((tempInt)+(8))>>2)]=$401$0,HEAP32[(((tempInt)+(12))>>2)]=$401$1,HEAP32[(((tempInt)+(16))>>2)]=$402,tempInt));
      __label__ = 69; break;
    case 69: 
      __label__ = 73; break;
    case 70: 
      var $st$0$0=(($v)|0);
      var $406$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $406$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $407$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $407$1=HEAP32[(($st$4$1)>>2)];
      var $408=($406$1|0) > ($407$1|0) || (($406$1|0) == ($407$1|0) && ($406$0>>>0) >  ($407$0>>>0));
      var $409=(($408)&1);
      $matched=$409;
      var $410=$2;
      var $411=(($410+28)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$412 & 1;
      var $414=(($413)|0)!=0;
      if ($414) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $416=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $417$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $417$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $418$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $418$1=HEAP32[(($st$5$1)>>2)];
      var $419=$matched;
      var $$emscripten$temp$17=((STRING_TABLE.__str20101)|0);
      var $420=_fprintf($416, $$emscripten$temp$17, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$417$0,HEAP32[(((tempInt)+(4))>>2)]=$417$1,HEAP32[(((tempInt)+(8))>>2)]=$418$0,HEAP32[(((tempInt)+(12))>>2)]=$418$1,HEAP32[(((tempInt)+(16))>>2)]=$419,tempInt));
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      __label__ = 89; break;
    case 74: 
      var $424=$3;
      var $425=(($424+2)|0);
      var $426=HEAPU8[($425)];
      var $427=(($426)&255);
      var $428=$427 & 8;
      var $429=(($428)|0)!=0;
      if ($429) { __label__ = 75; break; } else { __label__ = 78; break; }
    case 75: 
      var $st$0$0=(($v)|0);
      var $431$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $431$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $432$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $432$1=HEAP32[(($st$4$1)>>2)];
      var $433=($431$1>>>0) < ($432$1>>>0) || (($431$1>>>0) == ($432$1>>>0) && ($431$0>>>0) <  ($432$0>>>0));
      var $434=(($433)&1);
      $matched=$434;
      var $435=$2;
      var $436=(($435+28)|0);
      var $437=HEAP32[(($436)>>2)];
      var $438=$437 & 1;
      var $439=(($438)|0)!=0;
      if ($439) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $441=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $442$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $442$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $443$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $443$1=HEAP32[(($st$5$1)>>2)];
      var $444=$matched;
      var $$emscripten$temp$18=((STRING_TABLE.__str21102)|0);
      var $445=_fprintf($441, $$emscripten$temp$18, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$442$0,HEAP32[(((tempInt)+(4))>>2)]=$442$1,HEAP32[(((tempInt)+(8))>>2)]=$443$0,HEAP32[(((tempInt)+(12))>>2)]=$443$1,HEAP32[(((tempInt)+(16))>>2)]=$444,tempInt));
      __label__ = 77; break;
    case 77: 
      __label__ = 81; break;
    case 78: 
      var $st$0$0=(($v)|0);
      var $448$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $448$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $449$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $449$1=HEAP32[(($st$4$1)>>2)];
      var $450=($448$1|0) < ($449$1|0) || (($448$1|0) == ($449$1|0) && ($448$0>>>0) <  ($449$0>>>0));
      var $451=(($450)&1);
      $matched=$451;
      var $452=$2;
      var $453=(($452+28)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=$454 & 1;
      var $456=(($455)|0)!=0;
      if ($456) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $458=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $459$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $459$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $460$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $460$1=HEAP32[(($st$5$1)>>2)];
      var $461=$matched;
      var $$emscripten$temp$19=((STRING_TABLE.__str22103)|0);
      var $462=_fprintf($458, $$emscripten$temp$19, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$459$0,HEAP32[(((tempInt)+(4))>>2)]=$459$1,HEAP32[(((tempInt)+(8))>>2)]=$460$0,HEAP32[(((tempInt)+(12))>>2)]=$460$1,HEAP32[(((tempInt)+(16))>>2)]=$461,tempInt));
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      __label__ = 89; break;
    case 82: 
      var $st$0$0=(($v)|0);
      var $466$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $466$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $467$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $467$1=HEAP32[(($st$4$1)>>2)];
      var $468$0=$466$0 & $467$0;
      var $468$1=$466$1 & $467$1;
      var $st$10$0=(($l)|0);
      var $469$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($l+4)|0);
      var $469$1=HEAP32[(($st$10$1)>>2)];
      var $470=$468$0 == $469$0 && $468$1 == $469$1;
      var $471=(($470)&1);
      $matched=$471;
      var $472=$2;
      var $473=(($472+28)|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=$474 & 1;
      var $476=(($475)|0)!=0;
      if ($476) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $478=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $479$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $479$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $480$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $480$1=HEAP32[(($st$5$1)>>2)];
      var $st$9$0=(($l)|0);
      var $481$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($l+4)|0);
      var $481$1=HEAP32[(($st$9$1)>>2)];
      var $482=$matched;
      var $$emscripten$temp$20=((STRING_TABLE.__str23104)|0);
      var $483=_fprintf($478, $$emscripten$temp$20, (tempInt=STACKTOP,STACKTOP += 28,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$479$0,HEAP32[(((tempInt)+(4))>>2)]=$479$1,HEAP32[(((tempInt)+(8))>>2)]=$480$0,HEAP32[(((tempInt)+(12))>>2)]=$480$1,HEAP32[(((tempInt)+(16))>>2)]=$481$0,HEAP32[(((tempInt)+(20))>>2)]=$481$1,HEAP32[(((tempInt)+(24))>>2)]=$482,tempInt));
      __label__ = 84; break;
    case 84: 
      __label__ = 89; break;
    case 85: 
      var $st$0$0=(($v)|0);
      var $486$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $486$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $487$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $487$1=HEAP32[(($st$4$1)>>2)];
      var $488$0=$486$0 & $487$0;
      var $488$1=$486$1 & $487$1;
      var $st$10$0=(($l)|0);
      var $489$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($l+4)|0);
      var $489$1=HEAP32[(($st$10$1)>>2)];
      var $490=$488$0 != $489$0 || $488$1 != $489$1;
      var $491=(($490)&1);
      $matched=$491;
      var $492=$2;
      var $493=(($492+28)|0);
      var $494=HEAP32[(($493)>>2)];
      var $495=$494 & 1;
      var $496=(($495)|0)!=0;
      if ($496) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $498=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $499$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $499$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $500$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $500$1=HEAP32[(($st$5$1)>>2)];
      var $st$9$0=(($l)|0);
      var $501$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($l+4)|0);
      var $501$1=HEAP32[(($st$9$1)>>2)];
      var $502=$matched;
      var $$emscripten$temp$21=((STRING_TABLE.__str24105)|0);
      var $503=_fprintf($498, $$emscripten$temp$21, (tempInt=STACKTOP,STACKTOP += 28,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$499$0,HEAP32[(((tempInt)+(4))>>2)]=$499$1,HEAP32[(((tempInt)+(8))>>2)]=$500$0,HEAP32[(((tempInt)+(12))>>2)]=$500$1,HEAP32[(((tempInt)+(16))>>2)]=$501$0,HEAP32[(((tempInt)+(20))>>2)]=$501$1,HEAP32[(((tempInt)+(24))>>2)]=$502,tempInt));
      __label__ = 87; break;
    case 87: 
      __label__ = 89; break;
    case 88: 
      $matched=0;
      var $506=$2;
      var $507=$3;
      var $508=(($507+4)|0);
      var $509=HEAPU8[($508)];
      var $510=(($509)&255);
      _file_magerror($506, ((STRING_TABLE.__str25106)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$510,tempInt));
      $1=-1;
      __label__ = 90; break;
    case 89: 
      var $512=$matched;
      $1=$512;
      __label__ = 90; break;
    case 90: 
      var $514=$1;
      STACKTOP = __stackBase__;
      return $514;
    default: assert(0, "bad label: " + __label__);
  }
}
_magiccheck["X"]=1;

function _handle_annotation($ms, $m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$m;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 2048;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $10=$2;
      var $11=$3;
      var $12=(($11+224)|0);
      var $13=(($12)|0);
      var $14=_file_printf($10, ((STRING_TABLE.__str1091)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $15=(($14)|0)==-1;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 12; break;
    case 5: 
      $1=1;
      __label__ = 12; break;
    case 6: 
      var $19=$2;
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 16;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $25=$3;
      var $26=(($25+160)|0);
      var $27=(($26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28 << 24) >> 24);
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $32=$2;
      var $33=$3;
      var $34=(($33+160)|0);
      var $35=(($34)|0);
      var $36=_file_printf($32, ((STRING_TABLE.__str1192)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$35,tempInt));
      var $37=(($36)|0)==-1;
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=-1;
      __label__ = 12; break;
    case 10: 
      $1=1;
      __label__ = 12; break;
    case 11: 
      $1=0;
      __label__ = 12; break;
    case 12: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_handle_annotation["X"]=1;

function _print_sep($ms, $firstline) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$firstline;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 1040;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 7; break;
    case 4: 
      var $11=$3;
      var $12=(($11)|0)!=0;
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 7; break;
    case 6: 
      var $15=$2;
      var $16=_file_printf($15, ((STRING_TABLE.__str990)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$16;
      __label__ = 7; break;
    case 7: 
      var $18=$1;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}


function _mprint($ms, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 144; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v=__stackBase__;
      var $vf;
      var $vd;
      var $t=(__stackBase__)+(8);
      var $buf=(__stackBase__)+(16);
      var $p;
      var $cp;
      var $rval;
      $2=$ms;
      $3=$m;
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $st$15$0=(($t)|0);
      HEAP32[(($st$15$0)>>2)]=$$emscripten$temp$0$0;
      var $st$15$1=(($t+4)|0);
      HEAP32[(($st$15$1)>>2)]=$$emscripten$temp$0$1;
      var $4=$2;
      var $5=(($4+60)|0);
      $p=$5;
      var $6=$3;
      var $7=(($6+6)|0);
      var $8=HEAPU8[($7)];
      var $9=(($8)&255);
      if ((($9)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 2 || (($9)|0) == 7 || (($9)|0) == 10) {
        __label__ = 12; break;
      }
      else if ((($9)|0) == 4 || (($9)|0) == 8 || (($9)|0) == 11 || (($9)|0) == 23) {
        __label__ = 21; break;
      }
      else if ((($9)|0) == 24 || (($9)|0) == 26 || (($9)|0) == 25) {
        __label__ = 30; break;
      }
      else if ((($9)|0) == 5 || (($9)|0) == 13 || (($9)|0) == 18 || (($9)|0) == 19) {
        __label__ = 33; break;
      }
      else if ((($9)|0) == 6 || (($9)|0) == 9 || (($9)|0) == 12 || (($9)|0) == 21) {
        __label__ = 46; break;
      }
      else if ((($9)|0) == 14 || (($9)|0) == 15 || (($9)|0) == 16 || (($9)|0) == 22) {
        __label__ = 49; break;
      }
      else if ((($9)|0) == 27 || (($9)|0) == 29 || (($9)|0) == 28) {
        __label__ = 52; break;
      }
      else if ((($9)|0) == 30 || (($9)|0) == 32 || (($9)|0) == 31) {
        __label__ = 55; break;
      }
      else if ((($9)|0) == 33 || (($9)|0) == 34 || (($9)|0) == 35) {
        __label__ = 58; break;
      }
      else if ((($9)|0) == 36 || (($9)|0) == 37 || (($9)|0) == 38) {
        __label__ = 67; break;
      }
      else if ((($9)|0) == 17) {
        __label__ = 76; break;
      }
      else if ((($9)|0) == 20) {
        __label__ = 84; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 90; break;
      }
      else if ((($9)|0) == 41) {
        __label__ = 93; break;
      }
      else {
      __label__ = 94; break;
      }
      
    case 3: 
      var $11=$2;
      var $12=$3;
      var $13=$p;
      var $14=$13;
      var $15=HEAP8[($14)];
      var $16$0=(($15)&255);
      var $16$1=0;
      var $17=_file_signextend($11, $12, $16$0, $16$1);
      var $17$0=$17[0];
      var $17$1=$17[1];
      var $st$10$0=(($v)|0);
      HEAP32[(($st$10$0)>>2)]=$17$0;
      var $st$10$1=(($v+4)|0);
      HEAP32[(($st$10$1)>>2)]=$17$1;
      var $18=$2;
      var $19=$3;
      var $20=_check_fmt($18, $19);
      if ((($20)|0) == -1) {
        __label__ = 4; break;
      }
      else if ((($20)|0) == 1) {
        __label__ = 5; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 4: 
      $1=-1;
      __label__ = 96; break;
    case 5: 
      var $23=(($buf)|0);
      var $st$1$0=(($v)|0);
      var $24$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $24$1=HEAP32[(($st$1$1)>>2)];
      var $25$0=$24$0;
      var $25=$25$0&255;
      var $26=(($25)&255);
      var $27=_snprintf($23, 128, ((STRING_TABLE.__str283)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$26,tempInt));
      var $28=$2;
      var $29=$3;
      var $30=(($29+96)|0);
      var $31=(($30)|0);
      var $32=(($buf)|0);
      var $33=_file_printf($28, $31, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,tempInt));
      var $34=(($33)|0)==-1;
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=-1;
      __label__ = 96; break;
    case 7: 
      __label__ = 11; break;
    case 8: 
      var $38=$2;
      var $39=$3;
      var $40=(($39+96)|0);
      var $41=(($40)|0);
      var $st$4$0=(($v)|0);
      var $42$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($v+4)|0);
      var $42$1=HEAP32[(($st$4$1)>>2)];
      var $43$0=$42$0;
      var $43=$43$0&255;
      var $44=(($43)&255);
      var $45=_file_printf($38, $41, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$44,tempInt));
      var $46=(($45)|0)==-1;
      if ($46) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=-1;
      __label__ = 96; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $50=$2;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      var $54$0=$53;
      var $54$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$54$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$54$1;
      __label__ = 95; break;
    case 12: 
      var $56=$2;
      var $57=$3;
      var $58=$p;
      var $59=$58;
      var $60=HEAP16[(($59)>>1)];
      var $61$0=(($60)&65535);
      var $61$1=0;
      var $62=_file_signextend($56, $57, $61$0, $61$1);
      var $62$0=$62[0];
      var $62$1=$62[1];
      var $st$10$0=(($v)|0);
      HEAP32[(($st$10$0)>>2)]=$62$0;
      var $st$10$1=(($v+4)|0);
      HEAP32[(($st$10$1)>>2)]=$62$1;
      var $63=$2;
      var $64=$3;
      var $65=_check_fmt($63, $64);
      if ((($65)|0) == -1) {
        __label__ = 13; break;
      }
      else if ((($65)|0) == 1) {
        __label__ = 14; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 13: 
      $1=-1;
      __label__ = 96; break;
    case 14: 
      var $68=(($buf)|0);
      var $st$1$0=(($v)|0);
      var $69$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $69$1=HEAP32[(($st$1$1)>>2)];
      var $70$0=$69$0;
      var $70=$70$0&65535;
      var $71=(($70)&65535);
      var $72=_snprintf($68, 128, ((STRING_TABLE.__str384)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$71,tempInt));
      var $73=$2;
      var $74=$3;
      var $75=(($74+96)|0);
      var $76=(($75)|0);
      var $77=(($buf)|0);
      var $78=_file_printf($73, $76, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$77,tempInt));
      var $79=(($78)|0)==-1;
      if ($79) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $1=-1;
      __label__ = 96; break;
    case 16: 
      __label__ = 20; break;
    case 17: 
      var $83=$2;
      var $84=$3;
      var $85=(($84+96)|0);
      var $86=(($85)|0);
      var $st$4$0=(($v)|0);
      var $87$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($v+4)|0);
      var $87$1=HEAP32[(($st$4$1)>>2)];
      var $88$0=$87$0;
      var $88=$88$0&65535;
      var $89=(($88)&65535);
      var $90=_file_printf($83, $86, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$89,tempInt));
      var $91=(($90)|0)==-1;
      if ($91) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $1=-1;
      __label__ = 96; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $95=$2;
      var $96=(($95+20)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((($97)+(2))|0);
      var $99$0=$98;
      var $99$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$99$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$99$1;
      __label__ = 95; break;
    case 21: 
      var $101=$2;
      var $102=$3;
      var $103=$p;
      var $104=$103;
      var $105=HEAP32[(($104)>>2)];
      var $106$0=$105;
      var $106$1=0;
      var $107=_file_signextend($101, $102, $106$0, $106$1);
      var $107$0=$107[0];
      var $107$1=$107[1];
      var $st$10$0=(($v)|0);
      HEAP32[(($st$10$0)>>2)]=$107$0;
      var $st$10$1=(($v+4)|0);
      HEAP32[(($st$10$1)>>2)]=$107$1;
      var $108=$2;
      var $109=$3;
      var $110=_check_fmt($108, $109);
      if ((($110)|0) == -1) {
        __label__ = 22; break;
      }
      else if ((($110)|0) == 1) {
        __label__ = 23; break;
      }
      else {
      __label__ = 26; break;
      }
      
    case 22: 
      $1=-1;
      __label__ = 96; break;
    case 23: 
      var $113=(($buf)|0);
      var $st$1$0=(($v)|0);
      var $114$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $114$1=HEAP32[(($st$1$1)>>2)];
      var $115$0=$114$0;
      var $115=$115$0;
      var $116=_snprintf($113, 128, ((STRING_TABLE.__str485)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$115,tempInt));
      var $117=$2;
      var $118=$3;
      var $119=(($118+96)|0);
      var $120=(($119)|0);
      var $121=(($buf)|0);
      var $122=_file_printf($117, $120, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$121,tempInt));
      var $123=(($122)|0)==-1;
      if ($123) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      $1=-1;
      __label__ = 96; break;
    case 25: 
      __label__ = 29; break;
    case 26: 
      var $127=$2;
      var $128=$3;
      var $129=(($128+96)|0);
      var $130=(($129)|0);
      var $st$4$0=(($v)|0);
      var $131$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($v+4)|0);
      var $131$1=HEAP32[(($st$4$1)>>2)];
      var $132$0=$131$0;
      var $132=$132$0;
      var $133=_file_printf($127, $130, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$132,tempInt));
      var $134=(($133)|0)==-1;
      if ($134) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      $1=-1;
      __label__ = 96; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $138=$2;
      var $139=(($138+20)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)+(4))|0);
      var $142$0=$141;
      var $142$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$142$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$142$1;
      __label__ = 95; break;
    case 30: 
      var $144=$2;
      var $145=$3;
      var $146=$p;
      var $147=$146;
      var $st$4$0=(($147)|0);
      var $148$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($147+4)|0);
      var $148$1=HEAP32[(($st$4$1)>>2)];
      var $149=_file_signextend($144, $145, $148$0, $148$1);
      var $149$0=$149[0];
      var $149$1=$149[1];
      var $st$11$0=(($v)|0);
      HEAP32[(($st$11$0)>>2)]=$149$0;
      var $st$11$1=(($v+4)|0);
      HEAP32[(($st$11$1)>>2)]=$149$1;
      var $150=$2;
      var $151=$3;
      var $152=(($151+96)|0);
      var $153=(($152)|0);
      var $st$19$0=(($v)|0);
      var $154$0=HEAP32[(($st$19$0)>>2)];
      var $st$19$1=(($v+4)|0);
      var $154$1=HEAP32[(($st$19$1)>>2)];
      var $155=_file_printf($150, $153, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$154$0,HEAP32[(((tempInt)+(4))>>2)]=$154$1,tempInt));
      var $156=(($155)|0)==-1;
      if ($156) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      $1=-1;
      __label__ = 96; break;
    case 32: 
      var $159=$2;
      var $160=(($159+20)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)+(8))|0);
      var $163$0=$162;
      var $163$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$163$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$163$1;
      __label__ = 95; break;
    case 33: 
      var $165=$3;
      var $166=(($165+4)|0);
      var $167=HEAPU8[($166)];
      var $168=(($167)&255);
      var $169=(($168)|0)==61;
      if ($169) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: 
      var $171=$3;
      var $172=(($171+4)|0);
      var $173=HEAPU8[($172)];
      var $174=(($173)&255);
      var $175=(($174)|0)==33;
      if ($175) { __label__ = 35; break; } else { __label__ = 38; break; }
    case 35: 
      var $177=$2;
      var $178=$3;
      var $179=(($178+96)|0);
      var $180=(($179)|0);
      var $181=$3;
      var $182=(($181+32)|0);
      var $183=$182;
      var $184=(($183)|0);
      var $185=_file_printf($177, $180, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$184,tempInt));
      var $186=(($185)|0)==-1;
      if ($186) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      $1=-1;
      __label__ = 96; break;
    case 37: 
      var $189=$2;
      var $190=(($189+20)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$3;
      var $193=(($192+5)|0);
      var $194=HEAPU8[($193)];
      var $195=(($194)&255);
      var $196=((($191)+($195))|0);
      var $197$0=$196;
      var $197$1=0;
      var $st$10$0=(($t)|0);
      HEAP32[(($st$10$0)>>2)]=$197$0;
      var $st$10$1=(($t+4)|0);
      HEAP32[(($st$10$1)>>2)]=$197$1;
      __label__ = 45; break;
    case 38: 
      var $199=$3;
      var $200=(($199+32)|0);
      var $201=$200;
      var $202=(($201)|0);
      var $203=HEAP8[($202)];
      var $204=(($203 << 24) >> 24);
      var $205=(($204)|0)==0;
      if ($205) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $207=$p;
      var $208=$207;
      var $209=(($208)|0);
      var $210=_strcspn($209, ((STRING_TABLE.__str182)|0));
      var $211=$p;
      var $212=$211;
      var $213=(($212+$210)|0);
      HEAP8[($213)]=0;
      __label__ = 40; break;
    case 40: 
      var $215=$2;
      var $216=$3;
      var $217=(($216+96)|0);
      var $218=(($217)|0);
      var $219=$p;
      var $220=$219;
      var $221=(($220)|0);
      var $222=_file_printf($215, $218, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$221,tempInt));
      var $223=(($222)|0)==-1;
      if ($223) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      $1=-1;
      __label__ = 96; break;
    case 42: 
      var $226=$2;
      var $227=(($226+20)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$p;
      var $230=$229;
      var $231=(($230)|0);
      var $232=_strlen($231);
      var $233=((($228)+($232))|0);
      var $234$0=$233;
      var $234$1=0;
      var $st$10$0=(($t)|0);
      HEAP32[(($st$10$0)>>2)]=$234$0;
      var $st$10$1=(($t+4)|0);
      HEAP32[(($st$10$1)>>2)]=$234$1;
      var $235=$3;
      var $236=(($235+6)|0);
      var $237=HEAPU8[($236)];
      var $238=(($237)&255);
      var $239=(($238)|0)==13;
      if ($239) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $241=$3;
      var $242=_file_pstring_length_size($241);
      var $243$0=$242;
      var $243$1=0;
      var $st$4$0=(($t)|0);
      var $244$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t+4)|0);
      var $244$1=HEAP32[(($st$4$1)>>2)];
      var $245$0 = (i64Math.add($244$0,$244$1,$243$0,$243$1),i64Math.result[0]); var $245$1 = i64Math.result[1];
      var $st$9$0=(($t)|0);
      HEAP32[(($st$9$0)>>2)]=$245$0;
      var $st$9$1=(($t+4)|0);
      HEAP32[(($st$9$1)>>2)]=$245$1;
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 95; break;
    case 46: 
      var $249=$2;
      var $250=$3;
      var $251=(($250+96)|0);
      var $252=(($251)|0);
      var $253=$p;
      var $254=$253;
      var $255=HEAP32[(($254)>>2)];
      var $256=_file_fmttime($255, 1);
      var $257=_file_printf($249, $252, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$256,tempInt));
      var $258=(($257)|0)==-1;
      if ($258) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      $1=-1;
      __label__ = 96; break;
    case 48: 
      var $261=$2;
      var $262=(($261+20)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=((($263)+(4))|0);
      var $265$0=$264;
      var $265$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$265$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$265$1;
      __label__ = 95; break;
    case 49: 
      var $267=$2;
      var $268=$3;
      var $269=(($268+96)|0);
      var $270=(($269)|0);
      var $271=$p;
      var $272=$271;
      var $273=HEAP32[(($272)>>2)];
      var $274=_file_fmttime($273, 0);
      var $275=_file_printf($267, $270, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$274,tempInt));
      var $276=(($275)|0)==-1;
      if ($276) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      $1=-1;
      __label__ = 96; break;
    case 51: 
      var $279=$2;
      var $280=(($279+20)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=((($281)+(4))|0);
      var $283$0=$282;
      var $283$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$283$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$283$1;
      __label__ = 95; break;
    case 52: 
      var $285=$2;
      var $286=$3;
      var $287=(($286+96)|0);
      var $288=(($287)|0);
      var $289=$p;
      var $290=$289;
      var $st$6$0=(($290)|0);
      var $291$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($290+4)|0);
      var $291$1=HEAP32[(($st$6$1)>>2)];
      var $292$0=$291$0;
      var $292=$292$0;
      var $293=_file_fmttime($292, 1);
      var $294=_file_printf($285, $288, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$293,tempInt));
      var $295=(($294)|0)==-1;
      if ($295) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      $1=-1;
      __label__ = 96; break;
    case 54: 
      var $298=$2;
      var $299=(($298+20)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=((($300)+(8))|0);
      var $302$0=$301;
      var $302$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$302$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$302$1;
      __label__ = 95; break;
    case 55: 
      var $304=$2;
      var $305=$3;
      var $306=(($305+96)|0);
      var $307=(($306)|0);
      var $308=$p;
      var $309=$308;
      var $st$6$0=(($309)|0);
      var $310$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($309+4)|0);
      var $310$1=HEAP32[(($st$6$1)>>2)];
      var $311$0=$310$0;
      var $311=$311$0;
      var $312=_file_fmttime($311, 0);
      var $313=_file_printf($304, $307, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$312,tempInt));
      var $314=(($313)|0)==-1;
      if ($314) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      $1=-1;
      __label__ = 96; break;
    case 57: 
      var $317=$2;
      var $318=(($317+20)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=((($319)+(8))|0);
      var $321$0=$320;
      var $321$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$321$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$321$1;
      __label__ = 95; break;
    case 58: 
      var $323=$p;
      var $324=$323;
      var $325=HEAPF32[(($324)>>2)];
      $vf=$325;
      var $326=$2;
      var $327=$3;
      var $328=_check_fmt($326, $327);
      if ((($328)|0) == -1) {
        __label__ = 59; break;
      }
      else if ((($328)|0) == 1) {
        __label__ = 60; break;
      }
      else {
      __label__ = 63; break;
      }
      
    case 59: 
      $1=-1;
      __label__ = 96; break;
    case 60: 
      var $331=(($buf)|0);
      var $332=$vf;
      var $333=$332;
      var $334=_snprintf($331, 128, ((STRING_TABLE.__str586)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$333,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $335=$2;
      var $336=$3;
      var $337=(($336+96)|0);
      var $338=(($337)|0);
      var $339=(($buf)|0);
      var $340=_file_printf($335, $338, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$339,tempInt));
      var $341=(($340)|0)==-1;
      if ($341) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      $1=-1;
      __label__ = 96; break;
    case 62: 
      __label__ = 66; break;
    case 63: 
      var $345=$2;
      var $346=$3;
      var $347=(($346+96)|0);
      var $348=(($347)|0);
      var $349=$vf;
      var $350=$349;
      var $351=_file_printf($345, $348, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$350,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $352=(($351)|0)==-1;
      if ($352) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      $1=-1;
      __label__ = 96; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $356=$2;
      var $357=(($356+20)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=((($358)+(4))|0);
      var $360$0=$359;
      var $360$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$360$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$360$1;
      __label__ = 95; break;
    case 67: 
      var $362=$p;
      var $363=$362;
      var $364=(tempDoubleI32[0]=HEAP32[(($363)>>2)],tempDoubleI32[1]=HEAP32[((($363)+(4))>>2)],tempDoubleF64[0]);
      $vd=$364;
      var $365=$2;
      var $366=$3;
      var $367=_check_fmt($365, $366);
      if ((($367)|0) == -1) {
        __label__ = 68; break;
      }
      else if ((($367)|0) == 1) {
        __label__ = 69; break;
      }
      else {
      __label__ = 72; break;
      }
      
    case 68: 
      $1=-1;
      __label__ = 96; break;
    case 69: 
      var $370=(($buf)|0);
      var $371=$vd;
      var $372=_snprintf($370, 128, ((STRING_TABLE.__str586)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$371,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $373=$2;
      var $374=$3;
      var $375=(($374+96)|0);
      var $376=(($375)|0);
      var $377=(($buf)|0);
      var $378=_file_printf($373, $376, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$377,tempInt));
      var $379=(($378)|0)==-1;
      if ($379) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      $1=-1;
      __label__ = 96; break;
    case 71: 
      __label__ = 75; break;
    case 72: 
      var $383=$2;
      var $384=$3;
      var $385=(($384+96)|0);
      var $386=(($385)|0);
      var $387=$vd;
      var $388=_file_printf($383, $386, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$387,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $389=(($388)|0)==-1;
      if ($389) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      $1=-1;
      __label__ = 96; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      var $393=$2;
      var $394=(($393+20)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=((($395)+(8))|0);
      var $397$0=$396;
      var $397$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$397$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$397$1;
      __label__ = 95; break;
    case 76: 
      var $399=$2;
      var $400=(($399+44)|0);
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$2;
      var $404=(($403+44)|0);
      var $405=(($404+12)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=_strndup($402, $406);
      $cp=$407;
      var $408=$cp;
      var $409=(($408)|0)==0;
      if ($409) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $411=$2;
      var $412=$2;
      var $413=(($412+44)|0);
      var $414=(($413+12)|0);
      var $415=HEAP32[(($414)>>2)];
      _file_oomem($411, $415);
      $1=-1;
      __label__ = 96; break;
    case 78: 
      var $417=$2;
      var $418=$3;
      var $419=(($418+96)|0);
      var $420=(($419)|0);
      var $421=$cp;
      var $422=_file_printf($417, $420, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$421,tempInt));
      $rval=$422;
      var $423=$cp;
      _free($423);
      var $424=$rval;
      var $425=(($424)|0)==-1;
      if ($425) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      $1=-1;
      __label__ = 96; break;
    case 80: 
      var $428=$3;
      var $429=(($428+24)|0);
      var $430=$429;
      var $431=(($430+4)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=$432 & 16;
      var $434=(($433)|0)!=0;
      if ($434) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $436=$2;
      var $437=(($436+44)|0);
      var $438=(($437+8)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440$0=$439;
      var $440$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$440$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$440$1;
      __label__ = 83; break;
    case 82: 
      var $442=$2;
      var $443=(($442+44)|0);
      var $444=(($443+8)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=$2;
      var $447=(($446+44)|0);
      var $448=(($447+12)|0);
      var $449=HEAP32[(($448)>>2)];
      var $450=((($445)+($449))|0);
      var $451$0=$450;
      var $451$1=0;
      var $st$11$0=(($t)|0);
      HEAP32[(($st$11$0)>>2)]=$451$0;
      var $st$11$1=(($t+4)|0);
      HEAP32[(($st$11$1)>>2)]=$451$1;
      __label__ = 83; break;
    case 83: 
      __label__ = 95; break;
    case 84: 
      var $454=$2;
      var $455=$3;
      var $456=(($455+96)|0);
      var $457=(($456)|0);
      var $458=$3;
      var $459=(($458+32)|0);
      var $460=$459;
      var $461=(($460)|0);
      var $462=_file_printf($454, $457, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$461,tempInt));
      var $463=(($462)|0)==-1;
      if ($463) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      $1=-1;
      __label__ = 96; break;
    case 86: 
      var $466=$3;
      var $467=(($466+24)|0);
      var $468=$467;
      var $469=(($468+4)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=$470 & 16;
      var $472=(($471)|0)!=0;
      if ($472) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $474=$2;
      var $475=(($474+44)|0);
      var $476=(($475+8)|0);
      var $477=HEAP32[(($476)>>2)];
      var $478$0=$477;
      var $478$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$478$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$478$1;
      __label__ = 89; break;
    case 88: 
      var $480=$2;
      var $481=(($480+44)|0);
      var $482=(($481+8)|0);
      var $483=HEAP32[(($482)>>2)];
      var $484=$3;
      var $485=(($484+5)|0);
      var $486=HEAPU8[($485)];
      var $487=(($486)&255);
      var $488=((($483)+($487))|0);
      var $489$0=$488;
      var $489$1=0;
      var $st$11$0=(($t)|0);
      HEAP32[(($st$11$0)>>2)]=$489$0;
      var $st$11$1=(($t+4)|0);
      HEAP32[(($st$11$1)>>2)]=$489$1;
      __label__ = 89; break;
    case 89: 
      __label__ = 95; break;
    case 90: 
      var $492=$2;
      var $493=$3;
      var $494=(($493+96)|0);
      var $495=(($494)|0);
      var $496=$3;
      var $497=(($496+32)|0);
      var $498=$497;
      var $499=(($498)|0);
      var $500=_file_printf($492, $495, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$499,tempInt));
      var $501=(($500)|0)==-1;
      if ($501) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      $1=-1;
      __label__ = 96; break;
    case 92: 
      var $504=$2;
      var $505=(($504+20)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507$0=$506;
      var $507$1=0;
      var $st$5$0=(($t)|0);
      HEAP32[(($st$5$0)>>2)]=$507$0;
      var $st$5$1=(($t+4)|0);
      HEAP32[(($st$5$1)>>2)]=$507$1;
      __label__ = 95; break;
    case 93: 
      var $509=$2;
      var $510=(($509+20)|0);
      var $511=HEAP32[(($510)>>2)];
      var $512$0=$511;
      var $512$1=0;
      var $st$5$0=(($t)|0);
      HEAP32[(($st$5$0)>>2)]=$512$0;
      var $st$5$1=(($t+4)|0);
      HEAP32[(($st$5$1)>>2)]=$512$1;
      __label__ = 95; break;
    case 94: 
      var $514=$2;
      var $515=$3;
      var $516=(($515+6)|0);
      var $517=HEAPU8[($516)];
      var $518=(($517)&255);
      _file_magerror($514, ((STRING_TABLE.__str687)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$518,tempInt));
      $1=-1;
      __label__ = 96; break;
    case 95: 
      var $st$0$0=(($t)|0);
      var $520$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t+4)|0);
      var $520$1=HEAP32[(($st$0$1)>>2)];
      var $521$0=$520$0;
      var $521=$521$0;
      $1=$521;
      __label__ = 96; break;
    case 96: 
      var $523=$1;
      STACKTOP = __stackBase__;
      return $523;
    default: assert(0, "bad label: " + __label__);
  }
}
_mprint["X"]=1;

function _moffset($ms, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      var $t;
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+6)|0);
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      if ((($7)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 2 || (($7)|0) == 7 || (($7)|0) == 10) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 4 || (($7)|0) == 8 || (($7)|0) == 11 || (($7)|0) == 23) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 24 || (($7)|0) == 26 || (($7)|0) == 25) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 5 || (($7)|0) == 13 || (($7)|0) == 18 || (($7)|0) == 19) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 6 || (($7)|0) == 9 || (($7)|0) == 12 || (($7)|0) == 21) {
        __label__ = 15; break;
      }
      else if ((($7)|0) == 14 || (($7)|0) == 15 || (($7)|0) == 16 || (($7)|0) == 22) {
        __label__ = 16; break;
      }
      else if ((($7)|0) == 27 || (($7)|0) == 29 || (($7)|0) == 28) {
        __label__ = 17; break;
      }
      else if ((($7)|0) == 30 || (($7)|0) == 32 || (($7)|0) == 31) {
        __label__ = 18; break;
      }
      else if ((($7)|0) == 33 || (($7)|0) == 34 || (($7)|0) == 35) {
        __label__ = 19; break;
      }
      else if ((($7)|0) == 36 || (($7)|0) == 37 || (($7)|0) == 38) {
        __label__ = 20; break;
      }
      else if ((($7)|0) == 17) {
        __label__ = 21; break;
      }
      else if ((($7)|0) == 20) {
        __label__ = 24; break;
      }
      else if ((($7)|0) == 3) {
        __label__ = 27; break;
      }
      else if ((($7)|0) == 41) {
        __label__ = 28; break;
      }
      else {
      __label__ = 29; break;
      }
      
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)+(1))|0);
      $1=$12;
      __label__ = 30; break;
    case 4: 
      var $14=$2;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)+(2))|0);
      $1=$17;
      __label__ = 30; break;
    case 5: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)+(4))|0);
      $1=$22;
      __label__ = 30; break;
    case 6: 
      var $24=$2;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)+(8))|0);
      $1=$27;
      __label__ = 30; break;
    case 7: 
      var $29=$3;
      var $30=(($29+4)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=(($32)|0)==61;
      if ($33) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $35=$3;
      var $36=(($35+4)|0);
      var $37=HEAPU8[($36)];
      var $38=(($37)&255);
      var $39=(($38)|0)==33;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $41=$2;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$3;
      var $45=(($44+5)|0);
      var $46=HEAPU8[($45)];
      var $47=(($46)&255);
      var $48=((($43)+($47))|0);
      $1=$48;
      __label__ = 30; break;
    case 10: 
      var $50=$2;
      var $51=(($50+60)|0);
      $p=$51;
      var $52=$3;
      var $53=(($52+32)|0);
      var $54=$53;
      var $55=(($54)|0);
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $58=(($57)|0)==0;
      if ($58) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $60=$p;
      var $61=$60;
      var $62=(($61)|0);
      var $63=_strcspn($62, ((STRING_TABLE.__str182)|0));
      var $64=$p;
      var $65=$64;
      var $66=(($65+$63)|0);
      HEAP8[($66)]=0;
      __label__ = 12; break;
    case 12: 
      var $68=$2;
      var $69=(($68+20)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$p;
      var $72=$71;
      var $73=(($72)|0);
      var $74=_strlen($73);
      var $75=((($70)+($74))|0);
      $t=$75;
      var $76=$3;
      var $77=(($76+6)|0);
      var $78=HEAPU8[($77)];
      var $79=(($78)&255);
      var $80=(($79)|0)==13;
      if ($80) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $82=$3;
      var $83=_file_pstring_length_size($82);
      var $84=$t;
      var $85=((($84)+($83))|0);
      $t=$85;
      __label__ = 14; break;
    case 14: 
      var $87=$t;
      $1=$87;
      __label__ = 30; break;
    case 15: 
      var $89=$2;
      var $90=(($89+20)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=((($91)+(4))|0);
      $1=$92;
      __label__ = 30; break;
    case 16: 
      var $94=$2;
      var $95=(($94+20)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)+(4))|0);
      $1=$97;
      __label__ = 30; break;
    case 17: 
      var $99=$2;
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($101)+(8))|0);
      $1=$102;
      __label__ = 30; break;
    case 18: 
      var $104=$2;
      var $105=(($104+20)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=((($106)+(8))|0);
      $1=$107;
      __label__ = 30; break;
    case 19: 
      var $109=$2;
      var $110=(($109+20)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+(4))|0);
      $1=$112;
      __label__ = 30; break;
    case 20: 
      var $114=$2;
      var $115=(($114+20)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)+(8))|0);
      $1=$117;
      __label__ = 30; break;
    case 21: 
      var $119=$3;
      var $120=(($119+24)|0);
      var $121=$120;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$123 & 16;
      var $125=(($124)|0)!=0;
      if ($125) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $127=$2;
      var $128=(($127+44)|0);
      var $129=(($128+8)|0);
      var $130=HEAP32[(($129)>>2)];
      $1=$130;
      __label__ = 30; break;
    case 23: 
      var $132=$2;
      var $133=(($132+44)|0);
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$2;
      var $137=(($136+44)|0);
      var $138=(($137+12)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=((($135)+($139))|0);
      $1=$140;
      __label__ = 30; break;
    case 24: 
      var $142=$3;
      var $143=(($142+24)|0);
      var $144=$143;
      var $145=(($144+4)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$146 & 16;
      var $148=(($147)|0)!=0;
      if ($148) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $150=$2;
      var $151=(($150+44)|0);
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $1=$153;
      __label__ = 30; break;
    case 26: 
      var $155=$2;
      var $156=(($155+44)|0);
      var $157=(($156+8)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$3;
      var $160=(($159+5)|0);
      var $161=HEAPU8[($160)];
      var $162=(($161)&255);
      var $163=((($158)+($162))|0);
      $1=$163;
      __label__ = 30; break;
    case 27: 
      var $165=$2;
      var $166=(($165+20)|0);
      var $167=HEAP32[(($166)>>2)];
      $1=$167;
      __label__ = 30; break;
    case 28: 
      var $169=$2;
      var $170=(($169+20)|0);
      var $171=HEAP32[(($170)>>2)];
      $1=$171;
      __label__ = 30; break;
    case 29: 
      $1=0;
      __label__ = 30; break;
    case 30: 
      var $174=$1;
      ;
      return $174;
    default: assert(0, "bad label: " + __label__);
  }
}
_moffset["X"]=1;

function _check_fmt($ms, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 528; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $rx=__stackBase__;
      var $rc;
      var $errmsg=(__stackBase__)+(16);
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+96)|0);
      var $6=(($5)|0);
      var $7=_strchr($6, 37);
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 7; break;
    case 4: 
      var $11=_llvm_regcomp($rx, ((STRING_TABLE.__str788)|0), 5);
      $rc=$11;
      var $12=$rc;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$rc;
      var $16=(($errmsg)|0);
      var $17=_llvm_regerror($15, $rx, $16, 512);
      var $18=$2;
      var $19=$rc;
      var $20=(($errmsg)|0);
      _file_magerror($18, ((STRING_TABLE.__str889)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,HEAP32[(((tempInt)+(4))>>2)]=$20,tempInt));
      $1=-1;
      __label__ = 7; break;
    case 6: 
      var $22=$3;
      var $23=(($22+96)|0);
      var $24=(($23)|0);
      var $25=_llvm_regexec($rx, $24, 0, 0, 0);
      $rc=$25;
      _llvm_regfree($rx);
      var $26=$rc;
      var $27=(($26)|0)!=0;
      var $28=$27 ^ 1;
      var $29=(($28)&1);
      $1=$29;
      __label__ = 7; break;
    case 7: 
      var $31=$1;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_strncmp($s1, $s2, $len, $flags) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $a;
      var $b;
      var $v=__stackBase__;
      $1=$s1;
      $2=$s2;
      $3=$len;
      $4=$flags;
      var $5=$1;
      $a=$5;
      var $6=$2;
      $b=$6;
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $st$17$0=(($v)|0);
      HEAP32[(($st$17$0)>>2)]=$$emscripten$temp$0$0;
      var $st$17$1=(($v+4)|0);
      HEAP32[(($st$17$1)>>2)]=$$emscripten$temp$0$1;
      var $7=$4;
      var $8=0==(($7)|0);
      if ($8) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $11=$3;
      var $12=((($11)-(1))|0);
      $3=$12;
      var $13=(($11)>>>0) > 0;
      if ($13) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $15=$b;
      var $16=(($15+1)|0);
      $b=$16;
      var $17=HEAPU8[($15)];
      var $18=(($17)&255);
      var $19=$a;
      var $20=(($19+1)|0);
      $a=$20;
      var $21=HEAPU8[($19)];
      var $22=(($21)&255);
      var $23=((($18)-($22))|0);
      var $24$0=$23;
      var $24$1=((($23)|0) < 0 ? -1 : 0);
      var $st$13$0=(($v)|0);
      HEAP32[(($st$13$0)>>2)]=$24$0;
      var $st$13$1=(($v+4)|0);
      HEAP32[(($st$13$1)>>2)]=$24$1;
      var $$emscripten$temp$1$0=0;
      var $$emscripten$temp$1$1=0;
      var $25=$24$0 != $$emscripten$temp$1$0 || $24$1 != $$emscripten$temp$1$1;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      __label__ = 4; break;
    case 8: 
      __label__ = 46; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $31=$3;
      var $32=((($31)-(1))|0);
      $3=$32;
      var $33=(($31)>>>0) > 0;
      if ($33) { __label__ = 11; break; } else { __label__ = 45; break; }
    case 11: 
      var $35=$4;
      var $36=$35 & 4;
      var $37=(($36)|0)!=0;
      if ($37) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $39=$a;
      var $40=HEAPU8[($39)];
      var $41=(($40)&255);
      var $42=_islower($41);
      var $43=(($42)|0)!=0;
      if ($43) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $45=$b;
      var $46=(($45+1)|0);
      $b=$46;
      var $47=HEAPU8[($45)];
      var $48=(($47)&255);
      var $49=_tolower($48);
      var $50=$a;
      var $51=(($50+1)|0);
      $a=$51;
      var $52=HEAPU8[($50)];
      var $53=(($52)&255);
      var $54=((($49)-($53))|0);
      var $55$0=$54;
      var $55$1=((($54)|0) < 0 ? -1 : 0);
      var $st$14$0=(($v)|0);
      HEAP32[(($st$14$0)>>2)]=$55$0;
      var $st$14$1=(($v+4)|0);
      HEAP32[(($st$14$1)>>2)]=$55$1;
      var $$emscripten$temp$2$0=0;
      var $$emscripten$temp$2$1=0;
      var $56=$55$0 != $$emscripten$temp$2$0 || $55$1 != $$emscripten$temp$2$1;
      if ($56) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 45; break;
    case 15: 
      __label__ = 44; break;
    case 16: 
      var $60=$4;
      var $61=$60 & 8;
      var $62=(($61)|0)!=0;
      if ($62) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $64=$a;
      var $65=HEAPU8[($64)];
      var $66=(($65)&255);
      var $67=_isupper($66);
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $70=$b;
      var $71=(($70+1)|0);
      $b=$71;
      var $72=HEAPU8[($70)];
      var $73=(($72)&255);
      var $74=_toupper($73);
      var $75=$a;
      var $76=(($75+1)|0);
      $a=$76;
      var $77=HEAPU8[($75)];
      var $78=(($77)&255);
      var $79=((($74)-($78))|0);
      var $80$0=$79;
      var $80$1=((($79)|0) < 0 ? -1 : 0);
      var $st$14$0=(($v)|0);
      HEAP32[(($st$14$0)>>2)]=$80$0;
      var $st$14$1=(($v+4)|0);
      HEAP32[(($st$14$1)>>2)]=$80$1;
      var $$emscripten$temp$3$0=0;
      var $$emscripten$temp$3$1=0;
      var $81=$80$0 != $$emscripten$temp$3$0 || $80$1 != $$emscripten$temp$3$1;
      if ($81) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 45; break;
    case 20: 
      __label__ = 43; break;
    case 21: 
      var $85=$4;
      var $86=$85 & 1;
      var $87=(($86)|0)!=0;
      if ($87) { __label__ = 22; break; } else { __label__ = 32; break; }
    case 22: 
      var $89=$a;
      var $90=HEAPU8[($89)];
      var $91=(($90)&255);
      var $92=_isspace($91);
      var $93=(($92)|0)!=0;
      if ($93) { __label__ = 23; break; } else { __label__ = 32; break; }
    case 23: 
      var $95=$a;
      var $96=(($95+1)|0);
      $a=$96;
      var $97=$b;
      var $98=(($97+1)|0);
      $b=$98;
      var $99=HEAPU8[($97)];
      var $100=(($99)&255);
      var $101=_isspace($100);
      var $102=(($101)|0)!=0;
      if ($102) { __label__ = 24; break; } else { __label__ = 30; break; }
    case 24: 
      var $104=$a;
      var $105=HEAPU8[($104)];
      var $106=(($105)&255);
      var $107=_isspace($106);
      var $108=(($107)|0)!=0;
      if ($108) { __label__ = 29; break; } else { __label__ = 25; break; }
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $111=$b;
      var $112=HEAPU8[($111)];
      var $113=(($112)&255);
      var $114=_isspace($113);
      var $115=(($114)|0)!=0;
      if ($115) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $117=$b;
      var $118=(($117+1)|0);
      $b=$118;
      __label__ = 26; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 31; break;
    case 30: 
      var $$emscripten$temp$4$0=1;
      var $$emscripten$temp$4$1=0;
      var $st$2$0=(($v)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$4$0;
      var $st$2$1=(($v+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$4$1;
      __label__ = 45; break;
    case 31: 
      __label__ = 42; break;
    case 32: 
      var $124=$4;
      var $125=$124 & 2;
      var $126=(($125)|0)!=0;
      if ($126) { __label__ = 33; break; } else { __label__ = 38; break; }
    case 33: 
      var $128=$a;
      var $129=HEAPU8[($128)];
      var $130=(($129)&255);
      var $131=_isspace($130);
      var $132=(($131)|0)!=0;
      if ($132) { __label__ = 34; break; } else { __label__ = 38; break; }
    case 34: 
      var $134=$a;
      var $135=(($134+1)|0);
      $a=$135;
      __label__ = 35; break;
    case 35: 
      var $137=$b;
      var $138=HEAPU8[($137)];
      var $139=(($138)&255);
      var $140=_isspace($139);
      var $141=(($140)|0)!=0;
      if ($141) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $143=$b;
      var $144=(($143+1)|0);
      $b=$144;
      __label__ = 35; break;
    case 37: 
      __label__ = 41; break;
    case 38: 
      var $147=$b;
      var $148=(($147+1)|0);
      $b=$148;
      var $149=HEAPU8[($147)];
      var $150=(($149)&255);
      var $151=$a;
      var $152=(($151+1)|0);
      $a=$152;
      var $153=HEAPU8[($151)];
      var $154=(($153)&255);
      var $155=((($150)-($154))|0);
      var $156$0=$155;
      var $156$1=((($155)|0) < 0 ? -1 : 0);
      var $st$13$0=(($v)|0);
      HEAP32[(($st$13$0)>>2)]=$156$0;
      var $st$13$1=(($v+4)|0);
      HEAP32[(($st$13$1)>>2)]=$156$1;
      var $$emscripten$temp$5$0=0;
      var $$emscripten$temp$5$1=0;
      var $157=$156$0 != $$emscripten$temp$5$0 || $156$1 != $$emscripten$temp$5$1;
      if ($157) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      __label__ = 45; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 10; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      var $st$0$0=(($v)|0);
      var $166$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $166$1=HEAP32[(($st$0$1)>>2)];
      STACKTOP = __stackBase__;
      return [$166$0,$166$1];
    default: assert(0, "bad label: " + __label__);
  }
}
_file_strncmp["X"]=1;

function _file_strncmp16($a, $b, $len, $flags) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$a;
  $2=$b;
  $3=$len;
  $4=$flags;
  $4=0;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=_file_strncmp($5, $6, $7, $8);
  var $9$0=$9[0];
  var $9$1=$9[1];
  ;
  return [$9$0,$9$1];
}


function _mcopy($ms, $p, $type, $indir, $s, $offset, $nbytes, $linecnt) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $b;
      var $c;
      var $last;
      var $buf;
      var $end;
      var $lines;
      var $src;
      var $esrc;
      var $dst;
      var $edst;
      $2=$ms;
      $3=$p;
      $4=$type;
      $5=$indir;
      $6=$s;
      $7=$offset;
      $8=$nbytes;
      $9=$linecnt;
      var $10=$5;
      var $11=(($10)|0)==0;
      if ($11) { __label__ = 3; break; } else { __label__ = 43; break; }
    case 3: 
      var $13=$4;
      if ((($13)|0) == 20) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 17) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 18 || (($13)|0) == 19) {
        __label__ = 22; break;
      }
      else if ((($13)|0) == 5 || (($13)|0) == 13) {
        __label__ = 40; break;
      }
      else {
      __label__ = 41; break;
      }
      
    case 4: 
      var $15=$6;
      var $16=$7;
      var $17=(($15+$16)|0);
      var $18=$2;
      var $19=(($18+44)|0);
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=$17;
      var $21=$8;
      var $22=$7;
      var $23=((($21)-($22))|0);
      var $24=$2;
      var $25=(($24+44)|0);
      var $26=(($25+4)|0);
      HEAP32[(($26)>>2)]=$23;
      var $27=$7;
      var $28=$2;
      var $29=(($28+44)|0);
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=$27;
      $1=0;
      __label__ = 51; break;
    case 5: 
      var $32=$6;
      var $33=(($32)|0)==0;
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+44)|0);
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$2;
      var $39=(($38+44)|0);
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=0;
      $1=0;
      __label__ = 51; break;
    case 7: 
      var $42=$6;
      var $43=$7;
      var $44=(($42+$43)|0);
      $buf=$44;
      var $45=$6;
      var $46=$8;
      var $47=(($45+$46)|0);
      $last=$47;
      $end=$47;
      var $48=$9;
      $lines=$48;
      var $49=$buf;
      $b=$49;
      __label__ = 8; break;
    case 8: 
      var $51=$lines;
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 9; break; } else { var $78 = 0;__label__ = 13; break; }
    case 9: 
      var $54=$b;
      var $55=$end;
      var $56=(($54)>>>0) < (($55)>>>0);
      if ($56) { __label__ = 10; break; } else { var $78 = 0;__label__ = 13; break; }
    case 10: 
      var $58=$b;
      $c=$58;
      var $59=$end;
      var $60=$b;
      var $61=$59;
      var $62=$60;
      var $63=((($61)-($62))|0);
      var $64=_memchr($58, 10, $63);
      $b=$64;
      var $65=(($64)|0)!=0;
      if ($65) { var $76 = 1;__label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $67=$c;
      var $68=$end;
      var $69=$c;
      var $70=$68;
      var $71=$69;
      var $72=((($70)-($71))|0);
      var $73=_memchr($67, 13, $72);
      $b=$73;
      var $74=(($73)|0)!=0;
      var $76 = $74;__label__ = 12; break;
    case 12: 
      var $76;
      var $78 = $76;__label__ = 13; break;
    case 13: 
      var $78;
      if ($78) { __label__ = 14; break; } else { __label__ = 19; break; }
    case 14: 
      var $80=$b;
      $last=$80;
      var $81=$b;
      var $82=(($81)|0);
      var $83=HEAP8[($82)];
      var $84=(($83 << 24) >> 24);
      var $85=(($84)|0)==13;
      if ($85) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $87=$b;
      var $88=(($87+1)|0);
      var $89=HEAP8[($88)];
      var $90=(($89 << 24) >> 24);
      var $91=(($90)|0)==10;
      if ($91) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $93=$b;
      var $94=(($93+1)|0);
      $b=$94;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $97=$lines;
      var $98=((($97)-(1))|0);
      $lines=$98;
      var $99=$b;
      var $100=(($99+1)|0);
      $b=$100;
      __label__ = 8; break;
    case 19: 
      var $102=$lines;
      var $103=(($102)|0)!=0;
      if ($103) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $105=$6;
      var $106=$8;
      var $107=(($105+$106)|0);
      $last=$107;
      __label__ = 21; break;
    case 21: 
      var $109=$buf;
      var $110=$2;
      var $111=(($110+44)|0);
      var $112=(($111)|0);
      HEAP32[(($112)>>2)]=$109;
      var $113=$last;
      var $114=$buf;
      var $115=$113;
      var $116=$114;
      var $117=((($115)-($116))|0);
      var $118=$2;
      var $119=(($118+44)|0);
      var $120=(($119+4)|0);
      HEAP32[(($120)>>2)]=$117;
      var $121=$7;
      var $122=$2;
      var $123=(($122+44)|0);
      var $124=(($123+8)|0);
      HEAP32[(($124)>>2)]=$121;
      var $125=$2;
      var $126=(($125+44)|0);
      var $127=(($126+12)|0);
      HEAP32[(($127)>>2)]=0;
      $1=0;
      __label__ = 51; break;
    case 22: 
      var $129=$6;
      var $130=$7;
      var $131=(($129+$130)|0);
      $src=$131;
      var $132=$6;
      var $133=$8;
      var $134=(($132+$133)|0);
      $esrc=$134;
      var $135=$3;
      var $136=$135;
      var $137=(($136)|0);
      $dst=$137;
      var $138=$3;
      var $139=$138;
      var $140=(($139+63)|0);
      $edst=$140;
      var $141=$4;
      var $142=(($141)|0)==18;
      if ($142) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $144=$src;
      var $145=(($144+1)|0);
      $src=$145;
      __label__ = 24; break;
    case 24: 
      var $147=$src;
      var $148=$6;
      var $149=(($147)>>>0) < (($148)>>>0);
      if ($149) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $151=$2;
      var $152=$7;
      _file_magerror($151, ((STRING_TABLE.__str28109)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$152,tempInt));
      $1=-1;
      __label__ = 51; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $155=$src;
      var $156=$esrc;
      var $157=(($155)>>>0) < (($156)>>>0);
      if ($157) { __label__ = 28; break; } else { __label__ = 39; break; }
    case 28: 
      var $159=$dst;
      var $160=$edst;
      var $161=(($159)>>>0) < (($160)>>>0);
      if ($161) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $163=$src;
      var $164=HEAP8[($163)];
      var $165=$dst;
      HEAP8[($165)]=$164;
      __label__ = 31; break;
    case 30: 
      __label__ = 39; break;
    case 31: 
      var $168=$dst;
      var $169=HEAP8[($168)];
      var $170=(($169 << 24) >> 24);
      var $171=(($170)|0)==0;
      if ($171) { __label__ = 32; break; } else { __label__ = 37; break; }
    case 32: 
      var $173=$4;
      var $174=(($173)|0)==18;
      if ($174) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $176=$src;
      var $177=((($176)-(1))|0);
      var $178=HEAPU8[($177)];
      var $179=(($178)&255);
      var $180=(($179)|0)!=0;
      if ($180) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 34: 
      var $182=$src;
      var $183=(($182+1)|0);
      var $184=HEAPU8[($183)];
      var $185=(($184)&255);
      var $186=(($185)|0)!=0;
      if ($186) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $188=$dst;
      HEAP8[($188)]=32;
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $192=$src;
      var $193=(($192+2)|0);
      $src=$193;
      var $194=$dst;
      var $195=(($194+1)|0);
      $dst=$195;
      __label__ = 27; break;
    case 39: 
      var $197=$edst;
      HEAP8[($197)]=0;
      $1=0;
      __label__ = 51; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $202=$7;
      var $203=$8;
      var $204=(($202)>>>0) >= (($203)>>>0);
      if ($204) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $206=$3;
      var $207=$206;
      for (var $$dest = $207>>2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $1=0;
      __label__ = 51; break;
    case 45: 
      var $209=$8;
      var $210=$7;
      var $211=((($209)-($210))|0);
      var $212=(($211)>>>0) < 64;
      if ($212) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $214=$8;
      var $215=$7;
      var $216=((($214)-($215))|0);
      $8=$216;
      __label__ = 48; break;
    case 47: 
      $8=64;
      __label__ = 48; break;
    case 48: 
      var $219=$3;
      var $220=$219;
      var $221=$6;
      var $222=$7;
      var $223=(($221+$222)|0);
      var $224=$8;
      assert($224 % 1 === 0, 'memcpy given ' + $224 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($220, $223, $224, 1);
      var $225=$8;
      var $226=(($225)>>>0) < 64;
      if ($226) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $228=$3;
      var $229=$228;
      var $230=$8;
      var $231=(($229+$230)|0);
      var $232=$8;
      var $233=(((64)-($232))|0);
      _memset($231, 0, $233, 1);
      __label__ = 50; break;
    case 50: 
      $1=0;
      __label__ = 51; break;
    case 51: 
      var $236=$1;
      STACKTOP = __stackBase__;
      return $236;
    default: assert(0, "bad label: " + __label__);
  }
}
_mcopy["X"]=1;

function _mdebug($offset, $str, $len) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$offset;
  $2=$str;
  $3=$len;
  var $4=HEAP32[((_stderr)>>2)];
  var $5=$1;
  var $6=_fprintf($4, ((STRING_TABLE.__str27108)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$5,tempInt));
  var $7=HEAP32[((_stderr)>>2)];
  var $8=$2;
  var $9=$3;
  _file_showstr($7, $8, $9);
  var $10=HEAP32[((_stderr)>>2)];
  var $11=_fputc(10, $10);
  var $12=HEAP32[((_stderr)>>2)];
  var $13=_fputc(10, $12);
  STACKTOP = __stackBase__;
  return;
}


function _cvt_8($p, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $7=$6$0 != $$emscripten$temp$0$0 || $6$1 != $$emscripten$temp$0$1;
      if ($7) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 8; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 9; break;
      }
      else if ((($13)|0) == 6) {
        __label__ = 10; break;
      }
      else if ((($13)|0) == 7) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19$0=$18$0;
      var $19=$19$0&255;
      var $20=(($19)&255);
      var $21=$1;
      var $22=$21;
      var $23=HEAPU8[($22)];
      var $24=(($23)&255);
      var $25=$24 & $20;
      var $26=(($25) & 255);
      HEAP8[($22)]=$26;
      __label__ = 12; break;
    case 5: 
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=$29;
      var $st$3$0=(($30)|0);
      var $31$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($30+4)|0);
      var $31$1=HEAP32[(($st$3$1)>>2)];
      var $32$0=$31$0;
      var $32=$32$0&255;
      var $33=(($32)&255);
      var $34=$1;
      var $35=$34;
      var $36=HEAPU8[($35)];
      var $37=(($36)&255);
      var $38=$37 | $33;
      var $39=(($38) & 255);
      HEAP8[($35)]=$39;
      __label__ = 12; break;
    case 6: 
      var $41=$2;
      var $42=(($41+24)|0);
      var $43=$42;
      var $st$3$0=(($43)|0);
      var $44$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($43+4)|0);
      var $44$1=HEAP32[(($st$3$1)>>2)];
      var $45$0=$44$0;
      var $45=$45$0&255;
      var $46=(($45)&255);
      var $47=$1;
      var $48=$47;
      var $49=HEAPU8[($48)];
      var $50=(($49)&255);
      var $51=$50 ^ $46;
      var $52=(($51) & 255);
      HEAP8[($48)]=$52;
      __label__ = 12; break;
    case 7: 
      var $54=$2;
      var $55=(($54+24)|0);
      var $56=$55;
      var $st$3$0=(($56)|0);
      var $57$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($56+4)|0);
      var $57$1=HEAP32[(($st$3$1)>>2)];
      var $58$0=$57$0;
      var $58=$58$0&255;
      var $59=(($58)&255);
      var $60=$1;
      var $61=$60;
      var $62=HEAPU8[($61)];
      var $63=(($62)&255);
      var $64=((($63)+($59))|0);
      var $65=(($64) & 255);
      HEAP8[($61)]=$65;
      __label__ = 12; break;
    case 8: 
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=$68;
      var $st$3$0=(($69)|0);
      var $70$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($69+4)|0);
      var $70$1=HEAP32[(($st$3$1)>>2)];
      var $71$0=$70$0;
      var $71=$71$0&255;
      var $72=(($71)&255);
      var $73=$1;
      var $74=$73;
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=((($76)-($72))|0);
      var $78=(($77) & 255);
      HEAP8[($74)]=$78;
      __label__ = 12; break;
    case 9: 
      var $80=$2;
      var $81=(($80+24)|0);
      var $82=$81;
      var $st$3$0=(($82)|0);
      var $83$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($82+4)|0);
      var $83$1=HEAP32[(($st$3$1)>>2)];
      var $84$0=$83$0;
      var $84=$84$0&255;
      var $85=(($84)&255);
      var $86=$1;
      var $87=$86;
      var $88=HEAPU8[($87)];
      var $89=(($88)&255);
      var $90=((($89)*($85))|0);
      var $91=(($90) & 255);
      HEAP8[($87)]=$91;
      __label__ = 12; break;
    case 10: 
      var $93=$2;
      var $94=(($93+24)|0);
      var $95=$94;
      var $st$3$0=(($95)|0);
      var $96$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($95+4)|0);
      var $96$1=HEAP32[(($st$3$1)>>2)];
      var $97$0=$96$0;
      var $97=$97$0&255;
      var $98=(($97)&255);
      var $99=$1;
      var $100=$99;
      var $101=HEAPU8[($100)];
      var $102=(($101)&255);
      var $103=((((($102)|0))/((($98)|0)))&-1);
      var $104=(($103) & 255);
      HEAP8[($100)]=$104;
      __label__ = 12; break;
    case 11: 
      var $106=$2;
      var $107=(($106+24)|0);
      var $108=$107;
      var $st$3$0=(($108)|0);
      var $109$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($108+4)|0);
      var $109$1=HEAP32[(($st$3$1)>>2)];
      var $110$0=$109$0;
      var $110=$110$0&255;
      var $111=(($110)&255);
      var $112=$1;
      var $113=$112;
      var $114=HEAPU8[($113)];
      var $115=(($114)&255);
      var $116=((($115)|0))%((($111)|0));
      var $117=(($116) & 255);
      HEAP8[($113)]=$117;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $120=$2;
      var $121=(($120+9)|0);
      var $122=HEAPU8[($121)];
      var $123=(($122)&255);
      var $124=$123 & 64;
      var $125=(($124)|0)!=0;
      if ($125) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $127=$1;
      var $128=$127;
      var $129=HEAPU8[($128)];
      var $130=(($129)&255);
      var $131=$130 ^ -1;
      var $132=(($131) & 255);
      var $133=$1;
      var $134=$133;
      HEAP8[($134)]=$132;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cvt_8["X"]=1;

function _mconvert($ms, $m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      var $ptr1;
      var $ptr2;
      var $len;
      $2=$ms;
      $3=$m;
      var $4=$2;
      var $5=(($4+60)|0);
      $p=$5;
      var $6=$3;
      var $7=(($6+6)|0);
      var $8=HEAPU8[($7)];
      var $9=(($8)&255);
      if ((($9)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 4 || (($9)|0) == 6 || (($9)|0) == 14) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 24 || (($9)|0) == 27 || (($9)|0) == 30) {
        __label__ = 6; break;
      }
      else if ((($9)|0) == 5 || (($9)|0) == 18 || (($9)|0) == 19) {
        __label__ = 7; break;
      }
      else if ((($9)|0) == 13) {
        __label__ = 8; break;
      }
      else if ((($9)|0) == 7) {
        __label__ = 14; break;
      }
      else if ((($9)|0) == 8 || (($9)|0) == 9 || (($9)|0) == 15) {
        __label__ = 15; break;
      }
      else if ((($9)|0) == 26 || (($9)|0) == 29 || (($9)|0) == 32) {
        __label__ = 16; break;
      }
      else if ((($9)|0) == 10) {
        __label__ = 17; break;
      }
      else if ((($9)|0) == 11 || (($9)|0) == 12 || (($9)|0) == 16) {
        __label__ = 18; break;
      }
      else if ((($9)|0) == 25 || (($9)|0) == 28 || (($9)|0) == 31) {
        __label__ = 19; break;
      }
      else if ((($9)|0) == 23 || (($9)|0) == 21 || (($9)|0) == 22) {
        __label__ = 20; break;
      }
      else if ((($9)|0) == 33) {
        __label__ = 21; break;
      }
      else if ((($9)|0) == 34) {
        __label__ = 22; break;
      }
      else if ((($9)|0) == 35) {
        __label__ = 23; break;
      }
      else if ((($9)|0) == 36) {
        __label__ = 24; break;
      }
      else if ((($9)|0) == 37) {
        __label__ = 25; break;
      }
      else if ((($9)|0) == 38) {
        __label__ = 26; break;
      }
      else if ((($9)|0) == 17 || (($9)|0) == 20 || (($9)|0) == 3) {
        __label__ = 27; break;
      }
      else {
      __label__ = 28; break;
      }
      
    case 3: 
      var $11=$p;
      var $12=$3;
      _cvt_8($11, $12);
      $1=1;
      __label__ = 29; break;
    case 4: 
      var $14=$p;
      var $15=$3;
      _cvt_16($14, $15);
      $1=1;
      __label__ = 29; break;
    case 5: 
      var $17=$p;
      var $18=$3;
      _cvt_32($17, $18);
      $1=1;
      __label__ = 29; break;
    case 6: 
      var $20=$p;
      var $21=$3;
      _cvt_64($20, $21);
      $1=1;
      __label__ = 29; break;
    case 7: 
      var $23=$p;
      var $24=$23;
      var $25=(($24+63)|0);
      HEAP8[($25)]=0;
      $1=1;
      __label__ = 29; break;
    case 8: 
      var $27=$p;
      var $28=$27;
      var $29=(($28)|0);
      $ptr1=$29;
      var $30=$ptr1;
      var $31=$3;
      var $32=_file_pstring_length_size($31);
      var $33=(($30+$32)|0);
      $ptr2=$33;
      var $34=$3;
      var $35=$ptr1;
      var $36=_file_pstring_get_length($34, $35);
      $len=$36;
      var $37=$len;
      var $38=(($37)>>>0) >= 64;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $len=63;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $42=$len;
      var $43=((($42)-(1))|0);
      $len=$43;
      var $44=(($42)|0)!=0;
      if ($44) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $46=$ptr2;
      var $47=(($46+1)|0);
      $ptr2=$47;
      var $48=HEAP8[($46)];
      var $49=$ptr1;
      var $50=(($49+1)|0);
      $ptr1=$50;
      HEAP8[($49)]=$48;
      __label__ = 11; break;
    case 13: 
      var $52=$ptr1;
      HEAP8[($52)]=0;
      $1=1;
      __label__ = 29; break;
    case 14: 
      var $54=$p;
      var $55=$54;
      var $56=(($55)|0);
      var $57=HEAPU8[($56)];
      var $58=(($57)&255);
      var $59=$58 << 8;
      var $60=$p;
      var $61=$60;
      var $62=(($61+1)|0);
      var $63=HEAPU8[($62)];
      var $64=(($63)&255);
      var $65=$59 | $64;
      var $66=(($65) & 65535);
      var $67=$p;
      var $68=$67;
      HEAP16[(($68)>>1)]=$66;
      var $69=$p;
      var $70=$3;
      _cvt_16($69, $70);
      $1=1;
      __label__ = 29; break;
    case 15: 
      var $72=$p;
      var $73=$72;
      var $74=(($73)|0);
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=$76 << 24;
      var $78=$p;
      var $79=$78;
      var $80=(($79+1)|0);
      var $81=HEAPU8[($80)];
      var $82=(($81)&255);
      var $83=$82 << 16;
      var $84=$77 | $83;
      var $85=$p;
      var $86=$85;
      var $87=(($86+2)|0);
      var $88=HEAPU8[($87)];
      var $89=(($88)&255);
      var $90=$89 << 8;
      var $91=$84 | $90;
      var $92=$p;
      var $93=$92;
      var $94=(($93+3)|0);
      var $95=HEAPU8[($94)];
      var $96=(($95)&255);
      var $97=$91 | $96;
      var $98=$p;
      var $99=$98;
      HEAP32[(($99)>>2)]=$97;
      var $100=$p;
      var $101=$3;
      _cvt_32($100, $101);
      $1=1;
      __label__ = 29; break;
    case 16: 
      var $103=$p;
      var $104=$103;
      var $105=(($104)|0);
      var $106=HEAP8[($105)];
      var $107$0=(($106)&255);
      var $107$1=0;
      var $108$0=(0 << 24) | (0 >>> 8);
      var $108$1=($107$0 << 24) | (0 >>> 8);
      var $109=$p;
      var $110=$109;
      var $111=(($110+1)|0);
      var $112=HEAP8[($111)];
      var $113$0=(($112)&255);
      var $113$1=0;
      var $114$0=(0 << 16) | (0 >>> 16);
      var $114$1=($113$0 << 16) | (0 >>> 16);
      var $115$0=$108$0 | $114$0;
      var $115$1=$108$1 | $114$1;
      var $116=$p;
      var $117=$116;
      var $118=(($117+2)|0);
      var $119=HEAP8[($118)];
      var $120$0=(($119)&255);
      var $120$1=0;
      var $121$0=(0 << 8) | (0 >>> 24);
      var $121$1=($120$0 << 8) | (0 >>> 24);
      var $122$0=$115$0 | $121$0;
      var $122$1=$115$1 | $121$1;
      var $123=$p;
      var $124=$123;
      var $125=(($124+3)|0);
      var $126=HEAP8[($125)];
      var $127$0=(($126)&255);
      var $127$1=0;
      var $128$0=0;
      var $128$1=$127$0;
      var $129$0=$122$0 | $128$0;
      var $129$1=$122$1 | $128$1;
      var $130=$p;
      var $131=$130;
      var $132=(($131+4)|0);
      var $133=HEAP8[($132)];
      var $134$0=(($133)&255);
      var $134$1=0;
      var $135$0=($134$0 << 24) | (0 >>> 8);
      var $135$1=($134$1 << 24) | ($134$0 >>> 8);
      var $136$0=$129$0 | $135$0;
      var $136$1=$129$1 | $135$1;
      var $137=$p;
      var $138=$137;
      var $139=(($138+5)|0);
      var $140=HEAP8[($139)];
      var $141$0=(($140)&255);
      var $141$1=0;
      var $142$0=($141$0 << 16) | (0 >>> 16);
      var $142$1=($141$1 << 16) | ($141$0 >>> 16);
      var $143$0=$136$0 | $142$0;
      var $143$1=$136$1 | $142$1;
      var $144=$p;
      var $145=$144;
      var $146=(($145+6)|0);
      var $147=HEAP8[($146)];
      var $148$0=(($147)&255);
      var $148$1=0;
      var $149$0=($148$0 << 8) | (0 >>> 24);
      var $149$1=($148$1 << 8) | ($148$0 >>> 24);
      var $150$0=$143$0 | $149$0;
      var $150$1=$143$1 | $149$1;
      var $151=$p;
      var $152=$151;
      var $153=(($152+7)|0);
      var $154=HEAP8[($153)];
      var $155$0=(($154)&255);
      var $155$1=0;
      var $156$0=$150$0 | $155$0;
      var $156$1=$150$1 | $155$1;
      var $157=$p;
      var $158=$157;
      var $st$78$0=(($158)|0);
      HEAP32[(($st$78$0)>>2)]=$156$0;
      var $st$78$1=(($158+4)|0);
      HEAP32[(($st$78$1)>>2)]=$156$1;
      var $159=$p;
      var $160=$3;
      _cvt_64($159, $160);
      $1=1;
      __label__ = 29; break;
    case 17: 
      var $162=$p;
      var $163=$162;
      var $164=(($163+1)|0);
      var $165=HEAPU8[($164)];
      var $166=(($165)&255);
      var $167=$166 << 8;
      var $168=$p;
      var $169=$168;
      var $170=(($169)|0);
      var $171=HEAPU8[($170)];
      var $172=(($171)&255);
      var $173=$167 | $172;
      var $174=(($173) & 65535);
      var $175=$p;
      var $176=$175;
      HEAP16[(($176)>>1)]=$174;
      var $177=$p;
      var $178=$3;
      _cvt_16($177, $178);
      $1=1;
      __label__ = 29; break;
    case 18: 
      var $180=$p;
      var $181=$180;
      var $182=(($181+3)|0);
      var $183=HEAPU8[($182)];
      var $184=(($183)&255);
      var $185=$184 << 24;
      var $186=$p;
      var $187=$186;
      var $188=(($187+2)|0);
      var $189=HEAPU8[($188)];
      var $190=(($189)&255);
      var $191=$190 << 16;
      var $192=$185 | $191;
      var $193=$p;
      var $194=$193;
      var $195=(($194+1)|0);
      var $196=HEAPU8[($195)];
      var $197=(($196)&255);
      var $198=$197 << 8;
      var $199=$192 | $198;
      var $200=$p;
      var $201=$200;
      var $202=(($201)|0);
      var $203=HEAPU8[($202)];
      var $204=(($203)&255);
      var $205=$199 | $204;
      var $206=$p;
      var $207=$206;
      HEAP32[(($207)>>2)]=$205;
      var $208=$p;
      var $209=$3;
      _cvt_32($208, $209);
      $1=1;
      __label__ = 29; break;
    case 19: 
      var $211=$p;
      var $212=$211;
      var $213=(($212+7)|0);
      var $214=HEAP8[($213)];
      var $215$0=(($214)&255);
      var $215$1=0;
      var $216$0=(0 << 24) | (0 >>> 8);
      var $216$1=($215$0 << 24) | (0 >>> 8);
      var $217=$p;
      var $218=$217;
      var $219=(($218+6)|0);
      var $220=HEAP8[($219)];
      var $221$0=(($220)&255);
      var $221$1=0;
      var $222$0=(0 << 16) | (0 >>> 16);
      var $222$1=($221$0 << 16) | (0 >>> 16);
      var $223$0=$216$0 | $222$0;
      var $223$1=$216$1 | $222$1;
      var $224=$p;
      var $225=$224;
      var $226=(($225+5)|0);
      var $227=HEAP8[($226)];
      var $228$0=(($227)&255);
      var $228$1=0;
      var $229$0=(0 << 8) | (0 >>> 24);
      var $229$1=($228$0 << 8) | (0 >>> 24);
      var $230$0=$223$0 | $229$0;
      var $230$1=$223$1 | $229$1;
      var $231=$p;
      var $232=$231;
      var $233=(($232+4)|0);
      var $234=HEAP8[($233)];
      var $235$0=(($234)&255);
      var $235$1=0;
      var $236$0=0;
      var $236$1=$235$0;
      var $237$0=$230$0 | $236$0;
      var $237$1=$230$1 | $236$1;
      var $238=$p;
      var $239=$238;
      var $240=(($239+3)|0);
      var $241=HEAP8[($240)];
      var $242$0=(($241)&255);
      var $242$1=0;
      var $243$0=($242$0 << 24) | (0 >>> 8);
      var $243$1=($242$1 << 24) | ($242$0 >>> 8);
      var $244$0=$237$0 | $243$0;
      var $244$1=$237$1 | $243$1;
      var $245=$p;
      var $246=$245;
      var $247=(($246+2)|0);
      var $248=HEAP8[($247)];
      var $249$0=(($248)&255);
      var $249$1=0;
      var $250$0=($249$0 << 16) | (0 >>> 16);
      var $250$1=($249$1 << 16) | ($249$0 >>> 16);
      var $251$0=$244$0 | $250$0;
      var $251$1=$244$1 | $250$1;
      var $252=$p;
      var $253=$252;
      var $254=(($253+1)|0);
      var $255=HEAP8[($254)];
      var $256$0=(($255)&255);
      var $256$1=0;
      var $257$0=($256$0 << 8) | (0 >>> 24);
      var $257$1=($256$1 << 8) | ($256$0 >>> 24);
      var $258$0=$251$0 | $257$0;
      var $258$1=$251$1 | $257$1;
      var $259=$p;
      var $260=$259;
      var $261=(($260)|0);
      var $262=HEAP8[($261)];
      var $263$0=(($262)&255);
      var $263$1=0;
      var $264$0=$258$0 | $263$0;
      var $264$1=$258$1 | $263$1;
      var $265=$p;
      var $266=$265;
      var $st$78$0=(($266)|0);
      HEAP32[(($st$78$0)>>2)]=$264$0;
      var $st$78$1=(($266+4)|0);
      HEAP32[(($st$78$1)>>2)]=$264$1;
      var $267=$p;
      var $268=$3;
      _cvt_64($267, $268);
      $1=1;
      __label__ = 29; break;
    case 20: 
      var $270=$p;
      var $271=$270;
      var $272=(($271+1)|0);
      var $273=HEAPU8[($272)];
      var $274=(($273)&255);
      var $275=$274 << 24;
      var $276=$p;
      var $277=$276;
      var $278=(($277)|0);
      var $279=HEAPU8[($278)];
      var $280=(($279)&255);
      var $281=$280 << 16;
      var $282=$275 | $281;
      var $283=$p;
      var $284=$283;
      var $285=(($284+3)|0);
      var $286=HEAPU8[($285)];
      var $287=(($286)&255);
      var $288=$287 << 8;
      var $289=$282 | $288;
      var $290=$p;
      var $291=$290;
      var $292=(($291+2)|0);
      var $293=HEAPU8[($292)];
      var $294=(($293)&255);
      var $295=$289 | $294;
      var $296=$p;
      var $297=$296;
      HEAP32[(($297)>>2)]=$295;
      var $298=$p;
      var $299=$3;
      _cvt_32($298, $299);
      $1=1;
      __label__ = 29; break;
    case 21: 
      var $301=$p;
      var $302=$3;
      _cvt_float($301, $302);
      $1=1;
      __label__ = 29; break;
    case 22: 
      var $304=$p;
      var $305=$304;
      var $306=(($305)|0);
      var $307=HEAPU8[($306)];
      var $308=(($307)&255);
      var $309=$308 << 24;
      var $310=$p;
      var $311=$310;
      var $312=(($311+1)|0);
      var $313=HEAPU8[($312)];
      var $314=(($313)&255);
      var $315=$314 << 16;
      var $316=$309 | $315;
      var $317=$p;
      var $318=$317;
      var $319=(($318+2)|0);
      var $320=HEAPU8[($319)];
      var $321=(($320)&255);
      var $322=$321 << 8;
      var $323=$316 | $322;
      var $324=$p;
      var $325=$324;
      var $326=(($325+3)|0);
      var $327=HEAPU8[($326)];
      var $328=(($327)&255);
      var $329=$323 | $328;
      var $330=$p;
      var $331=$330;
      HEAP32[(($331)>>2)]=$329;
      var $332=$p;
      var $333=$3;
      _cvt_float($332, $333);
      $1=1;
      __label__ = 29; break;
    case 23: 
      var $335=$p;
      var $336=$335;
      var $337=(($336+3)|0);
      var $338=HEAPU8[($337)];
      var $339=(($338)&255);
      var $340=$339 << 24;
      var $341=$p;
      var $342=$341;
      var $343=(($342+2)|0);
      var $344=HEAPU8[($343)];
      var $345=(($344)&255);
      var $346=$345 << 16;
      var $347=$340 | $346;
      var $348=$p;
      var $349=$348;
      var $350=(($349+1)|0);
      var $351=HEAPU8[($350)];
      var $352=(($351)&255);
      var $353=$352 << 8;
      var $354=$347 | $353;
      var $355=$p;
      var $356=$355;
      var $357=(($356)|0);
      var $358=HEAPU8[($357)];
      var $359=(($358)&255);
      var $360=$354 | $359;
      var $361=$p;
      var $362=$361;
      HEAP32[(($362)>>2)]=$360;
      var $363=$p;
      var $364=$3;
      _cvt_float($363, $364);
      $1=1;
      __label__ = 29; break;
    case 24: 
      var $366=$p;
      var $367=$3;
      _cvt_double($366, $367);
      $1=1;
      __label__ = 29; break;
    case 25: 
      var $369=$p;
      var $370=$369;
      var $371=(($370)|0);
      var $372=HEAP8[($371)];
      var $373$0=(($372)&255);
      var $373$1=0;
      var $374$0=(0 << 24) | (0 >>> 8);
      var $374$1=($373$0 << 24) | (0 >>> 8);
      var $375=$p;
      var $376=$375;
      var $377=(($376+1)|0);
      var $378=HEAP8[($377)];
      var $379$0=(($378)&255);
      var $379$1=0;
      var $380$0=(0 << 16) | (0 >>> 16);
      var $380$1=($379$0 << 16) | (0 >>> 16);
      var $381$0=$374$0 | $380$0;
      var $381$1=$374$1 | $380$1;
      var $382=$p;
      var $383=$382;
      var $384=(($383+2)|0);
      var $385=HEAP8[($384)];
      var $386$0=(($385)&255);
      var $386$1=0;
      var $387$0=(0 << 8) | (0 >>> 24);
      var $387$1=($386$0 << 8) | (0 >>> 24);
      var $388$0=$381$0 | $387$0;
      var $388$1=$381$1 | $387$1;
      var $389=$p;
      var $390=$389;
      var $391=(($390+3)|0);
      var $392=HEAP8[($391)];
      var $393$0=(($392)&255);
      var $393$1=0;
      var $394$0=0;
      var $394$1=$393$0;
      var $395$0=$388$0 | $394$0;
      var $395$1=$388$1 | $394$1;
      var $396=$p;
      var $397=$396;
      var $398=(($397+4)|0);
      var $399=HEAP8[($398)];
      var $400$0=(($399)&255);
      var $400$1=0;
      var $401$0=($400$0 << 24) | (0 >>> 8);
      var $401$1=($400$1 << 24) | ($400$0 >>> 8);
      var $402$0=$395$0 | $401$0;
      var $402$1=$395$1 | $401$1;
      var $403=$p;
      var $404=$403;
      var $405=(($404+5)|0);
      var $406=HEAP8[($405)];
      var $407$0=(($406)&255);
      var $407$1=0;
      var $408$0=($407$0 << 16) | (0 >>> 16);
      var $408$1=($407$1 << 16) | ($407$0 >>> 16);
      var $409$0=$402$0 | $408$0;
      var $409$1=$402$1 | $408$1;
      var $410=$p;
      var $411=$410;
      var $412=(($411+6)|0);
      var $413=HEAP8[($412)];
      var $414$0=(($413)&255);
      var $414$1=0;
      var $415$0=($414$0 << 8) | (0 >>> 24);
      var $415$1=($414$1 << 8) | ($414$0 >>> 24);
      var $416$0=$409$0 | $415$0;
      var $416$1=$409$1 | $415$1;
      var $417=$p;
      var $418=$417;
      var $419=(($418+7)|0);
      var $420=HEAP8[($419)];
      var $421$0=(($420)&255);
      var $421$1=0;
      var $422$0=$416$0 | $421$0;
      var $422$1=$416$1 | $421$1;
      var $423=$p;
      var $424=$423;
      var $st$78$0=(($424)|0);
      HEAP32[(($st$78$0)>>2)]=$422$0;
      var $st$78$1=(($424+4)|0);
      HEAP32[(($st$78$1)>>2)]=$422$1;
      var $425=$p;
      var $426=$3;
      _cvt_double($425, $426);
      $1=1;
      __label__ = 29; break;
    case 26: 
      var $428=$p;
      var $429=$428;
      var $430=(($429+7)|0);
      var $431=HEAP8[($430)];
      var $432$0=(($431)&255);
      var $432$1=0;
      var $433$0=(0 << 24) | (0 >>> 8);
      var $433$1=($432$0 << 24) | (0 >>> 8);
      var $434=$p;
      var $435=$434;
      var $436=(($435+6)|0);
      var $437=HEAP8[($436)];
      var $438$0=(($437)&255);
      var $438$1=0;
      var $439$0=(0 << 16) | (0 >>> 16);
      var $439$1=($438$0 << 16) | (0 >>> 16);
      var $440$0=$433$0 | $439$0;
      var $440$1=$433$1 | $439$1;
      var $441=$p;
      var $442=$441;
      var $443=(($442+5)|0);
      var $444=HEAP8[($443)];
      var $445$0=(($444)&255);
      var $445$1=0;
      var $446$0=(0 << 8) | (0 >>> 24);
      var $446$1=($445$0 << 8) | (0 >>> 24);
      var $447$0=$440$0 | $446$0;
      var $447$1=$440$1 | $446$1;
      var $448=$p;
      var $449=$448;
      var $450=(($449+4)|0);
      var $451=HEAP8[($450)];
      var $452$0=(($451)&255);
      var $452$1=0;
      var $453$0=0;
      var $453$1=$452$0;
      var $454$0=$447$0 | $453$0;
      var $454$1=$447$1 | $453$1;
      var $455=$p;
      var $456=$455;
      var $457=(($456+3)|0);
      var $458=HEAP8[($457)];
      var $459$0=(($458)&255);
      var $459$1=0;
      var $460$0=($459$0 << 24) | (0 >>> 8);
      var $460$1=($459$1 << 24) | ($459$0 >>> 8);
      var $461$0=$454$0 | $460$0;
      var $461$1=$454$1 | $460$1;
      var $462=$p;
      var $463=$462;
      var $464=(($463+2)|0);
      var $465=HEAP8[($464)];
      var $466$0=(($465)&255);
      var $466$1=0;
      var $467$0=($466$0 << 16) | (0 >>> 16);
      var $467$1=($466$1 << 16) | ($466$0 >>> 16);
      var $468$0=$461$0 | $467$0;
      var $468$1=$461$1 | $467$1;
      var $469=$p;
      var $470=$469;
      var $471=(($470+1)|0);
      var $472=HEAP8[($471)];
      var $473$0=(($472)&255);
      var $473$1=0;
      var $474$0=($473$0 << 8) | (0 >>> 24);
      var $474$1=($473$1 << 8) | ($473$0 >>> 24);
      var $475$0=$468$0 | $474$0;
      var $475$1=$468$1 | $474$1;
      var $476=$p;
      var $477=$476;
      var $478=(($477)|0);
      var $479=HEAP8[($478)];
      var $480$0=(($479)&255);
      var $480$1=0;
      var $481$0=$475$0 | $480$0;
      var $481$1=$475$1 | $480$1;
      var $482=$p;
      var $483=$482;
      var $st$78$0=(($483)|0);
      HEAP32[(($st$78$0)>>2)]=$481$0;
      var $st$78$1=(($483+4)|0);
      HEAP32[(($st$78$1)>>2)]=$481$1;
      var $484=$p;
      var $485=$3;
      _cvt_double($484, $485);
      $1=1;
      __label__ = 29; break;
    case 27: 
      $1=1;
      __label__ = 29; break;
    case 28: 
      var $488=$2;
      var $489=$3;
      var $490=(($489+6)|0);
      var $491=HEAPU8[($490)];
      var $492=(($491)&255);
      _file_magerror($488, ((STRING_TABLE.__str26107)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$492,tempInt));
      $1=0;
      __label__ = 29; break;
    case 29: 
      var $494=$1;
      STACKTOP = __stackBase__;
      return $494;
    default: assert(0, "bad label: " + __label__);
  }
}
_mconvert["X"]=1;

function _cvt_16($p, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $7=$6$0 != $$emscripten$temp$0$0 || $6$1 != $$emscripten$temp$0$1;
      if ($7) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 8; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 9; break;
      }
      else if ((($13)|0) == 6) {
        __label__ = 10; break;
      }
      else if ((($13)|0) == 7) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19$0=$18$0;
      var $19=$19$0&65535;
      var $20=(($19)&65535);
      var $21=$1;
      var $22=$21;
      var $23=HEAPU16[(($22)>>1)];
      var $24=(($23)&65535);
      var $25=$24 & $20;
      var $26=(($25) & 65535);
      HEAP16[(($22)>>1)]=$26;
      __label__ = 12; break;
    case 5: 
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=$29;
      var $st$3$0=(($30)|0);
      var $31$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($30+4)|0);
      var $31$1=HEAP32[(($st$3$1)>>2)];
      var $32$0=$31$0;
      var $32=$32$0&65535;
      var $33=(($32)&65535);
      var $34=$1;
      var $35=$34;
      var $36=HEAPU16[(($35)>>1)];
      var $37=(($36)&65535);
      var $38=$37 | $33;
      var $39=(($38) & 65535);
      HEAP16[(($35)>>1)]=$39;
      __label__ = 12; break;
    case 6: 
      var $41=$2;
      var $42=(($41+24)|0);
      var $43=$42;
      var $st$3$0=(($43)|0);
      var $44$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($43+4)|0);
      var $44$1=HEAP32[(($st$3$1)>>2)];
      var $45$0=$44$0;
      var $45=$45$0&65535;
      var $46=(($45)&65535);
      var $47=$1;
      var $48=$47;
      var $49=HEAPU16[(($48)>>1)];
      var $50=(($49)&65535);
      var $51=$50 ^ $46;
      var $52=(($51) & 65535);
      HEAP16[(($48)>>1)]=$52;
      __label__ = 12; break;
    case 7: 
      var $54=$2;
      var $55=(($54+24)|0);
      var $56=$55;
      var $st$3$0=(($56)|0);
      var $57$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($56+4)|0);
      var $57$1=HEAP32[(($st$3$1)>>2)];
      var $58$0=$57$0;
      var $58=$58$0&65535;
      var $59=(($58)&65535);
      var $60=$1;
      var $61=$60;
      var $62=HEAPU16[(($61)>>1)];
      var $63=(($62)&65535);
      var $64=((($63)+($59))|0);
      var $65=(($64) & 65535);
      HEAP16[(($61)>>1)]=$65;
      __label__ = 12; break;
    case 8: 
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=$68;
      var $st$3$0=(($69)|0);
      var $70$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($69+4)|0);
      var $70$1=HEAP32[(($st$3$1)>>2)];
      var $71$0=$70$0;
      var $71=$71$0&65535;
      var $72=(($71)&65535);
      var $73=$1;
      var $74=$73;
      var $75=HEAPU16[(($74)>>1)];
      var $76=(($75)&65535);
      var $77=((($76)-($72))|0);
      var $78=(($77) & 65535);
      HEAP16[(($74)>>1)]=$78;
      __label__ = 12; break;
    case 9: 
      var $80=$2;
      var $81=(($80+24)|0);
      var $82=$81;
      var $st$3$0=(($82)|0);
      var $83$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($82+4)|0);
      var $83$1=HEAP32[(($st$3$1)>>2)];
      var $84$0=$83$0;
      var $84=$84$0&65535;
      var $85=(($84)&65535);
      var $86=$1;
      var $87=$86;
      var $88=HEAPU16[(($87)>>1)];
      var $89=(($88)&65535);
      var $90=((($89)*($85))|0);
      var $91=(($90) & 65535);
      HEAP16[(($87)>>1)]=$91;
      __label__ = 12; break;
    case 10: 
      var $93=$2;
      var $94=(($93+24)|0);
      var $95=$94;
      var $st$3$0=(($95)|0);
      var $96$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($95+4)|0);
      var $96$1=HEAP32[(($st$3$1)>>2)];
      var $97$0=$96$0;
      var $97=$97$0&65535;
      var $98=(($97)&65535);
      var $99=$1;
      var $100=$99;
      var $101=HEAPU16[(($100)>>1)];
      var $102=(($101)&65535);
      var $103=((((($102)|0))/((($98)|0)))&-1);
      var $104=(($103) & 65535);
      HEAP16[(($100)>>1)]=$104;
      __label__ = 12; break;
    case 11: 
      var $106=$2;
      var $107=(($106+24)|0);
      var $108=$107;
      var $st$3$0=(($108)|0);
      var $109$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($108+4)|0);
      var $109$1=HEAP32[(($st$3$1)>>2)];
      var $110$0=$109$0;
      var $110=$110$0&65535;
      var $111=(($110)&65535);
      var $112=$1;
      var $113=$112;
      var $114=HEAPU16[(($113)>>1)];
      var $115=(($114)&65535);
      var $116=((($115)|0))%((($111)|0));
      var $117=(($116) & 65535);
      HEAP16[(($113)>>1)]=$117;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $120=$2;
      var $121=(($120+9)|0);
      var $122=HEAPU8[($121)];
      var $123=(($122)&255);
      var $124=$123 & 64;
      var $125=(($124)|0)!=0;
      if ($125) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $127=$1;
      var $128=$127;
      var $129=HEAPU16[(($128)>>1)];
      var $130=(($129)&65535);
      var $131=$130 ^ -1;
      var $132=(($131) & 65535);
      var $133=$1;
      var $134=$133;
      HEAP16[(($134)>>1)]=$132;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cvt_16["X"]=1;

function _cvt_32($p, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $7=$6$0 != $$emscripten$temp$0$0 || $6$1 != $$emscripten$temp$0$1;
      if ($7) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 8; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 9; break;
      }
      else if ((($13)|0) == 6) {
        __label__ = 10; break;
      }
      else if ((($13)|0) == 7) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19$0=$18$0;
      var $19=$19$0;
      var $20=$1;
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & $19;
      HEAP32[(($21)>>2)]=$23;
      __label__ = 12; break;
    case 5: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=$26;
      var $st$3$0=(($27)|0);
      var $28$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($27+4)|0);
      var $28$1=HEAP32[(($st$3$1)>>2)];
      var $29$0=$28$0;
      var $29=$29$0;
      var $30=$1;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 | $29;
      HEAP32[(($31)>>2)]=$33;
      __label__ = 12; break;
    case 6: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=$36;
      var $st$3$0=(($37)|0);
      var $38$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($37+4)|0);
      var $38$1=HEAP32[(($st$3$1)>>2)];
      var $39$0=$38$0;
      var $39=$39$0;
      var $40=$1;
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 ^ $39;
      HEAP32[(($41)>>2)]=$43;
      __label__ = 12; break;
    case 7: 
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=$46;
      var $st$3$0=(($47)|0);
      var $48$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$3$1)>>2)];
      var $49$0=$48$0;
      var $49=$49$0;
      var $50=$1;
      var $51=$50;
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+($49))|0);
      HEAP32[(($51)>>2)]=$53;
      __label__ = 12; break;
    case 8: 
      var $55=$2;
      var $56=(($55+24)|0);
      var $57=$56;
      var $st$3$0=(($57)|0);
      var $58$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($57+4)|0);
      var $58$1=HEAP32[(($st$3$1)>>2)];
      var $59$0=$58$0;
      var $59=$59$0;
      var $60=$1;
      var $61=$60;
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-($59))|0);
      HEAP32[(($61)>>2)]=$63;
      __label__ = 12; break;
    case 9: 
      var $65=$2;
      var $66=(($65+24)|0);
      var $67=$66;
      var $st$3$0=(($67)|0);
      var $68$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($67+4)|0);
      var $68$1=HEAP32[(($st$3$1)>>2)];
      var $69$0=$68$0;
      var $69=$69$0;
      var $70=$1;
      var $71=$70;
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)*($69))|0);
      HEAP32[(($71)>>2)]=$73;
      __label__ = 12; break;
    case 10: 
      var $75=$2;
      var $76=(($75+24)|0);
      var $77=$76;
      var $st$3$0=(($77)|0);
      var $78$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($77+4)|0);
      var $78$1=HEAP32[(($st$3$1)>>2)];
      var $79$0=$78$0;
      var $79=$79$0;
      var $80=$1;
      var $81=$80;
      var $82=HEAPU32[(($81)>>2)];
      var $83=Math.floor(((($82)>>>0))/((($79)>>>0)));
      HEAP32[(($81)>>2)]=$83;
      __label__ = 12; break;
    case 11: 
      var $85=$2;
      var $86=(($85+24)|0);
      var $87=$86;
      var $st$3$0=(($87)|0);
      var $88$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($87+4)|0);
      var $88$1=HEAP32[(($st$3$1)>>2)];
      var $89$0=$88$0;
      var $89=$89$0;
      var $90=$1;
      var $91=$90;
      var $92=HEAPU32[(($91)>>2)];
      var $93=((($92)>>>0))%((($89)>>>0));
      HEAP32[(($91)>>2)]=$93;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $96=$2;
      var $97=(($96+9)|0);
      var $98=HEAPU8[($97)];
      var $99=(($98)&255);
      var $100=$99 & 64;
      var $101=(($100)|0)!=0;
      if ($101) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $103=$1;
      var $104=$103;
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 ^ -1;
      var $107=$1;
      var $108=$107;
      HEAP32[(($108)>>2)]=$106;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cvt_32["X"]=1;

function _cvt_64($p, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $7=$6$0 != $$emscripten$temp$0$0 || $6$1 != $$emscripten$temp$0$1;
      if ($7) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 8; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 9; break;
      }
      else if ((($13)|0) == 6) {
        __label__ = 10; break;
      }
      else if ((($13)|0) == 7) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19=$1;
      var $20=$19;
      var $st$9$0=(($20)|0);
      var $21$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($20+4)|0);
      var $21$1=HEAP32[(($st$9$1)>>2)];
      var $22$0=$21$0 & $18$0;
      var $22$1=$21$1 & $18$1;
      var $st$15$0=(($20)|0);
      HEAP32[(($st$15$0)>>2)]=$22$0;
      var $st$15$1=(($20+4)|0);
      HEAP32[(($st$15$1)>>2)]=$22$1;
      __label__ = 12; break;
    case 5: 
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=$25;
      var $st$3$0=(($26)|0);
      var $27$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($26+4)|0);
      var $27$1=HEAP32[(($st$3$1)>>2)];
      var $28=$1;
      var $29=$28;
      var $st$9$0=(($29)|0);
      var $30$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($29+4)|0);
      var $30$1=HEAP32[(($st$9$1)>>2)];
      var $31$0=$30$0 | $27$0;
      var $31$1=$30$1 | $27$1;
      var $st$15$0=(($29)|0);
      HEAP32[(($st$15$0)>>2)]=$31$0;
      var $st$15$1=(($29+4)|0);
      HEAP32[(($st$15$1)>>2)]=$31$1;
      __label__ = 12; break;
    case 6: 
      var $33=$2;
      var $34=(($33+24)|0);
      var $35=$34;
      var $st$3$0=(($35)|0);
      var $36$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($35+4)|0);
      var $36$1=HEAP32[(($st$3$1)>>2)];
      var $37=$1;
      var $38=$37;
      var $st$9$0=(($38)|0);
      var $39$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($38+4)|0);
      var $39$1=HEAP32[(($st$9$1)>>2)];
      var $40$0=$39$0 ^ $36$0;
      var $40$1=$39$1 ^ $36$1;
      var $st$15$0=(($38)|0);
      HEAP32[(($st$15$0)>>2)]=$40$0;
      var $st$15$1=(($38+4)|0);
      HEAP32[(($st$15$1)>>2)]=$40$1;
      __label__ = 12; break;
    case 7: 
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=$43;
      var $st$3$0=(($44)|0);
      var $45$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($44+4)|0);
      var $45$1=HEAP32[(($st$3$1)>>2)];
      var $46=$1;
      var $47=$46;
      var $st$9$0=(($47)|0);
      var $48$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$9$1)>>2)];
      var $49$0 = (i64Math.add($48$0,$48$1,$45$0,$45$1),i64Math.result[0]); var $49$1 = i64Math.result[1];
      var $st$14$0=(($47)|0);
      HEAP32[(($st$14$0)>>2)]=$49$0;
      var $st$14$1=(($47+4)|0);
      HEAP32[(($st$14$1)>>2)]=$49$1;
      __label__ = 12; break;
    case 8: 
      var $51=$2;
      var $52=(($51+24)|0);
      var $53=$52;
      var $st$3$0=(($53)|0);
      var $54$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($53+4)|0);
      var $54$1=HEAP32[(($st$3$1)>>2)];
      var $55=$1;
      var $56=$55;
      var $st$9$0=(($56)|0);
      var $57$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($56+4)|0);
      var $57$1=HEAP32[(($st$9$1)>>2)];
      var $58$0 = (i64Math.subtract($57$0,$57$1,$54$0,$54$1),i64Math.result[0]); var $58$1 = i64Math.result[1];
      var $st$14$0=(($56)|0);
      HEAP32[(($st$14$0)>>2)]=$58$0;
      var $st$14$1=(($56+4)|0);
      HEAP32[(($st$14$1)>>2)]=$58$1;
      __label__ = 12; break;
    case 9: 
      var $60=$2;
      var $61=(($60+24)|0);
      var $62=$61;
      var $st$3$0=(($62)|0);
      var $63$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($62+4)|0);
      var $63$1=HEAP32[(($st$3$1)>>2)];
      var $64=$1;
      var $65=$64;
      var $st$9$0=(($65)|0);
      var $66$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($65+4)|0);
      var $66$1=HEAP32[(($st$9$1)>>2)];
      var $67$0 = (i64Math.multiply($66$0,$66$1,$63$0,$63$1),i64Math.result[0]); var $67$1 = i64Math.result[1];
      var $st$14$0=(($65)|0);
      HEAP32[(($st$14$0)>>2)]=$67$0;
      var $st$14$1=(($65+4)|0);
      HEAP32[(($st$14$1)>>2)]=$67$1;
      __label__ = 12; break;
    case 10: 
      var $69=$2;
      var $70=(($69+24)|0);
      var $71=$70;
      var $st$3$0=(($71)|0);
      var $72$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($71+4)|0);
      var $72$1=HEAP32[(($st$3$1)>>2)];
      var $73=$1;
      var $74=$73;
      var $st$9$0=(($74)|0);
      var $75$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($74+4)|0);
      var $75$1=HEAP32[(($st$9$1)>>2)];
      var $76$0 = (i64Math.divide($75$0,$75$1,$72$0,$72$1,true),i64Math.result[0]); var $76$1 = i64Math.result[1];
      var $st$14$0=(($74)|0);
      HEAP32[(($st$14$0)>>2)]=$76$0;
      var $st$14$1=(($74+4)|0);
      HEAP32[(($st$14$1)>>2)]=$76$1;
      __label__ = 12; break;
    case 11: 
      var $78=$2;
      var $79=(($78+24)|0);
      var $80=$79;
      var $st$3$0=(($80)|0);
      var $81$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($80+4)|0);
      var $81$1=HEAP32[(($st$3$1)>>2)];
      var $82=$1;
      var $83=$82;
      var $st$9$0=(($83)|0);
      var $84$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($83+4)|0);
      var $84$1=HEAP32[(($st$9$1)>>2)];
      var $85$0 = (i64Math.modulo($84$0,$84$1,$81$0,$81$1,true),i64Math.result[0]); var $85$1 = i64Math.result[1];
      var $st$14$0=(($83)|0);
      HEAP32[(($st$14$0)>>2)]=$85$0;
      var $st$14$1=(($83+4)|0);
      HEAP32[(($st$14$1)>>2)]=$85$1;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $88=$2;
      var $89=(($88+9)|0);
      var $90=HEAPU8[($89)];
      var $91=(($90)&255);
      var $92=$91 & 64;
      var $93=(($92)|0)!=0;
      if ($93) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $95=$1;
      var $96=$95;
      var $st$2$0=(($96)|0);
      var $97$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($96+4)|0);
      var $97$1=HEAP32[(($st$2$1)>>2)];
      var $$emscripten$temp$1$0=-1;
      var $$emscripten$temp$1$1=-1;
      var $98$0=$97$0 ^ $$emscripten$temp$1$0;
      var $98$1=$97$1 ^ $$emscripten$temp$1$1;
      var $99=$1;
      var $100=$99;
      var $st$12$0=(($100)|0);
      HEAP32[(($st$12$0)>>2)]=$98$0;
      var $st$12$1=(($100+4)|0);
      HEAP32[(($st$12$1)>>2)]=$98$1;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cvt_64["X"]=1;

function _cvt_float($p, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $7=$6$0 != $$emscripten$temp$0$0 || $6$1 != $$emscripten$temp$0$1;
      if ($7) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 6) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19=$18$0 + $18$1*4294967296;
      var $20=$1;
      var $21=$20;
      var $22=HEAPF32[(($21)>>2)];
      var $23=($22)+($19);
      HEAPF32[(($21)>>2)]=$23;
      __label__ = 8; break;
    case 5: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=$26;
      var $st$3$0=(($27)|0);
      var $28$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($27+4)|0);
      var $28$1=HEAP32[(($st$3$1)>>2)];
      var $29=$28$0 + $28$1*4294967296;
      var $30=$1;
      var $31=$30;
      var $32=HEAPF32[(($31)>>2)];
      var $33=($32)-($29);
      HEAPF32[(($31)>>2)]=$33;
      __label__ = 8; break;
    case 6: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=$36;
      var $st$3$0=(($37)|0);
      var $38$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($37+4)|0);
      var $38$1=HEAP32[(($st$3$1)>>2)];
      var $39=$38$0 + $38$1*4294967296;
      var $40=$1;
      var $41=$40;
      var $42=HEAPF32[(($41)>>2)];
      var $43=($42)*($39);
      HEAPF32[(($41)>>2)]=$43;
      __label__ = 8; break;
    case 7: 
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=$46;
      var $st$3$0=(($47)|0);
      var $48$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$3$1)>>2)];
      var $49=$48$0 + $48$1*4294967296;
      var $50=$1;
      var $51=$50;
      var $52=HEAPF32[(($51)>>2)];
      var $53=($52)/($49);
      HEAPF32[(($51)>>2)]=$53;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cvt_float["X"]=1;

function _cvt_double($p, $m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $7=$6$0 != $$emscripten$temp$0$0 || $6$1 != $$emscripten$temp$0$1;
      if ($7) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 5; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($13)|0) == 6) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19=$18$0 + $18$1*4294967296;
      var $20=$1;
      var $21=$20;
      var $22=(tempDoubleI32[0]=HEAP32[(($21)>>2)],tempDoubleI32[1]=HEAP32[((($21)+(4))>>2)],tempDoubleF64[0]);
      var $23=($22)+($19);
      (tempDoubleF64[0]=$23,HEAP32[(($21)>>2)]=tempDoubleI32[0],HEAP32[((($21)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 8; break;
    case 5: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=$26;
      var $st$3$0=(($27)|0);
      var $28$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($27+4)|0);
      var $28$1=HEAP32[(($st$3$1)>>2)];
      var $29=$28$0 + $28$1*4294967296;
      var $30=$1;
      var $31=$30;
      var $32=(tempDoubleI32[0]=HEAP32[(($31)>>2)],tempDoubleI32[1]=HEAP32[((($31)+(4))>>2)],tempDoubleF64[0]);
      var $33=($32)-($29);
      (tempDoubleF64[0]=$33,HEAP32[(($31)>>2)]=tempDoubleI32[0],HEAP32[((($31)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 8; break;
    case 6: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=$36;
      var $st$3$0=(($37)|0);
      var $38$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($37+4)|0);
      var $38$1=HEAP32[(($st$3$1)>>2)];
      var $39=$38$0 + $38$1*4294967296;
      var $40=$1;
      var $41=$40;
      var $42=(tempDoubleI32[0]=HEAP32[(($41)>>2)],tempDoubleI32[1]=HEAP32[((($41)+(4))>>2)],tempDoubleF64[0]);
      var $43=($42)*($39);
      (tempDoubleF64[0]=$43,HEAP32[(($41)>>2)]=tempDoubleI32[0],HEAP32[((($41)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 8; break;
    case 7: 
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=$46;
      var $st$3$0=(($47)|0);
      var $48$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$3$1)>>2)];
      var $49=$48$0 + $48$1*4294967296;
      var $50=$1;
      var $51=$50;
      var $52=(tempDoubleI32[0]=HEAP32[(($51)>>2)],tempDoubleI32[1]=HEAP32[((($51)+(4))>>2)],tempDoubleF64[0]);
      var $53=($52)/($49);
      (tempDoubleF64[0]=$53,HEAP32[(($51)>>2)]=tempDoubleI32[0],HEAP32[((($51)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cvt_double["X"]=1;

function _trim_nuls($buf, $nbytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$buf;
      $2=$nbytes;
      __label__ = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4)>>>0) > 1;
      if ($5) { __label__ = 4; break; } else { var $15 = 0;__label__ = 5; break; }
    case 4: 
      var $7=$2;
      var $8=((($7)-(1))|0);
      var $9=$1;
      var $10=(($9+$8)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=(($12)|0)==0;
      var $15 = $13;__label__ = 5; break;
    case 5: 
      var $15;
      if ($15) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $17=$2;
      var $18=((($17)-(1))|0);
      $2=$18;
      __label__ = 3; break;
    case 7: 
      var $20=$2;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_ascmagic($ms, $buf, $nbytes, $text) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ubuf=__stackBase__;
      var $ulen=(__stackBase__)+(4);
      var $rv;
      var $code=(__stackBase__)+(8);
      var $code_mime=(__stackBase__)+(12);
      var $type=(__stackBase__)+(16);
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      $5=$text;
      HEAP32[(($ubuf)>>2)]=0;
      $rv=1;
      HEAP32[(($code)>>2)]=0;
      HEAP32[(($code_mime)>>2)]=0;
      HEAP32[(($type)>>2)]=0;
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 2048;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 8; break;
    case 4: 
      var $13=$3;
      var $14=$4;
      var $15=_trim_nuls($13, $14);
      $4=$15;
      var $16=$2;
      var $17=$3;
      var $18=$4;
      var $19=_file_encoding($16, $17, $18, $ubuf, $ulen, $code, $code_mime, $type);
      var $20=(($19)|0)==0;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $rv=0;
      __label__ = 7; break;
    case 6: 
      var $23=$2;
      var $24=$3;
      var $25=$4;
      var $26=HEAP32[(($ubuf)>>2)];
      var $27=HEAP32[(($ulen)>>2)];
      var $28=HEAP32[(($code)>>2)];
      var $29=HEAP32[(($type)>>2)];
      var $30=$5;
      var $31=_file_ascmagic_with_encoding($23, $24, $25, $26, $27, $28, $29, $30);
      $rv=$31;
      __label__ = 7; break;
    case 7: 
      var $33=HEAP32[(($ubuf)>>2)];
      var $34=$33;
      _free($34);
      var $35=$rv;
      $1=$35;
      __label__ = 8; break;
    case 8: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_ascmagic["X"]=1;

function _file_ascmagic_with_encoding($ms, $buf, $nbytes, $ubuf, $ulen, $code, $type, $text) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $utf8_buf;
      var $utf8_end;
      var $mlen;
      var $i;
      var $rv;
      var $mime;
      var $subtype;
      var $subtype_mime;
      var $has_escapes;
      var $has_backspace;
      var $seen_cr;
      var $n_crlf;
      var $n_lf;
      var $n_cr;
      var $n_nel;
      var $executable;
      var $last_line_end;
      var $has_long_lines;
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      $5=$ubuf;
      $6=$ulen;
      $7=$code;
      $8=$type;
      $9=$text;
      $utf8_buf=0;
      $rv=-1;
      var $10=$2;
      var $11=(($10+28)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 1040;
      $mime=$13;
      $subtype=0;
      $subtype_mime=0;
      $has_escapes=0;
      $has_backspace=0;
      $seen_cr=0;
      $n_crlf=0;
      $n_lf=0;
      $n_cr=0;
      $n_nel=0;
      $executable=0;
      $last_line_end=-1;
      $has_long_lines=0;
      var $14=$2;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 2048;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 143; break;
    case 4: 
      var $21=$3;
      var $22=$4;
      var $23=_trim_nuls($21, $22);
      $4=$23;
      var $24=$4;
      var $25=(($24)>>>0) <= 1;
      if ($25) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $rv=0;
      __label__ = 142; break;
    case 6: 
      var $28=$2;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & 16384;
      var $32=(($31)|0)==0;
      if ($32) { __label__ = 7; break; } else { __label__ = 14; break; }
    case 7: 
      var $34=$6;
      var $35=((($34)*(6))|0);
      $mlen=$35;
      var $36=$mlen;
      var $37=_malloc($36);
      $utf8_buf=$37;
      var $38=(($37)|0)==0;
      if ($38) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $40=$2;
      var $41=$mlen;
      _file_oomem($40, $41);
      __label__ = 142; break;
    case 9: 
      var $43=$utf8_buf;
      var $44=$mlen;
      var $45=$5;
      var $46=$6;
      var $47=_encode_utf8($43, $44, $45, $46);
      $utf8_end=$47;
      var $48=(($47)|0)==0;
      if ($48) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 142; break;
    case 11: 
      var $51=$2;
      var $52=$utf8_buf;
      var $53=$utf8_end;
      var $54=$utf8_buf;
      var $55=$53;
      var $56=$54;
      var $57=((($55)-($56))|0);
      var $58=$9;
      var $59=_file_softmagic($51, $52, $57, 64, $58);
      $rv=$59;
      var $60=(($59)|0)==0;
      if ($60) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $rv=-1;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $65=$i;
      var $66=$6;
      var $67=(($65)>>>0) < (($66)>>>0);
      if ($67) { __label__ = 16; break; } else { __label__ = 36; break; }
    case 16: 
      var $69=$i;
      var $70=$5;
      var $71=(($70+($69<<2))|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|0)==10;
      if ($73) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $75=$seen_cr;
      var $76=(($75)|0)!=0;
      if ($76) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $78=$n_crlf;
      var $79=((($78)+(1))|0);
      $n_crlf=$79;
      __label__ = 20; break;
    case 19: 
      var $81=$n_lf;
      var $82=((($81)+(1))|0);
      $n_lf=$82;
      __label__ = 20; break;
    case 20: 
      var $84=$i;
      $last_line_end=$84;
      __label__ = 24; break;
    case 21: 
      var $86=$seen_cr;
      var $87=(($86)|0)!=0;
      if ($87) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $89=$n_cr;
      var $90=((($89)+(1))|0);
      $n_cr=$90;
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $93=$i;
      var $94=$5;
      var $95=(($94+($93<<2))|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|0)==13;
      var $98=(($97)&1);
      $seen_cr=$98;
      var $99=$seen_cr;
      var $100=(($99)|0)!=0;
      if ($100) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $102=$i;
      $last_line_end=$102;
      __label__ = 26; break;
    case 26: 
      var $104=$i;
      var $105=$5;
      var $106=(($105+($104<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107)|0)==133;
      if ($108) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $110=$n_nel;
      var $111=((($110)+(1))|0);
      $n_nel=$111;
      var $112=$i;
      $last_line_end=$112;
      __label__ = 28; break;
    case 28: 
      var $114=$i;
      var $115=$last_line_end;
      var $116=((($115)+(300))|0);
      var $117=(($114)>>>0) > (($116)>>>0);
      if ($117) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $has_long_lines=1;
      __label__ = 30; break;
    case 30: 
      var $120=$i;
      var $121=$5;
      var $122=(($121+($120<<2))|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|0)==27;
      if ($124) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      $has_escapes=1;
      __label__ = 32; break;
    case 32: 
      var $127=$i;
      var $128=$5;
      var $129=(($128+($127<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130)|0)==8;
      if ($131) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $has_backspace=1;
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $135=$i;
      var $136=((($135)+(1))|0);
      $i=$136;
      __label__ = 15; break;
    case 36: 
      var $138=$seen_cr;
      var $139=(($138)|0)!=0;
      if ($139) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $141=$4;
      var $142=(($141)>>>0) < 262144;
      if ($142) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $144=$n_cr;
      var $145=((($144)+(1))|0);
      $n_cr=$145;
      __label__ = 39; break;
    case 39: 
      var $147=$8;
      var $148=_strcmp($147, ((STRING_TABLE.__str112)|0));
      var $149=(($148)|0)==0;
      if ($149) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      $rv=0;
      __label__ = 142; break;
    case 41: 
      var $152=$mime;
      var $153=(($152)|0)!=0;
      if ($153) { __label__ = 42; break; } else { __label__ = 53; break; }
    case 42: 
      var $155=$2;
      var $156=_file_printedlen($155);
      var $157=(($156)|0)!=0;
      if ($157) { __label__ = 52; break; } else { __label__ = 43; break; }
    case 43: 
      var $159=$mime;
      var $160=$159 & 16;
      var $161=(($160)|0)!=0;
      if ($161) { __label__ = 44; break; } else { __label__ = 52; break; }
    case 44: 
      var $163=$subtype_mime;
      var $164=(($163)|0)!=0;
      if ($164) { __label__ = 45; break; } else { __label__ = 48; break; }
    case 45: 
      var $166=$2;
      var $167=$subtype_mime;
      var $168=_file_printf($166, ((STRING_TABLE.__str1113)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$167,tempInt));
      var $169=(($168)|0)==-1;
      if ($169) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      __label__ = 142; break;
    case 47: 
      __label__ = 51; break;
    case 48: 
      var $173=$2;
      var $174=_file_printf($173, ((STRING_TABLE.__str2114)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $175=(($174)|0)==-1;
      if ($175) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      __label__ = 142; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 141; break;
    case 53: 
      var $181=$2;
      var $182=_file_printedlen($181);
      var $183=(($182)|0)!=0;
      if ($183) { __label__ = 54; break; } else { __label__ = 65; break; }
    case 54: 
      var $185=$2;
      var $186=_file_replace($185, ((STRING_TABLE.__str3115)|0), ((STRING_TABLE.__str4116)|0));
      if ((($186)|0) == 0) {
        __label__ = 55; break;
      }
      else if ((($186)|0) == -1) {
        __label__ = 62; break;
      }
      else {
      __label__ = 63; break;
      }
      
    case 55: 
      var $188=$2;
      var $189=_file_replace($188, ((STRING_TABLE.__str5117)|0), ((STRING_TABLE.__str4116)|0));
      if ((($189)|0) == 0) {
        __label__ = 56; break;
      }
      else if ((($189)|0) == -1) {
        __label__ = 59; break;
      }
      else {
      __label__ = 60; break;
      }
      
    case 56: 
      var $191=$2;
      var $192=_file_printf($191, ((STRING_TABLE.__str4116)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $193=(($192)|0)==-1;
      if ($193) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      __label__ = 142; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 142; break;
    case 60: 
      $executable=1;
      __label__ = 61; break;
    case 61: 
      __label__ = 64; break;
    case 62: 
      __label__ = 142; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $203=$2;
      var $204=$7;
      var $205=_file_printf($203, ((STRING_TABLE.__str1113)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$204,tempInt));
      var $206=(($205)|0)==-1;
      if ($206) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      __label__ = 142; break;
    case 67: 
      var $209=$subtype;
      var $210=(($209)|0)!=0;
      if ($210) { __label__ = 68; break; } else { __label__ = 71; break; }
    case 68: 
      var $212=$2;
      var $213=$subtype;
      var $214=_file_printf($212, ((STRING_TABLE.__str6118)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$213,tempInt));
      var $215=(($214)|0)==-1;
      if ($215) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      __label__ = 142; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      var $219=$2;
      var $220=$8;
      var $221=_file_printf($219, ((STRING_TABLE.__str6118)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$220,tempInt));
      var $222=(($221)|0)==-1;
      if ($222) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      __label__ = 142; break;
    case 73: 
      var $225=$executable;
      var $226=(($225)|0)!=0;
      if ($226) { __label__ = 74; break; } else { __label__ = 77; break; }
    case 74: 
      var $228=$2;
      var $229=_file_printf($228, ((STRING_TABLE.__str7119)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $230=(($229)|0)==-1;
      if ($230) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      __label__ = 142; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      var $234=$has_long_lines;
      var $235=(($234)|0)!=0;
      if ($235) { __label__ = 78; break; } else { __label__ = 81; break; }
    case 78: 
      var $237=$2;
      var $238=_file_printf($237, ((STRING_TABLE.__str8120)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $239=(($238)|0)==-1;
      if ($239) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      __label__ = 142; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      var $243=$n_crlf;
      var $244=(($243)|0)==0;
      if ($244) { __label__ = 82; break; } else { __label__ = 85; break; }
    case 82: 
      var $246=$n_cr;
      var $247=(($246)|0)==0;
      if ($247) { __label__ = 83; break; } else { __label__ = 85; break; }
    case 83: 
      var $249=$n_nel;
      var $250=(($249)|0)==0;
      if ($250) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $252=$n_lf;
      var $253=(($252)|0)==0;
      if ($253) { __label__ = 88; break; } else { __label__ = 85; break; }
    case 85: 
      var $255=$n_crlf;
      var $256=(($255)|0)!=0;
      if ($256) { __label__ = 88; break; } else { __label__ = 86; break; }
    case 86: 
      var $258=$n_cr;
      var $259=(($258)|0)!=0;
      if ($259) { __label__ = 88; break; } else { __label__ = 87; break; }
    case 87: 
      var $261=$n_nel;
      var $262=(($261)|0)!=0;
      if ($262) { __label__ = 88; break; } else { __label__ = 132; break; }
    case 88: 
      var $264=$2;
      var $265=_file_printf($264, ((STRING_TABLE.__str9121)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $266=(($265)|0)==-1;
      if ($266) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      __label__ = 142; break;
    case 90: 
      var $269=$n_crlf;
      var $270=(($269)|0)==0;
      if ($270) { __label__ = 91; break; } else { __label__ = 97; break; }
    case 91: 
      var $272=$n_cr;
      var $273=(($272)|0)==0;
      if ($273) { __label__ = 92; break; } else { __label__ = 97; break; }
    case 92: 
      var $275=$n_nel;
      var $276=(($275)|0)==0;
      if ($276) { __label__ = 93; break; } else { __label__ = 97; break; }
    case 93: 
      var $278=$n_lf;
      var $279=(($278)|0)==0;
      if ($279) { __label__ = 94; break; } else { __label__ = 97; break; }
    case 94: 
      var $281=$2;
      var $282=_file_printf($281, ((STRING_TABLE.__str10122)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $283=(($282)|0)==-1;
      if ($283) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      __label__ = 142; break;
    case 96: 
      __label__ = 129; break;
    case 97: 
      var $287=$n_crlf;
      var $288=(($287)|0)!=0;
      if ($288) { __label__ = 98; break; } else { __label__ = 107; break; }
    case 98: 
      var $290=$2;
      var $291=_file_printf($290, ((STRING_TABLE.__str11123)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $292=(($291)|0)==-1;
      if ($292) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      __label__ = 142; break;
    case 100: 
      var $295=$n_cr;
      var $296=(($295)|0)!=0;
      if ($296) { __label__ = 103; break; } else { __label__ = 101; break; }
    case 101: 
      var $298=$n_lf;
      var $299=(($298)|0)!=0;
      if ($299) { __label__ = 103; break; } else { __label__ = 102; break; }
    case 102: 
      var $301=$n_nel;
      var $302=(($301)|0)!=0;
      if ($302) { __label__ = 103; break; } else { __label__ = 106; break; }
    case 103: 
      var $304=$2;
      var $305=_file_printf($304, ((STRING_TABLE.__str12124)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $306=(($305)|0)==-1;
      if ($306) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      __label__ = 142; break;
    case 105: 
      __label__ = 106; break;
    case 106: 
      __label__ = 107; break;
    case 107: 
      var $311=$n_cr;
      var $312=(($311)|0)!=0;
      if ($312) { __label__ = 108; break; } else { __label__ = 116; break; }
    case 108: 
      var $314=$2;
      var $315=_file_printf($314, ((STRING_TABLE.__str13125)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $316=(($315)|0)==-1;
      if ($316) { __label__ = 109; break; } else { __label__ = 110; break; }
    case 109: 
      __label__ = 142; break;
    case 110: 
      var $319=$n_lf;
      var $320=(($319)|0)!=0;
      if ($320) { __label__ = 112; break; } else { __label__ = 111; break; }
    case 111: 
      var $322=$n_nel;
      var $323=(($322)|0)!=0;
      if ($323) { __label__ = 112; break; } else { __label__ = 115; break; }
    case 112: 
      var $325=$2;
      var $326=_file_printf($325, ((STRING_TABLE.__str12124)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $327=(($326)|0)==-1;
      if ($327) { __label__ = 113; break; } else { __label__ = 114; break; }
    case 113: 
      __label__ = 142; break;
    case 114: 
      __label__ = 115; break;
    case 115: 
      __label__ = 116; break;
    case 116: 
      var $332=$n_lf;
      var $333=(($332)|0)!=0;
      if ($333) { __label__ = 117; break; } else { __label__ = 124; break; }
    case 117: 
      var $335=$2;
      var $336=_file_printf($335, ((STRING_TABLE.__str14126)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $337=(($336)|0)==-1;
      if ($337) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: 
      __label__ = 142; break;
    case 119: 
      var $340=$n_nel;
      var $341=(($340)|0)!=0;
      if ($341) { __label__ = 120; break; } else { __label__ = 123; break; }
    case 120: 
      var $343=$2;
      var $344=_file_printf($343, ((STRING_TABLE.__str12124)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $345=(($344)|0)==-1;
      if ($345) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: 
      __label__ = 142; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 124; break;
    case 124: 
      var $350=$n_nel;
      var $351=(($350)|0)!=0;
      if ($351) { __label__ = 125; break; } else { __label__ = 128; break; }
    case 125: 
      var $353=$2;
      var $354=_file_printf($353, ((STRING_TABLE.__str15127)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $355=(($354)|0)==-1;
      if ($355) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      __label__ = 142; break;
    case 127: 
      __label__ = 128; break;
    case 128: 
      __label__ = 129; break;
    case 129: 
      var $360=$2;
      var $361=_file_printf($360, ((STRING_TABLE.__str16128)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $362=(($361)|0)==-1;
      if ($362) { __label__ = 130; break; } else { __label__ = 131; break; }
    case 130: 
      __label__ = 142; break;
    case 131: 
      __label__ = 132; break;
    case 132: 
      var $366=$has_escapes;
      var $367=(($366)|0)!=0;
      if ($367) { __label__ = 133; break; } else { __label__ = 136; break; }
    case 133: 
      var $369=$2;
      var $370=_file_printf($369, ((STRING_TABLE.__str17129)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $371=(($370)|0)==-1;
      if ($371) { __label__ = 134; break; } else { __label__ = 135; break; }
    case 134: 
      __label__ = 142; break;
    case 135: 
      __label__ = 136; break;
    case 136: 
      var $375=$has_backspace;
      var $376=(($375)|0)!=0;
      if ($376) { __label__ = 137; break; } else { __label__ = 140; break; }
    case 137: 
      var $378=$2;
      var $379=_file_printf($378, ((STRING_TABLE.__str18130)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $380=(($379)|0)==-1;
      if ($380) { __label__ = 138; break; } else { __label__ = 139; break; }
    case 138: 
      __label__ = 142; break;
    case 139: 
      __label__ = 140; break;
    case 140: 
      __label__ = 141; break;
    case 141: 
      $rv=1;
      __label__ = 142; break;
    case 142: 
      var $386=$utf8_buf;
      _free($386);
      var $387=$rv;
      $1=$387;
      __label__ = 143; break;
    case 143: 
      var $389=$1;
      STACKTOP = __stackBase__;
      return $389;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_ascmagic_with_encoding["X"]=1;

function _encode_utf8($buf, $len, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $end;
      $2=$buf;
      $3=$len;
      $4=$ubuf;
      $5=$ulen;
      var $6=$2;
      var $7=$3;
      var $8=(($6+$7)|0);
      $end=$8;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $10=$i;
      var $11=$5;
      var $12=(($10)>>>0) < (($11)>>>0);
      if ($12) { __label__ = 4; break; } else { __label__ = 36; break; }
    case 4: 
      var $14=$i;
      var $15=$4;
      var $16=(($15+($14<<2))|0);
      var $17=HEAPU32[(($16)>>2)];
      var $18=(($17)>>>0) <= 127;
      if ($18) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $20=$end;
      var $21=$2;
      var $22=$20;
      var $23=$21;
      var $24=((($22)-($23))|0);
      var $25=(($24)|0) < 1;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 37; break;
    case 7: 
      var $28=$i;
      var $29=$4;
      var $30=(($29+($28<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31) & 255);
      var $33=$2;
      var $34=(($33+1)|0);
      $2=$34;
      HEAP8[($33)]=$32;
      __label__ = 34; break;
    case 8: 
      var $36=$i;
      var $37=$4;
      var $38=(($37+($36<<2))|0);
      var $39=HEAPU32[(($38)>>2)];
      var $40=(($39)>>>0) <= 2047;
      if ($40) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $42=$end;
      var $43=$2;
      var $44=$42;
      var $45=$43;
      var $46=((($44)-($45))|0);
      var $47=(($46)|0) < 2;
      if ($47) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $1=0;
      __label__ = 37; break;
    case 11: 
      var $50=$i;
      var $51=$4;
      var $52=(($51+($50<<2))|0);
      var $53=HEAPU32[(($52)>>2)];
      var $54=$53 >>> 6;
      var $55=((($54)+(192))|0);
      var $56=(($55) & 255);
      var $57=$2;
      var $58=(($57+1)|0);
      $2=$58;
      HEAP8[($57)]=$56;
      var $59=$i;
      var $60=$4;
      var $61=(($60+($59<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & 63;
      var $64=((($63)+(128))|0);
      var $65=(($64) & 255);
      var $66=$2;
      var $67=(($66+1)|0);
      $2=$67;
      HEAP8[($66)]=$65;
      __label__ = 33; break;
    case 12: 
      var $69=$i;
      var $70=$4;
      var $71=(($70+($69<<2))|0);
      var $72=HEAPU32[(($71)>>2)];
      var $73=(($72)>>>0) <= 65535;
      if ($73) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $75=$end;
      var $76=$2;
      var $77=$75;
      var $78=$76;
      var $79=((($77)-($78))|0);
      var $80=(($79)|0) < 3;
      if ($80) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $1=0;
      __label__ = 37; break;
    case 15: 
      var $83=$i;
      var $84=$4;
      var $85=(($84+($83<<2))|0);
      var $86=HEAPU32[(($85)>>2)];
      var $87=$86 >>> 12;
      var $88=((($87)+(224))|0);
      var $89=(($88) & 255);
      var $90=$2;
      var $91=(($90+1)|0);
      $2=$91;
      HEAP8[($90)]=$89;
      var $92=$i;
      var $93=$4;
      var $94=(($93+($92<<2))|0);
      var $95=HEAPU32[(($94)>>2)];
      var $96=$95 >>> 6;
      var $97=$96 & 63;
      var $98=((($97)+(128))|0);
      var $99=(($98) & 255);
      var $100=$2;
      var $101=(($100+1)|0);
      $2=$101;
      HEAP8[($100)]=$99;
      var $102=$i;
      var $103=$4;
      var $104=(($103+($102<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 & 63;
      var $107=((($106)+(128))|0);
      var $108=(($107) & 255);
      var $109=$2;
      var $110=(($109+1)|0);
      $2=$110;
      HEAP8[($109)]=$108;
      __label__ = 32; break;
    case 16: 
      var $112=$i;
      var $113=$4;
      var $114=(($113+($112<<2))|0);
      var $115=HEAPU32[(($114)>>2)];
      var $116=(($115)>>>0) <= 2097151;
      if ($116) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $118=$end;
      var $119=$2;
      var $120=$118;
      var $121=$119;
      var $122=((($120)-($121))|0);
      var $123=(($122)|0) < 4;
      if ($123) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $1=0;
      __label__ = 37; break;
    case 19: 
      var $126=$i;
      var $127=$4;
      var $128=(($127+($126<<2))|0);
      var $129=HEAPU32[(($128)>>2)];
      var $130=$129 >>> 18;
      var $131=((($130)+(240))|0);
      var $132=(($131) & 255);
      var $133=$2;
      var $134=(($133+1)|0);
      $2=$134;
      HEAP8[($133)]=$132;
      var $135=$i;
      var $136=$4;
      var $137=(($136+($135<<2))|0);
      var $138=HEAPU32[(($137)>>2)];
      var $139=$138 >>> 12;
      var $140=$139 & 63;
      var $141=((($140)+(128))|0);
      var $142=(($141) & 255);
      var $143=$2;
      var $144=(($143+1)|0);
      $2=$144;
      HEAP8[($143)]=$142;
      var $145=$i;
      var $146=$4;
      var $147=(($146+($145<<2))|0);
      var $148=HEAPU32[(($147)>>2)];
      var $149=$148 >>> 6;
      var $150=$149 & 63;
      var $151=((($150)+(128))|0);
      var $152=(($151) & 255);
      var $153=$2;
      var $154=(($153+1)|0);
      $2=$154;
      HEAP8[($153)]=$152;
      var $155=$i;
      var $156=$4;
      var $157=(($156+($155<<2))|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$158 & 63;
      var $160=((($159)+(128))|0);
      var $161=(($160) & 255);
      var $162=$2;
      var $163=(($162+1)|0);
      $2=$163;
      HEAP8[($162)]=$161;
      __label__ = 31; break;
    case 20: 
      var $165=$i;
      var $166=$4;
      var $167=(($166+($165<<2))|0);
      var $168=HEAPU32[(($167)>>2)];
      var $169=(($168)>>>0) <= 67108863;
      if ($169) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $171=$end;
      var $172=$2;
      var $173=$171;
      var $174=$172;
      var $175=((($173)-($174))|0);
      var $176=(($175)|0) < 5;
      if ($176) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $1=0;
      __label__ = 37; break;
    case 23: 
      var $179=$i;
      var $180=$4;
      var $181=(($180+($179<<2))|0);
      var $182=HEAPU32[(($181)>>2)];
      var $183=$182 >>> 24;
      var $184=((($183)+(248))|0);
      var $185=(($184) & 255);
      var $186=$2;
      var $187=(($186+1)|0);
      $2=$187;
      HEAP8[($186)]=$185;
      var $188=$i;
      var $189=$4;
      var $190=(($189+($188<<2))|0);
      var $191=HEAPU32[(($190)>>2)];
      var $192=$191 >>> 18;
      var $193=$192 & 63;
      var $194=((($193)+(128))|0);
      var $195=(($194) & 255);
      var $196=$2;
      var $197=(($196+1)|0);
      $2=$197;
      HEAP8[($196)]=$195;
      var $198=$i;
      var $199=$4;
      var $200=(($199+($198<<2))|0);
      var $201=HEAPU32[(($200)>>2)];
      var $202=$201 >>> 12;
      var $203=$202 & 63;
      var $204=((($203)+(128))|0);
      var $205=(($204) & 255);
      var $206=$2;
      var $207=(($206+1)|0);
      $2=$207;
      HEAP8[($206)]=$205;
      var $208=$i;
      var $209=$4;
      var $210=(($209+($208<<2))|0);
      var $211=HEAPU32[(($210)>>2)];
      var $212=$211 >>> 6;
      var $213=$212 & 63;
      var $214=((($213)+(128))|0);
      var $215=(($214) & 255);
      var $216=$2;
      var $217=(($216+1)|0);
      $2=$217;
      HEAP8[($216)]=$215;
      var $218=$i;
      var $219=$4;
      var $220=(($219+($218<<2))|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$221 & 63;
      var $223=((($222)+(128))|0);
      var $224=(($223) & 255);
      var $225=$2;
      var $226=(($225+1)|0);
      $2=$226;
      HEAP8[($225)]=$224;
      __label__ = 30; break;
    case 24: 
      var $228=$i;
      var $229=$4;
      var $230=(($229+($228<<2))|0);
      var $231=HEAPU32[(($230)>>2)];
      var $232=(($231)>>>0) <= 2147483647;
      if ($232) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $234=$end;
      var $235=$2;
      var $236=$234;
      var $237=$235;
      var $238=((($236)-($237))|0);
      var $239=(($238)|0) < 6;
      if ($239) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      $1=0;
      __label__ = 37; break;
    case 27: 
      var $242=$i;
      var $243=$4;
      var $244=(($243+($242<<2))|0);
      var $245=HEAPU32[(($244)>>2)];
      var $246=$245 >>> 30;
      var $247=((($246)+(252))|0);
      var $248=(($247) & 255);
      var $249=$2;
      var $250=(($249+1)|0);
      $2=$250;
      HEAP8[($249)]=$248;
      var $251=$i;
      var $252=$4;
      var $253=(($252+($251<<2))|0);
      var $254=HEAPU32[(($253)>>2)];
      var $255=$254 >>> 24;
      var $256=$255 & 63;
      var $257=((($256)+(128))|0);
      var $258=(($257) & 255);
      var $259=$2;
      var $260=(($259+1)|0);
      $2=$260;
      HEAP8[($259)]=$258;
      var $261=$i;
      var $262=$4;
      var $263=(($262+($261<<2))|0);
      var $264=HEAPU32[(($263)>>2)];
      var $265=$264 >>> 18;
      var $266=$265 & 63;
      var $267=((($266)+(128))|0);
      var $268=(($267) & 255);
      var $269=$2;
      var $270=(($269+1)|0);
      $2=$270;
      HEAP8[($269)]=$268;
      var $271=$i;
      var $272=$4;
      var $273=(($272+($271<<2))|0);
      var $274=HEAPU32[(($273)>>2)];
      var $275=$274 >>> 12;
      var $276=$275 & 63;
      var $277=((($276)+(128))|0);
      var $278=(($277) & 255);
      var $279=$2;
      var $280=(($279+1)|0);
      $2=$280;
      HEAP8[($279)]=$278;
      var $281=$i;
      var $282=$4;
      var $283=(($282+($281<<2))|0);
      var $284=HEAPU32[(($283)>>2)];
      var $285=$284 >>> 6;
      var $286=$285 & 63;
      var $287=((($286)+(128))|0);
      var $288=(($287) & 255);
      var $289=$2;
      var $290=(($289+1)|0);
      $2=$290;
      HEAP8[($289)]=$288;
      var $291=$i;
      var $292=$4;
      var $293=(($292+($291<<2))|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$294 & 63;
      var $296=((($295)+(128))|0);
      var $297=(($296) & 255);
      var $298=$2;
      var $299=(($298+1)|0);
      $2=$299;
      HEAP8[($298)]=$297;
      __label__ = 29; break;
    case 28: 
      $1=0;
      __label__ = 37; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $308=$i;
      var $309=((($308)+(1))|0);
      $i=$309;
      __label__ = 3; break;
    case 36: 
      var $311=$2;
      $1=$311;
      __label__ = 37; break;
    case 37: 
      var $313=$1;
      ;
      return $313;
    default: assert(0, "bad label: " + __label__);
  }
}
_encode_utf8["X"]=1;

function _looks_ascii($buf, $nbytes, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $t;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$5;
      HEAP32[(($6)>>2)]=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $8=$i;
      var $9=$3;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+$12)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      var $17=((STRING_TABLE._text_chars+$16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      $t=$19;
      var $20=$t;
      var $21=(($20)|0)!=1;
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 9; break;
    case 6: 
      var $24=$i;
      var $25=$2;
      var $26=(($25+$24)|0);
      var $27=HEAPU8[($26)];
      var $28=(($27)&255);
      var $29=$5;
      var $30=HEAPU32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=$4;
      var $33=(($32+($30<<2))|0);
      HEAP32[(($33)>>2)]=$28;
      __label__ = 7; break;
    case 7: 
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      __label__ = 3; break;
    case 8: 
      $1=1;
      __label__ = 9; break;
    case 9: 
      var $39=$1;
      ;
      return $39;
    default: assert(0, "bad label: " + __label__);
  }
}
_looks_ascii["X"]=1;

function _file_encoding($ms, $buf, $nbytes, $ubuf, $ulen, $code, $code_mime, $type) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $mlen;
      var $rv;
      var $ucs_type;
      var $nbuf;
      $1=$ms;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      $6=$code;
      $7=$code_mime;
      $8=$type;
      $rv=1;
      $nbuf=0;
      var $9=$8;
      HEAP32[(($9)>>2)]=((STRING_TABLE.__str133)|0);
      var $10=$3;
      var $11=((($10)+(1))|0);
      var $12=(($11)|0);
      $mlen=$12;
      var $13=$mlen;
      var $14=_calloc(1, $13);
      $nbuf=$14;
      var $15=(($14)|0)==0;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$1;
      var $18=$mlen;
      _file_oomem($17, $18);
      __label__ = 34; break;
    case 4: 
      var $20=$3;
      var $21=((($20)+(1))|0);
      var $22=((($21<<2))|0);
      $mlen=$22;
      var $23=$mlen;
      var $24=_calloc(1, $23);
      var $25=$24;
      var $26=$4;
      HEAP32[(($26)>>2)]=$25;
      var $27=(($25)|0)==0;
      if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $29=$1;
      var $30=$mlen;
      _file_oomem($29, $30);
      __label__ = 34; break;
    case 6: 
      var $32=$2;
      var $33=$3;
      var $34=$4;
      var $35=HEAP32[(($34)>>2)];
      var $36=$5;
      var $37=_looks_ascii($32, $33, $35, $36);
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $40=$6;
      HEAP32[(($40)>>2)]=((STRING_TABLE.__str1134)|0);
      var $41=$7;
      HEAP32[(($41)>>2)]=((STRING_TABLE.__str2135)|0);
      __label__ = 33; break;
    case 8: 
      var $43=$2;
      var $44=$3;
      var $45=$4;
      var $46=HEAP32[(($45)>>2)];
      var $47=$5;
      var $48=_looks_utf8_with_BOM($43, $44, $46, $47);
      var $49=(($48)|0) > 0;
      if ($49) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $51=$6;
      HEAP32[(($51)>>2)]=((STRING_TABLE.__str3136)|0);
      var $52=$7;
      HEAP32[(($52)>>2)]=((STRING_TABLE.__str4137)|0);
      __label__ = 32; break;
    case 10: 
      var $54=$2;
      var $55=$3;
      var $56=$4;
      var $57=HEAP32[(($56)>>2)];
      var $58=$5;
      var $59=_file_looks_utf8($54, $55, $57, $58);
      var $60=(($59)|0) > 1;
      if ($60) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $62=$6;
      HEAP32[(($62)>>2)]=((STRING_TABLE.__str3136)|0);
      var $63=$6;
      HEAP32[(($63)>>2)]=((STRING_TABLE.__str5138)|0);
      var $64=$7;
      HEAP32[(($64)>>2)]=((STRING_TABLE.__str4137)|0);
      __label__ = 31; break;
    case 12: 
      var $66=$2;
      var $67=$3;
      var $68=$4;
      var $69=HEAP32[(($68)>>2)];
      var $70=$5;
      var $71=_looks_ucs16($66, $67, $69, $70);
      $ucs_type=$71;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $74=$ucs_type;
      var $75=(($74)|0)==1;
      if ($75) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $77=$6;
      HEAP32[(($77)>>2)]=((STRING_TABLE.__str6139)|0);
      var $78=$7;
      HEAP32[(($78)>>2)]=((STRING_TABLE.__str7140)|0);
      __label__ = 16; break;
    case 15: 
      var $80=$6;
      HEAP32[(($80)>>2)]=((STRING_TABLE.__str8141)|0);
      var $81=$7;
      HEAP32[(($81)>>2)]=((STRING_TABLE.__str9142)|0);
      __label__ = 16; break;
    case 16: 
      __label__ = 30; break;
    case 17: 
      var $84=$2;
      var $85=$3;
      var $86=$4;
      var $87=HEAP32[(($86)>>2)];
      var $88=$5;
      var $89=_looks_latin1($84, $85, $87, $88);
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $92=$6;
      HEAP32[(($92)>>2)]=((STRING_TABLE.__str10143)|0);
      var $93=$7;
      HEAP32[(($93)>>2)]=((STRING_TABLE.__str11144)|0);
      __label__ = 29; break;
    case 19: 
      var $95=$2;
      var $96=$3;
      var $97=$4;
      var $98=HEAP32[(($97)>>2)];
      var $99=$5;
      var $100=_looks_extended($95, $96, $98, $99);
      var $101=(($100)|0)!=0;
      if ($101) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $103=$6;
      HEAP32[(($103)>>2)]=((STRING_TABLE.__str12145)|0);
      var $104=$7;
      HEAP32[(($104)>>2)]=((STRING_TABLE.__str13146)|0);
      __label__ = 28; break;
    case 21: 
      var $106=$2;
      var $107=$3;
      var $108=$nbuf;
      _from_ebcdic($106, $107, $108);
      var $109=$nbuf;
      var $110=$3;
      var $111=$4;
      var $112=HEAP32[(($111)>>2)];
      var $113=$5;
      var $114=_looks_ascii($109, $110, $112, $113);
      var $115=(($114)|0)!=0;
      if ($115) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $117=$6;
      HEAP32[(($117)>>2)]=((STRING_TABLE.__str14147)|0);
      var $118=$7;
      HEAP32[(($118)>>2)]=((STRING_TABLE.__str15148)|0);
      __label__ = 27; break;
    case 23: 
      var $120=$nbuf;
      var $121=$3;
      var $122=$4;
      var $123=HEAP32[(($122)>>2)];
      var $124=$5;
      var $125=_looks_latin1($120, $121, $123, $124);
      var $126=(($125)|0)!=0;
      if ($126) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $128=$6;
      HEAP32[(($128)>>2)]=((STRING_TABLE.__str16149)|0);
      var $129=$7;
      HEAP32[(($129)>>2)]=((STRING_TABLE.__str15148)|0);
      __label__ = 26; break;
    case 25: 
      $rv=0;
      var $131=$8;
      HEAP32[(($131)>>2)]=((STRING_TABLE.__str17150)|0);
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $141=$nbuf;
      _free($141);
      var $142=$rv;
      ;
      return $142;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_encoding["X"]=1;

function _looks_utf8_with_BOM($buf, $nbytes, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$3;
      var $7=(($6)>>>0) > 3;
      if ($7) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAPU8[($10)];
      var $12=(($11)&255);
      var $13=(($12)|0)==239;
      if ($13) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $15=$2;
      var $16=(($15+1)|0);
      var $17=HEAPU8[($16)];
      var $18=(($17)&255);
      var $19=(($18)|0)==187;
      if ($19) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $21=$2;
      var $22=(($21+2)|0);
      var $23=HEAPU8[($22)];
      var $24=(($23)&255);
      var $25=(($24)|0)==191;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $27=$2;
      var $28=(($27+3)|0);
      var $29=$3;
      var $30=((($29)-(3))|0);
      var $31=$4;
      var $32=$5;
      var $33=_file_looks_utf8($28, $30, $31, $32);
      $1=$33;
      __label__ = 8; break;
    case 7: 
      $1=-1;
      __label__ = 8; break;
    case 8: 
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_looks_utf8($buf, $nbytes, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $n;
      var $c;
      var $gotone;
      var $ctrl;
      var $following;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      $gotone=0;
      $ctrl=0;
      var $6=$4;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$5;
      HEAP32[(($9)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $12=$i;
      var $13=$3;
      var $14=(($12)>>>0) < (($13)>>>0);
      if ($14) { __label__ = 6; break; } else { __label__ = 44; break; }
    case 6: 
      var $16=$i;
      var $17=$2;
      var $18=(($17+$16)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=$20 & 128;
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $24=$i;
      var $25=$2;
      var $26=(($25+$24)|0);
      var $27=HEAPU8[($26)];
      var $28=(($27)&255);
      var $29=((STRING_TABLE._text_chars+$28)|0);
      var $30=HEAP8[($29)];
      var $31=(($30 << 24) >> 24);
      var $32=(($31)|0)!=1;
      if ($32) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $ctrl=1;
      __label__ = 9; break;
    case 9: 
      var $35=$4;
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $38=$i;
      var $39=$2;
      var $40=(($39+$38)|0);
      var $41=HEAPU8[($40)];
      var $42=(($41)&255);
      var $43=$5;
      var $44=HEAPU32[(($43)>>2)];
      var $45=((($44)+(1))|0);
      HEAP32[(($43)>>2)]=$45;
      var $46=$4;
      var $47=(($46+($44<<2))|0);
      HEAP32[(($47)>>2)]=$42;
      __label__ = 11; break;
    case 11: 
      __label__ = 42; break;
    case 12: 
      var $50=$i;
      var $51=$2;
      var $52=(($51+$50)|0);
      var $53=HEAPU8[($52)];
      var $54=(($53)&255);
      var $55=$54 & 64;
      var $56=(($55)|0)==0;
      if ($56) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=-1;
      __label__ = 49; break;
    case 14: 
      var $59=$i;
      var $60=$2;
      var $61=(($60+$59)|0);
      var $62=HEAPU8[($61)];
      var $63=(($62)&255);
      var $64=$63 & 32;
      var $65=(($64)|0)==0;
      if ($65) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $67=$i;
      var $68=$2;
      var $69=(($68+$67)|0);
      var $70=HEAPU8[($69)];
      var $71=(($70)&255);
      var $72=$71 & 31;
      $c=$72;
      $following=1;
      __label__ = 29; break;
    case 16: 
      var $74=$i;
      var $75=$2;
      var $76=(($75+$74)|0);
      var $77=HEAPU8[($76)];
      var $78=(($77)&255);
      var $79=$78 & 16;
      var $80=(($79)|0)==0;
      if ($80) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $82=$i;
      var $83=$2;
      var $84=(($83+$82)|0);
      var $85=HEAPU8[($84)];
      var $86=(($85)&255);
      var $87=$86 & 15;
      $c=$87;
      $following=2;
      __label__ = 28; break;
    case 18: 
      var $89=$i;
      var $90=$2;
      var $91=(($90+$89)|0);
      var $92=HEAPU8[($91)];
      var $93=(($92)&255);
      var $94=$93 & 8;
      var $95=(($94)|0)==0;
      if ($95) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $97=$i;
      var $98=$2;
      var $99=(($98+$97)|0);
      var $100=HEAPU8[($99)];
      var $101=(($100)&255);
      var $102=$101 & 7;
      $c=$102;
      $following=3;
      __label__ = 27; break;
    case 20: 
      var $104=$i;
      var $105=$2;
      var $106=(($105+$104)|0);
      var $107=HEAPU8[($106)];
      var $108=(($107)&255);
      var $109=$108 & 4;
      var $110=(($109)|0)==0;
      if ($110) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $112=$i;
      var $113=$2;
      var $114=(($113+$112)|0);
      var $115=HEAPU8[($114)];
      var $116=(($115)&255);
      var $117=$116 & 3;
      $c=$117;
      $following=4;
      __label__ = 26; break;
    case 22: 
      var $119=$i;
      var $120=$2;
      var $121=(($120+$119)|0);
      var $122=HEAPU8[($121)];
      var $123=(($122)&255);
      var $124=$123 & 2;
      var $125=(($124)|0)==0;
      if ($125) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $127=$i;
      var $128=$2;
      var $129=(($128+$127)|0);
      var $130=HEAPU8[($129)];
      var $131=(($130)&255);
      var $132=$131 & 1;
      $c=$132;
      $following=5;
      __label__ = 25; break;
    case 24: 
      $1=-1;
      __label__ = 49; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      $n=0;
      __label__ = 30; break;
    case 30: 
      var $140=$n;
      var $141=$following;
      var $142=(($140)|0) < (($141)|0);
      if ($142) { __label__ = 31; break; } else { __label__ = 38; break; }
    case 31: 
      var $144=$i;
      var $145=((($144)+(1))|0);
      $i=$145;
      var $146=$i;
      var $147=$3;
      var $148=(($146)>>>0) >= (($147)>>>0);
      if ($148) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      __label__ = 45; break;
    case 33: 
      var $151=$i;
      var $152=$2;
      var $153=(($152+$151)|0);
      var $154=HEAPU8[($153)];
      var $155=(($154)&255);
      var $156=$155 & 128;
      var $157=(($156)|0)==0;
      if ($157) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: 
      var $159=$i;
      var $160=$2;
      var $161=(($160+$159)|0);
      var $162=HEAPU8[($161)];
      var $163=(($162)&255);
      var $164=$163 & 64;
      var $165=(($164)|0)!=0;
      if ($165) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $1=-1;
      __label__ = 49; break;
    case 36: 
      var $168=$c;
      var $169=$168 << 6;
      var $170=$i;
      var $171=$2;
      var $172=(($171+$170)|0);
      var $173=HEAPU8[($172)];
      var $174=(($173)&255);
      var $175=$174 & 63;
      var $176=((($169)+($175))|0);
      $c=$176;
      __label__ = 37; break;
    case 37: 
      var $178=$n;
      var $179=((($178)+(1))|0);
      $n=$179;
      __label__ = 30; break;
    case 38: 
      var $181=$4;
      var $182=(($181)|0)!=0;
      if ($182) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $184=$c;
      var $185=$5;
      var $186=HEAP32[(($185)>>2)];
      var $187=((($186)+(1))|0);
      HEAP32[(($185)>>2)]=$187;
      var $188=$4;
      var $189=(($188+($186<<2))|0);
      HEAP32[(($189)>>2)]=$184;
      __label__ = 40; break;
    case 40: 
      $gotone=1;
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $194=$i;
      var $195=((($194)+(1))|0);
      $i=$195;
      __label__ = 5; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $198=$ctrl;
      var $199=(($198)|0)!=0;
      if ($199) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $206 = 0;__label__ = 48; break;
    case 47: 
      var $202=$gotone;
      var $203=(($202)|0)!=0;
      var $204=$203 ? 2 : 1;
      var $206 = $204;__label__ = 48; break;
    case 48: 
      var $206;
      $1=$206;
      __label__ = 49; break;
    case 49: 
      var $208=$1;
      ;
      return $208;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_looks_utf8["X"]=1;

function _looks_ucs16($buf, $nbytes, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $bigend;
      var $i;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$3;
      var $7=(($6)>>>0) < 2;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 25; break;
    case 4: 
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=(($13)|0)==255;
      if ($14) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $16=$2;
      var $17=(($16+1)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=(($19)|0)==254;
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $bigend=0;
      __label__ = 12; break;
    case 7: 
      var $23=$2;
      var $24=(($23)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=(($26)|0)==254;
      if ($27) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $29=$2;
      var $30=(($29+1)|0);
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=(($32)|0)==255;
      if ($33) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $bigend=1;
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 25; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $38=$5;
      HEAP32[(($38)>>2)]=0;
      $i=2;
      __label__ = 13; break;
    case 13: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      var $42=$3;
      var $43=(($41)>>>0) < (($42)>>>0);
      if ($43) { __label__ = 14; break; } else { __label__ = 24; break; }
    case 14: 
      var $45=$bigend;
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      var $50=$2;
      var $51=(($50+$49)|0);
      var $52=HEAPU8[($51)];
      var $53=(($52)&255);
      var $54=$i;
      var $55=$2;
      var $56=(($55+$54)|0);
      var $57=HEAPU8[($56)];
      var $58=(($57)&255);
      var $59=((($58<<8))|0);
      var $60=((($53)+($59))|0);
      var $61=$5;
      var $62=HEAPU32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=$4;
      var $65=(($64+($62<<2))|0);
      HEAP32[(($65)>>2)]=$60;
      __label__ = 17; break;
    case 16: 
      var $67=$i;
      var $68=$2;
      var $69=(($68+$67)|0);
      var $70=HEAPU8[($69)];
      var $71=(($70)&255);
      var $72=$i;
      var $73=((($72)+(1))|0);
      var $74=$2;
      var $75=(($74+$73)|0);
      var $76=HEAPU8[($75)];
      var $77=(($76)&255);
      var $78=((($77<<8))|0);
      var $79=((($71)+($78))|0);
      var $80=$5;
      var $81=HEAPU32[(($80)>>2)];
      var $82=((($81)+(1))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=$4;
      var $84=(($83+($81<<2))|0);
      HEAP32[(($84)>>2)]=$79;
      __label__ = 17; break;
    case 17: 
      var $86=$5;
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)-(1))|0);
      var $89=$4;
      var $90=(($89+($88<<2))|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|0)==65534;
      if ($92) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $1=0;
      __label__ = 25; break;
    case 19: 
      var $95=$5;
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)-(1))|0);
      var $98=$4;
      var $99=(($98+($97<<2))|0);
      var $100=HEAPU32[(($99)>>2)];
      var $101=(($100)>>>0) < 128;
      if ($101) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $103=$5;
      var $104=HEAP32[(($103)>>2)];
      var $105=((($104)-(1))|0);
      var $106=$4;
      var $107=(($106+($105<<2))|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((STRING_TABLE._text_chars+$108)|0);
      var $110=HEAP8[($109)];
      var $111=(($110 << 24) >> 24);
      var $112=(($111)|0)!=1;
      if ($112) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      $1=0;
      __label__ = 25; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $116=$i;
      var $117=((($116)+(2))|0);
      $i=$117;
      __label__ = 13; break;
    case 24: 
      var $119=$bigend;
      var $120=((($119)+(1))|0);
      $1=$120;
      __label__ = 25; break;
    case 25: 
      var $122=$1;
      ;
      return $122;
    default: assert(0, "bad label: " + __label__);
  }
}
_looks_ucs16["X"]=1;

function _looks_latin1($buf, $nbytes, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $t;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$5;
      HEAP32[(($6)>>2)]=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $8=$i;
      var $9=$3;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+$12)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      var $17=((STRING_TABLE._text_chars+$16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      $t=$19;
      var $20=$t;
      var $21=(($20)|0)!=1;
      if ($21) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $23=$t;
      var $24=(($23)|0)!=2;
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 10; break;
    case 7: 
      var $27=$i;
      var $28=$2;
      var $29=(($28+$27)|0);
      var $30=HEAPU8[($29)];
      var $31=(($30)&255);
      var $32=$5;
      var $33=HEAPU32[(($32)>>2)];
      var $34=((($33)+(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$4;
      var $36=(($35+($33<<2))|0);
      HEAP32[(($36)>>2)]=$31;
      __label__ = 8; break;
    case 8: 
      var $38=$i;
      var $39=((($38)+(1))|0);
      $i=$39;
      __label__ = 3; break;
    case 9: 
      $1=1;
      __label__ = 10; break;
    case 10: 
      var $42=$1;
      ;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_looks_latin1["X"]=1;

function _looks_extended($buf, $nbytes, $ubuf, $ulen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $t;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$5;
      HEAP32[(($6)>>2)]=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $8=$i;
      var $9=$3;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+$12)|0);
      var $15=HEAPU8[($14)];
      var $16=(($15)&255);
      var $17=((STRING_TABLE._text_chars+$16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      $t=$19;
      var $20=$t;
      var $21=(($20)|0)!=1;
      if ($21) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $23=$t;
      var $24=(($23)|0)!=2;
      if ($24) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $26=$t;
      var $27=(($26)|0)!=3;
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 11; break;
    case 8: 
      var $30=$i;
      var $31=$2;
      var $32=(($31+$30)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=$5;
      var $36=HEAPU32[(($35)>>2)];
      var $37=((($36)+(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=$4;
      var $39=(($38+($36<<2))|0);
      HEAP32[(($39)>>2)]=$34;
      __label__ = 9; break;
    case 9: 
      var $41=$i;
      var $42=((($41)+(1))|0);
      $i=$42;
      __label__ = 3; break;
    case 10: 
      $1=1;
      __label__ = 11; break;
    case 11: 
      var $45=$1;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_looks_extended["X"]=1;

function _from_ebcdic($buf, $nbytes, $out) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$buf;
      $2=$nbytes;
      $3=$out;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=$2;
      var $7=(($5)>>>0) < (($6)>>>0);
      if ($7) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $9=$i;
      var $10=$1;
      var $11=(($10+$9)|0);
      var $12=HEAPU8[($11)];
      var $13=(($12)&255);
      var $14=((STRING_TABLE._ebcdic_to_ascii+$13)|0);
      var $15=HEAP8[($14)];
      var $16=$i;
      var $17=$3;
      var $18=(($17+$16)|0);
      HEAP8[($18)]=$15;
      __label__ = 5; break;
    case 5: 
      var $20=$i;
      var $21=((($20)+(1))|0);
      $i=$21;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_mdump($m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$m;
      var $2=HEAP32[((_stderr)>>2)];
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAPU16[(($7)>>1)];
      var $9=(($8)&65535);
      var $10=$9 & 7;
      var $11=((($10)+(1))|0);
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_fprintf($2, ((STRING_TABLE.__str159)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$11,HEAP32[(((tempInt)+(8))>>2)]=((STRING_TABLE.__str1160)|0),HEAP32[(((tempInt)+(12))>>2)]=$14,tempInt));
      var $16=$1;
      var $17=(($16+2)|0);
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=$19 & 1;
      var $21=(($20)|0)!=0;
      if ($21) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $23=HEAP32[((_stderr)>>2)];
      var $24=$1;
      var $25=(($24+7)|0);
      var $26=HEAPU8[($25)];
      var $27=(($26)&255);
      var $28=HEAPU32[((_file_nnames)>>2)];
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $31=$1;
      var $32=(($31+7)|0);
      var $33=HEAPU8[($32)];
      var $34=(($33)&255);
      var $35=((_file_names+($34<<2))|0);
      var $36=((((HEAPU8[($35)])|(HEAPU8[(($35)+(1))]<<8)|(HEAPU8[(($35)+(2))]<<16)|(HEAPU8[(($35)+(3))]<<24))|0));
      var $39 = $36;__label__ = 6; break;
    case 5: 
      var $39 = ((STRING_TABLE.__str3162)|0);__label__ = 6; break;
    case 6: 
      var $39;
      var $40=_fprintf($23, ((STRING_TABLE.__str2161)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$39,tempInt));
      var $41=$1;
      var $42=(($41+8)|0);
      var $43=HEAPU8[($42)];
      var $44=(($43)&255);
      var $45=$44 & 64;
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $48=HEAP32[((_stderr)>>2)];
      var $49=_fputc(126, $48);
      __label__ = 8; break;
    case 8: 
      var $51=HEAP32[((_stderr)>>2)];
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAPU8[($53)];
      var $55=(($54)&255);
      var $56=$55 & 7;
      var $57=(($56)>>>0) < 9;
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $59=$1;
      var $60=(($59+8)|0);
      var $61=HEAPU8[($60)];
      var $62=(($61)&255);
      var $63=$62 & 7;
      var $64=((STRING_TABLE._file_mdump_optyp+$63)|0);
      var $65=HEAP8[($64)];
      var $66=(($65 << 24) >> 24);
      var $69 = $66;__label__ = 11; break;
    case 10: 
      var $69 = 63;__label__ = 11; break;
    case 11: 
      var $69;
      var $70=$1;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=_fprintf($51, ((STRING_TABLE.__str4163)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$69,HEAP32[(((tempInt)+(4))>>2)]=$72,tempInt));
      __label__ = 12; break;
    case 12: 
      var $75=HEAP32[((_stderr)>>2)];
      var $76=$1;
      var $77=(($76+2)|0);
      var $78=HEAPU8[($77)];
      var $79=(($78)&255);
      var $80=$79 & 8;
      var $81=(($80)|0)!=0;
      var $82=$81 ? (((STRING_TABLE.__str6165)|0)) : (((__str7166)|0));
      var $83=$1;
      var $84=(($83+6)|0);
      var $85=HEAPU8[($84)];
      var $86=(($85)&255);
      var $87=HEAPU32[((_file_nnames)>>2)];
      var $88=(($86)>>>0) < (($87)>>>0);
      if ($88) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $90=$1;
      var $91=(($90+6)|0);
      var $92=HEAPU8[($91)];
      var $93=(($92)&255);
      var $94=((_file_names+($93<<2))|0);
      var $95=((((HEAPU8[($94)])|(HEAPU8[(($94)+(1))]<<8)|(HEAPU8[(($94)+(2))]<<16)|(HEAPU8[(($94)+(3))]<<24))|0));
      var $98 = $95;__label__ = 15; break;
    case 14: 
      var $98 = ((STRING_TABLE.__str3162)|0);__label__ = 15; break;
    case 15: 
      var $98;
      var $99=_fprintf($75, ((STRING_TABLE.__str5164)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$82,HEAP32[(((tempInt)+(4))>>2)]=$98,tempInt));
      var $100=$1;
      var $101=(($100+9)|0);
      var $102=HEAPU8[($101)];
      var $103=(($102)&255);
      var $104=$103 & 64;
      var $105=(($104)|0)!=0;
      if ($105) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $107=HEAP32[((_stderr)>>2)];
      var $108=_fputc(126, $107);
      __label__ = 17; break;
    case 17: 
      var $110=$1;
      var $111=(($110+6)|0);
      var $112=HEAPU8[($111)];
      var $113=(($112)&255);
      var $114=(($113)|0)==5;
      if ($114) { __label__ = 24; break; } else { __label__ = 18; break; }
    case 18: 
      var $116=$1;
      var $117=(($116+6)|0);
      var $118=HEAPU8[($117)];
      var $119=(($118)&255);
      var $120=(($119)|0)==13;
      if ($120) { __label__ = 24; break; } else { __label__ = 19; break; }
    case 19: 
      var $122=$1;
      var $123=(($122+6)|0);
      var $124=HEAPU8[($123)];
      var $125=(($124)&255);
      var $126=(($125)|0)==18;
      if ($126) { __label__ = 24; break; } else { __label__ = 20; break; }
    case 20: 
      var $128=$1;
      var $129=(($128+6)|0);
      var $130=HEAPU8[($129)];
      var $131=(($130)&255);
      var $132=(($131)|0)==19;
      if ($132) { __label__ = 24; break; } else { __label__ = 21; break; }
    case 21: 
      var $134=$1;
      var $135=(($134+6)|0);
      var $136=HEAPU8[($135)];
      var $137=(($136)&255);
      var $138=(($137)|0)==17;
      if ($138) { __label__ = 24; break; } else { __label__ = 22; break; }
    case 22: 
      var $140=$1;
      var $141=(($140+6)|0);
      var $142=HEAPU8[($141)];
      var $143=(($142)&255);
      var $144=(($143)|0)==20;
      if ($144) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      var $146=$1;
      var $147=(($146+6)|0);
      var $148=HEAPU8[($147)];
      var $149=(($148)&255);
      var $150=(($149)|0)==3;
      if ($150) { __label__ = 24; break; } else { __label__ = 55; break; }
    case 24: 
      var $152=$1;
      var $153=(($152+24)|0);
      var $154=$153;
      var $155=(($154+4)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156)|0)!=0;
      if ($157) { __label__ = 25; break; } else { __label__ = 52; break; }
    case 25: 
      var $159=HEAP32[((_stderr)>>2)];
      var $160=_fputc(47, $159);
      var $161=$1;
      var $162=(($161+24)|0);
      var $163=$162;
      var $164=(($163+4)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=$165 & 1;
      var $167=(($166)|0)!=0;
      if ($167) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $169=HEAP32[((_stderr)>>2)];
      var $170=_fputc(87, $169);
      __label__ = 27; break;
    case 27: 
      var $172=$1;
      var $173=(($172+24)|0);
      var $174=$173;
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$176 & 2;
      var $178=(($177)|0)!=0;
      if ($178) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $180=HEAP32[((_stderr)>>2)];
      var $181=_fputc(119, $180);
      __label__ = 29; break;
    case 29: 
      var $183=$1;
      var $184=(($183+24)|0);
      var $185=$184;
      var $186=(($185+4)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=$187 & 4;
      var $189=(($188)|0)!=0;
      if ($189) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $191=HEAP32[((_stderr)>>2)];
      var $192=_fputc(99, $191);
      __label__ = 31; break;
    case 31: 
      var $194=$1;
      var $195=(($194+24)|0);
      var $196=$195;
      var $197=(($196+4)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$198 & 8;
      var $200=(($199)|0)!=0;
      if ($200) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $202=HEAP32[((_stderr)>>2)];
      var $203=_fputc(67, $202);
      __label__ = 33; break;
    case 33: 
      var $205=$1;
      var $206=(($205+24)|0);
      var $207=$206;
      var $208=(($207+4)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$209 & 16;
      var $211=(($210)|0)!=0;
      if ($211) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $213=HEAP32[((_stderr)>>2)];
      var $214=_fputc(115, $213);
      __label__ = 35; break;
    case 35: 
      var $216=$1;
      var $217=(($216+24)|0);
      var $218=$217;
      var $219=(($218+4)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$220 & 32;
      var $222=(($221)|0)!=0;
      if ($222) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $224=HEAP32[((_stderr)>>2)];
      var $225=_fputc(116, $224);
      __label__ = 37; break;
    case 37: 
      var $227=$1;
      var $228=(($227+24)|0);
      var $229=$228;
      var $230=(($229+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231 & 64;
      var $233=(($232)|0)!=0;
      if ($233) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $235=HEAP32[((_stderr)>>2)];
      var $236=_fputc(98, $235);
      __label__ = 39; break;
    case 39: 
      var $238=$1;
      var $239=(($238+24)|0);
      var $240=$239;
      var $241=(($240+4)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242 & 128;
      var $244=(($243)|0)!=0;
      if ($244) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $246=HEAP32[((_stderr)>>2)];
      var $247=_fputc(66, $246);
      __label__ = 41; break;
    case 41: 
      var $249=$1;
      var $250=(($249+24)|0);
      var $251=$250;
      var $252=(($251+4)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$253 & 256;
      var $255=(($254)|0)!=0;
      if ($255) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $257=HEAP32[((_stderr)>>2)];
      var $258=_fputc(72, $257);
      __label__ = 43; break;
    case 43: 
      var $260=$1;
      var $261=(($260+24)|0);
      var $262=$261;
      var $263=(($262+4)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=$264 & 512;
      var $266=(($265)|0)!=0;
      if ($266) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $268=HEAP32[((_stderr)>>2)];
      var $269=_fputc(104, $268);
      __label__ = 45; break;
    case 45: 
      var $271=$1;
      var $272=(($271+24)|0);
      var $273=$272;
      var $274=(($273+4)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=$275 & 1024;
      var $277=(($276)|0)!=0;
      if ($277) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $279=HEAP32[((_stderr)>>2)];
      var $280=_fputc(76, $279);
      __label__ = 47; break;
    case 47: 
      var $282=$1;
      var $283=(($282+24)|0);
      var $284=$283;
      var $285=(($284+4)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=$286 & 2048;
      var $288=(($287)|0)!=0;
      if ($288) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $290=HEAP32[((_stderr)>>2)];
      var $291=_fputc(108, $290);
      __label__ = 49; break;
    case 49: 
      var $293=$1;
      var $294=(($293+24)|0);
      var $295=$294;
      var $296=(($295+4)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$297 & 4096;
      var $299=(($298)|0)!=0;
      if ($299) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $301=HEAP32[((_stderr)>>2)];
      var $302=_fputc(74, $301);
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $305=$1;
      var $306=(($305+24)|0);
      var $307=$306;
      var $308=(($307)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=(($309)|0)!=0;
      if ($310) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $312=HEAP32[((_stderr)>>2)];
      var $313=$1;
      var $314=(($313+24)|0);
      var $315=$314;
      var $316=(($315)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=_fprintf($312, ((STRING_TABLE.__str8167)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$317,tempInt));
      __label__ = 54; break;
    case 54: 
      __label__ = 61; break;
    case 55: 
      var $321=$1;
      var $322=(($321+9)|0);
      var $323=HEAPU8[($322)];
      var $324=(($323)&255);
      var $325=$324 & 7;
      var $326=(($325)>>>0) < 9;
      if ($326) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $328=$1;
      var $329=(($328+9)|0);
      var $330=HEAPU8[($329)];
      var $331=(($330)&255);
      var $332=$331 & 7;
      var $333=((STRING_TABLE._file_mdump_optyp+$332)|0);
      var $334=HEAP8[($333)];
      var $335=(($334 << 24) >> 24);
      var $336=HEAP32[((_stderr)>>2)];
      var $337=_fputc($335, $336);
      __label__ = 58; break;
    case 57: 
      var $339=HEAP32[((_stderr)>>2)];
      var $340=_fputc(63, $339);
      __label__ = 58; break;
    case 58: 
      var $342=$1;
      var $343=(($342+24)|0);
      var $344=$343;
      var $st$3$0=(($344)|0);
      var $345$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($344+4)|0);
      var $345$1=HEAP32[(($st$3$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $346=$345$0 != $$emscripten$temp$0$0 || $345$1 != $$emscripten$temp$0$1;
      if ($346) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $348=HEAP32[((_stderr)>>2)];
      var $349=$1;
      var $350=(($349+24)|0);
      var $351=$350;
      var $st$4$0=(($351)|0);
      var $352$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($351+4)|0);
      var $352$1=HEAP32[(($st$4$1)>>2)];
      var $$emscripten$temp$1=((STRING_TABLE.__str9168)|0);
      var $353=_fprintf($348, $$emscripten$temp$1, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$352$0,HEAP32[(((tempInt)+(4))>>2)]=$352$1,tempInt));
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $356=HEAP32[((_stderr)>>2)];
      var $357=$1;
      var $358=(($357+4)|0);
      var $359=HEAPU8[($358)];
      var $360=(($359)&255);
      var $361=_fprintf($356, ((STRING_TABLE.__str10169)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$360,tempInt));
      var $362=$1;
      var $363=(($362+4)|0);
      var $364=HEAPU8[($363)];
      var $365=(($364)&255);
      var $366=(($365)|0)!=120;
      if ($366) { __label__ = 62; break; } else { __label__ = 75; break; }
    case 62: 
      var $368=$1;
      var $369=(($368+6)|0);
      var $370=HEAPU8[($369)];
      var $371=(($370)&255);
      if ((($371)|0) == 1 || (($371)|0) == 2 || (($371)|0) == 4 || (($371)|0) == 10 || (($371)|0) == 11 || (($371)|0) == 23 || (($371)|0) == 7 || (($371)|0) == 8) {
        __label__ = 63; break;
      }
      else if ((($371)|0) == 26 || (($371)|0) == 25 || (($371)|0) == 24) {
        __label__ = 64; break;
      }
      else if ((($371)|0) == 13 || (($371)|0) == 5 || (($371)|0) == 17 || (($371)|0) == 18 || (($371)|0) == 19 || (($371)|0) == 20) {
        __label__ = 65; break;
      }
      else if ((($371)|0) == 6 || (($371)|0) == 12 || (($371)|0) == 9 || (($371)|0) == 21) {
        __label__ = 66; break;
      }
      else if ((($371)|0) == 14 || (($371)|0) == 16 || (($371)|0) == 15 || (($371)|0) == 22) {
        __label__ = 67; break;
      }
      else if ((($371)|0) == 27 || (($371)|0) == 28 || (($371)|0) == 29) {
        __label__ = 68; break;
      }
      else if ((($371)|0) == 30 || (($371)|0) == 31 || (($371)|0) == 32) {
        __label__ = 69; break;
      }
      else if ((($371)|0) == 33 || (($371)|0) == 34 || (($371)|0) == 35) {
        __label__ = 70; break;
      }
      else if ((($371)|0) == 36 || (($371)|0) == 37 || (($371)|0) == 38) {
        __label__ = 71; break;
      }
      else if ((($371)|0) == 3) {
        __label__ = 72; break;
      }
      else {
      __label__ = 73; break;
      }
      
    case 63: 
      var $373=HEAP32[((_stderr)>>2)];
      var $374=$1;
      var $375=(($374+32)|0);
      var $376=$375;
      var $377=HEAP32[(($376)>>2)];
      var $378=_fprintf($373, ((STRING_TABLE.__str11170)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$377,tempInt));
      __label__ = 74; break;
    case 64: 
      var $380=HEAP32[((_stderr)>>2)];
      var $381=$1;
      var $382=(($381+32)|0);
      var $383=$382;
      var $st$4$0=(($383)|0);
      var $384$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($383+4)|0);
      var $384$1=HEAP32[(($st$4$1)>>2)];
      var $$emscripten$temp$2=((STRING_TABLE.__str12171)|0);
      var $385=_fprintf($380, $$emscripten$temp$2, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$384$0,HEAP32[(((tempInt)+(4))>>2)]=$384$1,tempInt));
      __label__ = 74; break;
    case 65: 
      var $387=HEAP32[((_stderr)>>2)];
      var $388=$1;
      var $389=(($388+32)|0);
      var $390=$389;
      var $391=(($390)|0);
      var $392=$1;
      var $393=(($392+5)|0);
      var $394=HEAPU8[($393)];
      var $395=(($394)&255);
      _file_showstr($387, $391, $395);
      __label__ = 74; break;
    case 66: 
      var $397=HEAP32[((_stderr)>>2)];
      var $398=$1;
      var $399=(($398+32)|0);
      var $400=$399;
      var $401=HEAP32[(($400)>>2)];
      var $402=_file_fmttime($401, 1);
      var $403=_fprintf($397, ((STRING_TABLE.__str13172)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$402,tempInt));
      __label__ = 74; break;
    case 67: 
      var $405=HEAP32[((_stderr)>>2)];
      var $406=$1;
      var $407=(($406+32)|0);
      var $408=$407;
      var $409=HEAP32[(($408)>>2)];
      var $410=_file_fmttime($409, 0);
      var $411=_fprintf($405, ((STRING_TABLE.__str13172)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$410,tempInt));
      __label__ = 74; break;
    case 68: 
      var $413=HEAP32[((_stderr)>>2)];
      var $414=$1;
      var $415=(($414+32)|0);
      var $416=$415;
      var $st$4$0=(($416)|0);
      var $417$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($416+4)|0);
      var $417$1=HEAP32[(($st$4$1)>>2)];
      var $418$0=$417$0;
      var $418=$418$0;
      var $419=_file_fmttime($418, 1);
      var $420=_fprintf($413, ((STRING_TABLE.__str13172)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$419,tempInt));
      __label__ = 74; break;
    case 69: 
      var $422=HEAP32[((_stderr)>>2)];
      var $423=$1;
      var $424=(($423+32)|0);
      var $425=$424;
      var $st$4$0=(($425)|0);
      var $426$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($425+4)|0);
      var $426$1=HEAP32[(($st$4$1)>>2)];
      var $427$0=$426$0;
      var $427=$427$0;
      var $428=_file_fmttime($427, 0);
      var $429=_fprintf($422, ((STRING_TABLE.__str13172)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$428,tempInt));
      __label__ = 74; break;
    case 70: 
      var $431=HEAP32[((_stderr)>>2)];
      var $432=$1;
      var $433=(($432+32)|0);
      var $434=$433;
      var $435=HEAPF32[(($434)>>2)];
      var $436=$435;
      var $437=_fprintf($431, ((STRING_TABLE.__str14173)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$436,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 74; break;
    case 71: 
      var $439=HEAP32[((_stderr)>>2)];
      var $440=$1;
      var $441=(($440+32)|0);
      var $442=$441;
      var $443=(tempDoubleI32[0]=HEAP32[(($442)>>2)],tempDoubleI32[1]=HEAP32[((($442)+(4))>>2)],tempDoubleF64[0]);
      var $444=_fprintf($439, ((STRING_TABLE.__str14173)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$443,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 74; break;
    case 72: 
      __label__ = 74; break;
    case 73: 
      var $447=HEAP32[((_stderr)>>2)];
      var $448=_fputs(((STRING_TABLE.__str3162)|0), $447);
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      var $451=HEAP32[((_stderr)>>2)];
      var $452=$1;
      var $453=(($452+96)|0);
      var $454=(($453)|0);
      var $455=_fprintf($451, ((STRING_TABLE.__str15174)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$454,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_mdump["X"]=1;

function _file_fmttime($v, $local) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pp;
      var $t=__stackBase__;
      var $tm;
      $2=$v;
      $3=$local;
      var $4=$2;
      HEAP32[(($t)>>2)]=$4;
      var $5=$3;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=_ctime($t);
      $pp=$8;
      __label__ = 9; break;
    case 4: 
      var $10=HEAP32[((_file_fmttime_daylight)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $13=HEAP32[(($t)>>2)];
      var $14=((($13)+(3600))|0);
      HEAP32[(($t)>>2)]=$14;
      __label__ = 6; break;
    case 6: 
      var $16=_gmtime($t);
      $tm=$16;
      var $17=$tm;
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 12; break;
    case 8: 
      var $21=$tm;
      var $22=_asctime($21);
      $pp=$22;
      __label__ = 9; break;
    case 9: 
      var $24=$pp;
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $28=$pp;
      var $29=_strcspn($28, ((STRING_TABLE.__str18177)|0));
      var $30=$pp;
      var $31=(($30+$29)|0);
      HEAP8[($31)]=0;
      var $32=$pp;
      $1=$32;
      __label__ = 13; break;
    case 12: 
      $1=((STRING_TABLE.__str19178)|0);
      __label__ = 13; break;
    case 13: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_magwarn($ms, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $va=__stackBase__;
      $1=$ms;
      $2=$f;
      var $3=HEAP32[((_stdout)>>2)];
      var $4=_fflush($3);
      var $5=$1;
      var $6=(($5+36)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=HEAP32[((_stderr)>>2)];
      var $11=$1;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$1;
      var $15=(($14+40)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_fprintf($10, ((STRING_TABLE.__str16175)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,HEAP32[(((tempInt)+(4))>>2)]=$16,tempInt));
      __label__ = 4; break;
    case 4: 
      var $19=HEAP32[((_stderr)>>2)];
      var $20=_fprintf($19, ((STRING_TABLE.__str17176)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=$va;
      HEAP32[(($21)>>2)]=arguments[_file_magwarn.length];
      var $22=HEAP32[((_stderr)>>2)];
      var $23=$2;
      var $24=HEAP32[(($va)>>2)];
      var $25=_vfprintf($22, $23, $24);
      var $26=$va;
      ;
      var $27=HEAP32[((_stderr)>>2)];
      var $28=_fputc(10, $27);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_vprintf($ms, $fmt, $ap) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $len;
      var $buf=__stackBase__;
      var $newstr=(__stackBase__)+(4);
      $2=$ms;
      $3=$fmt;
      $4=$ap;
      var $5=$3;
      var $6=$4;
      var $7=_vasprintf($buf, $5, $6);
      $len=$7;
      var $8=$len;
      var $9=(($8)|0) < 0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 9; break;
    case 4: 
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $18=$2;
      var $19=(($18+12)|0);
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[(($buf)>>2)];
      var $23=_asprintf($newstr, ((STRING_TABLE.__str187)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$21,HEAP32[(((tempInt)+(4))>>2)]=$22,tempInt));
      $len=$23;
      var $24=HEAP32[(($buf)>>2)];
      _free($24);
      var $25=$len;
      var $26=(($25)|0) < 0;
      if ($26) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 9; break;
    case 7: 
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      _free($32);
      var $33=HEAP32[(($newstr)>>2)];
      HEAP32[(($buf)>>2)]=$33;
      __label__ = 8; break;
    case 8: 
      var $35=HEAP32[(($buf)>>2)];
      var $36=$2;
      var $37=(($36+12)|0);
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$35;
      $1=0;
      __label__ = 10; break;
    case 9: 
      var $40=$2;
      var $41=___errno();
      var $42=HEAP32[(($41)>>2)];
      _file_error($40, $42, ((STRING_TABLE.__str1188)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      __label__ = 10; break;
    case 10: 
      var $44=$1;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_vprintf["X"]=1;

function _file_error($ms, $error, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $va=__stackBase__;
  $1=$ms;
  $2=$error;
  $3=$f;
  var $4=$va;
  HEAP32[(($4)>>2)]=arguments[_file_error.length];
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=HEAP32[(($va)>>2)];
  _file_error_core($5, $6, $7, $8, 0);
  var $9=$va;
  ;
  STACKTOP = __stackBase__;
  return;
}


function _file_printf($ms, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $rv;
  var $ap=__stackBase__;
  $1=$ms;
  $2=$fmt;
  var $3=$ap;
  HEAP32[(($3)>>2)]=arguments[_file_printf.length];
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($ap)>>2)];
  var $7=_file_vprintf($4, $5, $6);
  $rv=$7;
  var $8=$ap;
  ;
  var $9=$rv;
  STACKTOP = __stackBase__;
  return $9;
}


function _file_error_core($ms, $error, $f, $va, $lineno) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$ms;
      $2=$error;
      $3=$f;
      $4=$va;
      $5=$lineno;
      var $6=$1;
      var $7=(($6+32)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 1;
      var $10=(($9)|0)!=0;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 9; break;
    case 4: 
      var $13=$5;
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$1;
      var $17=(($16+12)|0);
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      _free($19);
      var $20=$1;
      var $21=(($20+12)|0);
      var $22=(($21)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$1;
      var $24=$5;
      var $25=_file_printf($23, ((STRING_TABLE.__str21208)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,tempInt));
      __label__ = 6; break;
    case 6: 
      var $27=$1;
      var $28=$3;
      var $29=$4;
      var $30=_file_vprintf($27, $28, $29);
      var $31=$2;
      var $32=(($31)|0) > 0;
      if ($32) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $34=$1;
      var $35=$2;
      var $36=_strerror($35);
      var $37=_file_printf($34, ((STRING_TABLE.__str22209)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$36,tempInt));
      __label__ = 8; break;
    case 8: 
      var $39=$1;
      var $40=(($39+32)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 | 1;
      HEAP32[(($40)>>2)]=$42;
      var $43=$2;
      var $44=$1;
      var $45=(($44+24)|0);
      HEAP32[(($45)>>2)]=$43;
      __label__ = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_error_core["X"]=1;

function _file_magerror($ms, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $va=__stackBase__;
  $1=$ms;
  $2=$f;
  var $3=$va;
  HEAP32[(($3)>>2)]=arguments[_file_magerror.length];
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($va)>>2)];
  var $7=$1;
  var $8=(($7+40)|0);
  var $9=HEAP32[(($8)>>2)];
  _file_error_core($4, 0, $5, $6, $9);
  var $10=$va;
  ;
  STACKTOP = __stackBase__;
  return;
}


function _file_oomem($ms, $len) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  $1=$ms;
  $2=$len;
  var $3=$1;
  var $4=___errno();
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  _file_error($3, $5, ((STRING_TABLE.__str2189)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$6,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _file_badseek($ms) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$ms;
  var $2=$1;
  var $3=___errno();
  var $4=HEAP32[(($3)>>2)];
  _file_error($2, $4, ((STRING_TABLE.__str3190)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _file_badread($ms) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  $1=$ms;
  var $2=$1;
  var $3=___errno();
  var $4=HEAP32[(($3)>>2)];
  _file_error($2, $4, ((STRING_TABLE.__str4191)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _file_buffer($ms, $fd, $inname, $buf, $nb) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $m;
      var $rv;
      var $looks_text;
      var $mime;
      var $ubuf;
      var $u8buf=__stackBase__;
      var $ulen=(__stackBase__)+(4);
      var $code=(__stackBase__)+(8);
      var $code_mime=(__stackBase__)+(12);
      var $type=(__stackBase__)+(16);
      $2=$ms;
      $3=$fd;
      $4=$inname;
      $5=$buf;
      $6=$nb;
      $m=0;
      $rv=0;
      $looks_text=0;
      var $7=$2;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 1040;
      $mime=$10;
      var $11=$5;
      $ubuf=$11;
      HEAP32[(($u8buf)>>2)]=0;
      HEAP32[(($code)>>2)]=0;
      HEAP32[(($code_mime)>>2)]=((STRING_TABLE.__str5192)|0);
      HEAP32[(($type)>>2)]=0;
      var $12=$6;
      var $13=(($12)|0)==0;
      if ($13) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $15=$mime;
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$mime;
      var $19=$18 & 16;
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $22=$2;
      var $23=$mime;
      var $24=(($23)|0)!=0;
      var $25=$24 ? (((STRING_TABLE.__str6193)|0)) : (((STRING_TABLE.__str7194)|0));
      var $26=_file_printf($22, $25, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=(($26)|0)==-1;
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=-1;
      __label__ = 65; break;
    case 7: 
      $1=1;
      __label__ = 65; break;
    case 8: 
      var $31=$6;
      var $32=(($31)|0)==1;
      if ($32) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $34=$mime;
      var $35=(($34)|0)!=0;
      if ($35) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $37=$mime;
      var $38=$37 & 16;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $41=$2;
      var $42=$mime;
      var $43=(($42)|0)!=0;
      var $44=$43 ? (((STRING_TABLE.__str8195)|0)) : (((STRING_TABLE.__str9196)|0));
      var $45=_file_printf($41, $44, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $46=(($45)|0)==-1;
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=-1;
      __label__ = 65; break;
    case 13: 
      $1=1;
      __label__ = 65; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $51=$2;
      var $52=(($51+28)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & 2097152;
      var $55=(($54)|0)==0;
      if ($55) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $57=$2;
      var $58=$ubuf;
      var $59=$6;
      var $60=_file_encoding($57, $58, $59, $u8buf, $ulen, $code, $code_mime, $type);
      $looks_text=$60;
      __label__ = 17; break;
    case 17: 
      var $62=$2;
      var $63=(($62+28)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & 8192;
      var $66=(($65)|0)==0;
      if ($66) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $68=$2;
      var $69=$ubuf;
      var $70=$6;
      var $71=_file_is_tar($68, $69, $70);
      $m=$71;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $74=$2;
      var $75=(($74+28)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & 1;
      var $78=(($77)|0)!=0;
      if ($78) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $80=HEAP32[((_stderr)>>2)];
      var $81=$m;
      var $82=_fprintf($80, ((STRING_TABLE.__str10197)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$81,tempInt));
      __label__ = 21; break;
    case 21: 
      __label__ = 54; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $86=$2;
      var $87=(($86+28)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & 262144;
      var $90=(($89)|0)==0;
      if ($90) { __label__ = 24; break; } else { __label__ = 29; break; }
    case 24: 
      var $92=$2;
      var $93=$3;
      var $94=$ubuf;
      var $95=$6;
      var $96=_file_trycdf($92, $93, $94, $95);
      $m=$96;
      var $97=(($96)|0)!=0;
      if ($97) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $99=$2;
      var $100=(($99+28)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$101 & 1;
      var $103=(($102)|0)!=0;
      if ($103) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $105=HEAP32[((_stderr)>>2)];
      var $106=$m;
      var $107=_fprintf($105, ((STRING_TABLE.__str11198)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$106,tempInt));
      __label__ = 27; break;
    case 27: 
      __label__ = 54; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $111=$2;
      var $112=(($111+28)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113 & 16384;
      var $115=(($114)|0)==0;
      if ($115) { __label__ = 30; break; } else { __label__ = 35; break; }
    case 30: 
      var $117=$2;
      var $118=$ubuf;
      var $119=$6;
      var $120=$looks_text;
      var $121=_file_softmagic($117, $118, $119, 32, $120);
      $m=$121;
      var $122=(($121)|0)!=0;
      if ($122) { __label__ = 31; break; } else { __label__ = 34; break; }
    case 31: 
      var $124=$2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$126 & 1;
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $130=HEAP32[((_stderr)>>2)];
      var $131=$m;
      var $132=_fprintf($130, ((STRING_TABLE.__str12199)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$131,tempInt));
      __label__ = 33; break;
    case 33: 
      __label__ = 54; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $136=$2;
      var $137=(($136+28)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$138 & 131072;
      var $140=(($139)|0)==0;
      if ($140) { __label__ = 36; break; } else { __label__ = 49; break; }
    case 36: 
      var $142=$2;
      var $143=$ubuf;
      var $144=$6;
      var $145=$looks_text;
      var $146=_file_ascmagic($142, $143, $144, $145);
      $m=$146;
      var $147=(($146)|0)!=0;
      if ($147) { __label__ = 37; break; } else { __label__ = 40; break; }
    case 37: 
      var $149=$2;
      var $150=(($149+28)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$151 & 1;
      var $153=(($152)|0)!=0;
      if ($153) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $155=HEAP32[((_stderr)>>2)];
      var $156=$m;
      var $157=_fprintf($155, ((STRING_TABLE.__str13200)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$156,tempInt));
      __label__ = 39; break;
    case 39: 
      __label__ = 54; break;
    case 40: 
      var $160=$2;
      var $161=(($160+28)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$162 & 2097152;
      var $164=(($163)|0)==0;
      if ($164) { __label__ = 41; break; } else { __label__ = 48; break; }
    case 41: 
      var $166=$looks_text;
      var $167=(($166)|0)==0;
      if ($167) { __label__ = 42; break; } else { __label__ = 47; break; }
    case 42: 
      var $169=$2;
      var $170=$ubuf;
      var $171=$6;
      var $172=HEAP32[(($u8buf)>>2)];
      var $173=HEAP32[(($ulen)>>2)];
      var $174=HEAP32[(($code)>>2)];
      var $175=HEAP32[(($type)>>2)];
      var $176=$looks_text;
      var $177=_file_ascmagic_with_encoding($169, $170, $171, $172, $173, $174, $175, $176);
      $m=$177;
      var $178=(($177)|0)!=0;
      if ($178) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $180=$2;
      var $181=(($180+28)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$182 & 1;
      var $184=(($183)|0)!=0;
      if ($184) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $186=HEAP32[((_stderr)>>2)];
      var $187=$m;
      var $188=_fprintf($186, ((STRING_TABLE.__str14201)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$187,tempInt));
      __label__ = 45; break;
    case 45: 
      __label__ = 54; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      $m=1;
      var $194=$mime;
      var $195=(($194)|0)!=0;
      if ($195) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $197=$mime;
      var $198=$197 & 16;
      var $199=(($198)|0)!=0;
      if ($199) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $201=$2;
      var $202=$mime;
      var $203=(($202)|0)!=0;
      var $204=$203 ? (((STRING_TABLE.__str8195)|0)) : (((STRING_TABLE.__str15202)|0));
      var $205=_file_printf($201, $204, (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $206=(($205)|0)==-1;
      if ($206) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      $rv=-1;
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $210=$2;
      var $211=(($210+28)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$212 & 1024;
      var $214=(($213)|0)!=0;
      if ($214) { __label__ = 55; break; } else { __label__ = 62; break; }
    case 55: 
      var $216=$2;
      var $217=(($216+28)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$218 & 16;
      var $220=(($219)|0)!=0;
      if ($220) { __label__ = 56; break; } else { __label__ = 59; break; }
    case 56: 
      var $222=$2;
      var $223=_file_printf($222, ((STRING_TABLE.__str16203)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $224=(($223)|0)==-1;
      if ($224) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      $rv=-1;
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $228=$2;
      var $229=HEAP32[(($code_mime)>>2)];
      var $230=_file_printf($228, ((STRING_TABLE.__str17204)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$229,tempInt));
      var $231=(($230)|0)==-1;
      if ($231) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      $rv=-1;
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      var $235=HEAP32[(($u8buf)>>2)];
      var $236=$235;
      _free($236);
      var $237=$rv;
      var $238=(($237)|0)!=0;
      if ($238) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $240=$rv;
      $1=$240;
      __label__ = 65; break;
    case 64: 
      var $242=$m;
      $1=$242;
      __label__ = 65; break;
    case 65: 
      var $244=$1;
      STACKTOP = __stackBase__;
      return $244;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_buffer["X"]=1;

function _file_reset($ms) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$ms;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      _file_error($8, 0, ((STRING_TABLE.__str18205)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      __label__ = 9; break;
    case 4: 
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$2;
      var $17=(($16+12)|0);
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      _free($19);
      var $20=$2;
      var $21=(($20+12)|0);
      var $22=(($21)|0);
      HEAP32[(($22)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $30=$2;
      var $31=(($30+12)|0);
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      _free($33);
      var $34=$2;
      var $35=(($34+12)|0);
      var $36=(($35+4)|0);
      HEAP32[(($36)>>2)]=0;
      __label__ = 8; break;
    case 8: 
      var $38=$2;
      var $39=(($38+32)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40 & -2;
      HEAP32[(($39)>>2)]=$41;
      var $42=$2;
      var $43=(($42+24)|0);
      HEAP32[(($43)>>2)]=-1;
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $45=$1;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_reset["X"]=1;

function _file_getbuffer($ms) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $pbuf;
      var $op;
      var $np;
      var $psize;
      var $len;
      $2=$ms;
      var $3=$2;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 & 1;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 19; break;
    case 4: 
      var $10=$2;
      var $11=(($10+28)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 256;
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$2;
      var $17=(($16+12)|0);
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      $1=$19;
      __label__ = 19; break;
    case 6: 
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==0;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=0;
      __label__ = 19; break;
    case 8: 
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=_strlen($31);
      $len=$32;
      var $33=$len;
      var $34=(($33)>>>0) > 1073741823;
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$2;
      var $37=$len;
      _file_oomem($36, $37);
      $1=0;
      __label__ = 19; break;
    case 10: 
      var $39=$len;
      var $40=((($39<<2))|0);
      var $41=((($40)+(1))|0);
      $psize=$41;
      var $42=$2;
      var $43=(($42+12)|0);
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$psize;
      var $47=_realloc($45, $46);
      $pbuf=$47;
      var $48=(($47)|0)==0;
      if ($48) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $50=$2;
      var $51=$psize;
      _file_oomem($50, $51);
      $1=0;
      __label__ = 19; break;
    case 12: 
      var $53=$pbuf;
      var $54=$2;
      var $55=(($54+12)|0);
      var $56=(($55+4)|0);
      HEAP32[(($56)>>2)]=$53;
      var $57=$2;
      var $58=(($57+12)|0);
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      $np=$60;
      var $61=$2;
      var $62=(($61+12)|0);
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      $op=$64;
      __label__ = 13; break;
    case 13: 
      var $66=$op;
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24)!=0;
      if ($68) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $70=$op;
      var $71=HEAPU8[($70)];
      var $72=(($71)&255);
      var $73=_isprint($72);
      var $74=(($73)|0)!=0;
      if ($74) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $76=$op;
      var $77=(($76+1)|0);
      $op=$77;
      var $78=HEAP8[($76)];
      var $79=$np;
      var $80=(($79+1)|0);
      $np=$80;
      HEAP8[($79)]=$78;
      __label__ = 17; break;
    case 16: 
      var $82=$np;
      var $83=(($82+1)|0);
      $np=$83;
      HEAP8[($82)]=92;
      var $84=$op;
      var $85=HEAP8[($84)];
      var $86=(($85 << 24) >> 24);
      var $87=$86 >>> 6;
      var $88=$87 & 3;
      var $89=((($88)+(48))|0);
      var $90=(($89) & 255);
      var $91=$np;
      var $92=(($91+1)|0);
      $np=$92;
      HEAP8[($91)]=$90;
      var $93=$op;
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=$95 >>> 3;
      var $97=$96 & 7;
      var $98=((($97)+(48))|0);
      var $99=(($98) & 255);
      var $100=$np;
      var $101=(($100+1)|0);
      $np=$101;
      HEAP8[($100)]=$99;
      var $102=$op;
      var $103=HEAP8[($102)];
      var $104=(($103 << 24) >> 24);
      var $105=$104 >>> 0;
      var $106=$105 & 7;
      var $107=((($106)+(48))|0);
      var $108=(($107) & 255);
      var $109=$np;
      var $110=(($109+1)|0);
      $np=$110;
      HEAP8[($109)]=$108;
      var $111=$op;
      var $112=(($111+1)|0);
      $op=$112;
      __label__ = 17; break;
    case 17: 
      __label__ = 13; break;
    case 18: 
      var $115=$np;
      HEAP8[($115)]=0;
      var $116=$2;
      var $117=(($116+12)|0);
      var $118=(($117+4)|0);
      var $119=HEAP32[(($118)>>2)];
      $1=$119;
      __label__ = 19; break;
    case 19: 
      var $121=$1;
      ;
      return $121;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_getbuffer["X"]=1;

function _file_check_mem($ms, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $len;
      $2=$ms;
      $3=$level;
      var $4=$3;
      var $5=$2;
      var $6=(($5+4)|0);
      var $7=(($6)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=(($4)>>>0) >= (($8)>>>0);
      if ($9) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)+(20))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=((($15<<4))|0);
      $len=$16;
      var $17=$2;
      var $18=(($17+4)|0);
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==0;
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $23=$len;
      var $24=_malloc($23);
      var $34 = $24;__label__ = 6; break;
    case 5: 
      var $26=$2;
      var $27=(($26+4)|0);
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$len;
      var $32=_realloc($30, $31);
      var $34 = $32;__label__ = 6; break;
    case 6: 
      var $34;
      var $35=$34;
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$35;
      var $39=$2;
      var $40=(($39+4)|0);
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)==0;
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $45=$2;
      var $46=$len;
      _file_oomem($45, $46);
      $1=-1;
      __label__ = 10; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $49=$3;
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($49<<4))|0);
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=0;
      var $56=$3;
      var $57=$2;
      var $58=(($57+4)|0);
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($56<<4))|0);
      var $62=(($61+8)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$3;
      var $64=$2;
      var $65=(($64+4)|0);
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+($63<<4))|0);
      var $69=(($68+12)|0);
      HEAP32[(($69)>>2)]=0;
      $1=0;
      __label__ = 10; break;
    case 10: 
      var $71=$1;
      ;
      return $71;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_check_mem["X"]=1;

function _file_printedlen($ms) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ms;
      var $2=$1;
      var $3=(($2+12)|0);
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15 = 0;__label__ = 5; break;
    case 4: 
      var $9=$1;
      var $10=(($9+12)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_strlen($12);
      var $15 = $13;__label__ = 5; break;
    case 5: 
      var $15;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_replace($ms, $pat, $rep) {
  var __stackBase__  = STACKTOP; STACKTOP += 536; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rx=__stackBase__;
      var $rc;
      var $errmsg=(__stackBase__)+(16);
      var $rm=(__stackBase__)+(528);
      var $nm;
      $2=$ms;
      $3=$pat;
      $4=$rep;
      var $5=$3;
      var $6=_llvm_regcomp($rx, $5, 1);
      $rc=$6;
      var $7=$rc;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$rc;
      var $11=(($errmsg)|0);
      var $12=_llvm_regerror($10, $rx, $11, 512);
      var $13=$2;
      var $14=$rc;
      var $15=(($errmsg)|0);
      _file_magerror($13, ((STRING_TABLE.__str19206)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      $1=-1;
      __label__ = 13; break;
    case 4: 
      $nm=0;
      __label__ = 5; break;
    case 5: 
      var $18=$2;
      var $19=(($18+12)|0);
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_llvm_regexec($rx, $21, 1, $rm, 0);
      var $23=(($22)|0)==0;
      if ($23) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $25=(($rm)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+$26)|0);
      HEAP8[($31)]=0;
      var $32=$2;
      var $33=$4;
      var $34=(($rm+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0)!=0;
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $38=$2;
      var $39=(($38+12)|0);
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($rm+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($41+$43)|0);
      var $47 = $44;__label__ = 9; break;
    case 8: 
      var $47 = ((__str20207)|0);__label__ = 9; break;
    case 9: 
      var $47;
      var $48=_file_printf($32, ((STRING_TABLE.__str187)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$47,tempInt));
      var $49=(($48)|0)==-1;
      if ($49) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $1=-1;
      __label__ = 13; break;
    case 11: 
      var $52=$nm;
      var $53=((($52)+(1))|0);
      $nm=$53;
      __label__ = 5; break;
    case 12: 
      _llvm_regfree($rx);
      var $55=$nm;
      $1=$55;
      __label__ = 13; break;
    case 13: 
      var $57=$1;
      STACKTOP = __stackBase__;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_replace["X"]=1;

function _file_fsmagic($ms, $fn, $sb) {
  var __stackBase__  = STACKTOP; STACKTOP += 3152; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $mime;
      var $buf=__stackBase__;
      var $nch;
      var $tstatbuf=(__stackBase__)+(1028);
      var $tmp;
      var $buf2=(__stackBase__)+(1100);
      var $p;
      $2=$ms;
      $3=$fn;
      $4=$sb;
      $ret=0;
      var $5=$2;
      var $6=(($5+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1040;
      $mime=$8;
      var $9=$2;
      var $10=(($9+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 2048;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 132; break;
    case 4: 
      var $16=$3;
      var $17=(($16)|0)==0;
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 132; break;
    case 6: 
      var $20=$2;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & 2;
      var $24=(($23)|0)==0;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28=_lstat($26, $27);
      $ret=$28;
      __label__ = 9; break;
    case 8: 
      var $30=$3;
      var $31=$4;
      var $32=_stat($30, $31);
      $ret=$32;
      __label__ = 9; break;
    case 9: 
      var $34=$ret;
      var $35=(($34)|0)!=0;
      if ($35) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: 
      var $37=$2;
      var $38=(($37+28)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & 512;
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $43=$2;
      var $44=___errno();
      var $45=HEAP32[(($44)>>2)];
      var $46=$3;
      _file_error($43, $45, ((STRING_TABLE.__str236)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$46,tempInt));
      $1=-1;
      __label__ = 132; break;
    case 12: 
      var $48=$2;
      var $49=$3;
      var $50=___errno();
      var $51=HEAP32[(($50)>>2)];
      var $52=_strerror($51);
      var $53=_file_printf($48, ((STRING_TABLE.__str1237)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$49,HEAP32[(((tempInt)+(4))>>2)]=$52,tempInt));
      var $54=(($53)|0)==-1;
      if ($54) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=-1;
      __label__ = 132; break;
    case 14: 
      var $57=$2;
      var $58=(($57+32)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 | 1;
      HEAP32[(($58)>>2)]=$60;
      $1=-1;
      __label__ = 132; break;
    case 15: 
      var $62=$mime;
      var $63=(($62)|0)!=0;
      if ($63) { __label__ = 29; break; } else { __label__ = 16; break; }
    case 16: 
      var $65=$4;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 2048;
      var $69=(($68)|0)!=0;
      if ($69) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $71=$2;
      var $72=_file_printf($71, ((STRING_TABLE.__str2238)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $73=(($72)|0)==-1;
      if ($73) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $1=-1;
      __label__ = 132; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $77=$4;
      var $78=(($77+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79 & 1024;
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $83=$2;
      var $84=_file_printf($83, ((STRING_TABLE.__str3239)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $85=(($84)|0)==-1;
      if ($85) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $1=-1;
      __label__ = 132; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $89=$4;
      var $90=(($89+8)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 & 512;
      var $93=(($92)|0)!=0;
      if ($93) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $95=$2;
      var $96=_file_printf($95, ((STRING_TABLE.__str4240)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $97=(($96)|0)==-1;
      if ($97) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      $1=-1;
      __label__ = 132; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $102=$4;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 & 61440;
      if ((($105)|0) == 16384) {
        __label__ = 30; break;
      }
      else if ((($105)|0) == 8192) {
        __label__ = 38; break;
      }
      else if ((($105)|0) == 24576) {
        __label__ = 48; break;
      }
      else if ((($105)|0) == 4096) {
        __label__ = 58; break;
      }
      else if ((($105)|0) == 40960) {
        __label__ = 68; break;
      }
      else if ((($105)|0) == 49152) {
        __label__ = 111; break;
      }
      else if ((($105)|0) == 32768) {
        __label__ = 119; break;
      }
      else {
      __label__ = 120; break;
      }
      
    case 30: 
      var $107=$mime;
      var $108=(($107)|0)!=0;
      if ($108) { __label__ = 31; break; } else { __label__ = 34; break; }
    case 31: 
      var $110=$2;
      var $111=$mime;
      var $112=_handle_mime($110, $111, ((STRING_TABLE.__str5241)|0));
      var $113=(($112)|0)==-1;
      if ($113) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $1=-1;
      __label__ = 132; break;
    case 33: 
      __label__ = 37; break;
    case 34: 
      var $117=$2;
      var $118=_file_printf($117, ((STRING_TABLE.__str5241)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $119=(($118)|0)==-1;
      if ($119) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $1=-1;
      __label__ = 132; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      $1=1;
      __label__ = 132; break;
    case 38: 
      var $124=$2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$126 & 8;
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      __label__ = 121; break;
    case 40: 
      var $131=$mime;
      var $132=(($131)|0)!=0;
      if ($132) { __label__ = 41; break; } else { __label__ = 44; break; }
    case 41: 
      var $134=$2;
      var $135=$mime;
      var $136=_handle_mime($134, $135, ((STRING_TABLE.__str6242)|0));
      var $137=(($136)|0)==-1;
      if ($137) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      $1=-1;
      __label__ = 132; break;
    case 43: 
      __label__ = 47; break;
    case 44: 
      var $141=$2;
      var $142=_file_printf($141, ((STRING_TABLE.__str7243)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $143=(($142)|0)==-1;
      if ($143) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      $1=-1;
      __label__ = 132; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      $1=1;
      __label__ = 132; break;
    case 48: 
      var $148=$2;
      var $149=(($148+28)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$150 & 8;
      var $152=(($151)|0)!=0;
      if ($152) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      __label__ = 121; break;
    case 50: 
      var $155=$mime;
      var $156=(($155)|0)!=0;
      if ($156) { __label__ = 51; break; } else { __label__ = 54; break; }
    case 51: 
      var $158=$2;
      var $159=$mime;
      var $160=_handle_mime($158, $159, ((STRING_TABLE.__str8244)|0));
      var $161=(($160)|0)==-1;
      if ($161) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      $1=-1;
      __label__ = 132; break;
    case 53: 
      __label__ = 57; break;
    case 54: 
      var $165=$2;
      var $166=_file_printf($165, ((STRING_TABLE.__str9245)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $167=(($166)|0)==-1;
      if ($167) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      $1=-1;
      __label__ = 132; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      $1=1;
      __label__ = 132; break;
    case 58: 
      var $172=$2;
      var $173=(($172+28)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$174 & 8;
      var $176=(($175)|0)!=0;
      if ($176) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 121; break;
    case 60: 
      var $179=$mime;
      var $180=(($179)|0)!=0;
      if ($180) { __label__ = 61; break; } else { __label__ = 64; break; }
    case 61: 
      var $182=$2;
      var $183=$mime;
      var $184=_handle_mime($182, $183, ((STRING_TABLE.__str10246)|0));
      var $185=(($184)|0)==-1;
      if ($185) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      $1=-1;
      __label__ = 132; break;
    case 63: 
      __label__ = 67; break;
    case 64: 
      var $189=$2;
      var $190=_file_printf($189, ((STRING_TABLE.__str11247)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $191=(($190)|0)==-1;
      if ($191) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      $1=-1;
      __label__ = 132; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      $1=1;
      __label__ = 132; break;
    case 68: 
      var $196=$3;
      var $197=(($buf)|0);
      var $198=_readlink($196, $197, 1023);
      $nch=$198;
      var $199=(($198)|0) <= 0;
      if ($199) { __label__ = 69; break; } else { __label__ = 79; break; }
    case 69: 
      var $201=$2;
      var $202=(($201+28)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & 512;
      var $205=(($204)|0)!=0;
      if ($205) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $207=$2;
      var $208=___errno();
      var $209=HEAP32[(($208)>>2)];
      var $210=$3;
      _file_error($207, $209, ((STRING_TABLE.__str12248)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$210,tempInt));
      $1=-1;
      __label__ = 132; break;
    case 71: 
      var $212=$mime;
      var $213=(($212)|0)!=0;
      if ($213) { __label__ = 72; break; } else { __label__ = 75; break; }
    case 72: 
      var $215=$2;
      var $216=$mime;
      var $217=_handle_mime($215, $216, ((STRING_TABLE.__str13249)|0));
      var $218=(($217)|0)==-1;
      if ($218) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      $1=-1;
      __label__ = 132; break;
    case 74: 
      __label__ = 78; break;
    case 75: 
      var $222=$2;
      var $223=$3;
      var $224=___errno();
      var $225=HEAP32[(($224)>>2)];
      var $226=_strerror($225);
      var $227=_file_printf($222, ((STRING_TABLE.__str14250)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$223,HEAP32[(((tempInt)+(4))>>2)]=$226,tempInt));
      var $228=(($227)|0)==-1;
      if ($228) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      $1=-1;
      __label__ = 132; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      $1=1;
      __label__ = 132; break;
    case 79: 
      var $233=$nch;
      var $234=(($buf+$233)|0);
      HEAP8[($234)]=0;
      var $235=(($buf)|0);
      var $236=HEAP8[($235)];
      var $237=(($236 << 24) >> 24);
      var $238=(($237)|0)==47;
      if ($238) { __label__ = 80; break; } else { __label__ = 83; break; }
    case 80: 
      var $240=(($buf)|0);
      var $241=_stat($240, $tstatbuf);
      var $242=(($241)|0) < 0;
      if ($242) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $244=$2;
      var $245=___errno();
      var $246=HEAP32[(($245)>>2)];
      var $247=(($buf)|0);
      var $248=_bad_link($244, $246, $247);
      $1=$248;
      __label__ = 132; break;
    case 82: 
      __label__ = 100; break;
    case 83: 
      var $251=$3;
      var $252=_strrchr($251, 47);
      $tmp=$252;
      var $253=(($252)|0)==0;
      if ($253) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $255=(($buf)|0);
      $tmp=$255;
      __label__ = 97; break;
    case 85: 
      var $257=$tmp;
      var $258=$3;
      var $259=$257;
      var $260=$258;
      var $261=((($259)-($260))|0);
      var $262=((($261)+(1))|0);
      var $263=(($262)|0) > 1024;
      if ($263) { __label__ = 86; break; } else { __label__ = 96; break; }
    case 86: 
      var $265=$2;
      var $266=(($265+28)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$267 & 512;
      var $269=(($268)|0)!=0;
      if ($269) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $271=$2;
      var $272=(($buf)|0);
      _file_error($271, 0, ((STRING_TABLE.__str15251)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$272,tempInt));
      $1=-1;
      __label__ = 132; break;
    case 88: 
      var $274=$mime;
      var $275=(($274)|0)!=0;
      if ($275) { __label__ = 89; break; } else { __label__ = 92; break; }
    case 89: 
      var $277=$2;
      var $278=$mime;
      var $279=_handle_mime($277, $278, ((STRING_TABLE.__str16252)|0));
      var $280=(($279)|0)==-1;
      if ($280) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      $1=-1;
      __label__ = 132; break;
    case 91: 
      __label__ = 95; break;
    case 92: 
      var $284=$2;
      var $285=$3;
      var $286=_file_printf($284, ((STRING_TABLE.__str15251)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$285,tempInt));
      var $287=(($286)|0)==-1;
      if ($287) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      $1=-1;
      __label__ = 132; break;
    case 94: 
      __label__ = 95; break;
    case 95: 
      $1=1;
      __label__ = 132; break;
    case 96: 
      var $292=(($buf2)|0);
      var $293=$3;
      var $294=_llvm_strlcpy($292, $293, 2052);
      var $295=$tmp;
      var $296=$3;
      var $297=$295;
      var $298=$296;
      var $299=((($297)-($298))|0);
      var $300=((($299)+(1))|0);
      var $301=(($buf2+$300)|0);
      HEAP8[($301)]=0;
      var $302=(($buf2)|0);
      var $303=(($buf)|0);
      var $304=_strncat($302, $303, 2052);
      var $305=(($buf2)|0);
      $tmp=$305;
      __label__ = 97; break;
    case 97: 
      var $307=$tmp;
      var $308=_stat($307, $tstatbuf);
      var $309=(($308)|0) < 0;
      if ($309) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $311=$2;
      var $312=___errno();
      var $313=HEAP32[(($312)>>2)];
      var $314=(($buf)|0);
      var $315=_bad_link($311, $313, $314);
      $1=$315;
      __label__ = 132; break;
    case 99: 
      __label__ = 100; break;
    case 100: 
      var $318=$2;
      var $319=(($318+28)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=$320 & 2;
      var $322=(($321)|0)!=0;
      if ($322) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: 
      var $324=$2;
      var $325=(($324+28)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=$326 & 2;
      HEAP32[(($325)>>2)]=$327;
      var $328=$2;
      var $329=(($buf)|0);
      var $330=_magic_file($328, $329);
      $p=$330;
      var $331=$2;
      var $332=(($331+28)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=$333 | 2;
      HEAP32[(($332)>>2)]=$334;
      var $335=$p;
      var $336=(($335)|0)!=0;
      var $337=$336 ? 1 : -1;
      $1=$337;
      __label__ = 132; break;
    case 102: 
      var $339=$mime;
      var $340=(($339)|0)!=0;
      if ($340) { __label__ = 103; break; } else { __label__ = 106; break; }
    case 103: 
      var $342=$2;
      var $343=$mime;
      var $344=_handle_mime($342, $343, ((STRING_TABLE.__str13249)|0));
      var $345=(($344)|0)==-1;
      if ($345) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      $1=-1;
      __label__ = 132; break;
    case 105: 
      __label__ = 109; break;
    case 106: 
      var $349=$2;
      var $350=(($buf)|0);
      var $351=_file_printf($349, ((STRING_TABLE.__str17253)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$350,tempInt));
      var $352=(($351)|0)==-1;
      if ($352) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      $1=-1;
      __label__ = 132; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      $1=1;
      __label__ = 132; break;
    case 111: 
      var $358=$mime;
      var $359=(($358)|0)!=0;
      if ($359) { __label__ = 112; break; } else { __label__ = 115; break; }
    case 112: 
      var $361=$2;
      var $362=$mime;
      var $363=_handle_mime($361, $362, ((STRING_TABLE.__str18254)|0));
      var $364=(($363)|0)==-1;
      if ($364) { __label__ = 113; break; } else { __label__ = 114; break; }
    case 113: 
      $1=-1;
      __label__ = 132; break;
    case 114: 
      __label__ = 118; break;
    case 115: 
      var $368=$2;
      var $369=_file_printf($368, ((STRING_TABLE.__str18254)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $370=(($369)|0)==-1;
      if ($370) { __label__ = 116; break; } else { __label__ = 117; break; }
    case 116: 
      $1=-1;
      __label__ = 132; break;
    case 117: 
      __label__ = 118; break;
    case 118: 
      $1=1;
      __label__ = 132; break;
    case 119: 
      __label__ = 121; break;
    case 120: 
      var $376=$2;
      var $377=$4;
      var $378=(($377+8)|0);
      var $379=HEAP32[(($378)>>2)];
      _file_error($376, 0, ((STRING_TABLE.__str19255)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$379,tempInt));
      $1=-1;
      __label__ = 132; break;
    case 121: 
      var $381=$2;
      var $382=(($381+28)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=$383 & 8;
      var $385=(($384)|0)==0;
      if ($385) { __label__ = 122; break; } else { __label__ = 131; break; }
    case 122: 
      var $387=$4;
      var $388=(($387+28)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($389)|0)==0;
      if ($390) { __label__ = 123; break; } else { __label__ = 131; break; }
    case 123: 
      var $392=$mime;
      var $393=(($392)|0)!=0;
      if ($393) { __label__ = 124; break; } else { __label__ = 127; break; }
    case 124: 
      var $395=$2;
      var $396=$mime;
      var $397=_handle_mime($395, $396, ((STRING_TABLE.__str20256)|0));
      var $398=(($397)|0)==-1;
      if ($398) { __label__ = 125; break; } else { __label__ = 126; break; }
    case 125: 
      $1=-1;
      __label__ = 132; break;
    case 126: 
      __label__ = 130; break;
    case 127: 
      var $402=$2;
      var $403=_file_printf($402, ((STRING_TABLE.__str21257)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $404=(($403)|0)==-1;
      if ($404) { __label__ = 128; break; } else { __label__ = 129; break; }
    case 128: 
      $1=-1;
      __label__ = 132; break;
    case 129: 
      __label__ = 130; break;
    case 130: 
      $1=1;
      __label__ = 132; break;
    case 131: 
      $1=0;
      __label__ = 132; break;
    case 132: 
      var $410=$1;
      STACKTOP = __stackBase__;
      return $410;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_fsmagic["X"]=1;

function _handle_mime($ms, $mime, $str) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ms;
      $3=$mime;
      $4=$str;
      var $5=$3;
      var $6=$5 & 16;
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $9=$2;
      var $10=$4;
      var $11=_file_printf($9, ((STRING_TABLE.__str24260)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$10,tempInt));
      var $12=(($11)|0)==-1;
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 13; break;
    case 5: 
      var $15=$3;
      var $16=$15 & 1024;
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $19=$2;
      var $20=_file_printf($19, ((STRING_TABLE.__str25261)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=(($20)|0)==-1;
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=-1;
      __label__ = 13; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $25=$3;
      var $26=$25 & 1024;
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $29=$2;
      var $30=_file_printf($29, ((STRING_TABLE.__str26262)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=(($30)|0)==-1;
      if ($31) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=-1;
      __label__ = 13; break;
    case 12: 
      $1=0;
      __label__ = 13; break;
    case 13: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bad_link($ms, $err, $buf) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $mime;
      $2=$ms;
      $3=$err;
      $4=$buf;
      var $5=$2;
      var $6=(($5+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1040;
      $mime=$8;
      var $9=$mime;
      var $10=$9 & 16;
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $13=$2;
      var $14=_file_printf($13, ((STRING_TABLE.__str22258)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $15=(($14)|0)==-1;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 13; break;
    case 5: 
      var $18=$mime;
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 11; break; } else { __label__ = 6; break; }
    case 6: 
      var $21=$2;
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 512;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $27=$2;
      var $28=$3;
      var $29=$4;
      _file_error($27, $28, ((STRING_TABLE.__str23259)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$29,tempInt));
      $1=-1;
      __label__ = 13; break;
    case 8: 
      var $31=$2;
      var $32=$4;
      var $33=_file_printf($31, ((STRING_TABLE.__str23259)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,tempInt));
      var $34=(($33)|0)==-1;
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=-1;
      __label__ = 13; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      $1=1;
      __label__ = 13; break;
    case 13: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + __label__);
  }
}
_bad_link["X"]=1;

function _file_is_tar($ms, $buf, $nbytes) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tar;
      var $mime;
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      var $5=$2;
      var $6=(($5+28)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1040;
      $mime=$8;
      var $9=$2;
      var $10=(($9+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 2048;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 13; break;
    case 4: 
      var $16=$3;
      var $17=$4;
      var $18=_is_tar($16, $17);
      $tar=$18;
      var $19=$tar;
      var $20=(($19)|0) < 1;
      if ($20) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $22=$tar;
      var $23=(($22)|0) > 3;
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=0;
      __label__ = 13; break;
    case 7: 
      var $26=$2;
      var $27=$mime;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $36 = ((STRING_TABLE.__str1268)|0);__label__ = 10; break;
    case 9: 
      var $31=$tar;
      var $32=((($31)-(1))|0);
      var $33=((_tartype+($32<<5))|0);
      var $34=(($33)|0);
      var $36 = $34;__label__ = 10; break;
    case 10: 
      var $36;
      var $37=_file_printf($26, ((STRING_TABLE.__str267)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$36,tempInt));
      var $38=(($37)|0)==-1;
      if ($38) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=-1;
      __label__ = 13; break;
    case 12: 
      $1=1;
      __label__ = 13; break;
    case 13: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_is_tar["X"]=1;

function __cdf_tole2($sv) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP16[(($1)>>1)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+1)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=HEAP16[(($rv)>>1)];
  STACKTOP = __stackBase__;
  return $14;
}


function __cdf_tole4($sv) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP32[(($1)>>2)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+3)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+2)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+1)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=HEAP32[(($rv)>>2)];
  STACKTOP = __stackBase__;
  return $24;
}


function __cdf_tole8($sv$0, $sv$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(8);
  var $s;
  var $d;
  var $st$4$0=(($1)|0);
  HEAP32[(($st$4$0)>>2)]=$sv$0;
  var $st$4$1=(($1+4)|0);
  HEAP32[(($st$4$1)>>2)]=$sv$1;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+7)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+6)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+5)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19+4)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=$s;
  var $25=(($24+3)|0);
  var $26=HEAP8[($25)];
  var $27=$d;
  var $28=(($27+4)|0);
  HEAP8[($28)]=$26;
  var $29=$s;
  var $30=(($29+2)|0);
  var $31=HEAP8[($30)];
  var $32=$d;
  var $33=(($32+5)|0);
  HEAP8[($33)]=$31;
  var $34=$s;
  var $35=(($34+1)|0);
  var $36=HEAP8[($35)];
  var $37=$d;
  var $38=(($37+6)|0);
  HEAP8[($38)]=$36;
  var $39=$s;
  var $40=(($39)|0);
  var $41=HEAP8[($40)];
  var $42=$d;
  var $43=(($42+7)|0);
  HEAP8[($43)]=$41;
  var $st$60$0=(($rv)|0);
  var $44$0=HEAP32[(($st$60$0)>>2)];
  var $st$60$1=(($rv+4)|0);
  var $44$1=HEAP32[(($st$60$1)>>2)];
  STACKTOP = __stackBase__;
  return [$44$0,$44$1];
}
__cdf_tole8["X"]=1;

function _is_tar($buf, $nbytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $header;
      var $i;
      var $sum;
      var $recsum;
      var $p;
      $2=$buf;
      $3=$nbytes;
      var $4=$2;
      var $5=$4;
      $header=$5;
      var $6=$3;
      var $7=(($6)>>>0) < 512;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 17; break;
    case 4: 
      var $10=$header;
      var $11=$10;
      var $12=(($11+148)|0);
      var $13=(($12)|0);
      var $14=_from_oct(8, $13);
      $recsum=$14;
      $sum=0;
      var $15=$header;
      var $16=$15;
      var $17=(($16)|0);
      $p=$17;
      $i=512;
      __label__ = 5; break;
    case 5: 
      var $19=$i;
      var $20=((($19)-(1))|0);
      $i=$20;
      var $21=(($20)|0) >= 0;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$p;
      var $24=(($23+1)|0);
      $p=$24;
      var $25=HEAPU8[($23)];
      var $26=(($25)&255);
      var $27=$sum;
      var $28=((($27)+($26))|0);
      $sum=$28;
      __label__ = 5; break;
    case 7: 
      $i=8;
      __label__ = 8; break;
    case 8: 
      var $31=$i;
      var $32=((($31)-(1))|0);
      $i=$32;
      var $33=(($32)|0) >= 0;
      if ($33) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $35=$i;
      var $36=$header;
      var $37=$36;
      var $38=(($37+148)|0);
      var $39=(($38+$35)|0);
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=$sum;
      var $43=((($42)-($41))|0);
      $sum=$43;
      __label__ = 8; break;
    case 10: 
      var $45=$sum;
      var $46=((($45)+(256))|0);
      $sum=$46;
      var $47=$sum;
      var $48=$recsum;
      var $49=(($47)|0)!=(($48)|0);
      if ($49) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=0;
      __label__ = 17; break;
    case 12: 
      var $52=$header;
      var $53=$52;
      var $54=(($53+257)|0);
      var $55=(($54)|0);
      var $56=_strcmp($55, ((STRING_TABLE.__str2269)|0));
      var $57=(($56)|0)==0;
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=3;
      __label__ = 17; break;
    case 14: 
      var $60=$header;
      var $61=$60;
      var $62=(($61+257)|0);
      var $63=(($62)|0);
      var $64=_strcmp($63, ((STRING_TABLE.__str3270)|0));
      var $65=(($64)|0)==0;
      if ($65) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $1=2;
      __label__ = 17; break;
    case 16: 
      $1=1;
      __label__ = 17; break;
    case 17: 
      var $69=$1;
      ;
      return $69;
    default: assert(0, "bad label: " + __label__);
  }
}
_is_tar["X"]=1;

function _from_oct($digs, $where) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $value;
      $2=$digs;
      $3=$where;
      __label__ = 3; break;
    case 3: 
      var $5=$3;
      var $6=HEAPU8[($5)];
      var $7=(($6)&255);
      var $8=_isspace($7);
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $11=$3;
      var $12=(($11+1)|0);
      $3=$12;
      var $13=$2;
      var $14=((($13)-(1))|0);
      $2=$14;
      var $15=(($14)|0) <= 0;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=-1;
      __label__ = 19; break;
    case 6: 
      __label__ = 3; break;
    case 7: 
      $value=0;
      __label__ = 8; break;
    case 8: 
      var $20=$2;
      var $21=(($20)|0) > 0;
      if ($21) { __label__ = 9; break; } else { var $35 = 0;__label__ = 12; break; }
    case 9: 
      var $23=$3;
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24);
      var $26=(($25)|0) >= 48;
      if ($26) { __label__ = 10; break; } else { var $33 = 0;__label__ = 11; break; }
    case 10: 
      var $28=$3;
      var $29=HEAP8[($28)];
      var $30=(($29 << 24) >> 24);
      var $31=(($30)|0) <= 55;
      var $33 = $31;__label__ = 11; break;
    case 11: 
      var $33;
      var $35 = $33;__label__ = 12; break;
    case 12: 
      var $35;
      if ($35) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $37=$value;
      var $38=$37 << 3;
      var $39=$3;
      var $40=(($39+1)|0);
      $3=$40;
      var $41=HEAP8[($39)];
      var $42=(($41 << 24) >> 24);
      var $43=((($42)-(48))|0);
      var $44=$38 | $43;
      $value=$44;
      var $45=$2;
      var $46=((($45)-(1))|0);
      $2=$46;
      __label__ = 8; break;
    case 14: 
      var $48=$2;
      var $49=(($48)|0) > 0;
      if ($49) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $51=$3;
      var $52=HEAP8[($51)];
      var $53=(($52 << 24) >> 24);
      var $54=(($53)|0)!=0;
      if ($54) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $56=$3;
      var $57=HEAPU8[($56)];
      var $58=(($57)&255);
      var $59=_isspace($58);
      var $60=(($59)|0)!=0;
      if ($60) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      $1=-1;
      __label__ = 19; break;
    case 18: 
      var $63=$value;
      $1=$63;
      __label__ = 19; break;
    case 19: 
      var $65=$1;
      ;
      return $65;
    default: assert(0, "bad label: " + __label__);
  }
}
_from_oct["X"]=1;

function _cdf_tole2($sv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$sv;
      var $2=HEAP32[((((_cdf_bo)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=__cdf_tole2($5);
      var $7=(($6)&65535);
      var $12 = $7;__label__ = 5; break;
    case 4: 
      var $9=$1;
      var $10=(($9)&65535);
      var $12 = $10;__label__ = 5; break;
    case 5: 
      var $12;
      var $13=(($12) & 65535);
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_tole4($sv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$sv;
      var $2=HEAP32[((((_cdf_bo)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=__cdf_tole4($5);
      var $10 = $6;__label__ = 5; break;
    case 4: 
      var $8=$1;
      var $10 = $8;__label__ = 5; break;
    case 5: 
      var $10;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_tole8($sv$0, $sv$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1=__stackBase__;
      var $st$1$0=(($1)|0);
      HEAP32[(($st$1$0)>>2)]=$sv$0;
      var $st$1$1=(($1+4)|0);
      HEAP32[(($st$1$1)>>2)]=$sv$1;
      var $2=HEAP32[((((_cdf_bo)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $st$0$0=(($1)|0);
      var $5$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($1+4)|0);
      var $5$1=HEAP32[(($st$0$1)>>2)];
      var $6=__cdf_tole8($5$0, $5$1);
      var $6$0=$6[0];
      var $6$1=$6[1];
      var $10$1 = $6$1;var $10$0 = $6$0;__label__ = 5; break;
    case 4: 
      var $st$0$0=(($1)|0);
      var $8$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($1+4)|0);
      var $8$1=HEAP32[(($st$0$1)>>2)];
      var $10$1 = $8$1;var $10$0 = $8$0;__label__ = 5; break;
    case 5: 
      var $10$0;
      var $10$1;
      STACKTOP = __stackBase__;
      return [$10$0,$10$1];
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_swap_header($h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$h;
      var $2=HEAP32[((((_cdf_bo)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)|0);
      var $st$2$0=(($6)|0);
      var $7$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($6+4)|0);
      var $7$1=HEAP32[(($st$2$1)>>2)];
      var $8=__cdf_tole8($7$0, $7$1);
      var $8$0=$8[0];
      var $8$1=$8[1];
      var $14$1 = $8$1;var $14$0 = $8$0;__label__ = 5; break;
    case 4: 
      var $10=$1;
      var $11=(($10)|0);
      var $st$2$0=(($11)|0);
      var $12$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($11+4)|0);
      var $12$1=HEAP32[(($st$2$1)>>2)];
      var $14$1 = $12$1;var $14$0 = $12$0;__label__ = 5; break;
    case 5: 
      var $14$0;
      var $14$1;
      var $15=$1;
      var $16=(($15)|0);
      var $st$4$0=(($16)|0);
      HEAP32[(($st$4$0)>>2)]=$14$0;
      var $st$4$1=(($16+4)|0);
      HEAP32[(($st$4$1)>>2)]=$14$1;
      var $17=HEAP32[((((_cdf_bo)|0))>>2)];
      var $18=(($17)|0)==16909060;
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $20=$1;
      var $21=(($20+8)|0);
      var $22=(($21)|0);
      var $st$3$0=(($22)|0);
      var $23$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($22+4)|0);
      var $23$1=HEAP32[(($st$3$1)>>2)];
      var $24=__cdf_tole8($23$0, $23$1);
      var $24$0=$24[0];
      var $24$1=$24[1];
      var $31$1 = $24$1;var $31$0 = $24$0;__label__ = 8; break;
    case 7: 
      var $26=$1;
      var $27=(($26+8)|0);
      var $28=(($27)|0);
      var $st$3$0=(($28)|0);
      var $29$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($28+4)|0);
      var $29$1=HEAP32[(($st$3$1)>>2)];
      var $31$1 = $29$1;var $31$0 = $29$0;__label__ = 8; break;
    case 8: 
      var $31$0;
      var $31$1;
      var $32=$1;
      var $33=(($32+8)|0);
      var $34=(($33)|0);
      var $st$5$0=(($34)|0);
      HEAP32[(($st$5$0)>>2)]=$31$0;
      var $st$5$1=(($34+4)|0);
      HEAP32[(($st$5$1)>>2)]=$31$1;
      var $35=HEAP32[((((_cdf_bo)|0))>>2)];
      var $36=(($35)|0)==16909060;
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=$1;
      var $39=(($38+8)|0);
      var $40=(($39+8)|0);
      var $st$3$0=(($40)|0);
      var $41$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($40+4)|0);
      var $41$1=HEAP32[(($st$3$1)>>2)];
      var $42=__cdf_tole8($41$0, $41$1);
      var $42$0=$42[0];
      var $42$1=$42[1];
      var $49$1 = $42$1;var $49$0 = $42$0;__label__ = 11; break;
    case 10: 
      var $44=$1;
      var $45=(($44+8)|0);
      var $46=(($45+8)|0);
      var $st$3$0=(($46)|0);
      var $47$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($46+4)|0);
      var $47$1=HEAP32[(($st$3$1)>>2)];
      var $49$1 = $47$1;var $49$0 = $47$0;__label__ = 11; break;
    case 11: 
      var $49$0;
      var $49$1;
      var $50=$1;
      var $51=(($50+8)|0);
      var $52=(($51+8)|0);
      var $st$5$0=(($52)|0);
      HEAP32[(($st$5$0)>>2)]=$49$0;
      var $st$5$1=(($52+4)|0);
      HEAP32[(($st$5$1)>>2)]=$49$1;
      var $53=HEAP32[((((_cdf_bo)|0))>>2)];
      var $54=(($53)|0)==16909060;
      if ($54) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $56=$1;
      var $57=(($56+24)|0);
      var $58=HEAP16[(($57)>>1)];
      var $59=__cdf_tole2($58);
      var $60=(($59)&65535);
      var $67 = $60;__label__ = 14; break;
    case 13: 
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAPU16[(($63)>>1)];
      var $65=(($64)&65535);
      var $67 = $65;__label__ = 14; break;
    case 14: 
      var $67;
      var $68=(($67) & 65535);
      var $69=$1;
      var $70=(($69+24)|0);
      HEAP16[(($70)>>1)]=$68;
      var $71=HEAP32[((((_cdf_bo)|0))>>2)];
      var $72=(($71)|0)==16909060;
      if ($72) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $74=$1;
      var $75=(($74+26)|0);
      var $76=HEAP16[(($75)>>1)];
      var $77=__cdf_tole2($76);
      var $78=(($77)&65535);
      var $85 = $78;__label__ = 17; break;
    case 16: 
      var $80=$1;
      var $81=(($80+26)|0);
      var $82=HEAPU16[(($81)>>1)];
      var $83=(($82)&65535);
      var $85 = $83;__label__ = 17; break;
    case 17: 
      var $85;
      var $86=(($85) & 65535);
      var $87=$1;
      var $88=(($87+26)|0);
      HEAP16[(($88)>>1)]=$86;
      var $89=HEAP32[((((_cdf_bo)|0))>>2)];
      var $90=(($89)|0)==16909060;
      if ($90) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $92=$1;
      var $93=(($92+28)|0);
      var $94=HEAP16[(($93)>>1)];
      var $95=__cdf_tole2($94);
      var $96=(($95)&65535);
      var $103 = $96;__label__ = 20; break;
    case 19: 
      var $98=$1;
      var $99=(($98+28)|0);
      var $100=HEAPU16[(($99)>>1)];
      var $101=(($100)&65535);
      var $103 = $101;__label__ = 20; break;
    case 20: 
      var $103;
      var $104=(($103) & 65535);
      var $105=$1;
      var $106=(($105+28)|0);
      HEAP16[(($106)>>1)]=$104;
      var $107=HEAP32[((((_cdf_bo)|0))>>2)];
      var $108=(($107)|0)==16909060;
      if ($108) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $110=$1;
      var $111=(($110+30)|0);
      var $112=HEAP16[(($111)>>1)];
      var $113=__cdf_tole2($112);
      var $114=(($113)&65535);
      var $121 = $114;__label__ = 23; break;
    case 22: 
      var $116=$1;
      var $117=(($116+30)|0);
      var $118=HEAPU16[(($117)>>1)];
      var $119=(($118)&65535);
      var $121 = $119;__label__ = 23; break;
    case 23: 
      var $121;
      var $122=(($121) & 65535);
      var $123=$1;
      var $124=(($123+30)|0);
      HEAP16[(($124)>>1)]=$122;
      var $125=HEAP32[((((_cdf_bo)|0))>>2)];
      var $126=(($125)|0)==16909060;
      if ($126) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $128=$1;
      var $129=(($128+32)|0);
      var $130=HEAP16[(($129)>>1)];
      var $131=__cdf_tole2($130);
      var $132=(($131)&65535);
      var $139 = $132;__label__ = 26; break;
    case 25: 
      var $134=$1;
      var $135=(($134+32)|0);
      var $136=HEAPU16[(($135)>>1)];
      var $137=(($136)&65535);
      var $139 = $137;__label__ = 26; break;
    case 26: 
      var $139;
      var $140=(($139) & 65535);
      var $141=$1;
      var $142=(($141+32)|0);
      HEAP16[(($142)>>1)]=$140;
      var $143=HEAP32[((((_cdf_bo)|0))>>2)];
      var $144=(($143)|0)==16909060;
      if ($144) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $146=$1;
      var $147=(($146+44)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=__cdf_tole4($148);
      var $155 = $149;__label__ = 29; break;
    case 28: 
      var $151=$1;
      var $152=(($151+44)|0);
      var $153=HEAP32[(($152)>>2)];
      var $155 = $153;__label__ = 29; break;
    case 29: 
      var $155;
      var $156=$1;
      var $157=(($156+44)|0);
      HEAP32[(($157)>>2)]=$155;
      var $158=HEAP32[((((_cdf_bo)|0))>>2)];
      var $159=(($158)|0)==16909060;
      if ($159) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $161=$1;
      var $162=(($161+48)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=__cdf_tole4($163);
      var $170 = $164;__label__ = 32; break;
    case 31: 
      var $166=$1;
      var $167=(($166+48)|0);
      var $168=HEAP32[(($167)>>2)];
      var $170 = $168;__label__ = 32; break;
    case 32: 
      var $170;
      var $171=$1;
      var $172=(($171+48)|0);
      HEAP32[(($172)>>2)]=$170;
      var $173=HEAP32[((((_cdf_bo)|0))>>2)];
      var $174=(($173)|0)==16909060;
      if ($174) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $176=$1;
      var $177=(($176+56)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=__cdf_tole4($178);
      var $185 = $179;__label__ = 35; break;
    case 34: 
      var $181=$1;
      var $182=(($181+56)|0);
      var $183=HEAP32[(($182)>>2)];
      var $185 = $183;__label__ = 35; break;
    case 35: 
      var $185;
      var $186=$1;
      var $187=(($186+56)|0);
      HEAP32[(($187)>>2)]=$185;
      var $188=HEAP32[((((_cdf_bo)|0))>>2)];
      var $189=(($188)|0)==16909060;
      if ($189) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $191=$1;
      var $192=(($191+60)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=__cdf_tole4($193);
      var $200 = $194;__label__ = 38; break;
    case 37: 
      var $196=$1;
      var $197=(($196+60)|0);
      var $198=HEAP32[(($197)>>2)];
      var $200 = $198;__label__ = 38; break;
    case 38: 
      var $200;
      var $201=$1;
      var $202=(($201+60)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=HEAP32[((((_cdf_bo)|0))>>2)];
      var $204=(($203)|0)==16909060;
      if ($204) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $206=$1;
      var $207=(($206+64)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=__cdf_tole4($208);
      var $215 = $209;__label__ = 41; break;
    case 40: 
      var $211=$1;
      var $212=(($211+64)|0);
      var $213=HEAP32[(($212)>>2)];
      var $215 = $213;__label__ = 41; break;
    case 41: 
      var $215;
      var $216=$1;
      var $217=(($216+64)|0);
      HEAP32[(($217)>>2)]=$215;
      var $218=HEAP32[((((_cdf_bo)|0))>>2)];
      var $219=(($218)|0)==16909060;
      if ($219) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $221=$1;
      var $222=(($221+68)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=__cdf_tole4($223);
      var $230 = $224;__label__ = 44; break;
    case 43: 
      var $226=$1;
      var $227=(($226+68)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;__label__ = 44; break;
    case 44: 
      var $230;
      var $231=$1;
      var $232=(($231+68)|0);
      HEAP32[(($232)>>2)]=$230;
      var $233=HEAP32[((((_cdf_bo)|0))>>2)];
      var $234=(($233)|0)==16909060;
      if ($234) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $236=$1;
      var $237=(($236+72)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=__cdf_tole4($238);
      var $245 = $239;__label__ = 47; break;
    case 46: 
      var $241=$1;
      var $242=(($241+72)|0);
      var $243=HEAP32[(($242)>>2)];
      var $245 = $243;__label__ = 47; break;
    case 47: 
      var $245;
      var $246=$1;
      var $247=(($246+72)|0);
      HEAP32[(($247)>>2)]=$245;
      $i=0;
      __label__ = 48; break;
    case 48: 
      var $249=$i;
      var $250=(($249)>>>0) < 109;
      if ($250) { __label__ = 49; break; } else { __label__ = 54; break; }
    case 49: 
      var $252=HEAP32[((((_cdf_bo)|0))>>2)];
      var $253=(($252)|0)==16909060;
      if ($253) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $255=$i;
      var $256=$1;
      var $257=(($256+76)|0);
      var $258=(($257+($255<<2))|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=__cdf_tole4($259);
      var $268 = $260;__label__ = 52; break;
    case 51: 
      var $262=$i;
      var $263=$1;
      var $264=(($263+76)|0);
      var $265=(($264+($262<<2))|0);
      var $266=HEAP32[(($265)>>2)];
      var $268 = $266;__label__ = 52; break;
    case 52: 
      var $268;
      var $269=$i;
      var $270=$1;
      var $271=(($270+76)|0);
      var $272=(($271+($269<<2))|0);
      HEAP32[(($272)>>2)]=$268;
      __label__ = 53; break;
    case 53: 
      var $274=$i;
      var $275=((($274)+(1))|0);
      $i=$275;
      __label__ = 48; break;
    case 54: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_swap_header["X"]=1;

function _cdf_unpack_header($h, $buf) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $len;
      $1=$h;
      $2=$buf;
      $len=0;
      var $3=$1;
      var $4=(($3)|0);
      var $5=$4;
      var $6=$len;
      var $7=$2;
      var $8=(($7+$6)|0);
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($5)]=HEAP8[($8)];HEAP8[(($5)+(1))]=HEAP8[(($8)+(1))];HEAP8[(($5)+(2))]=HEAP8[(($8)+(2))];HEAP8[(($5)+(3))]=HEAP8[(($8)+(3))];HEAP8[(($5)+(4))]=HEAP8[(($8)+(4))];HEAP8[(($5)+(5))]=HEAP8[(($8)+(5))];HEAP8[(($5)+(6))]=HEAP8[(($8)+(6))];HEAP8[(($5)+(7))]=HEAP8[(($8)+(7))];
      var $9=$len;
      var $10=((($9)+(8))|0);
      $len=$10;
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=(($12)|0);
      var $14=$13;
      var $15=$len;
      var $16=$2;
      var $17=(($16+$15)|0);
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $17, $$dest = $14, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $18=$len;
      var $19=((($18)+(16))|0);
      $len=$19;
      var $20=$1;
      var $21=(($20+24)|0);
      var $22=$21;
      var $23=$len;
      var $24=$2;
      var $25=(($24+$23)|0);
      assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($22)]=HEAP8[($25)];HEAP8[(($22)+(1))]=HEAP8[(($25)+(1))];
      var $26=$len;
      var $27=((($26)+(2))|0);
      $len=$27;
      var $28=$1;
      var $29=(($28+26)|0);
      var $30=$29;
      var $31=$len;
      var $32=$2;
      var $33=(($32+$31)|0);
      assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($30)]=HEAP8[($33)];HEAP8[(($30)+(1))]=HEAP8[(($33)+(1))];
      var $34=$len;
      var $35=((($34)+(2))|0);
      $len=$35;
      var $36=$1;
      var $37=(($36+28)|0);
      var $38=$37;
      var $39=$len;
      var $40=$2;
      var $41=(($40+$39)|0);
      assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($38)]=HEAP8[($41)];HEAP8[(($38)+(1))]=HEAP8[(($41)+(1))];
      var $42=$len;
      var $43=((($42)+(2))|0);
      $len=$43;
      var $44=$1;
      var $45=(($44+30)|0);
      var $46=$45;
      var $47=$len;
      var $48=$2;
      var $49=(($48+$47)|0);
      assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($46)]=HEAP8[($49)];HEAP8[(($46)+(1))]=HEAP8[(($49)+(1))];
      var $50=$len;
      var $51=((($50)+(2))|0);
      $len=$51;
      var $52=$1;
      var $53=(($52+32)|0);
      var $54=$53;
      var $55=$len;
      var $56=$2;
      var $57=(($56+$55)|0);
      assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($54)]=HEAP8[($57)];HEAP8[(($54)+(1))]=HEAP8[(($57)+(1))];
      var $58=$len;
      var $59=((($58)+(2))|0);
      $len=$59;
      var $60=$1;
      var $61=(($60+34)|0);
      var $62=(($61)|0);
      var $63=$len;
      var $64=$2;
      var $65=(($64+$63)|0);
      assert(10 % 1 === 0, 'memcpy given ' + 10 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $65, $$dest = $62, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $66=$len;
      var $67=((($66)+(10))|0);
      $len=$67;
      var $68=$1;
      var $69=(($68+44)|0);
      var $70=$69;
      var $71=$len;
      var $72=$2;
      var $73=(($72+$71)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($70)]=HEAP8[($73)];HEAP8[(($70)+(1))]=HEAP8[(($73)+(1))];HEAP8[(($70)+(2))]=HEAP8[(($73)+(2))];HEAP8[(($70)+(3))]=HEAP8[(($73)+(3))];
      var $74=$len;
      var $75=((($74)+(4))|0);
      $len=$75;
      var $76=$1;
      var $77=(($76+48)|0);
      var $78=$77;
      var $79=$len;
      var $80=$2;
      var $81=(($80+$79)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($78)]=HEAP8[($81)];HEAP8[(($78)+(1))]=HEAP8[(($81)+(1))];HEAP8[(($78)+(2))]=HEAP8[(($81)+(2))];HEAP8[(($78)+(3))]=HEAP8[(($81)+(3))];
      var $82=$len;
      var $83=((($82)+(4))|0);
      $len=$83;
      var $84=$1;
      var $85=(($84+52)|0);
      var $86=(($85)|0);
      var $87=$len;
      var $88=$2;
      var $89=(($88+$87)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($86)]=HEAP8[($89)];HEAP8[(($86)+(1))]=HEAP8[(($89)+(1))];HEAP8[(($86)+(2))]=HEAP8[(($89)+(2))];HEAP8[(($86)+(3))]=HEAP8[(($89)+(3))];
      var $90=$len;
      var $91=((($90)+(4))|0);
      $len=$91;
      var $92=$1;
      var $93=(($92+56)|0);
      var $94=$93;
      var $95=$len;
      var $96=$2;
      var $97=(($96+$95)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($94)]=HEAP8[($97)];HEAP8[(($94)+(1))]=HEAP8[(($97)+(1))];HEAP8[(($94)+(2))]=HEAP8[(($97)+(2))];HEAP8[(($94)+(3))]=HEAP8[(($97)+(3))];
      var $98=$len;
      var $99=((($98)+(4))|0);
      $len=$99;
      var $100=$1;
      var $101=(($100+60)|0);
      var $102=$101;
      var $103=$len;
      var $104=$2;
      var $105=(($104+$103)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($102)]=HEAP8[($105)];HEAP8[(($102)+(1))]=HEAP8[(($105)+(1))];HEAP8[(($102)+(2))]=HEAP8[(($105)+(2))];HEAP8[(($102)+(3))]=HEAP8[(($105)+(3))];
      var $106=$len;
      var $107=((($106)+(4))|0);
      $len=$107;
      var $108=$1;
      var $109=(($108+64)|0);
      var $110=$109;
      var $111=$len;
      var $112=$2;
      var $113=(($112+$111)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($110)]=HEAP8[($113)];HEAP8[(($110)+(1))]=HEAP8[(($113)+(1))];HEAP8[(($110)+(2))]=HEAP8[(($113)+(2))];HEAP8[(($110)+(3))]=HEAP8[(($113)+(3))];
      var $114=$len;
      var $115=((($114)+(4))|0);
      $len=$115;
      var $116=$1;
      var $117=(($116+68)|0);
      var $118=$117;
      var $119=$len;
      var $120=$2;
      var $121=(($120+$119)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($118)]=HEAP8[($121)];HEAP8[(($118)+(1))]=HEAP8[(($121)+(1))];HEAP8[(($118)+(2))]=HEAP8[(($121)+(2))];HEAP8[(($118)+(3))]=HEAP8[(($121)+(3))];
      var $122=$len;
      var $123=((($122)+(4))|0);
      $len=$123;
      var $124=$1;
      var $125=(($124+72)|0);
      var $126=$125;
      var $127=$len;
      var $128=$2;
      var $129=(($128+$127)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($126)]=HEAP8[($129)];HEAP8[(($126)+(1))]=HEAP8[(($129)+(1))];HEAP8[(($126)+(2))]=HEAP8[(($129)+(2))];HEAP8[(($126)+(3))]=HEAP8[(($129)+(3))];
      var $130=$len;
      var $131=((($130)+(4))|0);
      $len=$131;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $133=$i;
      var $134=(($133)>>>0) < 109;
      if ($134) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $136=$i;
      var $137=$1;
      var $138=(($137+76)|0);
      var $139=(($138+($136<<2))|0);
      var $140=$139;
      var $141=$len;
      var $142=$2;
      var $143=(($142+$141)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($140)]=HEAP8[($143)];HEAP8[(($140)+(1))]=HEAP8[(($143)+(1))];HEAP8[(($140)+(2))]=HEAP8[(($143)+(2))];HEAP8[(($140)+(3))]=HEAP8[(($143)+(3))];
      var $144=$len;
      var $145=((($144)+(4))|0);
      $len=$145;
      __label__ = 5; break;
    case 5: 
      var $147=$i;
      var $148=((($147)+(1))|0);
      $i=$148;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_unpack_header["X"]=1;

function _cdf_swap_dir($d) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$d;
      var $2=HEAP32[((((_cdf_bo)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5+64)|0);
      var $7=HEAP16[(($6)>>1)];
      var $8=__cdf_tole2($7);
      var $9=(($8)&65535);
      var $16 = $9;__label__ = 5; break;
    case 4: 
      var $11=$1;
      var $12=(($11+64)|0);
      var $13=HEAPU16[(($12)>>1)];
      var $14=(($13)&65535);
      var $16 = $14;__label__ = 5; break;
    case 5: 
      var $16;
      var $17=(($16) & 65535);
      var $18=$1;
      var $19=(($18+64)|0);
      HEAP16[(($19)>>1)]=$17;
      var $20=HEAP32[((((_cdf_bo)|0))>>2)];
      var $21=(($20)|0)==16909060;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$1;
      var $24=(($23+68)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=__cdf_tole4($25);
      var $32 = $26;__label__ = 8; break;
    case 7: 
      var $28=$1;
      var $29=(($28+68)|0);
      var $30=HEAP32[(($29)>>2)];
      var $32 = $30;__label__ = 8; break;
    case 8: 
      var $32;
      var $33=$1;
      var $34=(($33+68)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=HEAP32[((((_cdf_bo)|0))>>2)];
      var $36=(($35)|0)==16909060;
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $38=$1;
      var $39=(($38+72)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=__cdf_tole4($40);
      var $47 = $41;__label__ = 11; break;
    case 10: 
      var $43=$1;
      var $44=(($43+72)|0);
      var $45=HEAP32[(($44)>>2)];
      var $47 = $45;__label__ = 11; break;
    case 11: 
      var $47;
      var $48=$1;
      var $49=(($48+72)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=HEAP32[((((_cdf_bo)|0))>>2)];
      var $51=(($50)|0)==16909060;
      if ($51) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $53=$1;
      var $54=(($53+76)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=__cdf_tole4($55);
      var $62 = $56;__label__ = 14; break;
    case 13: 
      var $58=$1;
      var $59=(($58+76)|0);
      var $60=HEAP32[(($59)>>2)];
      var $62 = $60;__label__ = 14; break;
    case 14: 
      var $62;
      var $63=$1;
      var $64=(($63+76)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=HEAP32[((((_cdf_bo)|0))>>2)];
      var $66=(($65)|0)==16909060;
      if ($66) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $68=$1;
      var $69=(($68+80)|0);
      var $70=(($69)|0);
      var $st$3$0=(($70)|0);
      var $71$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($70+4)|0);
      var $71$1=HEAP32[(($st$3$1)>>2)];
      var $72=__cdf_tole8($71$0, $71$1);
      var $72$0=$72[0];
      var $72$1=$72[1];
      var $79$1 = $72$1;var $79$0 = $72$0;__label__ = 17; break;
    case 16: 
      var $74=$1;
      var $75=(($74+80)|0);
      var $76=(($75)|0);
      var $st$3$0=(($76)|0);
      var $77$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($76+4)|0);
      var $77$1=HEAP32[(($st$3$1)>>2)];
      var $79$1 = $77$1;var $79$0 = $77$0;__label__ = 17; break;
    case 17: 
      var $79$0;
      var $79$1;
      var $80=$1;
      var $81=(($80+80)|0);
      var $82=(($81)|0);
      var $st$5$0=(($82)|0);
      HEAP32[(($st$5$0)>>2)]=$79$0;
      var $st$5$1=(($82+4)|0);
      HEAP32[(($st$5$1)>>2)]=$79$1;
      var $83=HEAP32[((((_cdf_bo)|0))>>2)];
      var $84=(($83)|0)==16909060;
      if ($84) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $86=$1;
      var $87=(($86+80)|0);
      var $88=(($87+8)|0);
      var $st$3$0=(($88)|0);
      var $89$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($88+4)|0);
      var $89$1=HEAP32[(($st$3$1)>>2)];
      var $90=__cdf_tole8($89$0, $89$1);
      var $90$0=$90[0];
      var $90$1=$90[1];
      var $97$1 = $90$1;var $97$0 = $90$0;__label__ = 20; break;
    case 19: 
      var $92=$1;
      var $93=(($92+80)|0);
      var $94=(($93+8)|0);
      var $st$3$0=(($94)|0);
      var $95$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($94+4)|0);
      var $95$1=HEAP32[(($st$3$1)>>2)];
      var $97$1 = $95$1;var $97$0 = $95$0;__label__ = 20; break;
    case 20: 
      var $97$0;
      var $97$1;
      var $98=$1;
      var $99=(($98+80)|0);
      var $100=(($99+8)|0);
      var $st$5$0=(($100)|0);
      HEAP32[(($st$5$0)>>2)]=$97$0;
      var $st$5$1=(($100+4)|0);
      HEAP32[(($st$5$1)>>2)]=$97$1;
      var $101=HEAP32[((((_cdf_bo)|0))>>2)];
      var $102=(($101)|0)==16909060;
      if ($102) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $104=$1;
      var $105=(($104+96)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=__cdf_tole4($106);
      var $113 = $107;__label__ = 23; break;
    case 22: 
      var $109=$1;
      var $110=(($109+96)|0);
      var $111=HEAP32[(($110)>>2)];
      var $113 = $111;__label__ = 23; break;
    case 23: 
      var $113;
      var $114=$1;
      var $115=(($114+96)|0);
      HEAP32[(($115)>>2)]=$113;
      var $116=HEAP32[((((_cdf_bo)|0))>>2)];
      var $117=(($116)|0)==16909060;
      if ($117) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $119=$1;
      var $120=(($119+100)|0);
      var $st$2$0=(($120)|0);
      var $121$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($120+4)|0);
      var $121$1=HEAP32[(($st$2$1)>>2)];
      var $122=__cdf_tole8($121$0, $121$1);
      var $122$0=$122[0];
      var $122$1=$122[1];
      var $128$1 = $122$1;var $128$0 = $122$0;__label__ = 26; break;
    case 25: 
      var $124=$1;
      var $125=(($124+100)|0);
      var $st$2$0=(($125)|0);
      var $126$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($125+4)|0);
      var $126$1=HEAP32[(($st$2$1)>>2)];
      var $128$1 = $126$1;var $128$0 = $126$0;__label__ = 26; break;
    case 26: 
      var $128$0;
      var $128$1;
      var $129=$1;
      var $130=(($129+100)|0);
      var $st$4$0=(($130)|0);
      HEAP32[(($st$4$0)>>2)]=$128$0;
      var $st$4$1=(($130+4)|0);
      HEAP32[(($st$4$1)>>2)]=$128$1;
      var $131=HEAP32[((((_cdf_bo)|0))>>2)];
      var $132=(($131)|0)==16909060;
      if ($132) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $134=$1;
      var $135=(($134+108)|0);
      var $st$2$0=(($135)|0);
      var $136$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($135+4)|0);
      var $136$1=HEAP32[(($st$2$1)>>2)];
      var $137=__cdf_tole8($136$0, $136$1);
      var $137$0=$137[0];
      var $137$1=$137[1];
      var $143$1 = $137$1;var $143$0 = $137$0;__label__ = 29; break;
    case 28: 
      var $139=$1;
      var $140=(($139+108)|0);
      var $st$2$0=(($140)|0);
      var $141$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($140+4)|0);
      var $141$1=HEAP32[(($st$2$1)>>2)];
      var $143$1 = $141$1;var $143$0 = $141$0;__label__ = 29; break;
    case 29: 
      var $143$0;
      var $143$1;
      var $144=$1;
      var $145=(($144+108)|0);
      var $st$4$0=(($145)|0);
      HEAP32[(($st$4$0)>>2)]=$143$0;
      var $st$4$1=(($145+4)|0);
      HEAP32[(($st$4$1)>>2)]=$143$1;
      var $146=HEAP32[((((_cdf_bo)|0))>>2)];
      var $147=(($146)|0)==16909060;
      if ($147) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $149=$1;
      var $150=(($149+116)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=__cdf_tole4($151);
      var $158 = $152;__label__ = 32; break;
    case 31: 
      var $154=$1;
      var $155=(($154+116)|0);
      var $156=HEAP32[(($155)>>2)];
      var $158 = $156;__label__ = 32; break;
    case 32: 
      var $158;
      var $159=$1;
      var $160=(($159+116)|0);
      HEAP32[(($160)>>2)]=$158;
      var $161=HEAP32[((((_cdf_bo)|0))>>2)];
      var $162=(($161)|0)==16909060;
      if ($162) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $164=$1;
      var $165=(($164+120)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=__cdf_tole4($166);
      var $173 = $167;__label__ = 35; break;
    case 34: 
      var $169=$1;
      var $170=(($169+120)|0);
      var $171=HEAP32[(($170)>>2)];
      var $173 = $171;__label__ = 35; break;
    case 35: 
      var $173;
      var $174=$1;
      var $175=(($174+120)|0);
      HEAP32[(($175)>>2)]=$173;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_swap_dir["X"]=1;

function _cdf_swap_class($d) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$d;
      var $2=HEAP32[((((_cdf_bo)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=__cdf_tole4($7);
      var $14 = $8;__label__ = 5; break;
    case 4: 
      var $10=$1;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $14 = $12;__label__ = 5; break;
    case 5: 
      var $14;
      var $15=$1;
      var $16=(($15)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=HEAP32[((((_cdf_bo)|0))>>2)];
      var $18=(($17)|0)==16909060;
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=HEAP16[(($22)>>1)];
      var $24=__cdf_tole2($23);
      var $25=(($24)&65535);
      var $33 = $25;__label__ = 8; break;
    case 7: 
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=(($28)|0);
      var $30=HEAPU16[(($29)>>1)];
      var $31=(($30)&65535);
      var $33 = $31;__label__ = 8; break;
    case 8: 
      var $33;
      var $34=(($33) & 65535);
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36)|0);
      HEAP16[(($37)>>1)]=$34;
      var $38=HEAP32[((((_cdf_bo)|0))>>2)];
      var $39=(($38)|0)==16909060;
      if ($39) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+2)|0);
      var $44=HEAP16[(($43)>>1)];
      var $45=__cdf_tole2($44);
      var $46=(($45)&65535);
      var $54 = $46;__label__ = 11; break;
    case 10: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+2)|0);
      var $51=HEAPU16[(($50)>>1)];
      var $52=(($51)&65535);
      var $54 = $52;__label__ = 11; break;
    case 11: 
      var $54;
      var $55=(($54) & 65535);
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+2)|0);
      HEAP16[(($58)>>1)]=$55;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_swap_class["X"]=1;

function _cdf_unpack_dir($d, $buf) {
  ;
  var __label__;

  var $1;
  var $2;
  var $len;
  $1=$d;
  $2=$buf;
  $len=0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=(($4)|0);
  var $6=$5;
  var $7=$len;
  var $8=$2;
  var $9=(($8+$7)|0);
  assert(64 % 1 === 0, 'memcpy given ' + 64 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($6, $9, 64, 1);
  var $10=$len;
  var $11=((($10)+(64))|0);
  $len=$11;
  var $12=$1;
  var $13=(($12+64)|0);
  var $14=$13;
  var $15=$len;
  var $16=$2;
  var $17=(($16+$15)|0);
  assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($14)]=HEAP8[($17)];HEAP8[(($14)+(1))]=HEAP8[(($17)+(1))];
  var $18=$len;
  var $19=((($18)+(2))|0);
  $len=$19;
  var $20=$1;
  var $21=(($20+66)|0);
  var $22=$len;
  var $23=$2;
  var $24=(($23+$22)|0);
  assert(1 % 1 === 0, 'memcpy given ' + 1 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($21)]=HEAP8[($24)];
  var $25=$len;
  var $26=((($25)+(1))|0);
  $len=$26;
  var $27=$1;
  var $28=(($27+67)|0);
  var $29=$len;
  var $30=$2;
  var $31=(($30+$29)|0);
  assert(1 % 1 === 0, 'memcpy given ' + 1 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($28)]=HEAP8[($31)];
  var $32=$len;
  var $33=((($32)+(1))|0);
  $len=$33;
  var $34=$1;
  var $35=(($34+68)|0);
  var $36=$35;
  var $37=$len;
  var $38=$2;
  var $39=(($38+$37)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($36)]=HEAP8[($39)];HEAP8[(($36)+(1))]=HEAP8[(($39)+(1))];HEAP8[(($36)+(2))]=HEAP8[(($39)+(2))];HEAP8[(($36)+(3))]=HEAP8[(($39)+(3))];
  var $40=$len;
  var $41=((($40)+(4))|0);
  $len=$41;
  var $42=$1;
  var $43=(($42+72)|0);
  var $44=$43;
  var $45=$len;
  var $46=$2;
  var $47=(($46+$45)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($44)]=HEAP8[($47)];HEAP8[(($44)+(1))]=HEAP8[(($47)+(1))];HEAP8[(($44)+(2))]=HEAP8[(($47)+(2))];HEAP8[(($44)+(3))]=HEAP8[(($47)+(3))];
  var $48=$len;
  var $49=((($48)+(4))|0);
  $len=$49;
  var $50=$1;
  var $51=(($50+76)|0);
  var $52=$51;
  var $53=$len;
  var $54=$2;
  var $55=(($54+$53)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($52)]=HEAP8[($55)];HEAP8[(($52)+(1))]=HEAP8[(($55)+(1))];HEAP8[(($52)+(2))]=HEAP8[(($55)+(2))];HEAP8[(($52)+(3))]=HEAP8[(($55)+(3))];
  var $56=$len;
  var $57=((($56)+(4))|0);
  $len=$57;
  var $58=$1;
  var $59=(($58+80)|0);
  var $60=(($59)|0);
  var $61=$60;
  var $62=$len;
  var $63=$2;
  var $64=(($63+$62)|0);
  assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $64, $$dest = $61, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src]
  };
  var $65=$len;
  var $66=((($65)+(16))|0);
  $len=$66;
  var $67=$1;
  var $68=(($67+96)|0);
  var $69=$68;
  var $70=$len;
  var $71=$2;
  var $72=(($71+$70)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($69)]=HEAP8[($72)];HEAP8[(($69)+(1))]=HEAP8[(($72)+(1))];HEAP8[(($69)+(2))]=HEAP8[(($72)+(2))];HEAP8[(($69)+(3))]=HEAP8[(($72)+(3))];
  var $73=$len;
  var $74=((($73)+(4))|0);
  $len=$74;
  var $75=$1;
  var $76=(($75+100)|0);
  var $77=$76;
  var $78=$len;
  var $79=$2;
  var $80=(($79+$78)|0);
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($77)]=HEAP8[($80)];HEAP8[(($77)+(1))]=HEAP8[(($80)+(1))];HEAP8[(($77)+(2))]=HEAP8[(($80)+(2))];HEAP8[(($77)+(3))]=HEAP8[(($80)+(3))];HEAP8[(($77)+(4))]=HEAP8[(($80)+(4))];HEAP8[(($77)+(5))]=HEAP8[(($80)+(5))];HEAP8[(($77)+(6))]=HEAP8[(($80)+(6))];HEAP8[(($77)+(7))]=HEAP8[(($80)+(7))];
  var $81=$len;
  var $82=((($81)+(8))|0);
  $len=$82;
  var $83=$1;
  var $84=(($83+108)|0);
  var $85=$84;
  var $86=$len;
  var $87=$2;
  var $88=(($87+$86)|0);
  assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($85)]=HEAP8[($88)];HEAP8[(($85)+(1))]=HEAP8[(($88)+(1))];HEAP8[(($85)+(2))]=HEAP8[(($88)+(2))];HEAP8[(($85)+(3))]=HEAP8[(($88)+(3))];HEAP8[(($85)+(4))]=HEAP8[(($88)+(4))];HEAP8[(($85)+(5))]=HEAP8[(($88)+(5))];HEAP8[(($85)+(6))]=HEAP8[(($88)+(6))];HEAP8[(($85)+(7))]=HEAP8[(($88)+(7))];
  var $89=$len;
  var $90=((($89)+(8))|0);
  $len=$90;
  var $91=$1;
  var $92=(($91+116)|0);
  var $93=$92;
  var $94=$len;
  var $95=$2;
  var $96=(($95+$94)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($93)]=HEAP8[($96)];HEAP8[(($93)+(1))]=HEAP8[(($96)+(1))];HEAP8[(($93)+(2))]=HEAP8[(($96)+(2))];HEAP8[(($93)+(3))]=HEAP8[(($96)+(3))];
  var $97=$len;
  var $98=((($97)+(4))|0);
  $len=$98;
  var $99=$1;
  var $100=(($99+120)|0);
  var $101=$100;
  var $102=$len;
  var $103=$2;
  var $104=(($103+$102)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($101)]=HEAP8[($104)];HEAP8[(($101)+(1))]=HEAP8[(($104)+(1))];HEAP8[(($101)+(2))]=HEAP8[(($104)+(2))];HEAP8[(($101)+(3))]=HEAP8[(($104)+(3))];
  var $105=$len;
  var $106=((($105)+(4))|0);
  $len=$106;
  var $107=$1;
  var $108=(($107+124)|0);
  var $109=$108;
  var $110=$len;
  var $111=$2;
  var $112=(($111+$110)|0);
  assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($109)]=HEAP8[($112)];HEAP8[(($109)+(1))]=HEAP8[(($112)+(1))];HEAP8[(($109)+(2))]=HEAP8[(($112)+(2))];HEAP8[(($109)+(3))]=HEAP8[(($112)+(3))];
  var $113=$len;
  var $114=((($113)+(4))|0);
  $len=$114;
  ;
  return;
}
_cdf_unpack_dir["X"]=1;

function _cdf_read_header($info, $h) {
  var __stackBase__  = STACKTOP; STACKTOP += 512; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $buf=__stackBase__;
      $2=$info;
      $3=$h;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[(((_cdf_bo)|0))]=HEAP8[(((STRING_TABLE.__str275)|0))];HEAP8[((((_cdf_bo)|0))+(1))]=HEAP8[((((STRING_TABLE.__str275)|0))+(1))];HEAP8[((((_cdf_bo)|0))+(2))]=HEAP8[((((STRING_TABLE.__str275)|0))+(2))];HEAP8[((((_cdf_bo)|0))+(3))]=HEAP8[((((STRING_TABLE.__str275)|0))+(3))];
      var $4=$2;
      var $5=(($buf)|0);
      var $6=_cdf_read($4, 0, $5, 512);
      var $7=(($6)|0)==-1;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 12; break;
    case 4: 
      var $10=$3;
      var $11=(($buf)|0);
      _cdf_unpack_header($10, $11);
      var $12=$3;
      _cdf_swap_header($12);
      var $13=$3;
      var $14=(($13)|0);
      var $st$7$0=(($14)|0);
      var $15$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($14+4)|0);
      var $15$1=HEAP32[(($st$7$1)>>2)];
      var $$emscripten$temp$0$0=-535703600;
      var $$emscripten$temp$0$1=-518344287;
      var $16=$15$0 != $$emscripten$temp$0$0 || $15$1 != $$emscripten$temp$0$1;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 11; break;
    case 6: 
      var $19=$3;
      var $20=(($19+30)|0);
      var $21=HEAPU16[(($20)>>1)];
      var $22=(($21)&65535);
      var $23=(($22)|0) > 20;
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 11; break;
    case 8: 
      var $26=$3;
      var $27=(($26+32)|0);
      var $28=HEAPU16[(($27)>>1)];
      var $29=(($28)&65535);
      var $30=(($29)|0) > 20;
      if ($30) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 11; break;
    case 10: 
      $1=0;
      __label__ = 12; break;
    case 11: 
      var $34=___errno();
      HEAP32[(($34)>>2)]=79;
      $1=-1;
      __label__ = 12; break;
    case 12: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_header["X"]=1;

function _cdf_read($info, $off, $buf, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $siz;
      $2=$info;
      $3=$off;
      $4=$buf;
      $5=$len;
      var $6=$3;
      var $7=$5;
      var $8=((($6)+($7))|0);
      $siz=$8;
      var $9=$3;
      var $10=$5;
      var $11=((($9)+($10))|0);
      var $12=$siz;
      var $13=(($11)|0)!=(($12)|0);
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $15=___errno();
      HEAP32[(($15)>>2)]=22;
      $1=-1;
      __label__ = 14; break;
    case 4: 
      var $17=$2;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAPU32[(($23)>>2)];
      var $25=$siz;
      var $26=(($24)>>>0) >= (($25)>>>0);
      if ($26) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $28=$4;
      var $29=$3;
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29)|0);
      var $34=$5;
      assert($34 % 1 === 0, 'memcpy given ' + $34 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($28, $33, $34, 1);
      var $35=$5;
      $1=$35;
      __label__ = 14; break;
    case 7: 
      var $37=$2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0)==-1;
      if ($40) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=-1;
      __label__ = 14; break;
    case 9: 
      var $43=$2;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$3;
      var $47=_lseek($45, $46, 0);
      var $48=(($47)|0)==-1;
      if ($48) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $1=-1;
      __label__ = 14; break;
    case 11: 
      var $51=$2;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$4;
      var $55=$5;
      var $56=_read($53, $54, $55);
      var $57=$5;
      var $58=(($56)|0)!=(($57)|0);
      if ($58) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=-1;
      __label__ = 14; break;
    case 13: 
      var $61=$5;
      $1=$61;
      __label__ = 14; break;
    case 14: 
      var $63=$1;
      ;
      return $63;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read["X"]=1;

function _cdf_read_sector($info, $buf, $offs, $len, $h, $id) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $ss;
  var $pos;
  $1=$info;
  $2=$buf;
  $3=$offs;
  $4=$len;
  $5=$h;
  $6=$id;
  var $7=$5;
  var $8=(($7+30)|0);
  var $9=HEAPU16[(($8)>>1)];
  var $10=(($9)&65535);
  var $11=1 << $10;
  $ss=$11;
  var $12=$5;
  var $13=(($12+30)|0);
  var $14=HEAPU16[(($13)>>1)];
  var $15=(($14)&65535);
  var $16=1 << $15;
  var $17=$6;
  var $18=$5;
  var $19=(($18+30)|0);
  var $20=HEAPU16[(($19)>>1)];
  var $21=(($20)&65535);
  var $22=1 << $21;
  var $23=((($17)*($22))|0);
  var $24=((($16)+($23))|0);
  $pos=$24;
  var $25=$1;
  var $26=$pos;
  var $27=$2;
  var $28=$3;
  var $29=(($27+$28)|0);
  var $30=$4;
  var $31=_cdf_read($25, $26, $29, $30);
  ;
  return $31;
}


function _cdf_read_short_sector($sst, $buf, $offs, $len, $h, $id) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ss;
      var $pos;
      $2=$sst;
      $3=$buf;
      $4=$offs;
      $5=$len;
      $6=$h;
      $7=$id;
      var $8=$6;
      var $9=(($8+32)|0);
      var $10=HEAPU16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=1 << $11;
      $ss=$12;
      var $13=$7;
      var $14=$6;
      var $15=(($14+32)|0);
      var $16=HEAPU16[(($15)>>1)];
      var $17=(($16)&65535);
      var $18=1 << $17;
      var $19=((($13)*($18))|0);
      $pos=$19;
      var $20=$pos;
      var $21=$6;
      var $22=(($21+30)|0);
      var $23=HEAPU16[(($22)>>1)];
      var $24=(($23)&65535);
      var $25=1 << $24;
      var $26=$2;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($25)*($28))|0);
      var $30=(($20)>>>0) > (($29)>>>0);
      if ($30) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 5; break;
    case 4: 
      var $33=$3;
      var $34=$4;
      var $35=(($33+$34)|0);
      var $36=$2;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$pos;
      var $40=(($38+$39)|0);
      var $41=$5;
      assert($41 % 1 === 0, 'memcpy given ' + $41 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($35, $40, $41, 1);
      var $42=$5;
      $1=$42;
      __label__ = 5; break;
    case 5: 
      var $44=$1;
      ;
      return $44;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_short_sector["X"]=1;

function _cdf_read_sat($info, $h, $sat) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      var $k;
      var $ss;
      var $msa;
      var $mid;
      var $sec;
      var $nsatpersec;
      $2=$info;
      $3=$h;
      $4=$sat;
      var $5=$3;
      var $6=(($5+30)|0);
      var $7=HEAPU16[(($6)>>1)];
      var $8=(($7)&65535);
      var $9=1 << $8;
      $ss=$9;
      var $10=$ss;
      var $11=Math.floor(((($10)>>>0))/(4));
      var $12=((($11)-(1))|0);
      $nsatpersec=$12;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $14=$i;
      var $15=(($14)>>>0) < 109;
      if ($15) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $17=$i;
      var $18=$3;
      var $19=(($18+76)|0);
      var $20=(($19+($17<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==-1;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 8; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $26=$i;
      var $27=((($26)+(1))|0);
      $i=$27;
      __label__ = 3; break;
    case 8: 
      var $29=$nsatpersec;
      var $30=(($29)>>>0) > 0;
      if ($30) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $32=$3;
      var $33=(($32+72)|0);
      var $34=HEAPU32[(($33)>>2)];
      var $35=$ss;
      var $36=((($35<<2))|0);
      var $37=Math.floor((4294967295)/((($36)>>>0)));
      var $38=$nsatpersec;
      var $39=Math.floor(((($37)>>>0))/((($38)>>>0)));
      var $40=(($34)>>>0) > (($39)>>>0);
      if ($40) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $42=$i;
      var $43=$ss;
      var $44=((($43<<2))|0);
      var $45=Math.floor((4294967295)/((($44)>>>0)));
      var $46=(($42)>>>0) > (($45)>>>0);
      if ($46) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $48=___errno();
      HEAP32[(($48)>>2)]=79;
      $1=-1;
      __label__ = 54; break;
    case 12: 
      var $50=$3;
      var $51=(($50+72)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$nsatpersec;
      var $54=((($52)*($53))|0);
      var $55=$i;
      var $56=((($54)+($55))|0);
      var $57=$4;
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$56;
      var $59=$4;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$ss;
      var $63=_calloc($61, $62);
      var $64=$63;
      var $65=$4;
      var $66=(($65)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=(($64)|0)==0;
      if ($67) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $1=-1;
      __label__ = 54; break;
    case 14: 
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $71=$i;
      var $72=(($71)>>>0) < 109;
      if ($72) { __label__ = 16; break; } else { __label__ = 22; break; }
    case 16: 
      var $74=$i;
      var $75=$3;
      var $76=(($75+76)|0);
      var $77=(($76+($74<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|0) < 0;
      if ($79) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 22; break;
    case 18: 
      var $82=$2;
      var $83=$4;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$85;
      var $87=$ss;
      var $88=$i;
      var $89=((($87)*($88))|0);
      var $90=$ss;
      var $91=$3;
      var $92=$i;
      var $93=$3;
      var $94=(($93+76)|0);
      var $95=(($94+($92<<2))|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=_cdf_read_sector($82, $86, $89, $90, $91, $96);
      var $98=$ss;
      var $99=(($97)|0)!=(($98)|0);
      if ($99) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 53; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $103=$i;
      var $104=((($103)+(1))|0);
      $i=$104;
      __label__ = 15; break;
    case 22: 
      var $106=$ss;
      var $107=_calloc(1, $106);
      var $108=$107;
      $msa=$108;
      var $109=(($108)|0)==0;
      if ($109) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 53; break;
    case 24: 
      var $112=$3;
      var $113=(($112+68)|0);
      var $114=HEAP32[(($113)>>2)];
      $mid=$114;
      $j=0;
      __label__ = 25; break;
    case 25: 
      var $116=$j;
      var $117=$3;
      var $118=(($117+72)|0);
      var $119=HEAPU32[(($118)>>2)];
      var $120=(($116)>>>0) < (($119)>>>0);
      if ($120) { __label__ = 26; break; } else { __label__ = 50; break; }
    case 26: 
      var $122=$mid;
      var $123=(($122)|0) < 0;
      if ($123) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      __label__ = 51; break;
    case 28: 
      var $126=$j;
      var $127=(($126)>>>0) >= 10000;
      if ($127) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $129=___errno();
      HEAP32[(($129)>>2)]=79;
      __label__ = 52; break;
    case 30: 
      var $131=$2;
      var $132=$msa;
      var $133=$132;
      var $134=$ss;
      var $135=$3;
      var $136=$mid;
      var $137=_cdf_read_sector($131, $133, 0, $134, $135, $136);
      var $138=$ss;
      var $139=(($137)|0)!=(($138)|0);
      if ($139) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 52; break;
    case 32: 
      $k=0;
      __label__ = 33; break;
    case 33: 
      var $143=$k;
      var $144=$nsatpersec;
      var $145=(($143)>>>0) < (($144)>>>0);
      if ($145) { __label__ = 34; break; } else { __label__ = 45; break; }
    case 34: 
      var $147=HEAP32[((((_cdf_bo)|0))>>2)];
      var $148=(($147)|0)==16909060;
      if ($148) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $150=$k;
      var $151=$msa;
      var $152=(($151+($150<<2))|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=__cdf_tole4($153);
      var $161 = $154;__label__ = 37; break;
    case 36: 
      var $156=$k;
      var $157=$msa;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $161 = $159;__label__ = 37; break;
    case 37: 
      var $161;
      $sec=$161;
      var $162=$sec;
      var $163=(($162)|0) < 0;
      if ($163) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      __label__ = 51; break;
    case 39: 
      var $166=$i;
      var $167=$4;
      var $168=(($167+4)|0);
      var $169=HEAPU32[(($168)>>2)];
      var $170=(($166)>>>0) >= (($169)>>>0);
      if ($170) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $172=___errno();
      HEAP32[(($172)>>2)]=79;
      __label__ = 52; break;
    case 41: 
      var $174=$2;
      var $175=$4;
      var $176=(($175)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$ss;
      var $180=$i;
      var $181=((($179)*($180))|0);
      var $182=$ss;
      var $183=$3;
      var $184=$sec;
      var $185=_cdf_read_sector($174, $178, $181, $182, $183, $184);
      var $186=$ss;
      var $187=(($185)|0)!=(($186)|0);
      if ($187) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      __label__ = 52; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $191=$k;
      var $192=((($191)+(1))|0);
      $k=$192;
      var $193=$i;
      var $194=((($193)+(1))|0);
      $i=$194;
      __label__ = 33; break;
    case 45: 
      var $196=HEAP32[((((_cdf_bo)|0))>>2)];
      var $197=(($196)|0)==16909060;
      if ($197) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $199=$nsatpersec;
      var $200=$msa;
      var $201=(($200+($199<<2))|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=__cdf_tole4($202);
      var $210 = $203;__label__ = 48; break;
    case 47: 
      var $205=$nsatpersec;
      var $206=$msa;
      var $207=(($206+($205<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $210 = $208;__label__ = 48; break;
    case 48: 
      var $210;
      $mid=$210;
      __label__ = 49; break;
    case 49: 
      var $212=$j;
      var $213=((($212)+(1))|0);
      $j=$213;
      __label__ = 25; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $216=$i;
      var $217=$4;
      var $218=(($217+4)|0);
      HEAP32[(($218)>>2)]=$216;
      var $219=$msa;
      var $220=$219;
      _free($220);
      $1=0;
      __label__ = 54; break;
    case 52: 
      var $222=$msa;
      var $223=$222;
      _free($223);
      __label__ = 53; break;
    case 53: 
      var $225=$4;
      var $226=(($225)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$227;
      _free($228);
      $1=-1;
      __label__ = 54; break;
    case 54: 
      var $230=$1;
      ;
      return $230;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_sat["X"]=1;

function _cdf_count_chain($sat, $sid, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      var $maxsector;
      $2=$sat;
      $3=$sid;
      $4=$size;
      var $5=$2;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$4;
      var $9=((($7)*($8))|0);
      $maxsector=$9;
      $i=0;
      $j=0;
      __label__ = 3; break;
    case 3: 
      var $11=$3;
      var $12=(($11)|0) >= 0;
      if ($12) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: 
      var $14=$j;
      var $15=(($14)>>>0) >= 10000;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=___errno();
      HEAP32[(($17)>>2)]=79;
      $1=-1;
      __label__ = 14; break;
    case 6: 
      var $19=$3;
      var $20=$maxsector;
      var $21=(($19)|0) > (($20)|0);
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=___errno();
      HEAP32[(($23)>>2)]=79;
      $1=-1;
      __label__ = 14; break;
    case 8: 
      var $25=HEAP32[((((_cdf_bo)|0))>>2)];
      var $26=(($25)|0)==16909060;
      if ($26) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $28=$3;
      var $29=$2;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($28<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=__cdf_tole4($33);
      var $43 = $34;__label__ = 11; break;
    case 10: 
      var $36=$3;
      var $37=$2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($36<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $43 = $41;__label__ = 11; break;
    case 11: 
      var $43;
      $3=$43;
      __label__ = 12; break;
    case 12: 
      var $45=$i;
      var $46=((($45)+(1))|0);
      $i=$46;
      var $47=$j;
      var $48=((($47)+(1))|0);
      $j=$48;
      __label__ = 3; break;
    case 13: 
      var $50=$i;
      $1=$50;
      __label__ = 14; break;
    case 14: 
      var $52=$1;
      ;
      return $52;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_count_chain["X"]=1;

function _cdf_read_long_sector_chain($info, $h, $sat, $sid, $len, $scn) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ss;
      var $i;
      var $j;
      var $nr;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$sid;
      $6=$len;
      $7=$scn;
      var $8=$3;
      var $9=(($8+30)|0);
      var $10=HEAPU16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=1 << $11;
      $ss=$12;
      var $13=$4;
      var $14=$5;
      var $15=$ss;
      var $16=_cdf_count_chain($13, $14, $15);
      var $17=$7;
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=$16;
      var $19=$6;
      var $20=$7;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=$7;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==-1;
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 24; break;
    case 4: 
      var $28=$7;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$ss;
      var $32=_calloc($30, $31);
      var $33=$7;
      var $34=(($33)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$7;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==0;
      if ($38) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=-1;
      __label__ = 24; break;
    case 6: 
      $i=0;
      $j=0;
      __label__ = 7; break;
    case 7: 
      var $42=$5;
      var $43=(($42)|0) >= 0;
      if ($43) { __label__ = 8; break; } else { __label__ = 22; break; }
    case 8: 
      var $45=$j;
      var $46=(($45)>>>0) >= 10000;
      if ($46) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $48=___errno();
      HEAP32[(($48)>>2)]=79;
      __label__ = 23; break;
    case 10: 
      var $50=$i;
      var $51=$7;
      var $52=(($51+4)|0);
      var $53=HEAPU32[(($52)>>2)];
      var $54=(($50)>>>0) >= (($53)>>>0);
      if ($54) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $56=___errno();
      HEAP32[(($56)>>2)]=79;
      __label__ = 23; break;
    case 12: 
      var $58=$2;
      var $59=$7;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$i;
      var $63=$ss;
      var $64=((($62)*($63))|0);
      var $65=$ss;
      var $66=$3;
      var $67=$5;
      var $68=_cdf_read_sector($58, $61, $64, $65, $66, $67);
      $nr=$68;
      var $69=$ss;
      var $70=(($68)|0)!=(($69)|0);
      if ($70) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $72=$i;
      var $73=$7;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-(1))|0);
      var $77=(($72)|0)==(($76)|0);
      if ($77) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $79=$nr;
      var $80=(($79)|0) > 0;
      if ($80) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $1=0;
      __label__ = 24; break;
    case 16: 
      __label__ = 23; break;
    case 17: 
      var $84=HEAP32[((((_cdf_bo)|0))>>2)];
      var $85=(($84)|0)==16909060;
      if ($85) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $87=$5;
      var $88=$4;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+($87<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=__cdf_tole4($92);
      var $102 = $93;__label__ = 20; break;
    case 19: 
      var $95=$5;
      var $96=$4;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+($95<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $102 = $100;__label__ = 20; break;
    case 20: 
      var $102;
      $5=$102;
      __label__ = 21; break;
    case 21: 
      var $104=$i;
      var $105=((($104)+(1))|0);
      $i=$105;
      var $106=$j;
      var $107=((($106)+(1))|0);
      $j=$107;
      __label__ = 7; break;
    case 22: 
      $1=0;
      __label__ = 24; break;
    case 23: 
      var $110=$7;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      _free($112);
      $1=-1;
      __label__ = 24; break;
    case 24: 
      var $114=$1;
      ;
      return $114;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_long_sector_chain["X"]=1;

function _cdf_read_short_sector_chain($h, $ssat, $sst, $sid, $len, $scn) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ss;
      var $i;
      var $j;
      $2=$h;
      $3=$ssat;
      $4=$sst;
      $5=$sid;
      $6=$len;
      $7=$scn;
      var $8=$2;
      var $9=(($8+32)|0);
      var $10=HEAPU16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=1 << $11;
      $ss=$12;
      var $13=$3;
      var $14=$5;
      var $15=$2;
      var $16=(($15+30)|0);
      var $17=HEAPU16[(($16)>>1)];
      var $18=(($17)&65535);
      var $19=1 << $18;
      var $20=_cdf_count_chain($13, $14, $19);
      var $21=$7;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=$6;
      var $24=$7;
      var $25=(($24+8)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$4;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==0;
      if ($29) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $31=$7;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)==-1;
      if ($34) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 22; break;
    case 5: 
      var $37=$7;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$ss;
      var $41=_calloc($39, $40);
      var $42=$7;
      var $43=(($42)|0);
      HEAP32[(($43)>>2)]=$41;
      var $44=$7;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0)==0;
      if ($47) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=-1;
      __label__ = 22; break;
    case 7: 
      $i=0;
      $j=0;
      __label__ = 8; break;
    case 8: 
      var $51=$5;
      var $52=(($51)|0) >= 0;
      if ($52) { __label__ = 9; break; } else { __label__ = 20; break; }
    case 9: 
      var $54=$j;
      var $55=(($54)>>>0) >= 10000;
      if ($55) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $57=___errno();
      HEAP32[(($57)>>2)]=79;
      __label__ = 21; break;
    case 11: 
      var $59=$i;
      var $60=$7;
      var $61=(($60+4)|0);
      var $62=HEAPU32[(($61)>>2)];
      var $63=(($59)>>>0) >= (($62)>>>0);
      if ($63) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $65=___errno();
      HEAP32[(($65)>>2)]=79;
      __label__ = 21; break;
    case 13: 
      var $67=$4;
      var $68=$7;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$i;
      var $72=$ss;
      var $73=((($71)*($72))|0);
      var $74=$ss;
      var $75=$2;
      var $76=$5;
      var $77=_cdf_read_short_sector($67, $70, $73, $74, $75, $76);
      var $78=$ss;
      var $79=(($77)|0)!=(($78)|0);
      if ($79) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 21; break;
    case 15: 
      var $82=HEAP32[((((_cdf_bo)|0))>>2)];
      var $83=(($82)|0)==16909060;
      if ($83) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $85=$5;
      var $86=$3;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($85<<2))|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=__cdf_tole4($90);
      var $100 = $91;__label__ = 18; break;
    case 17: 
      var $93=$5;
      var $94=$3;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+($93<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      var $100 = $98;__label__ = 18; break;
    case 18: 
      var $100;
      $5=$100;
      __label__ = 19; break;
    case 19: 
      var $102=$i;
      var $103=((($102)+(1))|0);
      $i=$103;
      var $104=$j;
      var $105=((($104)+(1))|0);
      $j=$105;
      __label__ = 8; break;
    case 20: 
      $1=0;
      __label__ = 22; break;
    case 21: 
      var $108=$7;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      _free($110);
      $1=-1;
      __label__ = 22; break;
    case 22: 
      var $112=$1;
      ;
      return $112;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_short_sector_chain["X"]=1;

function _cdf_read_sector_chain($info, $h, $sat, $ssat, $sst, $sid, $len, $scn) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$ssat;
      $6=$sst;
      $7=$sid;
      $8=$len;
      $9=$scn;
      var $10=$8;
      var $11=$3;
      var $12=(($11+56)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($10)>>>0) < (($13)>>>0);
      if ($14) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $16=$6;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $21=$3;
      var $22=$5;
      var $23=$6;
      var $24=$7;
      var $25=$8;
      var $26=$9;
      var $27=_cdf_read_short_sector_chain($21, $22, $23, $24, $25, $26);
      $1=$27;
      __label__ = 6; break;
    case 5: 
      var $29=$2;
      var $30=$3;
      var $31=$4;
      var $32=$7;
      var $33=$8;
      var $34=$9;
      var $35=_cdf_read_long_sector_chain($29, $30, $31, $32, $33, $34);
      $1=$35;
      __label__ = 6; break;
    case 6: 
      var $37=$1;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_read_dir($info, $h, $sat, $dir) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $j;
      var $ss;
      var $ns;
      var $nd;
      var $buf;
      var $sid;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$dir;
      var $6=$3;
      var $7=(($6+30)|0);
      var $8=HEAPU16[(($7)>>1)];
      var $9=(($8)&65535);
      var $10=1 << $9;
      $ss=$10;
      var $11=$3;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      $sid=$13;
      var $14=$4;
      var $15=$sid;
      var $16=$ss;
      var $17=_cdf_count_chain($14, $15, $16);
      $ns=$17;
      var $18=$ns;
      var $19=(($18)|0)==-1;
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 31; break;
    case 4: 
      var $22=$ss;
      var $23=Math.floor(((($22)>>>0))/(128));
      $nd=$23;
      var $24=$ns;
      var $25=$nd;
      var $26=((($24)*($25))|0);
      var $27=$5;
      var $28=(($27+4)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$5;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=_calloc($31, 128);
      var $33=$32;
      var $34=$5;
      var $35=(($34)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$5;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0)==0;
      if ($39) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=-1;
      __label__ = 31; break;
    case 6: 
      var $42=$ss;
      var $43=_malloc($42);
      $buf=$43;
      var $44=(($43)|0)==0;
      if ($44) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $46=$5;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      _free($49);
      $1=-1;
      __label__ = 31; break;
    case 8: 
      $i=0;
      $j=0;
      __label__ = 9; break;
    case 9: 
      var $52=$i;
      var $53=$ns;
      var $54=(($52)>>>0) < (($53)>>>0);
      if ($54) { __label__ = 10; break; } else { __label__ = 23; break; }
    case 10: 
      var $56=$j;
      var $57=(($56)>>>0) >= 10000;
      if ($57) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $59=___errno();
      HEAP32[(($59)>>2)]=79;
      __label__ = 30; break;
    case 12: 
      var $61=$2;
      var $62=$buf;
      var $63=$ss;
      var $64=$3;
      var $65=$sid;
      var $66=_cdf_read_sector($61, $62, 0, $63, $64, $65);
      var $67=$ss;
      var $68=(($66)|0)!=(($67)|0);
      if ($68) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 30; break;
    case 14: 
      $j=0;
      __label__ = 15; break;
    case 15: 
      var $72=$j;
      var $73=$nd;
      var $74=(($72)>>>0) < (($73)>>>0);
      if ($74) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $76=$i;
      var $77=$nd;
      var $78=((($76)*($77))|0);
      var $79=$j;
      var $80=((($78)+($79))|0);
      var $81=$5;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80<<7))|0);
      var $85=$j;
      var $86=((($85<<7))|0);
      var $87=$buf;
      var $88=(($87+$86)|0);
      _cdf_unpack_dir($84, $88);
      __label__ = 17; break;
    case 17: 
      var $90=$j;
      var $91=((($90)+(1))|0);
      $j=$91;
      __label__ = 15; break;
    case 18: 
      var $93=HEAP32[((((_cdf_bo)|0))>>2)];
      var $94=(($93)|0)==16909060;
      if ($94) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $96=$sid;
      var $97=$4;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+($96<<2))|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=__cdf_tole4($101);
      var $111 = $102;__label__ = 21; break;
    case 20: 
      var $104=$sid;
      var $105=$4;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+($104<<2))|0);
      var $109=HEAP32[(($108)>>2)];
      var $111 = $109;__label__ = 21; break;
    case 21: 
      var $111;
      $sid=$111;
      __label__ = 22; break;
    case 22: 
      var $113=$i;
      var $114=((($113)+(1))|0);
      $i=$114;
      var $115=$j;
      var $116=((($115)+(1))|0);
      $j=$116;
      __label__ = 9; break;
    case 23: 
      var $118=HEAP32[((((_cdf_bo)|0))>>2)];
      var $119=(($118)|0)==16909060;
      if ($119) { __label__ = 24; break; } else { __label__ = 29; break; }
    case 24: 
      $i=0;
      __label__ = 25; break;
    case 25: 
      var $122=$i;
      var $123=$5;
      var $124=(($123+4)|0);
      var $125=HEAPU32[(($124)>>2)];
      var $126=(($122)>>>0) < (($125)>>>0);
      if ($126) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $128=$i;
      var $129=$5;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+($128<<7))|0);
      _cdf_swap_dir($132);
      __label__ = 27; break;
    case 27: 
      var $134=$i;
      var $135=((($134)+(1))|0);
      $i=$135;
      __label__ = 25; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $138=$buf;
      _free($138);
      $1=0;
      __label__ = 31; break;
    case 30: 
      var $140=$5;
      var $141=(($140)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$142;
      _free($143);
      var $144=$buf;
      _free($144);
      $1=-1;
      __label__ = 31; break;
    case 31: 
      var $146=$1;
      ;
      return $146;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_dir["X"]=1;

function _cdf_read_ssat($info, $h, $sat, $ssat) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $j;
      var $ss;
      var $sid;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$ssat;
      var $6=$3;
      var $7=(($6+30)|0);
      var $8=HEAPU16[(($7)>>1)];
      var $9=(($8)&65535);
      var $10=1 << $9;
      $ss=$10;
      var $11=$3;
      var $12=(($11+60)|0);
      var $13=HEAP32[(($12)>>2)];
      $sid=$13;
      var $14=$4;
      var $15=$sid;
      var $16=$3;
      var $17=(($16+30)|0);
      var $18=HEAPU16[(($17)>>1)];
      var $19=(($18)&65535);
      var $20=1 << $19;
      var $21=_cdf_count_chain($14, $15, $20);
      var $22=$5;
      var $23=(($22+4)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$5;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)==-1;
      if ($27) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 21; break;
    case 4: 
      var $30=$5;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$ss;
      var $34=_calloc($32, $33);
      var $35=$34;
      var $36=$5;
      var $37=(($36)|0);
      HEAP32[(($37)>>2)]=$35;
      var $38=$5;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)==0;
      if ($41) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=-1;
      __label__ = 21; break;
    case 6: 
      $i=0;
      $j=0;
      __label__ = 7; break;
    case 7: 
      var $45=$sid;
      var $46=(($45)|0) >= 0;
      if ($46) { __label__ = 8; break; } else { __label__ = 19; break; }
    case 8: 
      var $48=$j;
      var $49=(($48)>>>0) >= 10000;
      if ($49) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $51=___errno();
      HEAP32[(($51)>>2)]=79;
      __label__ = 20; break;
    case 10: 
      var $53=$i;
      var $54=$5;
      var $55=(($54+4)|0);
      var $56=HEAPU32[(($55)>>2)];
      var $57=(($53)>>>0) >= (($56)>>>0);
      if ($57) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $59=___errno();
      HEAP32[(($59)>>2)]=79;
      __label__ = 20; break;
    case 12: 
      var $61=$2;
      var $62=$5;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      var $66=$i;
      var $67=$ss;
      var $68=((($66)*($67))|0);
      var $69=$ss;
      var $70=$3;
      var $71=$sid;
      var $72=_cdf_read_sector($61, $65, $68, $69, $70, $71);
      var $73=$ss;
      var $74=(($72)|0)!=(($73)|0);
      if ($74) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 20; break;
    case 14: 
      var $77=HEAP32[((((_cdf_bo)|0))>>2)];
      var $78=(($77)|0)==16909060;
      if ($78) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $80=$sid;
      var $81=$4;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80<<2))|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=__cdf_tole4($85);
      var $95 = $86;__label__ = 17; break;
    case 16: 
      var $88=$sid;
      var $89=$4;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+($88<<2))|0);
      var $93=HEAP32[(($92)>>2)];
      var $95 = $93;__label__ = 17; break;
    case 17: 
      var $95;
      $sid=$95;
      __label__ = 18; break;
    case 18: 
      var $97=$i;
      var $98=((($97)+(1))|0);
      $i=$98;
      var $99=$j;
      var $100=((($99)+(1))|0);
      $j=$100;
      __label__ = 7; break;
    case 19: 
      $1=0;
      __label__ = 21; break;
    case 20: 
      var $103=$5;
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105;
      _free($106);
      $1=-1;
      __label__ = 21; break;
    case 21: 
      var $108=$1;
      ;
      return $108;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_ssat["X"]=1;

function _cdf_read_short_stream($info, $h, $sat, $dir, $scn) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $d;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$dir;
      $6=$scn;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $8=$i;
      var $9=$5;
      var $10=(($9+4)|0);
      var $11=HEAPU32[(($10)>>2)];
      var $12=(($8)>>>0) < (($11)>>>0);
      if ($12) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $14=$i;
      var $15=$5;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14<<7))|0);
      var $19=(($18+66)|0);
      var $20=HEAPU8[($19)];
      var $21=(($20)&255);
      var $22=(($21)|0)==5;
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 8; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $26=$i;
      var $27=((($26)+(1))|0);
      $i=$27;
      __label__ = 3; break;
    case 8: 
      var $29=$i;
      var $30=$5;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|0)==(($32)|0);
      if ($33) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 13; break;
    case 10: 
      var $36=$i;
      var $37=$5;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($36<<7))|0);
      $d=$40;
      var $41=$d;
      var $42=(($41+116)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0) < 0;
      if ($44) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $47=$2;
      var $48=$3;
      var $49=$4;
      var $50=$d;
      var $51=(($50+116)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$d;
      var $54=(($53+120)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$6;
      var $57=_cdf_read_long_sector_chain($47, $48, $49, $52, $55, $56);
      $1=$57;
      __label__ = 14; break;
    case 13: 
      var $59=$6;
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=0;
      var $61=$6;
      var $62=(($61+4)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$6;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=0;
      $1=0;
      __label__ = 14; break;
    case 14: 
      var $66=$1;
      ;
      return $66;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_short_stream["X"]=1;

function _cdf_read_summary_info($info, $h, $sat, $ssat, $sst, $dir, $scn) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $d;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$ssat;
      $6=$sst;
      $7=$dir;
      $8=$scn;
      var $9=$7;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      $i=$11;
      __label__ = 3; break;
    case 3: 
      var $13=$i;
      var $14=(($13)>>>0) > 0;
      if ($14) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $16=$i;
      var $17=((($16)-(1))|0);
      var $18=$7;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17<<7))|0);
      var $22=(($21+66)|0);
      var $23=HEAPU8[($22)];
      var $24=(($23)&255);
      var $25=(($24)|0)==2;
      if ($25) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $27=$i;
      var $28=((($27)-(1))|0);
      var $29=$7;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($28<<7))|0);
      var $33=(($32)|0);
      var $34=(($33)|0);
      var $35=_cdf_namecmp(((STRING_TABLE._cdf_read_summary_info_name)|0), $34, 20);
      var $36=(($35)|0)==0;
      if ($36) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $40=$i;
      var $41=((($40)-(1))|0);
      $i=$41;
      __label__ = 3; break;
    case 9: 
      var $43=$i;
      var $44=(($43)|0)==0;
      if ($44) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $46=___errno();
      HEAP32[(($46)>>2)]=3;
      $1=-1;
      __label__ = 12; break;
    case 11: 
      var $48=$i;
      var $49=((($48)-(1))|0);
      var $50=$7;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($49<<7))|0);
      $d=$53;
      var $54=$2;
      var $55=$3;
      var $56=$4;
      var $57=$5;
      var $58=$6;
      var $59=$d;
      var $60=(($59+116)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$d;
      var $63=(($62+120)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$8;
      var $66=_cdf_read_sector_chain($54, $55, $56, $57, $58, $61, $64, $65);
      $1=$66;
      __label__ = 12; break;
    case 12: 
      var $68=$1;
      ;
      return $68;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_summary_info["X"]=1;

function _cdf_namecmp($d, $s, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$d;
      $3=$s;
      $4=$l;
      __label__ = 3; break;
    case 3: 
      var $6=$4;
      var $7=((($6)-(1))|0);
      $4=$7;
      var $8=(($6)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $10=$2;
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=HEAP32[((((_cdf_bo)|0))>>2)];
      var $14=(($13)|0)==16909060;
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$3;
      var $17=HEAP16[(($16)>>1)];
      var $18=__cdf_tole2($17);
      var $19=(($18)&65535);
      var $25 = $19;__label__ = 7; break;
    case 6: 
      var $21=$3;
      var $22=HEAPU16[(($21)>>1)];
      var $23=(($22)&65535);
      var $25 = $23;__label__ = 7; break;
    case 7: 
      var $25;
      var $26=(($25) & 65535);
      var $27=(($26)&65535);
      var $28=(($12)|0)!=(($27)|0);
      if ($28) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $30=$2;
      var $31=HEAPU8[($30)];
      var $32=(($31)&255);
      var $33=HEAP32[((((_cdf_bo)|0))>>2)];
      var $34=(($33)|0)==16909060;
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$3;
      var $37=HEAP16[(($36)>>1)];
      var $38=__cdf_tole2($37);
      var $39=(($38)&65535);
      var $45 = $39;__label__ = 11; break;
    case 10: 
      var $41=$3;
      var $42=HEAPU16[(($41)>>1)];
      var $43=(($42)&65535);
      var $45 = $43;__label__ = 11; break;
    case 11: 
      var $45;
      var $46=(($45) & 65535);
      var $47=(($46)&65535);
      var $48=((($32)-($47))|0);
      $1=$48;
      __label__ = 15; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $51=$2;
      var $52=(($51+1)|0);
      $2=$52;
      var $53=$3;
      var $54=(($53+2)|0);
      $3=$54;
      __label__ = 3; break;
    case 14: 
      $1=0;
      __label__ = 15; break;
    case 15: 
      var $57=$1;
      ;
      return $57;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_namecmp["X"]=1;

function _cdf_read_property_info($sst, $h, $offs, $info, $count, $maxcount) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $shp;
      var $sh=__stackBase__;
      var $p;
      var $q;
      var $e;
      var $s16=(__stackBase__)+(8);
      var $s32=(__stackBase__)+(12);
      var $u32=(__stackBase__)+(16);
      var $s64=(__stackBase__)+(20);
      var $u64=(__stackBase__)+(28);
      var $tp=(__stackBase__)+(36);
      var $i;
      var $o;
      var $o4;
      var $nelements;
      var $j;
      var $inp;
      var $ofs;
      var $nelem;
      var $l;
      $2=$sst;
      $3=$h;
      $4=$offs;
      $5=$info;
      $6=$count;
      $7=$maxcount;
      var $8=$4;
      var $9=(($8)>>>0) > 1073741823;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=___errno();
      HEAP32[(($11)>>2)]=79;
      __label__ = 108; break;
    case 4: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$4;
      var $17=(($15+$16)|0);
      var $18=$17;
      $shp=$18;
      var $19=$2;
      var $20=$3;
      var $21=$shp;
      var $22=$21;
      var $23=_cdf_check_stream_offset($19, $20, $22, 8, 764);
      var $24=(($23)|0)==-1;
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 108; break;
    case 6: 
      var $27=HEAP32[((((_cdf_bo)|0))>>2)];
      var $28=(($27)|0)==16909060;
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $30=$shp;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=__cdf_tole4($32);
      var $39 = $33;__label__ = 9; break;
    case 8: 
      var $35=$shp;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $39 = $37;__label__ = 9; break;
    case 9: 
      var $39;
      var $40=(($sh)|0);
      HEAP32[(($40)>>2)]=$39;
      var $41=(($sh)|0);
      var $42=HEAPU32[(($41)>>2)];
      var $43=(($42)>>>0) > 536870911;
      if ($43) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $45=___errno();
      HEAP32[(($45)>>2)]=79;
      __label__ = 108; break;
    case 11: 
      var $47=HEAP32[((((_cdf_bo)|0))>>2)];
      var $48=(($47)|0)==16909060;
      if ($48) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $50=$shp;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=__cdf_tole4($52);
      var $59 = $53;__label__ = 14; break;
    case 13: 
      var $55=$shp;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $59 = $57;__label__ = 14; break;
    case 14: 
      var $59;
      var $60=(($sh+4)|0);
      HEAP32[(($60)>>2)]=$59;
      var $61=(($sh+4)|0);
      var $62=HEAPU32[(($61)>>2)];
      var $63=(($62)>>>0) > 67108863;
      if ($63) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 108; break;
    case 16: 
      var $66=$7;
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0)!=0;
      if ($68) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $70=$7;
      var $71=HEAPU32[(($70)>>2)];
      var $72=(($71)>>>0) > 67108863;
      if ($72) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 108; break;
    case 19: 
      var $75=(($sh+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$7;
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)+($76))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=$5;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      var $83=$7;
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84<<4))|0);
      var $86=_realloc($82, $85);
      var $87=$86;
      $inp=$87;
      __label__ = 21; break;
    case 20: 
      var $89=(($sh+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$7;
      HEAP32[(($91)>>2)]=$90;
      var $92=$7;
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93<<4))|0);
      var $95=_malloc($94);
      var $96=$95;
      $inp=$96;
      __label__ = 21; break;
    case 21: 
      var $98=$inp;
      var $99=(($98)|0)==0;
      if ($99) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 108; break;
    case 23: 
      var $102=$inp;
      var $103=$5;
      HEAP32[(($103)>>2)]=$102;
      var $104=$6;
      var $105=HEAP32[(($104)>>2)];
      var $106=$inp;
      var $107=(($106+($105<<4))|0);
      $inp=$107;
      var $108=(($sh+4)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$6;
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+($109))|0);
      HEAP32[(($110)>>2)]=$112;
      var $113=$2;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$4;
      var $117=(($115+$116)|0);
      var $118=(($117+8)|0);
      $p=$118;
      var $119=$shp;
      var $120=$119;
      var $121=(($sh)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($120+$122)|0);
      $e=$123;
      var $124=$2;
      var $125=$3;
      var $126=$e;
      var $127=_cdf_check_stream_offset($124, $125, $126, 0, 799);
      var $128=(($127)|0)==-1;
      if ($128) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      __label__ = 108; break;
    case 25: 
      $i=0;
      __label__ = 26; break;
    case 26: 
      var $132=$i;
      var $133=(($sh+4)|0);
      var $134=HEAPU32[(($133)>>2)];
      var $135=(($132)>>>0) < (($134)>>>0);
      if ($135) { __label__ = 27; break; } else { __label__ = 107; break; }
    case 27: 
      var $137=$p;
      var $138=$i;
      var $139=$138 << 1;
      var $140=((($139)+(1))|0);
      var $141=_cdf_getuint32($137, $140);
      $ofs=$141;
      var $142=$p;
      var $143=$ofs;
      var $144=(($142+$143)|0);
      var $145=((($144)-(8))|0);
      $q=$145;
      var $146=$q;
      var $147=$e;
      var $148=(($146)>>>0) > (($147)>>>0);
      if ($148) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 108; break;
    case 29: 
      var $151=$p;
      var $152=$i;
      var $153=$152 << 1;
      var $154=_cdf_getuint32($151, $153);
      var $155=$i;
      var $156=$inp;
      var $157=(($156+($155<<4))|0);
      var $158=(($157)|0);
      HEAP32[(($158)>>2)]=$154;
      var $159=$q;
      var $160=_cdf_getuint32($159, 0);
      var $161=$i;
      var $162=$inp;
      var $163=(($162+($161<<4))|0);
      var $164=(($163+4)|0);
      HEAP32[(($164)>>2)]=$160;
      var $165=$i;
      var $166=$inp;
      var $167=(($166+($165<<4))|0);
      var $168=(($167+4)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$169 & 4096;
      var $171=(($170)|0)!=0;
      if ($171) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $173=$q;
      var $174=_cdf_getuint32($173, 1);
      $nelements=$174;
      $o=2;
      __label__ = 32; break;
    case 31: 
      $nelements=1;
      $o=1;
      __label__ = 32; break;
    case 32: 
      var $177=$o;
      var $178=((($177<<2))|0);
      $o4=$178;
      var $179=$i;
      var $180=$inp;
      var $181=(($180+($179<<4))|0);
      var $182=(($181+4)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & 57344;
      var $185=(($184)|0)!=0;
      if ($185) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      __label__ = 104; break;
    case 34: 
      var $188=$i;
      var $189=$inp;
      var $190=(($189+($188<<4))|0);
      var $191=(($190+4)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$192 & 4095;
      if ((($193)|0) == 1 || (($193)|0) == 0) {
        __label__ = 35; break;
      }
      else if ((($193)|0) == 2) {
        __label__ = 36; break;
      }
      else if ((($193)|0) == 3) {
        __label__ = 42; break;
      }
      else if ((($193)|0) == 11 || (($193)|0) == 19) {
        __label__ = 48; break;
      }
      else if ((($193)|0) == 20) {
        __label__ = 54; break;
      }
      else if ((($193)|0) == 21) {
        __label__ = 60; break;
      }
      else if ((($193)|0) == 4) {
        __label__ = 66; break;
      }
      else if ((($193)|0) == 5) {
        __label__ = 72; break;
      }
      else if ((($193)|0) == 30 || (($193)|0) == 31) {
        __label__ = 78; break;
      }
      else if ((($193)|0) == 64) {
        __label__ = 94; break;
      }
      else if ((($193)|0) == 71) {
        __label__ = 100; break;
      }
      else {
      __label__ = 103; break;
      }
      
    case 35: 
      __label__ = 105; break;
    case 36: 
      var $196=$i;
      var $197=$inp;
      var $198=(($197+($196<<4))|0);
      var $199=(($198+4)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$200 & 4096;
      var $202=(($201)|0)!=0;
      if ($202) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      __label__ = 104; break;
    case 38: 
      var $205=$s16;
      var $206=$o4;
      var $207=$q;
      var $208=(($207+$206)|0);
      assert(2 % 1 === 0, 'memcpy given ' + 2 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($205)]=HEAP8[($208)];HEAP8[(($205)+(1))]=HEAP8[(($208)+(1))];
      var $209=HEAP32[((((_cdf_bo)|0))>>2)];
      var $210=(($209)|0)==16909060;
      if ($210) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $212=HEAP16[(($s16)>>1)];
      var $213=__cdf_tole2($212);
      var $214=(($213)&65535);
      var $219 = $214;__label__ = 41; break;
    case 40: 
      var $216=HEAPU16[(($s16)>>1)];
      var $217=(($216)&65535);
      var $219 = $217;__label__ = 41; break;
    case 41: 
      var $219;
      var $220=(($219) & 65535);
      var $221=$i;
      var $222=$inp;
      var $223=(($222+($221<<4))|0);
      var $224=(($223+8)|0);
      var $225=$224;
      HEAP16[(($225)>>1)]=$220;
      __label__ = 105; break;
    case 42: 
      var $227=$i;
      var $228=$inp;
      var $229=(($228+($227<<4))|0);
      var $230=(($229+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231 & 4096;
      var $233=(($232)|0)!=0;
      if ($233) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      __label__ = 104; break;
    case 44: 
      var $236=$s32;
      var $237=$o4;
      var $238=$q;
      var $239=(($238+$237)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($236)]=HEAP8[($239)];HEAP8[(($236)+(1))]=HEAP8[(($239)+(1))];HEAP8[(($236)+(2))]=HEAP8[(($239)+(2))];HEAP8[(($236)+(3))]=HEAP8[(($239)+(3))];
      var $240=HEAP32[((((_cdf_bo)|0))>>2)];
      var $241=(($240)|0)==16909060;
      if ($241) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $243=HEAP32[(($s32)>>2)];
      var $244=__cdf_tole4($243);
      var $248 = $244;__label__ = 47; break;
    case 46: 
      var $246=HEAP32[(($s32)>>2)];
      var $248 = $246;__label__ = 47; break;
    case 47: 
      var $248;
      var $249=$i;
      var $250=$inp;
      var $251=(($250+($249<<4))|0);
      var $252=(($251+8)|0);
      var $253=$252;
      HEAP32[(($253)>>2)]=$248;
      __label__ = 105; break;
    case 48: 
      var $255=$i;
      var $256=$inp;
      var $257=(($256+($255<<4))|0);
      var $258=(($257+4)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$259 & 4096;
      var $261=(($260)|0)!=0;
      if ($261) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      __label__ = 104; break;
    case 50: 
      var $264=$u32;
      var $265=$o4;
      var $266=$q;
      var $267=(($266+$265)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($264)]=HEAP8[($267)];HEAP8[(($264)+(1))]=HEAP8[(($267)+(1))];HEAP8[(($264)+(2))]=HEAP8[(($267)+(2))];HEAP8[(($264)+(3))]=HEAP8[(($267)+(3))];
      var $268=HEAP32[((((_cdf_bo)|0))>>2)];
      var $269=(($268)|0)==16909060;
      if ($269) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $271=HEAP32[(($u32)>>2)];
      var $272=__cdf_tole4($271);
      var $276 = $272;__label__ = 53; break;
    case 52: 
      var $274=HEAP32[(($u32)>>2)];
      var $276 = $274;__label__ = 53; break;
    case 53: 
      var $276;
      var $277=$i;
      var $278=$inp;
      var $279=(($278+($277<<4))|0);
      var $280=(($279+8)|0);
      var $281=$280;
      HEAP32[(($281)>>2)]=$276;
      __label__ = 105; break;
    case 54: 
      var $283=$i;
      var $284=$inp;
      var $285=(($284+($283<<4))|0);
      var $286=(($285+4)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$287 & 4096;
      var $289=(($288)|0)!=0;
      if ($289) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      __label__ = 104; break;
    case 56: 
      var $292=$s64;
      var $293=$o4;
      var $294=$q;
      var $295=(($294+$293)|0);
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($292)]=HEAP8[($295)];HEAP8[(($292)+(1))]=HEAP8[(($295)+(1))];HEAP8[(($292)+(2))]=HEAP8[(($295)+(2))];HEAP8[(($292)+(3))]=HEAP8[(($295)+(3))];HEAP8[(($292)+(4))]=HEAP8[(($295)+(4))];HEAP8[(($292)+(5))]=HEAP8[(($295)+(5))];HEAP8[(($292)+(6))]=HEAP8[(($295)+(6))];HEAP8[(($292)+(7))]=HEAP8[(($295)+(7))];
      var $296=HEAP32[((((_cdf_bo)|0))>>2)];
      var $297=(($296)|0)==16909060;
      if ($297) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $st$0$0=(($s64)|0);
      var $299$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($s64+4)|0);
      var $299$1=HEAP32[(($st$0$1)>>2)];
      var $300=__cdf_tole8($299$0, $299$1);
      var $300$0=$300[0];
      var $300$1=$300[1];
      var $304$1 = $300$1;var $304$0 = $300$0;__label__ = 59; break;
    case 58: 
      var $st$0$0=(($s64)|0);
      var $302$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($s64+4)|0);
      var $302$1=HEAP32[(($st$0$1)>>2)];
      var $304$1 = $302$1;var $304$0 = $302$0;__label__ = 59; break;
    case 59: 
      var $304$0;
      var $304$1;
      var $305=$i;
      var $306=$inp;
      var $307=(($306+($305<<4))|0);
      var $308=(($307+8)|0);
      var $309=$308;
      var $st$7$0=(($309)|0);
      HEAP32[(($st$7$0)>>2)]=$304$0;
      var $st$7$1=(($309+4)|0);
      HEAP32[(($st$7$1)>>2)]=$304$1;
      __label__ = 105; break;
    case 60: 
      var $311=$i;
      var $312=$inp;
      var $313=(($312+($311<<4))|0);
      var $314=(($313+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$315 & 4096;
      var $317=(($316)|0)!=0;
      if ($317) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      __label__ = 104; break;
    case 62: 
      var $320=$u64;
      var $321=$o4;
      var $322=$q;
      var $323=(($322+$321)|0);
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($320)]=HEAP8[($323)];HEAP8[(($320)+(1))]=HEAP8[(($323)+(1))];HEAP8[(($320)+(2))]=HEAP8[(($323)+(2))];HEAP8[(($320)+(3))]=HEAP8[(($323)+(3))];HEAP8[(($320)+(4))]=HEAP8[(($323)+(4))];HEAP8[(($320)+(5))]=HEAP8[(($323)+(5))];HEAP8[(($320)+(6))]=HEAP8[(($323)+(6))];HEAP8[(($320)+(7))]=HEAP8[(($323)+(7))];
      var $324=HEAP32[((((_cdf_bo)|0))>>2)];
      var $325=(($324)|0)==16909060;
      if ($325) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $st$0$0=(($u64)|0);
      var $327$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $327$1=HEAP32[(($st$0$1)>>2)];
      var $328=__cdf_tole8($327$0, $327$1);
      var $328$0=$328[0];
      var $328$1=$328[1];
      var $332$1 = $328$1;var $332$0 = $328$0;__label__ = 65; break;
    case 64: 
      var $st$0$0=(($u64)|0);
      var $330$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $330$1=HEAP32[(($st$0$1)>>2)];
      var $332$1 = $330$1;var $332$0 = $330$0;__label__ = 65; break;
    case 65: 
      var $332$0;
      var $332$1;
      var $333=$i;
      var $334=$inp;
      var $335=(($334+($333<<4))|0);
      var $336=(($335+8)|0);
      var $337=$336;
      var $st$7$0=(($337)|0);
      HEAP32[(($st$7$0)>>2)]=$332$0;
      var $st$7$1=(($337+4)|0);
      HEAP32[(($st$7$1)>>2)]=$332$1;
      __label__ = 105; break;
    case 66: 
      var $339=$i;
      var $340=$inp;
      var $341=(($340+($339<<4))|0);
      var $342=(($341+4)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=$343 & 4096;
      var $345=(($344)|0)!=0;
      if ($345) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      __label__ = 104; break;
    case 68: 
      var $348=$u32;
      var $349=$o4;
      var $350=$q;
      var $351=(($350+$349)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($348)]=HEAP8[($351)];HEAP8[(($348)+(1))]=HEAP8[(($351)+(1))];HEAP8[(($348)+(2))]=HEAP8[(($351)+(2))];HEAP8[(($348)+(3))]=HEAP8[(($351)+(3))];
      var $352=HEAP32[((((_cdf_bo)|0))>>2)];
      var $353=(($352)|0)==16909060;
      if ($353) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $355=HEAP32[(($u32)>>2)];
      var $356=__cdf_tole4($355);
      var $360 = $356;__label__ = 71; break;
    case 70: 
      var $358=HEAP32[(($u32)>>2)];
      var $360 = $358;__label__ = 71; break;
    case 71: 
      var $360;
      HEAP32[(($u32)>>2)]=$360;
      var $361=$i;
      var $362=$inp;
      var $363=(($362+($361<<4))|0);
      var $364=(($363+8)|0);
      var $365=$364;
      var $366=$365;
      var $367=$u32;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($366)>>2)]=HEAP32[(($367)>>2)];
      __label__ = 105; break;
    case 72: 
      var $369=$i;
      var $370=$inp;
      var $371=(($370+($369<<4))|0);
      var $372=(($371+4)|0);
      var $373=HEAP32[(($372)>>2)];
      var $374=$373 & 4096;
      var $375=(($374)|0)!=0;
      if ($375) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      __label__ = 104; break;
    case 74: 
      var $378=$u64;
      var $379=$o4;
      var $380=$q;
      var $381=(($380+$379)|0);
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($378)]=HEAP8[($381)];HEAP8[(($378)+(1))]=HEAP8[(($381)+(1))];HEAP8[(($378)+(2))]=HEAP8[(($381)+(2))];HEAP8[(($378)+(3))]=HEAP8[(($381)+(3))];HEAP8[(($378)+(4))]=HEAP8[(($381)+(4))];HEAP8[(($378)+(5))]=HEAP8[(($381)+(5))];HEAP8[(($378)+(6))]=HEAP8[(($381)+(6))];HEAP8[(($378)+(7))]=HEAP8[(($381)+(7))];
      var $382=HEAP32[((((_cdf_bo)|0))>>2)];
      var $383=(($382)|0)==16909060;
      if ($383) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $st$0$0=(($u64)|0);
      var $385$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $385$1=HEAP32[(($st$0$1)>>2)];
      var $386=__cdf_tole8($385$0, $385$1);
      var $386$0=$386[0];
      var $386$1=$386[1];
      var $390$1 = $386$1;var $390$0 = $386$0;__label__ = 77; break;
    case 76: 
      var $st$0$0=(($u64)|0);
      var $388$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $388$1=HEAP32[(($st$0$1)>>2)];
      var $390$1 = $388$1;var $390$0 = $388$0;__label__ = 77; break;
    case 77: 
      var $390$0;
      var $390$1;
      var $st$2$0=(($u64)|0);
      HEAP32[(($st$2$0)>>2)]=$390$0;
      var $st$2$1=(($u64+4)|0);
      HEAP32[(($st$2$1)>>2)]=$390$1;
      var $391=$i;
      var $392=$inp;
      var $393=(($392+($391<<4))|0);
      var $394=(($393+8)|0);
      var $395=$394;
      var $396=$395;
      var $397=$u64;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($396)>>2)]=HEAP32[(($397)>>2)];HEAP32[((($396)+(4))>>2)]=HEAP32[((($397)+(4))>>2)];
      __label__ = 105; break;
    case 78: 
      var $399=$nelements;
      var $400=(($399)>>>0) > 1;
      if ($400) { __label__ = 79; break; } else { __label__ = 85; break; }
    case 79: 
      var $402=$inp;
      var $403=$5;
      var $404=HEAP32[(($403)>>2)];
      var $405=$402;
      var $406=$404;
      var $407=((($405)-($406))|0);
      var $408=((((($407)|0))/(16))&-1);
      $nelem=$408;
      var $409=$7;
      var $410=HEAPU32[(($409)>>2)];
      var $411=(($410)>>>0) > 67108863;
      if ($411) { __label__ = 81; break; } else { __label__ = 80; break; }
    case 80: 
      var $413=$nelements;
      var $414=(($413)>>>0) > 67108863;
      if ($414) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      __label__ = 108; break;
    case 82: 
      var $417=$nelements;
      var $418=$7;
      var $419=HEAP32[(($418)>>2)];
      var $420=((($419)+($417))|0);
      HEAP32[(($418)>>2)]=$420;
      var $421=$5;
      var $422=HEAP32[(($421)>>2)];
      var $423=$422;
      var $424=$7;
      var $425=HEAP32[(($424)>>2)];
      var $426=((($425<<4))|0);
      var $427=_realloc($423, $426);
      var $428=$427;
      $inp=$428;
      var $429=$inp;
      var $430=(($429)|0)==0;
      if ($430) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      __label__ = 108; break;
    case 84: 
      var $433=$inp;
      var $434=$5;
      HEAP32[(($434)>>2)]=$433;
      var $435=$5;
      var $436=HEAP32[(($435)>>2)];
      var $437=$nelem;
      var $438=(($436+($437<<4))|0);
      $inp=$438;
      __label__ = 85; break;
    case 85: 
      $j=0;
      __label__ = 86; break;
    case 86: 
      var $441=$j;
      var $442=$nelements;
      var $443=(($441)>>>0) < (($442)>>>0);
      if ($443) { __label__ = 87; break; } else { __label__ = 93; break; }
    case 87: 
      var $445=$q;
      var $446=$o;
      var $447=_cdf_getuint32($445, $446);
      $l=$447;
      var $448=$l;
      var $449=$i;
      var $450=$inp;
      var $451=(($450+($449<<4))|0);
      var $452=(($451+8)|0);
      var $453=$452;
      var $454=(($453)|0);
      HEAP32[(($454)>>2)]=$448;
      var $455=$o4;
      var $456=((($455)+(4))|0);
      var $457=$q;
      var $458=(($457+$456)|0);
      var $459=$i;
      var $460=$inp;
      var $461=(($460+($459<<4))|0);
      var $462=(($461+8)|0);
      var $463=$462;
      var $464=(($463+4)|0);
      HEAP32[(($464)>>2)]=$458;
      var $465=$l;
      var $466=$465 & 1;
      var $467=(($466)|0)!=0;
      if ($467) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $469=$l;
      var $470=((($469)+(1))|0);
      $l=$470;
      __label__ = 89; break;
    case 89: 
      var $472=$l;
      var $473=$472 >>> 1;
      var $474=$o;
      var $475=((($474)+($473))|0);
      $o=$475;
      var $476=$q;
      var $477=$o;
      var $478=(($476+$477)|0);
      var $479=$e;
      var $480=(($478)>>>0) >= (($479)>>>0);
      if ($480) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      __label__ = 108; break;
    case 91: 
      var $483=$o;
      var $484=((($483<<2))|0);
      $o4=$484;
      __label__ = 92; break;
    case 92: 
      var $486=$j;
      var $487=((($486)+(1))|0);
      $j=$487;
      var $488=$i;
      var $489=((($488)+(1))|0);
      $i=$489;
      __label__ = 86; break;
    case 93: 
      var $491=$i;
      var $492=((($491)-(1))|0);
      $i=$492;
      __label__ = 105; break;
    case 94: 
      var $494=$i;
      var $495=$inp;
      var $496=(($495+($494<<4))|0);
      var $497=(($496+4)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=$498 & 4096;
      var $500=(($499)|0)!=0;
      if ($500) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      __label__ = 104; break;
    case 96: 
      var $503=$tp;
      var $504=$o4;
      var $505=$q;
      var $506=(($505+$504)|0);
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($503)]=HEAP8[($506)];HEAP8[(($503)+(1))]=HEAP8[(($506)+(1))];HEAP8[(($503)+(2))]=HEAP8[(($506)+(2))];HEAP8[(($503)+(3))]=HEAP8[(($506)+(3))];HEAP8[(($503)+(4))]=HEAP8[(($506)+(4))];HEAP8[(($503)+(5))]=HEAP8[(($506)+(5))];HEAP8[(($503)+(6))]=HEAP8[(($506)+(6))];HEAP8[(($503)+(7))]=HEAP8[(($506)+(7))];
      var $507=HEAP32[((((_cdf_bo)|0))>>2)];
      var $508=(($507)|0)==16909060;
      if ($508) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: 
      var $st$0$0=(($tp)|0);
      var $510$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $510$1=HEAP32[(($st$0$1)>>2)];
      var $511=__cdf_tole8($510$0, $510$1);
      var $511$0=$511[0];
      var $511$1=$511[1];
      var $515$1 = $511$1;var $515$0 = $511$0;__label__ = 99; break;
    case 98: 
      var $st$0$0=(($tp)|0);
      var $513$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $513$1=HEAP32[(($st$0$1)>>2)];
      var $515$1 = $513$1;var $515$0 = $513$0;__label__ = 99; break;
    case 99: 
      var $515$0;
      var $515$1;
      var $516=$i;
      var $517=$inp;
      var $518=(($517+($516<<4))|0);
      var $519=(($518+8)|0);
      var $520=$519;
      var $st$7$0=(($520)|0);
      HEAP32[(($st$7$0)>>2)]=$515$0;
      var $st$7$1=(($520+4)|0);
      HEAP32[(($st$7$1)>>2)]=$515$1;
      __label__ = 105; break;
    case 100: 
      var $522=$i;
      var $523=$inp;
      var $524=(($523+($522<<4))|0);
      var $525=(($524+4)|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=$526 & 4096;
      var $528=(($527)|0)!=0;
      if ($528) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: 
      __label__ = 104; break;
    case 102: 
      __label__ = 105; break;
    case 103: 
      __label__ = 104; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      __label__ = 106; break;
    case 106: 
      var $535=$i;
      var $536=((($535)+(1))|0);
      $i=$536;
      __label__ = 26; break;
    case 107: 
      $1=0;
      __label__ = 109; break;
    case 108: 
      var $539=$5;
      var $540=HEAP32[(($539)>>2)];
      var $541=$540;
      _free($541);
      $1=-1;
      __label__ = 109; break;
    case 109: 
      var $543=$1;
      STACKTOP = __stackBase__;
      return $543;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_read_property_info["X"]=1;

function _cdf_check_stream_offset($sst, $h, $p, $tail, $line) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $b;
      var $e;
      $2=$sst;
      $3=$h;
      $4=$p;
      $5=$tail;
      $6=$line;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      $b=$9;
      var $10=$4;
      var $11=$5;
      var $12=(($10+$11)|0);
      $e=$12;
      var $13=$e;
      var $14=$b;
      var $15=(($13)>>>0) >= (($14)>>>0);
      if ($15) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $17=$e;
      var $18=$b;
      var $19=$17;
      var $20=$18;
      var $21=((($19)-($20))|0);
      var $22=$3;
      var $23=(($22+30)|0);
      var $24=HEAPU16[(($23)>>1)];
      var $25=(($24)&65535);
      var $26=1 << $25;
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($26)*($29))|0);
      var $31=(($21)>>>0) < (($30)>>>0);
      if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=0;
      __label__ = 6; break;
    case 5: 
      var $34=___errno();
      HEAP32[(($34)>>2)]=79;
      $1=-1;
      __label__ = 6; break;
    case 6: 
      var $36=$1;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_getuint32($p, $offs) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $rv=__stackBase__;
      $1=$p;
      $2=$offs;
      var $3=$rv;
      var $4=$1;
      var $5=$2;
      var $6=((($5<<2))|0);
      var $7=(($4+$6)|0);
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($3)]=HEAP8[($7)];HEAP8[(($3)+(1))]=HEAP8[(($7)+(1))];HEAP8[(($3)+(2))]=HEAP8[(($7)+(2))];HEAP8[(($3)+(3))]=HEAP8[(($7)+(3))];
      var $8=HEAP32[((((_cdf_bo)|0))>>2)];
      var $9=(($8)|0)==16909060;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=HEAP32[(($rv)>>2)];
      var $12=__cdf_tole4($11);
      var $16 = $12;__label__ = 5; break;
    case 4: 
      var $14=HEAP32[(($rv)>>2)];
      var $16 = $14;__label__ = 5; break;
    case 5: 
      var $16;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_timespec_to_timestamp($t, $ts) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$t;
  $2=$ts;
  ;
  return 0;
}


function _cdf_getdays($year) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $days;
      var $y;
      $1=$year;
      $days=0;
      $y=1601;
      __label__ = 3; break;
    case 3: 
      var $3=$y;
      var $4=$1;
      var $5=(($3)|0) < (($4)|0);
      if ($5) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $7=$y;
      var $8=((($7)|0))%(4);
      var $9=(($8)|0)==0;
      if ($9) { __label__ = 5; break; } else { var $21 = 0;__label__ = 8; break; }
    case 5: 
      var $11=$y;
      var $12=((($11)|0))%(100);
      var $13=(($12)|0)!=0;
      if ($13) { var $19 = 1;__label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $15=$y;
      var $16=((($15)|0))%(400);
      var $17=(($16)|0)==0;
      var $19 = $17;__label__ = 7; break;
    case 7: 
      var $19;
      var $21 = $19;__label__ = 8; break;
    case 8: 
      var $21;
      var $22=(($21)&1);
      var $23=((($22)+(365))|0);
      var $24=$days;
      var $25=((($24)+($23))|0);
      $days=$25;
      __label__ = 9; break;
    case 9: 
      var $27=$y;
      var $28=((($27)+(1))|0);
      $y=$28;
      __label__ = 3; break;
    case 10: 
      var $30=$days;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_getday($year, $days) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      var $sub;
      $2=$year;
      $3=$days;
      $m=0;
      __label__ = 3; break;
    case 3: 
      var $5=$m;
      var $6=(($5)>>>0) < 12;
      if ($6) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $8=$m;
      var $9=((_mdays+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$m;
      var $12=(($11)|0)==1;
      if ($12) { __label__ = 5; break; } else { var $30 = 0;__label__ = 10; break; }
    case 5: 
      var $14=$2;
      var $15=((($14)|0))%(4);
      var $16=(($15)|0)==0;
      if ($16) { __label__ = 6; break; } else { var $28 = 0;__label__ = 9; break; }
    case 6: 
      var $18=$2;
      var $19=((($18)|0))%(100);
      var $20=(($19)|0)!=0;
      if ($20) { var $26 = 1;__label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $22=$2;
      var $23=((($22)|0))%(400);
      var $24=(($23)|0)==0;
      var $26 = $24;__label__ = 8; break;
    case 8: 
      var $26;
      var $28 = $26;__label__ = 9; break;
    case 9: 
      var $28;
      var $30 = $28;__label__ = 10; break;
    case 10: 
      var $30;
      var $31=(($30)&1);
      var $32=((($10)+($31))|0);
      $sub=$32;
      var $33=$3;
      var $34=$sub;
      var $35=(($33)|0) < (($34)|0);
      if ($35) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $37=$3;
      $1=$37;
      __label__ = 15; break;
    case 12: 
      var $39=$sub;
      var $40=$3;
      var $41=((($40)-($39))|0);
      $3=$41;
      __label__ = 13; break;
    case 13: 
      var $43=$m;
      var $44=((($43)+(1))|0);
      $m=$44;
      __label__ = 3; break;
    case 14: 
      var $46=$3;
      $1=$46;
      __label__ = 15; break;
    case 15: 
      var $48=$1;
      ;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_getday["X"]=1;

function _cdf_getmonth($year, $days) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$year;
      $3=$days;
      $m=0;
      __label__ = 3; break;
    case 3: 
      var $5=$m;
      var $6=(($5)>>>0) < 12;
      if ($6) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: 
      var $8=$m;
      var $9=((_mdays+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$3;
      var $12=((($11)-($10))|0);
      $3=$12;
      var $13=$m;
      var $14=(($13)|0)==1;
      if ($14) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $16=$2;
      var $17=((($16)|0))%(4);
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $20=$2;
      var $21=((($20)|0))%(100);
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $24=$2;
      var $25=((($24)|0))%(400);
      var $26=(($25)|0)==0;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $28=$3;
      var $29=((($28)-(1))|0);
      $3=$29;
      __label__ = 9; break;
    case 9: 
      var $31=$3;
      var $32=(($31)|0) <= 0;
      if ($32) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $34=$m;
      $1=$34;
      __label__ = 14; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $37=$m;
      var $38=((($37)+(1))|0);
      $m=$38;
      __label__ = 3; break;
    case 13: 
      var $40=$m;
      $1=$40;
      __label__ = 14; break;
    case 14: 
      var $42=$1;
      ;
      return $42;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_getmonth["X"]=1;

function _cdf_unpack_summary_info($sst, $h, $ssi, $info, $count) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $maxcount=__stackBase__;
      var $si;
      var $sd;
      $2=$sst;
      $3=$h;
      $4=$ssi;
      $5=$info;
      $6=$count;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      $si=$10;
      var $11=$2;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+28)|0);
      var $15=$14;
      $sd=$15;
      var $16=$2;
      var $17=$3;
      var $18=$si;
      var $19=$18;
      var $20=_cdf_check_stream_offset($16, $17, $19, 28, 942);
      var $21=(($20)|0)==-1;
      if ($21) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $23=$2;
      var $24=$3;
      var $25=$sd;
      var $26=$25;
      var $27=_cdf_check_stream_offset($23, $24, $26, 20, 943);
      var $28=(($27)|0)==-1;
      if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=-1;
      __label__ = 32; break;
    case 5: 
      var $31=HEAP32[((((_cdf_bo)|0))>>2)];
      var $32=(($31)|0)==16909060;
      if ($32) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $34=$si;
      var $35=(($34)|0);
      var $36=HEAP16[(($35)>>1)];
      var $37=__cdf_tole2($36);
      var $38=(($37)&65535);
      var $45 = $38;__label__ = 8; break;
    case 7: 
      var $40=$si;
      var $41=(($40)|0);
      var $42=HEAPU16[(($41)>>1)];
      var $43=(($42)&65535);
      var $45 = $43;__label__ = 8; break;
    case 8: 
      var $45;
      var $46=(($45) & 65535);
      var $47=$4;
      var $48=(($47)|0);
      HEAP16[(($48)>>1)]=$46;
      var $49=HEAP32[((((_cdf_bo)|0))>>2)];
      var $50=(($49)|0)==16909060;
      if ($50) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $52=$si;
      var $53=(($52+4)|0);
      var $54=HEAP16[(($53)>>1)];
      var $55=__cdf_tole2($54);
      var $56=(($55)&65535);
      var $63 = $56;__label__ = 11; break;
    case 10: 
      var $58=$si;
      var $59=(($58+4)|0);
      var $60=HEAPU16[(($59)>>1)];
      var $61=(($60)&65535);
      var $63 = $61;__label__ = 11; break;
    case 11: 
      var $63;
      var $64=(($63) & 65535);
      var $65=$4;
      var $66=(($65+4)|0);
      HEAP16[(($66)>>1)]=$64;
      var $67=HEAP32[((((_cdf_bo)|0))>>2)];
      var $68=(($67)|0)==16909060;
      if ($68) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $70=$si;
      var $71=(($70+6)|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=__cdf_tole2($72);
      var $74=(($73)&65535);
      var $81 = $74;__label__ = 14; break;
    case 13: 
      var $76=$si;
      var $77=(($76+6)|0);
      var $78=HEAPU16[(($77)>>1)];
      var $79=(($78)&65535);
      var $81 = $79;__label__ = 14; break;
    case 14: 
      var $81;
      var $82=(($81) & 65535);
      var $83=$4;
      var $84=(($83+6)|0);
      HEAP16[(($84)>>1)]=$82;
      var $85=$4;
      var $86=(($85+8)|0);
      var $87=$si;
      var $88=(($87+8)|0);
      var $89=$86;
      var $90=$88;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];HEAP32[((($89)+(12))>>2)]=HEAP32[((($90)+(12))>>2)];
      var $91=$4;
      var $92=(($91+8)|0);
      _cdf_swap_class($92);
      var $93=HEAP32[((((_cdf_bo)|0))>>2)];
      var $94=(($93)|0)==16909060;
      if ($94) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $96=$si;
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98) & 65535);
      var $100=__cdf_tole2($99);
      var $101=(($100)&65535);
      var $109 = $101;__label__ = 17; break;
    case 16: 
      var $103=$si;
      var $104=(($103+24)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105) & 65535);
      var $107=(($106)&65535);
      var $109 = $107;__label__ = 17; break;
    case 17: 
      var $109;
      var $110=(($109) & 65535);
      var $111=(($110)&65535);
      var $112=$4;
      var $113=(($112+24)|0);
      HEAP32[(($113)>>2)]=$111;
      var $114=$6;
      HEAP32[(($114)>>2)]=0;
      HEAP32[(($maxcount)>>2)]=0;
      var $115=$5;
      HEAP32[(($115)>>2)]=0;
      $i=0;
      __label__ = 18; break;
    case 18: 
      var $117=$i;
      var $118=HEAP32[((((_cdf_bo)|0))>>2)];
      var $119=(($118)|0)==16909060;
      if ($119) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $121=$si;
      var $122=(($121+24)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=__cdf_tole4($123);
      var $130 = $124;__label__ = 21; break;
    case 20: 
      var $126=$si;
      var $127=(($126+24)|0);
      var $128=HEAP32[(($127)>>2)];
      var $130 = $128;__label__ = 21; break;
    case 21: 
      var $130;
      var $131=(($117)>>>0) < (($130)>>>0);
      if ($131) { __label__ = 22; break; } else { __label__ = 31; break; }
    case 22: 
      var $133=$i;
      var $134=(($133)>>>0) >= 10000;
      if ($134) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $136=___errno();
      HEAP32[(($136)>>2)]=79;
      $1=-1;
      __label__ = 32; break;
    case 24: 
      var $138=$2;
      var $139=$3;
      var $140=HEAP32[((((_cdf_bo)|0))>>2)];
      var $141=(($140)|0)==16909060;
      if ($141) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $143=$sd;
      var $144=(($143+16)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=__cdf_tole4($145);
      var $152 = $146;__label__ = 27; break;
    case 26: 
      var $148=$sd;
      var $149=(($148+16)|0);
      var $150=HEAP32[(($149)>>2)];
      var $152 = $150;__label__ = 27; break;
    case 27: 
      var $152;
      var $153=$5;
      var $154=$6;
      var $155=_cdf_read_property_info($138, $139, $152, $153, $154, $maxcount);
      var $156=(($155)|0)==-1;
      if ($156) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      $1=-1;
      __label__ = 32; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $160=$i;
      var $161=((($160)+(1))|0);
      $i=$161;
      __label__ = 18; break;
    case 31: 
      $1=0;
      __label__ = 32; break;
    case 32: 
      var $164=$1;
      STACKTOP = __stackBase__;
      return $164;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_unpack_summary_info["X"]=1;

function _cdf_print_classid($buf, $buflen, $id) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$buf;
  $2=$buflen;
  $3=$id;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=(($6)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$3;
  var $10=(($9+4)|0);
  var $11=(($10)|0);
  var $12=HEAPU16[(($11)>>1)];
  var $13=(($12)&65535);
  var $14=$3;
  var $15=(($14+4)|0);
  var $16=(($15+2)|0);
  var $17=HEAPU16[(($16)>>1)];
  var $18=(($17)&65535);
  var $19=$3;
  var $20=(($19+8)|0);
  var $21=(($20)|0);
  var $22=HEAPU8[($21)];
  var $23=(($22)&255);
  var $24=$3;
  var $25=(($24+8)|0);
  var $26=(($25+1)|0);
  var $27=HEAPU8[($26)];
  var $28=(($27)&255);
  var $29=$3;
  var $30=(($29+10)|0);
  var $31=(($30)|0);
  var $32=HEAPU8[($31)];
  var $33=(($32)&255);
  var $34=$3;
  var $35=(($34+10)|0);
  var $36=(($35+1)|0);
  var $37=HEAPU8[($36)];
  var $38=(($37)&255);
  var $39=$3;
  var $40=(($39+10)|0);
  var $41=(($40+2)|0);
  var $42=HEAPU8[($41)];
  var $43=(($42)&255);
  var $44=$3;
  var $45=(($44+10)|0);
  var $46=(($45+3)|0);
  var $47=HEAPU8[($46)];
  var $48=(($47)&255);
  var $49=$3;
  var $50=(($49+10)|0);
  var $51=(($50+4)|0);
  var $52=HEAPU8[($51)];
  var $53=(($52)&255);
  var $54=$3;
  var $55=(($54+10)|0);
  var $56=(($55+5)|0);
  var $57=HEAPU8[($56)];
  var $58=(($57)&255);
  var $59=_snprintf($4, $5, ((STRING_TABLE.__str1276)|0), (tempInt=STACKTOP,STACKTOP += 44,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=$13,HEAP32[(((tempInt)+(8))>>2)]=$18,HEAP32[(((tempInt)+(12))>>2)]=$23,HEAP32[(((tempInt)+(16))>>2)]=$28,HEAP32[(((tempInt)+(20))>>2)]=$33,HEAP32[(((tempInt)+(24))>>2)]=$38,HEAP32[(((tempInt)+(28))>>2)]=$43,HEAP32[(((tempInt)+(32))>>2)]=$48,HEAP32[(((tempInt)+(36))>>2)]=$53,HEAP32[(((tempInt)+(40))>>2)]=$58,tempInt));
  STACKTOP = __stackBase__;
  return $59;
}
_cdf_print_classid["X"]=1;

function _cdf_print_property_name($buf, $bufsiz, $p) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$buf;
      $3=$bufsiz;
      $4=$p;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=(($6)>>>0) < 20;
      if ($7) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $9=$i;
      var $10=((_vn+($9<<3))|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$4;
      var $14=(($12)|0)==(($13)|0);
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$2;
      var $17=$3;
      var $18=$i;
      var $19=((_vn+($18<<3))|0);
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_snprintf($16, $17, ((STRING_TABLE.__str2277)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$21,tempInt));
      $1=$22;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $25=$i;
      var $26=((($25)+(1))|0);
      $i=$26;
      __label__ = 3; break;
    case 8: 
      var $28=$2;
      var $29=$3;
      var $30=$4;
      var $31=_snprintf($28, $29, ((STRING_TABLE.__str3278)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$30,tempInt));
      $1=$31;
      __label__ = 9; break;
    case 9: 
      var $33=$1;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}


function _cdf_print_elapsed_time($buf, $bufsiz, $ts$0, $ts$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $len;
      var $days;
      var $hours;
      var $mins;
      var $secs;
      $2=$buf;
      $3=$bufsiz;
      var $st$11$0=(($4)|0);
      HEAP32[(($st$11$0)>>2)]=$ts$0;
      var $st$11$1=(($4+4)|0);
      HEAP32[(($st$11$1)>>2)]=$ts$1;
      $len=0;
      var $st$16$0=(($4)|0);
      var $5$0=HEAP32[(($st$16$0)>>2)];
      var $st$16$1=(($4+4)|0);
      var $5$1=HEAP32[(($st$16$1)>>2)];
      var $$emscripten$temp$0$0=10000000;
      var $$emscripten$temp$0$1=0;
      var $6$0 = (i64Math.divide($5$0,$5$1,$$emscripten$temp$0$0,$$emscripten$temp$0$1),i64Math.result[0]); var $6$1 = i64Math.result[1];
      var $st$23$0=(($4)|0);
      HEAP32[(($st$23$0)>>2)]=$6$0;
      var $st$23$1=(($4+4)|0);
      HEAP32[(($st$23$1)>>2)]=$6$1;
      var $st$27$0=(($4)|0);
      var $7$0=HEAP32[(($st$27$0)>>2)];
      var $st$27$1=(($4+4)|0);
      var $7$1=HEAP32[(($st$27$1)>>2)];
      var $$emscripten$temp$1$0=60;
      var $$emscripten$temp$1$1=0;
      var $8$0 = (i64Math.modulo($7$0,$7$1,$$emscripten$temp$1$0,$$emscripten$temp$1$1),i64Math.result[0]); var $8$1 = i64Math.result[1];
      var $9$0=$8$0;
      var $9=$9$0;
      $secs=$9;
      var $st$37$0=(($4)|0);
      var $10$0=HEAP32[(($st$37$0)>>2)];
      var $st$37$1=(($4+4)|0);
      var $10$1=HEAP32[(($st$37$1)>>2)];
      var $$emscripten$temp$2$0=60;
      var $$emscripten$temp$2$1=0;
      var $11$0 = (i64Math.divide($10$0,$10$1,$$emscripten$temp$2$0,$$emscripten$temp$2$1),i64Math.result[0]); var $11$1 = i64Math.result[1];
      var $st$44$0=(($4)|0);
      HEAP32[(($st$44$0)>>2)]=$11$0;
      var $st$44$1=(($4+4)|0);
      HEAP32[(($st$44$1)>>2)]=$11$1;
      var $st$48$0=(($4)|0);
      var $12$0=HEAP32[(($st$48$0)>>2)];
      var $st$48$1=(($4+4)|0);
      var $12$1=HEAP32[(($st$48$1)>>2)];
      var $$emscripten$temp$3$0=60;
      var $$emscripten$temp$3$1=0;
      var $13$0 = (i64Math.modulo($12$0,$12$1,$$emscripten$temp$3$0,$$emscripten$temp$3$1),i64Math.result[0]); var $13$1 = i64Math.result[1];
      var $14$0=$13$0;
      var $14=$14$0;
      $mins=$14;
      var $st$58$0=(($4)|0);
      var $15$0=HEAP32[(($st$58$0)>>2)];
      var $st$58$1=(($4+4)|0);
      var $15$1=HEAP32[(($st$58$1)>>2)];
      var $$emscripten$temp$4$0=60;
      var $$emscripten$temp$4$1=0;
      var $16$0 = (i64Math.divide($15$0,$15$1,$$emscripten$temp$4$0,$$emscripten$temp$4$1),i64Math.result[0]); var $16$1 = i64Math.result[1];
      var $st$65$0=(($4)|0);
      HEAP32[(($st$65$0)>>2)]=$16$0;
      var $st$65$1=(($4+4)|0);
      HEAP32[(($st$65$1)>>2)]=$16$1;
      var $st$69$0=(($4)|0);
      var $17$0=HEAP32[(($st$69$0)>>2)];
      var $st$69$1=(($4+4)|0);
      var $17$1=HEAP32[(($st$69$1)>>2)];
      var $$emscripten$temp$5$0=24;
      var $$emscripten$temp$5$1=0;
      var $18$0 = (i64Math.modulo($17$0,$17$1,$$emscripten$temp$5$0,$$emscripten$temp$5$1),i64Math.result[0]); var $18$1 = i64Math.result[1];
      var $19$0=$18$0;
      var $19=$19$0;
      $hours=$19;
      var $st$79$0=(($4)|0);
      var $20$0=HEAP32[(($st$79$0)>>2)];
      var $st$79$1=(($4+4)|0);
      var $20$1=HEAP32[(($st$79$1)>>2)];
      var $$emscripten$temp$6$0=24;
      var $$emscripten$temp$6$1=0;
      var $21$0 = (i64Math.divide($20$0,$20$1,$$emscripten$temp$6$0,$$emscripten$temp$6$1),i64Math.result[0]); var $21$1 = i64Math.result[1];
      var $st$86$0=(($4)|0);
      HEAP32[(($st$86$0)>>2)]=$21$0;
      var $st$86$1=(($4+4)|0);
      HEAP32[(($st$86$1)>>2)]=$21$1;
      var $st$90$0=(($4)|0);
      var $22$0=HEAP32[(($st$90$0)>>2)];
      var $st$90$1=(($4+4)|0);
      var $22$1=HEAP32[(($st$90$1)>>2)];
      var $23$0=$22$0;
      var $23=$23$0;
      $days=$23;
      var $24=$days;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $27=$2;
      var $28=$len;
      var $29=(($27+$28)|0);
      var $30=$3;
      var $31=$len;
      var $32=((($30)-($31))|0);
      var $33=$days;
      var $34=_snprintf($29, $32, ((STRING_TABLE.__str4279)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$33,tempInt));
      var $35=$len;
      var $36=((($35)+($34))|0);
      $len=$36;
      var $37=$len;
      var $38=$3;
      var $39=(($37)>>>0) >= (($38)>>>0);
      if ($39) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $41=$len;
      $1=$41;
      __label__ = 14; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $44=$days;
      var $45=(($44)|0)!=0;
      if ($45) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $47=$hours;
      var $48=(($47)|0)!=0;
      if ($48) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $50=$2;
      var $51=$len;
      var $52=(($50+$51)|0);
      var $53=$3;
      var $54=$len;
      var $55=((($53)-($54))|0);
      var $56=$hours;
      var $57=_snprintf($52, $55, ((STRING_TABLE.__str5280)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$56,tempInt));
      var $58=$len;
      var $59=((($58)+($57))|0);
      $len=$59;
      var $60=$len;
      var $61=$3;
      var $62=(($60)>>>0) >= (($61)>>>0);
      if ($62) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$len;
      $1=$64;
      __label__ = 14; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $67=$2;
      var $68=$len;
      var $69=(($67+$68)|0);
      var $70=$3;
      var $71=$len;
      var $72=((($70)-($71))|0);
      var $73=$mins;
      var $74=_snprintf($69, $72, ((STRING_TABLE.__str5280)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$73,tempInt));
      var $75=$len;
      var $76=((($75)+($74))|0);
      $len=$76;
      var $77=$len;
      var $78=$3;
      var $79=(($77)>>>0) >= (($78)>>>0);
      if ($79) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $81=$len;
      $1=$81;
      __label__ = 14; break;
    case 13: 
      var $83=$2;
      var $84=$len;
      var $85=(($83+$84)|0);
      var $86=$3;
      var $87=$len;
      var $88=((($86)-($87))|0);
      var $89=$secs;
      var $90=_snprintf($85, $88, ((STRING_TABLE.__str6281)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$89,tempInt));
      var $91=$len;
      var $92=((($91)+($90))|0);
      $len=$92;
      var $93=$len;
      $1=$93;
      __label__ = 14; break;
    case 14: 
      var $95=$1;
      STACKTOP = __stackBase__;
      return $95;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_print_elapsed_time["X"]=1;

function _cdf_timestamp_to_timespec($ts, $t$0, $t$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $tm=(__stackBase__)+(8);
      var $rdays;
      $2=$ts;
      var $st$6$0=(($3)|0);
      HEAP32[(($st$6$0)>>2)]=$t$0;
      var $st$6$1=(($3+4)|0);
      HEAP32[(($st$6$1)>>2)]=$t$1;
      var $st$10$0=(($3)|0);
      var $4$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($3+4)|0);
      var $4$1=HEAP32[(($st$10$1)>>2)];
      var $$emscripten$temp$0$0=10000000;
      var $$emscripten$temp$0$1=0;
      var $5$0 = (i64Math.modulo($4$0,$4$1,$$emscripten$temp$0$0,$$emscripten$temp$0$1),i64Math.result[0]); var $5$1 = i64Math.result[1];
      var $$emscripten$temp$1$0=100;
      var $$emscripten$temp$1$1=0;
      var $6$0 = (i64Math.multiply($5$0,$5$1,$$emscripten$temp$1$0,$$emscripten$temp$1$1),i64Math.result[0]); var $6$1 = i64Math.result[1];
      var $7$0=$6$0;
      var $7=$7$0;
      var $8=$2;
      var $9=(($8+4)|0);
      HEAP32[(($9)>>2)]=$7;
      var $st$25$0=(($3)|0);
      var $10$0=HEAP32[(($st$25$0)>>2)];
      var $st$25$1=(($3+4)|0);
      var $10$1=HEAP32[(($st$25$1)>>2)];
      var $$emscripten$temp$2$0=10000000;
      var $$emscripten$temp$2$1=0;
      var $11$0 = (i64Math.divide($10$0,$10$1,$$emscripten$temp$2$0,$$emscripten$temp$2$1),i64Math.result[0]); var $11$1 = i64Math.result[1];
      var $st$32$0=(($3)|0);
      HEAP32[(($st$32$0)>>2)]=$11$0;
      var $st$32$1=(($3+4)|0);
      HEAP32[(($st$32$1)>>2)]=$11$1;
      var $st$36$0=(($3)|0);
      var $12$0=HEAP32[(($st$36$0)>>2)];
      var $st$36$1=(($3+4)|0);
      var $12$1=HEAP32[(($st$36$1)>>2)];
      var $$emscripten$temp$3$0=60;
      var $$emscripten$temp$3$1=0;
      var $13$0 = (i64Math.modulo($12$0,$12$1,$$emscripten$temp$3$0,$$emscripten$temp$3$1),i64Math.result[0]); var $13$1 = i64Math.result[1];
      var $14$0=$13$0;
      var $14=$14$0;
      var $15=(($tm)|0);
      HEAP32[(($15)>>2)]=$14;
      var $st$47$0=(($3)|0);
      var $16$0=HEAP32[(($st$47$0)>>2)];
      var $st$47$1=(($3+4)|0);
      var $16$1=HEAP32[(($st$47$1)>>2)];
      var $$emscripten$temp$4$0=60;
      var $$emscripten$temp$4$1=0;
      var $17$0 = (i64Math.divide($16$0,$16$1,$$emscripten$temp$4$0,$$emscripten$temp$4$1),i64Math.result[0]); var $17$1 = i64Math.result[1];
      var $st$54$0=(($3)|0);
      HEAP32[(($st$54$0)>>2)]=$17$0;
      var $st$54$1=(($3+4)|0);
      HEAP32[(($st$54$1)>>2)]=$17$1;
      var $st$58$0=(($3)|0);
      var $18$0=HEAP32[(($st$58$0)>>2)];
      var $st$58$1=(($3+4)|0);
      var $18$1=HEAP32[(($st$58$1)>>2)];
      var $$emscripten$temp$5$0=60;
      var $$emscripten$temp$5$1=0;
      var $19$0 = (i64Math.modulo($18$0,$18$1,$$emscripten$temp$5$0,$$emscripten$temp$5$1),i64Math.result[0]); var $19$1 = i64Math.result[1];
      var $20$0=$19$0;
      var $20=$20$0;
      var $21=(($tm+4)|0);
      HEAP32[(($21)>>2)]=$20;
      var $st$69$0=(($3)|0);
      var $22$0=HEAP32[(($st$69$0)>>2)];
      var $st$69$1=(($3+4)|0);
      var $22$1=HEAP32[(($st$69$1)>>2)];
      var $$emscripten$temp$6$0=60;
      var $$emscripten$temp$6$1=0;
      var $23$0 = (i64Math.divide($22$0,$22$1,$$emscripten$temp$6$0,$$emscripten$temp$6$1),i64Math.result[0]); var $23$1 = i64Math.result[1];
      var $st$76$0=(($3)|0);
      HEAP32[(($st$76$0)>>2)]=$23$0;
      var $st$76$1=(($3+4)|0);
      HEAP32[(($st$76$1)>>2)]=$23$1;
      var $st$80$0=(($3)|0);
      var $24$0=HEAP32[(($st$80$0)>>2)];
      var $st$80$1=(($3+4)|0);
      var $24$1=HEAP32[(($st$80$1)>>2)];
      var $$emscripten$temp$7$0=24;
      var $$emscripten$temp$7$1=0;
      var $25$0 = (i64Math.modulo($24$0,$24$1,$$emscripten$temp$7$0,$$emscripten$temp$7$1),i64Math.result[0]); var $25$1 = i64Math.result[1];
      var $26$0=$25$0;
      var $26=$26$0;
      var $27=(($tm+8)|0);
      HEAP32[(($27)>>2)]=$26;
      var $st$91$0=(($3)|0);
      var $28$0=HEAP32[(($st$91$0)>>2)];
      var $st$91$1=(($3+4)|0);
      var $28$1=HEAP32[(($st$91$1)>>2)];
      var $$emscripten$temp$8$0=24;
      var $$emscripten$temp$8$1=0;
      var $29$0 = (i64Math.divide($28$0,$28$1,$$emscripten$temp$8$0,$$emscripten$temp$8$1),i64Math.result[0]); var $29$1 = i64Math.result[1];
      var $st$98$0=(($3)|0);
      HEAP32[(($st$98$0)>>2)]=$29$0;
      var $st$98$1=(($3+4)|0);
      HEAP32[(($st$98$1)>>2)]=$29$1;
      var $st$102$0=(($3)|0);
      var $30$0=HEAP32[(($st$102$0)>>2)];
      var $st$102$1=(($3+4)|0);
      var $30$1=HEAP32[(($st$102$1)>>2)];
      var $$emscripten$temp$9$0=365;
      var $$emscripten$temp$9$1=0;
      var $31$0 = (i64Math.divide($30$0,$30$1,$$emscripten$temp$9$0,$$emscripten$temp$9$1),i64Math.result[0]); var $31$1 = i64Math.result[1];
      var $$emscripten$temp$10$0=1601;
      var $$emscripten$temp$10$1=0;
      var $32$0 = (i64Math.add($$emscripten$temp$10$0,$$emscripten$temp$10$1,$31$0,$31$1),i64Math.result[0]); var $32$1 = i64Math.result[1];
      var $33$0=$32$0;
      var $33=$33$0;
      var $34=(($tm+20)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($tm+20)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=_cdf_getdays($36);
      $rdays=$37;
      var $38=$rdays;
      var $39=((($38)-(1))|0);
      var $40$0=$39;
      var $40$1=((($39)|0) < 0 ? -1 : 0);
      var $st$124$0=(($3)|0);
      var $41$0=HEAP32[(($st$124$0)>>2)];
      var $st$124$1=(($3+4)|0);
      var $41$1=HEAP32[(($st$124$1)>>2)];
      var $42$0 = (i64Math.subtract($41$0,$41$1,$40$0,$40$1),i64Math.result[0]); var $42$1 = i64Math.result[1];
      var $st$129$0=(($3)|0);
      HEAP32[(($st$129$0)>>2)]=$42$0;
      var $st$129$1=(($3+4)|0);
      HEAP32[(($st$129$1)>>2)]=$42$1;
      var $43=(($tm+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $st$135$0=(($3)|0);
      var $45$0=HEAP32[(($st$135$0)>>2)];
      var $st$135$1=(($3+4)|0);
      var $45$1=HEAP32[(($st$135$1)>>2)];
      var $46$0=$45$0;
      var $46=$46$0;
      var $47=_cdf_getday($44, $46);
      var $48=(($tm+12)|0);
      HEAP32[(($48)>>2)]=$47;
      var $49=(($tm+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $st$146$0=(($3)|0);
      var $51$0=HEAP32[(($st$146$0)>>2)];
      var $st$146$1=(($3+4)|0);
      var $51$1=HEAP32[(($st$146$1)>>2)];
      var $52$0=$51$0;
      var $52=$52$0;
      var $53=_cdf_getmonth($50, $52);
      var $54=(($tm+16)|0);
      HEAP32[(($54)>>2)]=$53;
      var $55=(($tm+24)|0);
      HEAP32[(($55)>>2)]=0;
      var $56=(($tm+28)|0);
      HEAP32[(($56)>>2)]=0;
      var $57=(($tm+32)|0);
      HEAP32[(($57)>>2)]=0;
      var $58=(($tm+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1900))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=_mktime($tm);
      var $62=$2;
      var $63=(($62)|0);
      HEAP32[(($63)>>2)]=$61;
      var $64=$2;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0)==-1;
      if ($67) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $69=___errno();
      HEAP32[(($69)>>2)]=22;
      $1=-1;
      __label__ = 5; break;
    case 4: 
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $72=$1;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_timestamp_to_timespec["X"]=1;

function _cdf_ctime($sec) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ptr;
      $2=$sec;
      var $3=$2;
      var $4=_ctime($3);
      $ptr=$4;
      var $5=$ptr;
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$ptr;
      $1=$8;
      __label__ = 5; break;
    case 4: 
      var $10=$2;
      var $11=HEAP32[(($10)>>2)];
      var $12$0=$11;
      var $12$1=((($11)|0) < 0 ? -1 : 0);
      var $$emscripten$temp$1=((STRING_TABLE.__str304)|0);
      var $$emscripten$temp$0=((_cdf_ctime_ctbuf)|0);
      var $13=_snprintf($$emscripten$temp$0, 26, $$emscripten$temp$1, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12$0,HEAP32[(((tempInt)+(4))>>2)]=$12$1,tempInt));
      $1=((_cdf_ctime_ctbuf)|0);
      __label__ = 5; break;
    case 5: 
      var $15=$1;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _file_trycdf($ms, $fd, $buf, $nbytes) {
  var __stackBase__  = STACKTOP; STACKTOP += 604; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $info=__stackBase__;
      var $h=(__stackBase__)+(12);
      var $sat=(__stackBase__)+(524);
      var $ssat=(__stackBase__)+(532);
      var $sst=(__stackBase__)+(540);
      var $scn=(__stackBase__)+(552);
      var $dir=(__stackBase__)+(564);
      var $i;
      var $expn;
      var $corrupt;
      var $str;
      var $d;
      var $name=(__stackBase__)+(572);
      var $j;
      var $k;
      $2=$ms;
      $3=$fd;
      $4=$buf;
      $5=$nbytes;
      $expn=((__str307)|0);
      $corrupt=((STRING_TABLE.__str1308)|0);
      var $6=$3;
      var $7=(($info)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=$4;
      var $9=(($info+4)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$5;
      var $11=(($info+8)|0);
      HEAP32[(($11)>>2)]=$10;
      var $12=$2;
      var $13=(($12+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 2048;
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 51; break;
    case 4: 
      var $19=_cdf_read_header($info, $h);
      var $20=(($19)|0)==-1;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 51; break;
    case 6: 
      var $23=_cdf_read_sat($info, $h, $sat);
      $i=$23;
      var $24=(($23)|0)==-1;
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $expn=((STRING_TABLE.__str2309)|0);
      __label__ = 40; break;
    case 8: 
      var $27=_cdf_read_ssat($info, $h, $sat, $ssat);
      $i=$27;
      var $28=(($27)|0)==-1;
      if ($28) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $expn=((STRING_TABLE.__str3310)|0);
      __label__ = 39; break;
    case 10: 
      var $31=_cdf_read_dir($info, $h, $sat, $dir);
      $i=$31;
      var $32=(($31)|0)==-1;
      if ($32) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $expn=((STRING_TABLE.__str4311)|0);
      __label__ = 38; break;
    case 12: 
      var $35=_cdf_read_short_stream($info, $h, $sat, $dir, $sst);
      $i=$35;
      var $36=(($35)|0)==-1;
      if ($36) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $expn=((STRING_TABLE.__str5312)|0);
      __label__ = 37; break;
    case 14: 
      var $39=_cdf_read_summary_info($info, $h, $sat, $ssat, $sst, $dir, $scn);
      $i=$39;
      var $40=(($39)|0)==-1;
      if ($40) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $42=___errno();
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0)==3;
      if ($44) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $46=$expn;
      $corrupt=$46;
      $expn=((STRING_TABLE.__str6313)|0);
      __label__ = 18; break;
    case 17: 
      $expn=((STRING_TABLE.__str7314)|0);
      __label__ = 18; break;
    case 18: 
      __label__ = 36; break;
    case 19: 
      var $50=$2;
      var $51=_cdf_file_summary_info($50, $h, $scn);
      $i=$51;
      var $52=(($51)|0) < 0;
      if ($52) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $expn=((STRING_TABLE.__str8315)|0);
      __label__ = 21; break;
    case 21: 
      var $55=$i;
      var $56=(($55)|0)==0;
      if ($56) { __label__ = 22; break; } else { __label__ = 35; break; }
    case 22: 
      $str=((STRING_TABLE.__str9316)|0);
      $j=0;
      __label__ = 23; break;
    case 23: 
      var $59=$j;
      var $60=(($dir+4)|0);
      var $61=HEAPU32[(($60)>>2)];
      var $62=(($59)>>>0) < (($61)>>>0);
      if ($62) { __label__ = 24; break; } else { __label__ = 32; break; }
    case 24: 
      var $64=$j;
      var $65=(($dir)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+($64<<7))|0);
      $d=$67;
      $k=0;
      __label__ = 25; break;
    case 25: 
      var $69=$k;
      var $70=(($69)>>>0) < 32;
      if ($70) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $72=$k;
      var $73=$d;
      var $74=(($73)|0);
      var $75=(($74+($72<<1))|0);
      var $76=HEAP16[(($75)>>1)];
      var $77=_cdf_tole2($76);
      var $78=(($77) & 255);
      var $79=$k;
      var $80=(($name+$79)|0);
      HEAP8[($80)]=$78;
      __label__ = 27; break;
    case 27: 
      var $82=$k;
      var $83=((($82)+(1))|0);
      $k=$83;
      __label__ = 25; break;
    case 28: 
      var $85=(($name)|0);
      var $86=_strstr($85, ((STRING_TABLE.__str10317)|0));
      var $87=(($86)|0)==0;
      if ($87) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $str=((STRING_TABLE.__str11318)|0);
      __label__ = 32; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $91=$j;
      var $92=((($91)+(1))|0);
      $j=$92;
      __label__ = 23; break;
    case 32: 
      var $94=$2;
      var $95=$str;
      var $96=_file_printf($94, ((STRING_TABLE.__str12319)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$95,tempInt));
      var $97=(($96)|0)==-1;
      if ($97) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $1=-1;
      __label__ = 51; break;
    case 34: 
      $i=1;
      __label__ = 35; break;
    case 35: 
      var $101=(($scn)|0);
      var $102=HEAP32[(($101)>>2)];
      _free($102);
      __label__ = 36; break;
    case 36: 
      var $104=(($sst)|0);
      var $105=HEAP32[(($104)>>2)];
      _free($105);
      __label__ = 37; break;
    case 37: 
      var $107=(($dir)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108;
      _free($109);
      __label__ = 38; break;
    case 38: 
      var $111=(($ssat)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$112;
      _free($113);
      __label__ = 39; break;
    case 39: 
      var $115=(($sat)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$116;
      _free($117);
      __label__ = 40; break;
    case 40: 
      var $119=$i;
      var $120=(($119)|0)!=1;
      if ($120) { __label__ = 41; break; } else { __label__ = 50; break; }
    case 41: 
      var $122=$i;
      var $123=(($122)|0)==-1;
      if ($123) { __label__ = 42; break; } else { __label__ = 45; break; }
    case 42: 
      var $125=$2;
      var $126=_file_printf($125, ((STRING_TABLE.__str13320)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $127=(($126)|0)==-1;
      if ($127) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      $1=-1;
      __label__ = 51; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $131=$expn;
      var $132=HEAP8[($131)];
      var $133=(($132 << 24) >> 24)!=0;
      if ($133) { __label__ = 46; break; } else { __label__ = 49; break; }
    case 46: 
      var $135=$2;
      var $136=$corrupt;
      var $137=$expn;
      var $138=_file_printf($135, ((STRING_TABLE.__str14321)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$136,HEAP32[(((tempInt)+(4))>>2)]=$137,tempInt));
      var $139=(($138)|0)==-1;
      if ($139) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      $1=-1;
      __label__ = 51; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      $i=1;
      __label__ = 50; break;
    case 50: 
      var $144=$i;
      $1=$144;
      __label__ = 51; break;
    case 51: 
      var $146=$1;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + __label__);
  }
}
_file_trycdf["X"]=1;

function _cdf_file_summary_info($ms, $h, $sst) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $si=__stackBase__;
      var $info=(__stackBase__)+(28);
      var $count=(__stackBase__)+(32);
      var $m;
      $2=$ms;
      $3=$h;
      $4=$sst;
      var $5=$4;
      var $6=$3;
      var $7=_cdf_unpack_summary_info($5, $6, $si, $info, $count);
      var $8=(($7)|0)==-1;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 24; break;
    case 4: 
      var $11=$2;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 1040;
      var $15=(($14)|0)==0;
      if ($15) { __label__ = 5; break; } else { __label__ = 20; break; }
    case 5: 
      var $17=$2;
      var $18=_file_printf($17, ((STRING_TABLE.__str13320)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $19=(($18)|0)==-1;
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=-1;
      __label__ = 24; break;
    case 7: 
      var $22=$2;
      var $23=(($si)|0);
      var $24=HEAPU16[(($23)>>1)];
      var $25=(($24)&65535);
      var $26=(($25)|0)==65534;
      var $27=$26 ? (((STRING_TABLE.__str16323)|0)) : (((STRING_TABLE.__str17324)|0));
      var $28=_file_printf($22, ((STRING_TABLE.__str15322)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$27,tempInt));
      var $29=(($28)|0)==-1;
      if ($29) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=-2;
      __label__ = 24; break;
    case 9: 
      var $32=(($si+6)|0);
      var $33=HEAPU16[(($32)>>1)];
      var $34=(($33)&65535);
      if ((($34)|0) == 2) {
        __label__ = 10; break;
      }
      else if ((($34)|0) == 1) {
        __label__ = 13; break;
      }
      else {
      __label__ = 16; break;
      }
      
    case 10: 
      var $36=$2;
      var $37=(($si+4)|0);
      var $38=HEAPU16[(($37)>>1)];
      var $39=(($38)&65535);
      var $40=$39 & 255;
      var $41=(($si+4)|0);
      var $42=HEAPU16[(($41)>>1)];
      var $43=(($42)&65535);
      var $44=$43 >>> 8;
      var $45=_file_printf($36, ((STRING_TABLE.__str18325)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=$44,tempInt));
      var $46=(($45)|0)==-1;
      if ($46) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=-2;
      __label__ = 24; break;
    case 12: 
      __label__ = 19; break;
    case 13: 
      var $50=$2;
      var $51=(($si+4)|0);
      var $52=HEAPU16[(($51)>>1)];
      var $53=(($52)&65535);
      var $54=$53 >>> 8;
      var $55=(($si+4)|0);
      var $56=HEAPU16[(($55)>>1)];
      var $57=(($56)&65535);
      var $58=$57 & 255;
      var $59=_file_printf($50, ((STRING_TABLE.__str19326)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$58,tempInt));
      var $60=(($59)|0)==-1;
      if ($60) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $1=-2;
      __label__ = 24; break;
    case 15: 
      __label__ = 19; break;
    case 16: 
      var $64=$2;
      var $65=(($si+6)|0);
      var $66=HEAPU16[(($65)>>1)];
      var $67=(($66)&65535);
      var $68=(($si+4)|0);
      var $69=HEAPU16[(($68)>>1)];
      var $70=(($69)&65535);
      var $71=$70 & 255;
      var $72=(($si+4)|0);
      var $73=HEAPU16[(($72)>>1)];
      var $74=(($73)&65535);
      var $75=$74 >>> 8;
      var $76=_file_printf($64, ((STRING_TABLE.__str20327)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$67,HEAP32[(((tempInt)+(4))>>2)]=$71,HEAP32[(((tempInt)+(8))>>2)]=$75,tempInt));
      var $77=(($76)|0)==-1;
      if ($77) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      $1=-2;
      __label__ = 24; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $82=$2;
      var $83=HEAP32[(($info)>>2)];
      var $84=HEAP32[(($count)>>2)];
      var $85=_cdf_file_property_info($82, $83, $84);
      $m=$85;
      var $86=HEAP32[(($info)>>2)];
      var $87=$86;
      _free($87);
      var $88=$m;
      var $89=(($88)|0)==-1;
      if ($89) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $94 = -2;__label__ = 23; break;
    case 22: 
      var $92=$m;
      var $94 = $92;__label__ = 23; break;
    case 23: 
      var $94;
      $1=$94;
      __label__ = 24; break;
    case 24: 
      var $96=$1;
      STACKTOP = __stackBase__;
      return $96;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_file_summary_info["X"]=1;

function _cdf_file_property_info($ms, $info, $count) {
  var __stackBase__  = STACKTOP; STACKTOP += 1168; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $tp=__stackBase__;
      var $ts=(__stackBase__)+(8);
      var $buf=(__stackBase__)+(16);
      var $str;
      var $s;
      var $len;
      var $vbuf=(__stackBase__)+(80);
      var $j;
      var $k;
      var $tbuf=(__stackBase__)+(1104);
      var $c;
      var $ec;
      $2=$ms;
      $3=$info;
      $4=$count;
      $str=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=$4;
      var $8=(($6)>>>0) < (($7)>>>0);
      if ($8) { __label__ = 4; break; } else { __label__ = 81; break; }
    case 4: 
      var $10=(($buf)|0);
      var $11=$i;
      var $12=$3;
      var $13=(($12+($11<<4))|0);
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_cdf_print_property_name($10, 64, $15);
      var $17=$i;
      var $18=$3;
      var $19=(($18+($17<<4))|0);
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      if ((($21)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($21)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($21)|0) == 3) {
        __label__ = 10; break;
      }
      else if ((($21)|0) == 19) {
        __label__ = 14; break;
      }
      else if ((($21)|0) == 4) {
        __label__ = 18; break;
      }
      else if ((($21)|0) == 5) {
        __label__ = 22; break;
      }
      else if ((($21)|0) == 30 || (($21)|0) == 31) {
        __label__ = 26; break;
      }
      else if ((($21)|0) == 64) {
        __label__ = 63; break;
      }
      else if ((($21)|0) == 71) {
        __label__ = 77; break;
      }
      else {
      __label__ = 78; break;
      }
      
    case 5: 
      __label__ = 79; break;
    case 6: 
      var $24=$2;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & 1040;
      var $28=(($27)|0)==0;
      if ($28) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $30=$2;
      var $31=(($buf)|0);
      var $32=$i;
      var $33=$3;
      var $34=(($33+($32<<4))|0);
      var $35=(($34+8)|0);
      var $36=$35;
      var $37=HEAP16[(($36)>>1)];
      var $38=(($37 << 16) >> 16);
      var $39=_file_printf($30, ((STRING_TABLE.__str21328)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
      var $40=(($39)|0)==-1;
      if ($40) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=-1;
      __label__ = 88; break;
    case 9: 
      __label__ = 79; break;
    case 10: 
      var $44=$2;
      var $45=(($44+28)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & 1040;
      var $48=(($47)|0)==0;
      if ($48) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $50=$2;
      var $51=(($buf)|0);
      var $52=$i;
      var $53=$3;
      var $54=(($53+($52<<4))|0);
      var $55=(($54+8)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=_file_printf($50, ((STRING_TABLE.__str22329)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$51,HEAP32[(((tempInt)+(4))>>2)]=$57,tempInt));
      var $59=(($58)|0)==-1;
      if ($59) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=-1;
      __label__ = 88; break;
    case 13: 
      __label__ = 79; break;
    case 14: 
      var $63=$2;
      var $64=(($63+28)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 & 1040;
      var $67=(($66)|0)==0;
      if ($67) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $69=$2;
      var $70=(($buf)|0);
      var $71=$i;
      var $72=$3;
      var $73=(($72+($71<<4))|0);
      var $74=(($73+8)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=_file_printf($69, ((STRING_TABLE.__str23330)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$70,HEAP32[(((tempInt)+(4))>>2)]=$76,tempInt));
      var $78=(($77)|0)==-1;
      if ($78) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $1=-1;
      __label__ = 88; break;
    case 17: 
      __label__ = 79; break;
    case 18: 
      var $82=$2;
      var $83=(($82+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 & 1040;
      var $86=(($85)|0)==0;
      if ($86) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $88=$2;
      var $89=(($buf)|0);
      var $90=$i;
      var $91=$3;
      var $92=(($91+($90<<4))|0);
      var $93=(($92+8)|0);
      var $94=$93;
      var $95=HEAPF32[(($94)>>2)];
      var $96=$95;
      var $97=_file_printf($88, ((STRING_TABLE.__str24331)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$89,(tempDoubleF64[0]=$96,HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(4))+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $98=(($97)|0)==-1;
      if ($98) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $1=-1;
      __label__ = 88; break;
    case 21: 
      __label__ = 79; break;
    case 22: 
      var $102=$2;
      var $103=(($102+28)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 & 1040;
      var $106=(($105)|0)==0;
      if ($106) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $108=$2;
      var $109=(($buf)|0);
      var $110=$i;
      var $111=$3;
      var $112=(($111+($110<<4))|0);
      var $113=(($112+8)|0);
      var $114=$113;
      var $115=(tempDoubleI32[0]=HEAP32[(($114)>>2)],tempDoubleI32[1]=HEAP32[((($114)+(4))>>2)],tempDoubleF64[0]);
      var $116=_file_printf($108, ((STRING_TABLE.__str24331)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$109,(tempDoubleF64[0]=$115,HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(4))+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $117=(($116)|0)==-1;
      if ($117) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      $1=-1;
      __label__ = 88; break;
    case 25: 
      __label__ = 79; break;
    case 26: 
      var $121=$i;
      var $122=$3;
      var $123=(($122+($121<<4))|0);
      var $124=(($123+8)|0);
      var $125=$124;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      $len=$127;
      var $128=$len;
      var $129=(($128)|0) > 1;
      if ($129) { __label__ = 27; break; } else { __label__ = 62; break; }
    case 27: 
      $k=1;
      var $131=$i;
      var $132=$3;
      var $133=(($132+($131<<4))|0);
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|0)==31;
      if ($136) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $138=$k;
      var $139=((($138)+(1))|0);
      $k=$139;
      __label__ = 29; break;
    case 29: 
      var $141=$i;
      var $142=$3;
      var $143=(($142+($141<<4))|0);
      var $144=(($143+8)|0);
      var $145=$144;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      $s=$147;
      $j=0;
      __label__ = 30; break;
    case 30: 
      var $149=$j;
      var $150=(($149)>>>0) < 1024;
      if ($150) { __label__ = 31; break; } else { var $156 = 0;__label__ = 32; break; }
    case 31: 
      var $152=$len;
      var $153=((($152)-(1))|0);
      $len=$153;
      var $154=(($152)|0)!=0;
      var $156 = $154;__label__ = 32; break;
    case 32: 
      var $156;
      if ($156) { __label__ = 33; break; } else { __label__ = 39; break; }
    case 33: 
      var $158=$s;
      var $159=HEAP8[($158)];
      var $160=(($159 << 24) >> 24);
      var $161=(($160)|0)==0;
      if ($161) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      __label__ = 39; break;
    case 35: 
      var $164=$s;
      var $165=HEAPU8[($164)];
      var $166=(($165)&255);
      var $167=_isprint($166);
      var $168=(($167)|0)!=0;
      if ($168) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $170=$s;
      var $171=HEAP8[($170)];
      var $172=$j;
      var $173=(($vbuf+$172)|0);
      HEAP8[($173)]=$171;
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $176=$j;
      var $177=((($176)+(1))|0);
      $j=$177;
      var $178=$k;
      var $179=$s;
      var $180=(($179+$178)|0);
      $s=$180;
      __label__ = 30; break;
    case 39: 
      var $182=$j;
      var $183=(($182)|0)==1024;
      if ($183) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $185=$j;
      var $186=((($185)-(1))|0);
      $j=$186;
      __label__ = 41; break;
    case 41: 
      var $188=$j;
      var $189=(($vbuf+$188)|0);
      HEAP8[($189)]=0;
      var $190=$2;
      var $191=(($190+28)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$192 & 1040;
      var $194=(($193)|0)==0;
      if ($194) { __label__ = 42; break; } else { __label__ = 47; break; }
    case 42: 
      var $196=(($vbuf)|0);
      var $197=HEAP8[($196)];
      var $198=(($197 << 24) >> 24)!=0;
      if ($198) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $200=$2;
      var $201=(($buf)|0);
      var $202=(($vbuf)|0);
      var $203=_file_printf($200, ((STRING_TABLE.__str25332)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$201,HEAP32[(((tempInt)+(4))>>2)]=$202,tempInt));
      var $204=(($203)|0)==-1;
      if ($204) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      $1=-1;
      __label__ = 88; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 61; break;
    case 47: 
      var $209=$i;
      var $210=$3;
      var $211=(($210+($209<<4))|0);
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|0)==18;
      if ($214) { __label__ = 48; break; } else { __label__ = 60; break; }
    case 48: 
      var $216=(($vbuf)|0);
      var $217=_strstr($216, ((STRING_TABLE.__str26333)|0));
      var $218=(($217)|0)!=0;
      if ($218) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      $str=((STRING_TABLE.__str11318)|0);
      __label__ = 59; break;
    case 50: 
      var $221=(($vbuf)|0);
      var $222=_strstr($221, ((STRING_TABLE.__str27334)|0));
      var $223=(($222)|0)!=0;
      if ($223) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      $str=((STRING_TABLE.__str28335)|0);
      __label__ = 58; break;
    case 52: 
      var $226=(($vbuf)|0);
      var $227=_strstr($226, ((STRING_TABLE.__str29336)|0));
      var $228=(($227)|0)!=0;
      if ($228) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      $str=((STRING_TABLE.__str30337)|0);
      __label__ = 57; break;
    case 54: 
      var $231=(($vbuf)|0);
      var $232=_strstr($231, ((STRING_TABLE.__str31338)|0));
      var $233=(($232)|0)!=0;
      if ($233) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      $str=((STRING_TABLE.__str32339)|0);
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      __label__ = 79; break;
    case 63: 
      var $243=$i;
      var $244=$3;
      var $245=(($244+($243<<4))|0);
      var $246=(($245+8)|0);
      var $247=$246;
      var $st$5$0=(($247)|0);
      var $248$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($247+4)|0);
      var $248$1=HEAP32[(($st$5$1)>>2)];
      var $st$9$0=(($tp)|0);
      HEAP32[(($st$9$0)>>2)]=$248$0;
      var $st$9$1=(($tp+4)|0);
      HEAP32[(($st$9$1)>>2)]=$248$1;
      var $st$13$0=(($tp)|0);
      var $249$0=HEAP32[(($st$13$0)>>2)];
      var $st$13$1=(($tp+4)|0);
      var $249$1=HEAP32[(($st$13$1)>>2)];
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $250=$249$0 != $$emscripten$temp$0$0 || $249$1 != $$emscripten$temp$0$1;
      if ($250) { __label__ = 64; break; } else { __label__ = 76; break; }
    case 64: 
      var $st$0$0=(($tp)|0);
      var $252$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $252$1=HEAP32[(($st$0$1)>>2)];
      var $$emscripten$temp$1$0=-1530494976;
      var $$emscripten$temp$1$1=232830;
      var $253=($252$1|0) < ($$emscripten$temp$1$1|0) || (($252$1|0) == ($$emscripten$temp$1$1|0) && ($252$0>>>0) <  ($$emscripten$temp$1$0>>>0));
      if ($253) { __label__ = 65; break; } else { __label__ = 69; break; }
    case 65: 
      var $255=(($tbuf)|0);
      var $st$1$0=(($tp)|0);
      var $256$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($tp+4)|0);
      var $256$1=HEAP32[(($st$1$1)>>2)];
      var $257=_cdf_print_elapsed_time($255, 64, $256$0, $256$1);
      var $257$0=$257[0];
      var $258=$2;
      var $259=(($258+28)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$260 & 1040;
      var $262=(($261)|0)==0;
      if ($262) { __label__ = 66; break; } else { __label__ = 68; break; }
    case 66: 
      var $264=$2;
      var $265=(($buf)|0);
      var $266=(($tbuf)|0);
      var $267=_file_printf($264, ((STRING_TABLE.__str25332)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$265,HEAP32[(((tempInt)+(4))>>2)]=$266,tempInt));
      var $268=(($267)|0)==-1;
      if ($268) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      $1=-1;
      __label__ = 88; break;
    case 68: 
      __label__ = 75; break;
    case 69: 
      var $st$0$0=(($tp)|0);
      var $272$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $272$1=HEAP32[(($st$0$1)>>2)];
      var $273=_cdf_timestamp_to_timespec($ts, $272$0, $272$1);
      var $273$0=$273[0];
      var $274=(($ts)|0);
      var $275=_cdf_ctime($274);
      $c=$275;
      var $276=$c;
      var $277=_strchr($276, 10);
      $ec=$277;
      var $278=(($277)|0)!=0;
      if ($278) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $280=$ec;
      HEAP8[($280)]=0;
      __label__ = 71; break;
    case 71: 
      var $282=$2;
      var $283=(($282+28)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$284 & 1040;
      var $286=(($285)|0)==0;
      if ($286) { __label__ = 72; break; } else { __label__ = 74; break; }
    case 72: 
      var $288=$2;
      var $289=(($buf)|0);
      var $290=$c;
      var $291=_file_printf($288, ((STRING_TABLE.__str25332)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$289,HEAP32[(((tempInt)+(4))>>2)]=$290,tempInt));
      var $292=(($291)|0)==-1;
      if ($292) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      $1=-1;
      __label__ = 88; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 79; break;
    case 77: 
      __label__ = 79; break;
    case 78: 
      $1=-1;
      __label__ = 88; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $301=$i;
      var $302=((($301)+(1))|0);
      $i=$302;
      __label__ = 3; break;
    case 81: 
      var $304=$2;
      var $305=(($304+28)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=$306 & 1040;
      var $308=(($307)|0)==0;
      if ($308) { __label__ = 87; break; } else { __label__ = 82; break; }
    case 82: 
      var $310=$str;
      var $311=(($310)|0)==0;
      if ($311) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      $1=0;
      __label__ = 88; break;
    case 84: 
      var $314=$2;
      var $315=$str;
      var $316=_file_printf($314, ((STRING_TABLE.__str12319)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$315,tempInt));
      var $317=(($316)|0)==-1;
      if ($317) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      $1=-1;
      __label__ = 88; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      $1=1;
      __label__ = 88; break;
    case 88: 
      var $322=$1;
      STACKTOP = __stackBase__;
      return $322;
    default: assert(0, "bad label: " + __label__);
  }
}
_cdf_file_property_info["X"]=1;

function _asprintf($ptr, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $vargs=__stackBase__;
  var $retval;
  $1=$ptr;
  $2=$fmt;
  var $3=$vargs;
  HEAP32[(($3)>>2)]=arguments[_asprintf.length];
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($vargs)>>2)];
  var $7=_vasprintf($4, $5, $6);
  $retval=$7;
  var $8=$vargs;
  ;
  var $9=$retval;
  STACKTOP = __stackBase__;
  return $9;
}


function _vasprintf($ptr, $format_string, $vargs) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $s=(__stackBase__)+(4);
      var $retval;
      $2=$ptr;
      $3=$format_string;
      HEAP32[(($4)>>2)]=$vargs;
      var $5=$3;
      var $6=(($s)|0);
      HEAP32[(($6)>>2)]=$5;
      var $7=(($s+28)|0);
      var $8=$7;
      var $9=$4;
      _llvm_va_copy($8, $9);
      var $10=(($s+24)|0);
      HEAP32[(($10)>>2)]=2147483647;
      var $11=_core($s);
      $retval=$11;
      var $12=(($s+28)|0);
      var $13=$12;
      ;
      var $14=$retval;
      var $15=(($14)|0)==-1;
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $17=$2;
      HEAP32[(($17)>>2)]=0;
      $1=-1;
      __label__ = 5; break;
    case 4: 
      var $19=(($s+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      HEAP32[(($21)>>2)]=$20;
      var $22=$retval;
      $1=$22;
      __label__ = 5; break;
    case 5: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}


function _core($s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $len;
      var $save_len;
      var $dummy_base;
      $2=$s;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0) <= 0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 25; break;
    case 4: 
      var $9=$2;
      var $10=(($9+24)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(1))|0);
      HEAP32[(($10)>>2)]=$12;
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)==0;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$2;
      var $19=(($18)|0);
      HEAP32[(($19)>>2)]=((STRING_TABLE.__str348)|0);
      __label__ = 6; break;
    case 6: 
      var $21=$2;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$2;
      var $24=(($23+12)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=$2;
      var $26=(($25+16)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$2;
      var $28=(($27+20)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=$2;
      var $30=_realloc_buff($29, 0);
      var $31=(($30)|0)==-1;
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=-1;
      __label__ = 25; break;
    case 8: 
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+8)|0);
      HEAP32[(($38)>>2)]=$36;
      __label__ = 9; break;
    case 9: 
      var $40=$2;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=(($44)|0)==0;
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $47=$2;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      HEAP8[($49)]=0;
      var $50=$2;
      var $51=(($50+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      $len=$53;
      __label__ = 16; break;
    case 11: 
      var $55=$2;
      var $56=_dispatch($55);
      var $57=(($56)|0)==-1;
      if ($57) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 24; break;
    case 13: 
      var $60=$2;
      var $61=(($60+16)|0);
      var $62=HEAPU32[(($61)>>2)];
      var $63=$2;
      var $64=(($63+24)|0);
      var $65=HEAPU32[(($64)>>2)];
      var $66=(($62)>>>0) >= (($65)>>>0);
      if ($66) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $68=$2;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      HEAP8[($74)]=0;
      var $75=$2;
      var $76=(($75+24)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)+(1))|0);
      $len=$78;
      __label__ = 16; break;
    case 15: 
      __label__ = 9; break;
    case 16: 
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      $dummy_base=$83;
      $save_len=0;
      var $84=$2;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($86+$89)|0);
      $dummy_base=$90;
      var $91=$2;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      $save_len=$93;
      __label__ = 17; break;
    case 17: 
      var $95=$2;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=HEAP8[($97)];
      var $99=(($98 << 24) >> 24);
      var $100=(($99)|0)!=0;
      if ($100) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $102=$2;
      var $103=(($102+16)|0);
      HEAP32[(($103)>>2)]=0;
      var $104=$dummy_base;
      var $105=$2;
      var $106=(($105+8)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$2;
      var $108=_dispatch($107);
      var $109=(($108)|0)==-1;
      if ($109) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 24; break;
    case 20: 
      __label__ = 17; break;
    case 21: 
      var $113=$2;
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$save_len;
      var $117=((($116)+(1))|0);
      var $118=_realloc($115, $117);
      var $119=$2;
      var $120=(($119+4)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$2;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|0)==0;
      if ($124) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $1=-1;
      __label__ = 25; break;
    case 23: 
      var $127=$2;
      var $128=(($127+20)|0);
      var $129=HEAP32[(($128)>>2)];
      $1=$129;
      __label__ = 25; break;
    case 24: 
      var $131=$2;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      _free($133);
      $1=-1;
      __label__ = 25; break;
    case 25: 
      var $135=$1;
      ;
      return $135;
    default: assert(0, "bad label: " + __label__);
  }
}
_core["X"]=1;

function _realloc_buff($s, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ptr;
      $2=$s;
      $3=$len;
      var $4=$3;
      var $5=((($4)+(1024))|0);
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($5)+($8))|0);
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($9)>>>0) > (($12)>>>0);
      if ($13) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $15=$2;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(2048))|0);
      var $19=$3;
      var $20=((($19)+($18))|0);
      $3=$20;
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$3;
      var $25=_realloc($23, $24);
      $ptr=$25;
      var $26=$ptr;
      var $27=(($26)|0)==0;
      if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $29=$2;
      var $30=(($29+4)|0);
      HEAP32[(($30)>>2)]=0;
      $1=-1;
      __label__ = 7; break;
    case 5: 
      var $32=$ptr;
      var $33=$2;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$35;
      var $40=$38;
      var $41=((($39)-($40))|0);
      var $42=(($32+$41)|0);
      var $43=$2;
      var $44=(($43+8)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$ptr;
      var $46=$2;
      var $47=(($46+4)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$3;
      var $49=$2;
      var $50=(($49+12)|0);
      HEAP32[(($50)>>2)]=$48;
      var $51=$2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      var $55=$2;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+$54)|0);
      HEAP8[($58)]=1;
      __label__ = 6; break;
    case 6: 
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $61=$1;
      ;
      return $61;
    default: assert(0, "bad label: " + __label__);
  }
}
_realloc_buff["X"]=1;
// WARNING: content after a branch in a label, line: 29532
// WARNING: content after a branch in a label, line: 29618
// WARNING: content after a branch in a label, line: 29692
// WARNING: content after a branch in a label, line: 29724
// WARNING: content after a branch in a label, line: 29820
// WARNING: content after a branch in a label, line: 29855
// WARNING: content after a branch in a label, line: 30133
// WARNING: content after a branch in a label, line: 30154
// WARNING: content after a branch in a label, line: 30220
// WARNING: content after a branch in a label, line: 30272
// WARNING: content after a branch in a label, line: 30316

function _dispatch($s) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $initial_ptr;
      var $format_string=__stackBase__;
      var $format_ptr;
      var $flag_plus;
      var $flag_minus;
      var $flag_space;
      var $flag_sharp;
      var $flag_zero;
      var $width;
      var $prec;
      var $modifier;
      var $approx_width;
      var $type;
      var $p;
      $2=$s;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|0)!=37;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_usual_char($10);
      $1=$11;
      __label__ = 130; break;
    case 4: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+1)|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24);
      var $22=(($21)|0)==37;
      if ($22) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $24=$2;
      var $25=_realloc_buff($24, 1);
      var $26=(($25)|0)==-1;
      if ($26) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=-1;
      __label__ = 130; break;
    case 7: 
      var $29=$2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      HEAP8[($31)]=37;
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+1)|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=$2;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+1)|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$2;
      var $41=(($40+16)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)+(1))|0);
      HEAP32[(($41)>>2)]=$43;
      var $44=$2;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      $1=0;
      __label__ = 130; break;
    case 8: 
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      $initial_ptr=$51;
      $flag_zero=0;
      $flag_sharp=0;
      $flag_space=0;
      $flag_minus=0;
      $flag_plus=0;
      __label__ = 9; break;
    case 9: 
      var $53=$2;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $58=(($57)|0)==32;
      if ($58) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $flag_space=1;
      __label__ = 24; break;
    case 11: 
      var $61=$2;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=HEAP8[($63)];
      var $65=(($64 << 24) >> 24);
      var $66=(($65)|0)==43;
      if ($66) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $flag_plus=1;
      __label__ = 23; break;
    case 13: 
      var $69=$2;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=HEAP8[($71)];
      var $73=(($72 << 24) >> 24);
      var $74=(($73)|0)==45;
      if ($74) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $flag_minus=1;
      __label__ = 22; break;
    case 15: 
      var $77=$2;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=HEAP8[($79)];
      var $81=(($80 << 24) >> 24);
      var $82=(($81)|0)==35;
      if ($82) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $flag_sharp=1;
      __label__ = 21; break;
    case 17: 
      var $85=$2;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=HEAP8[($87)];
      var $89=(($88 << 24) >> 24);
      var $90=(($89)|0)==48;
      if ($90) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $flag_zero=1;
      __label__ = 20; break;
    case 19: 
      __label__ = 26; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $99=$2;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+1)|0);
      HEAP32[(($100)>>2)]=$102;
      __label__ = 9; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $105=$2;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=HEAP8[($107)];
      var $109=(($108 << 24) >> 24);
      var $110=(($109)|0)==0;
      if ($110) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $113=$initial_ptr;
      var $114=$2;
      var $115=(($114)|0);
      HEAP32[(($115)>>2)]=$113;
      $1=0;
      __label__ = 130; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $119=$2;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=HEAP8[($121)];
      var $123=(($122 << 24) >> 24);
      var $124=(($123)|0)==42;
      if ($124) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $126=$2;
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+1)|0);
      HEAP32[(($127)>>2)]=$129;
      var $130=$2;
      var $131=(($130+28)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$132;
      var $134=(($132+4)|0);
      HEAP32[(($131)>>2)]=$134;
      var $135=HEAP32[(($133)>>2)];
      $width=$135;
      var $136=$width;
      var $137=(($136)>>>0) > 16383;
      if ($137) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $width=16383;
      __label__ = 34; break;
    case 34: 
      __label__ = 39; break;
    case 35: 
      var $141=$2;
      var $142=(($141)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=HEAPU8[($143)];
      var $145=(($144)&255);
      var $146=_isdigit($145);
      var $147=(($146)|0)!=0;
      if ($147) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $149=$2;
      var $150=(($149)|0);
      var $151=_getint($150);
      $width=$151;
      __label__ = 38; break;
    case 37: 
      $width=-1;
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $156=$2;
      var $157=(($156)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=HEAP8[($158)];
      var $160=(($159 << 24) >> 24);
      var $161=(($160)|0)==0;
      if ($161) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $164=$initial_ptr;
      var $165=$2;
      var $166=(($165)|0);
      HEAP32[(($166)>>2)]=$164;
      $1=0;
      __label__ = 130; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $170=$2;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=HEAP8[($172)];
      var $174=(($173 << 24) >> 24);
      var $175=(($174)|0)==46;
      if ($175) { __label__ = 45; break; } else { __label__ = 59; break; }
    case 45: 
      var $177=$2;
      var $178=(($177)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179+1)|0);
      HEAP32[(($178)>>2)]=$180;
      var $181=$2;
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=HEAP8[($183)];
      var $185=(($184 << 24) >> 24);
      var $186=(($185)|0)==42;
      if ($186) { __label__ = 46; break; } else { __label__ = 49; break; }
    case 46: 
      var $188=$2;
      var $189=(($188)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190+1)|0);
      HEAP32[(($189)>>2)]=$191;
      var $192=$2;
      var $193=(($192+28)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=$194;
      var $196=(($194+4)|0);
      HEAP32[(($193)>>2)]=$196;
      var $197=HEAP32[(($195)>>2)];
      $prec=$197;
      var $198=$prec;
      var $199=(($198)>>>0) >= 16383;
      if ($199) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      $prec=16383;
      __label__ = 48; break;
    case 48: 
      __label__ = 53; break;
    case 49: 
      var $203=$2;
      var $204=(($203)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=HEAPU8[($205)];
      var $207=(($206)&255);
      var $208=_isdigit($207);
      var $209=(($208)|0)==0;
      if ($209) { __label__ = 50; break; } else { __label__ = 52; break; }
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $212=$initial_ptr;
      var $213=$2;
      var $214=(($213)|0);
      HEAP32[(($214)>>2)]=$212;
      $1=0;
      __label__ = 130; break;
    case 52: 
      var $217=$2;
      var $218=(($217)|0);
      var $219=_getint($218);
      $prec=$219;
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $222=$2;
      var $223=(($222)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=HEAP8[($224)];
      var $226=(($225 << 24) >> 24);
      var $227=(($226)|0)==0;
      if ($227) { __label__ = 55; break; } else { __label__ = 57; break; }
    case 55: 
      __label__ = 56; break;
    case 56: 
      var $230=$initial_ptr;
      var $231=$2;
      var $232=(($231)|0);
      HEAP32[(($232)>>2)]=$230;
      $1=0;
      __label__ = 130; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 60; break;
    case 59: 
      $prec=-1;
      __label__ = 60; break;
    case 60: 
      var $238=$2;
      var $239=(($238)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=HEAP8[($240)];
      var $242=(($241 << 24) >> 24);
      var $243=(($242)|0)==76;
      if ($243) { __label__ = 63; break; } else { __label__ = 61; break; }
    case 61: 
      var $245=$2;
      var $246=(($245)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=HEAP8[($247)];
      var $249=(($248 << 24) >> 24);
      var $250=(($249)|0)==104;
      if ($250) { __label__ = 63; break; } else { __label__ = 62; break; }
    case 62: 
      var $252=$2;
      var $253=(($252)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=HEAP8[($254)];
      var $256=(($255 << 24) >> 24);
      var $257=(($256)|0)==108;
      if ($257) { __label__ = 63; break; } else { __label__ = 72; break; }
    case 63: 
      var $259=$2;
      var $260=(($259)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=HEAP8[($261)];
      var $263=(($262 << 24) >> 24);
      $modifier=$263;
      var $264=$2;
      var $265=(($264)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=(($266+1)|0);
      HEAP32[(($265)>>2)]=$267;
      var $268=$modifier;
      var $269=(($268)|0)==108;
      if ($269) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 64: 
      var $271=$2;
      var $272=(($271)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=HEAP8[($273)];
      var $275=(($274 << 24) >> 24);
      var $276=(($275)|0)==108;
      if ($276) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $278=$2;
      var $279=(($278)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+1)|0);
      HEAP32[(($279)>>2)]=$281;
      $modifier=76;
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $284=$2;
      var $285=(($284)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=HEAP8[($286)];
      var $288=(($287 << 24) >> 24);
      var $289=(($288)|0)==0;
      if ($289) { __label__ = 68; break; } else { __label__ = 70; break; }
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $292=$initial_ptr;
      var $293=$2;
      var $294=(($293)|0);
      HEAP32[(($294)>>2)]=$292;
      $1=0;
      __label__ = 130; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      __label__ = 73; break;
    case 72: 
      $modifier=-1;
      __label__ = 73; break;
    case 73: 
      var $300=$2;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=HEAP8[($302)];
      $type=$303;
      var $304=$type;
      var $305=(($304 << 24) >> 24);
      var $306=_strchr(((STRING_TABLE.__str1349)|0), $305);
      var $307=(($306)|0)==0;
      if ($307) { __label__ = 74; break; } else { __label__ = 76; break; }
    case 74: 
      __label__ = 75; break;
    case 75: 
      var $310=$initial_ptr;
      var $311=$2;
      var $312=(($311)|0);
      HEAP32[(($312)>>2)]=$310;
      $1=0;
      __label__ = 130; break;
    case 76: 
      var $315=$2;
      var $316=(($315)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317+1)|0);
      HEAP32[(($316)>>2)]=$318;
      var $319=(($format_string)|0);
      HEAP8[($319)]=37;
      var $320=(($format_string+1)|0);
      $format_ptr=$320;
      var $321=$flag_plus;
      var $322=(($321)|0)!=0;
      if ($322) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $324=$format_ptr;
      HEAP8[($324)]=43;
      var $325=$format_ptr;
      var $326=(($325+1)|0);
      $format_ptr=$326;
      __label__ = 78; break;
    case 78: 
      var $328=$flag_minus;
      var $329=(($328)|0)!=0;
      if ($329) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $331=$format_ptr;
      HEAP8[($331)]=45;
      var $332=$format_ptr;
      var $333=(($332+1)|0);
      $format_ptr=$333;
      __label__ = 80; break;
    case 80: 
      var $335=$flag_space;
      var $336=(($335)|0)!=0;
      if ($336) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $338=$format_ptr;
      HEAP8[($338)]=32;
      var $339=$format_ptr;
      var $340=(($339+1)|0);
      $format_ptr=$340;
      __label__ = 82; break;
    case 82: 
      var $342=$flag_sharp;
      var $343=(($342)|0)!=0;
      if ($343) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $345=$format_ptr;
      HEAP8[($345)]=35;
      var $346=$format_ptr;
      var $347=(($346+1)|0);
      $format_ptr=$347;
      __label__ = 84; break;
    case 84: 
      var $349=$flag_zero;
      var $350=(($349)|0)!=0;
      if ($350) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      var $352=$format_ptr;
      HEAP8[($352)]=48;
      var $353=$format_ptr;
      var $354=(($353+1)|0);
      $format_ptr=$354;
      __label__ = 86; break;
    case 86: 
      var $356=$width;
      var $357=(($356)|0)!=-1;
      if ($357) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $359=$format_ptr;
      var $360=$width;
      var $361=_sprintf($359, ((STRING_TABLE.__str2350)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$360,tempInt));
      var $362=$format_ptr;
      var $363=_strlen($362);
      var $364=$format_ptr;
      var $365=(($364+$363)|0);
      $format_ptr=$365;
      __label__ = 88; break;
    case 88: 
      var $367=$prec;
      var $368=(($367)|0)!=-1;
      if ($368) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      var $370=$format_ptr;
      HEAP8[($370)]=46;
      var $371=$format_ptr;
      var $372=(($371+1)|0);
      $format_ptr=$372;
      var $373=$format_ptr;
      var $374=$prec;
      var $375=_sprintf($373, ((STRING_TABLE.__str2350)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$374,tempInt));
      var $376=$format_ptr;
      var $377=_strlen($376);
      var $378=$format_ptr;
      var $379=(($378+$377)|0);
      $format_ptr=$379;
      __label__ = 90; break;
    case 90: 
      var $381=$modifier;
      var $382=(($381)|0)!=-1;
      if ($382) { __label__ = 91; break; } else { __label__ = 96; break; }
    case 91: 
      var $384=$modifier;
      var $385=(($384)|0)==76;
      if ($385) { __label__ = 92; break; } else { __label__ = 94; break; }
    case 92: 
      var $387=$type;
      var $388=(($387 << 24) >> 24);
      var $389=_strchr(((STRING_TABLE.__str3351)|0), $388);
      var $390=(($389)|0)!=0;
      if ($390) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $392=$format_ptr;
      HEAP8[($392)]=108;
      var $393=$format_ptr;
      var $394=(($393+1)|0);
      $format_ptr=$394;
      var $395=$format_ptr;
      HEAP8[($395)]=108;
      var $396=$format_ptr;
      var $397=(($396+1)|0);
      $format_ptr=$397;
      __label__ = 95; break;
    case 94: 
      var $399=$modifier;
      var $400=(($399) & 255);
      var $401=$format_ptr;
      HEAP8[($401)]=$400;
      var $402=$format_ptr;
      var $403=(($402+1)|0);
      $format_ptr=$403;
      __label__ = 95; break;
    case 95: 
      __label__ = 96; break;
    case 96: 
      var $406=$type;
      var $407=$format_ptr;
      HEAP8[($407)]=$406;
      var $408=$format_ptr;
      var $409=(($408+1)|0);
      $format_ptr=$409;
      var $410=$format_ptr;
      HEAP8[($410)]=0;
      var $411=$width;
      var $412=$prec;
      var $413=((($411)+($412))|0);
      $approx_width=$413;
      var $414=$approx_width;
      var $415=(($414)|0) < 0;
      if ($415) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: 
      $approx_width=0;
      __label__ = 98; break;
    case 98: 
      var $418=$type;
      var $419=(($418 << 24) >> 24);
      if ((($419)|0) == 100 || (($419)|0) == 105 || (($419)|0) == 111 || (($419)|0) == 117 || (($419)|0) == 120 || (($419)|0) == 88) {
        __label__ = 99; break;
      }
      else if ((($419)|0) == 99) {
        __label__ = 107; break;
      }
      else if ((($419)|0) == 101 || (($419)|0) == 102 || (($419)|0) == 103 || (($419)|0) == 69 || (($419)|0) == 71) {
        __label__ = 111; break;
      }
      else if ((($419)|0) == 115) {
        __label__ = 117; break;
      }
      else if ((($419)|0) == 112) {
        __label__ = 118; break;
      }
      else if ((($419)|0) == 110) {
        __label__ = 122; break;
      }
      else {
      __label__ = 128; break;
      }
      
    case 99: 
      var $421=$modifier;
      if ((($421)|0) == -1) {
        __label__ = 100; break;
      }
      else if ((($421)|0) == 76) {
        __label__ = 101; break;
      }
      else if ((($421)|0) == 108) {
        __label__ = 102; break;
      }
      else if ((($421)|0) == 104) {
        __label__ = 103; break;
      }
      else {
      __label__ = 104; break;
      }
      
    case 100: 
      var $423=$2;
      var $424=$approx_width;
      var $425=(($format_string)|0);
      var $426=$2;
      var $427=(($426+28)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=$428;
      var $430=(($428+4)|0);
      HEAP32[(($427)>>2)]=$430;
      var $431=HEAP32[(($429)>>2)];
      var $432=_print_it($423, $424, $425, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$431,tempInt));
      $1=$432;
      __label__ = 130; break;
    case 101: 
      var $434=$2;
      var $435=$approx_width;
      var $436=(($format_string)|0);
      var $437=$2;
      var $438=(($437+28)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$439;
      var $441=(($439+8)|0);
      HEAP32[(($438)>>2)]=$441;
      var $st$9$0=(($440)|0);
      var $442$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($440+4)|0);
      var $442$1=HEAP32[(($st$9$1)>>2)];
      var $443=_print_it($434, $435, $436, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$442$0,HEAP32[(((tempInt)+(4))>>2)]=$442$1,tempInt));
      $1=$443;
      __label__ = 130; break;
    case 102: 
      var $445=$2;
      var $446=$approx_width;
      var $447=(($format_string)|0);
      var $448=$2;
      var $449=(($448+28)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$450;
      var $452=(($450+4)|0);
      HEAP32[(($449)>>2)]=$452;
      var $453=HEAP32[(($451)>>2)];
      var $454=_print_it($445, $446, $447, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$453,tempInt));
      $1=$454;
      __label__ = 130; break;
    case 103: 
      var $456=$2;
      var $457=$approx_width;
      var $458=(($format_string)|0);
      var $459=$2;
      var $460=(($459+28)|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=$461;
      var $463=(($461+4)|0);
      HEAP32[(($460)>>2)]=$463;
      var $464=HEAP32[(($462)>>2)];
      var $465=_print_it($456, $457, $458, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$464,tempInt));
      $1=$465;
      __label__ = 130; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      var $468=$initial_ptr;
      var $469=$2;
      var $470=(($469)|0);
      HEAP32[(($470)>>2)]=$468;
      $1=0;
      __label__ = 130; break;
    case 106: 
      __label__ = 107; break;
    case 107: 
      var $474=$modifier;
      var $475=(($474)|0)!=-1;
      if ($475) { __label__ = 108; break; } else { __label__ = 110; break; }
    case 108: 
      __label__ = 109; break;
    case 109: 
      var $478=$initial_ptr;
      var $479=$2;
      var $480=(($479)|0);
      HEAP32[(($480)>>2)]=$478;
      $1=0;
      __label__ = 130; break;
    case 110: 
      var $483=$2;
      var $484=$approx_width;
      var $485=(($format_string)|0);
      var $486=$2;
      var $487=(($486+28)|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=$488;
      var $490=(($488+4)|0);
      HEAP32[(($487)>>2)]=$490;
      var $491=HEAP32[(($489)>>2)];
      var $492=_print_it($483, $484, $485, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$491,tempInt));
      $1=$492;
      __label__ = 130; break;
    case 111: 
      var $494=$modifier;
      if ((($494)|0) == -1 || (($494)|0) == 108) {
        __label__ = 112; break;
      }
      else if ((($494)|0) == 76) {
        __label__ = 113; break;
      }
      else {
      __label__ = 114; break;
      }
      
    case 112: 
      var $496=$2;
      var $497=$approx_width;
      var $498=(($format_string)|0);
      var $499=$2;
      var $500=(($499+28)|0);
      var $501=HEAP32[(($500)>>2)];
      var $502=$501;
      var $503=(($501+8)|0);
      HEAP32[(($500)>>2)]=$503;
      var $504=(tempDoubleI32[0]=HEAP32[(($502)>>2)],tempDoubleI32[1]=HEAP32[((($502)+(4))>>2)],tempDoubleF64[0]);
      var $505=_print_it($496, $497, $498, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$504,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      $1=$505;
      __label__ = 130; break;
    case 113: 
      var $507=$2;
      var $508=$approx_width;
      var $509=(($format_string)|0);
      var $510=$2;
      var $511=(($510+28)|0);
      var $512=HEAP32[(($511)>>2)];
      var $513=$512;
      var $514=(($512+12)|0);
      HEAP32[(($511)>>2)]=$514;
      var $515=(tempDoubleI32[0]=HEAP32[(($513)>>2)],tempDoubleI32[1]=HEAP32[((($513)+(4))>>2)],tempDoubleF64[0]);
      var $516=_print_it($507, $508, $509, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$515,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      $1=$516;
      __label__ = 130; break;
    case 114: 
      __label__ = 115; break;
    case 115: 
      var $519=$initial_ptr;
      var $520=$2;
      var $521=(($520)|0);
      HEAP32[(($521)>>2)]=$519;
      $1=0;
      __label__ = 130; break;
    case 116: 
      __label__ = 117; break;
    case 117: 
      var $525=$2;
      var $526=$width;
      var $527=$prec;
      var $528=(($format_string)|0);
      var $529=$2;
      var $530=(($529+28)|0);
      var $531=HEAP32[(($530)>>2)];
      var $532=$531;
      var $533=(($531+4)|0);
      HEAP32[(($530)>>2)]=$533;
      var $534=HEAP32[(($532)>>2)];
      var $535=_type_s($525, $526, $527, $528, $534);
      $1=$535;
      __label__ = 130; break;
    case 118: 
      var $537=$modifier;
      var $538=(($537)|0)==-1;
      if ($538) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: 
      var $540=$2;
      var $541=$approx_width;
      var $542=(($format_string)|0);
      var $543=$2;
      var $544=(($543+28)|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$545;
      var $547=(($545+4)|0);
      HEAP32[(($544)>>2)]=$547;
      var $548=HEAP32[(($546)>>2)];
      var $549=_print_it($540, $541, $542, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$548,tempInt));
      $1=$549;
      __label__ = 130; break;
    case 120: 
      __label__ = 121; break;
    case 121: 
      var $552=$initial_ptr;
      var $553=$2;
      var $554=(($553)|0);
      HEAP32[(($554)>>2)]=$552;
      $1=0;
      __label__ = 130; break;
    case 122: 
      var $557=$modifier;
      var $558=(($557)|0)==-1;
      if ($558) { __label__ = 123; break; } else { __label__ = 126; break; }
    case 123: 
      var $560=$2;
      var $561=(($560+28)|0);
      var $562=HEAP32[(($561)>>2)];
      var $563=$562;
      var $564=(($562+4)|0);
      HEAP32[(($561)>>2)]=$564;
      var $565=HEAP32[(($563)>>2)];
      $p=$565;
      var $566=$p;
      var $567=(($566)|0)!=0;
      if ($567) { __label__ = 124; break; } else { __label__ = 125; break; }
    case 124: 
      var $569=$2;
      var $570=(($569+20)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=$p;
      HEAP32[(($572)>>2)]=$571;
      $1=0;
      __label__ = 130; break;
    case 125: 
      $1=-1;
      __label__ = 130; break;
    case 126: 
      __label__ = 127; break;
    case 127: 
      var $576=$initial_ptr;
      var $577=$2;
      var $578=(($577)|0);
      HEAP32[(($578)>>2)]=$576;
      $1=0;
      __label__ = 130; break;
    case 128: 
      __label__ = 129; break;
    case 129: 
      var $582=$initial_ptr;
      var $583=$2;
      var $584=(($583)|0);
      HEAP32[(($584)>>2)]=$582;
      $1=0;
      __label__ = 130; break;
    case 130: 
      var $586=$1;
      STACKTOP = __stackBase__;
      return $586;
    default: assert(0, "bad label: " + __label__);
  }
}
_dispatch["X"]=1;

function _usual_char($s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $len;
      $2=$s;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_strcspn($5, ((STRING_TABLE.__str4352)|0));
      $len=$6;
      var $7=$2;
      var $8=$len;
      var $9=_realloc_buff($7, $8);
      var $10=(($9)|0)==-1;
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 5; break;
    case 4: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$len;
      assert($19 % 1 === 0, 'memcpy given ' + $19 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($15, $18, $19, 1);
      var $20=$len;
      var $21=$2;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$20)|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=$len;
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+$25)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=$len;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)+($30))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$len;
      var $36=$2;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+($35))|0);
      HEAP32[(($37)>>2)]=$39;
      $1=0;
      __label__ = 5; break;
    case 5: 
      var $41=$1;
      ;
      return $41;
    default: assert(0, "bad label: " + __label__);
  }
}
_usual_char["X"]=1;

function _getint($string) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$string;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=HEAP32[(($3)>>2)];
      var $5=HEAPU8[($4)];
      var $6=(($5)&255);
      var $7=_isdigit($6);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $10=$i;
      var $11=((($10)*(10))|0);
      var $12=$1;
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $16=((($15)-(48))|0);
      var $17=((($11)+($16))|0);
      $i=$17;
      var $18=$1;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+1)|0);
      HEAP32[(($18)>>2)]=$20;
      __label__ = 3; break;
    case 5: 
      var $22=$i;
      var $23=(($22)|0) < 0;
      if ($23) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $25=$i;
      var $26=(($25)|0) > 32767;
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $i=32767;
      __label__ = 8; break;
    case 8: 
      var $29=$i;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}


function _print_it($s, $approx_len, $format_string) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $varg=__stackBase__;
      var $vsprintf_len;
      var $len;
      $2=$s;
      $3=$approx_len;
      $4=$format_string;
      var $5=$2;
      var $6=$3;
      var $7=_realloc_buff($5, $6);
      var $8=(($7)|0)==-1;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=-1;
      __label__ = 7; break;
    case 4: 
      var $11=$varg;
      HEAP32[(($11)>>2)]=arguments[_print_it.length];
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=HEAP32[(($varg)>>2)];
      var $17=_vsprintf($14, $15, $16);
      $vsprintf_len=$17;
      var $18=$varg;
      ;
      var $19=$vsprintf_len;
      var $20=(($19)|0)==-1;
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=-1;
      __label__ = 7; break;
    case 6: 
      var $23=$vsprintf_len;
      var $24=$2;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)+($23))|0);
      HEAP32[(($25)>>2)]=$27;
      var $28=$2;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=_strlen($30);
      $len=$31;
      var $32=$len;
      var $33=$2;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)+($32))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=$len;
      var $38=$2;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$37)|0);
      HEAP32[(($39)>>2)]=$41;
      $1=0;
      __label__ = 7; break;
    case 7: 
      var $43=$1;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + __label__);
  }
}
_print_it["X"]=1;

function _type_s($s, $width, $prec, $format_string, $arg_string) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $string_len;
      $2=$s;
      $3=$width;
      $4=$prec;
      $5=$format_string;
      $6=$arg_string;
      var $7=$6;
      var $8=(($7)|0)==0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_print_it($10, 6, ((STRING_TABLE.__str348)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$11;
      __label__ = 13; break;
    case 4: 
      $string_len=0;
      __label__ = 5; break;
    case 5: 
      var $14=$string_len;
      var $15=$6;
      var $16=(($15+$14)|0);
      var $17=HEAP8[($16)];
      var $18=(($17 << 24) >> 24);
      var $19=(($18)|0)!=0;
      if ($19) { __label__ = 6; break; } else { var $25 = 0;__label__ = 7; break; }
    case 6: 
      var $21=$4;
      var $22=$string_len;
      var $23=(($21)|0)!=(($22)|0);
      var $25 = $23;__label__ = 7; break;
    case 7: 
      var $25;
      if ($25) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $27=$string_len;
      var $28=((($27)+(1))|0);
      $string_len=$28;
      __label__ = 5; break;
    case 9: 
      var $30=$3;
      var $31=(($30)|0)!=-1;
      if ($31) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $33=$string_len;
      var $34=$3;
      var $35=(($33)>>>0) < (($34)>>>0);
      if ($35) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $37=$3;
      $string_len=$37;
      __label__ = 12; break;
    case 12: 
      var $39=$2;
      var $40=$string_len;
      var $41=$5;
      var $42=$6;
      var $43=_print_it($39, $40, $41, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,tempInt));
      $1=$43;
      __label__ = 13; break;
    case 13: 
      var $45=$1;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_type_s["X"]=1;

function _llvm_regcomp($preg, $pattern, $cflags) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pa=__stackBase__;
      var $g;
      var $p;
      var $i;
      var $len;
      $2=$preg;
      $3=$pattern;
      $4=$cflags;
      $p=$pa;
      var $5=$4;
      var $6=$5 & -129;
      $4=$6;
      var $7=$4;
      var $8=$7 & 1;
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $11=$4;
      var $12=$11 & 16;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=16;
      __label__ = 29; break;
    case 5: 
      var $16=$4;
      var $17=$16 & 32;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $20=$2;
      var $21=(($20+8)|0);
      var $22=HEAPU32[(($21)>>2)];
      var $23=$3;
      var $24=(($22)>>>0) < (($23)>>>0);
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $1=16;
      __label__ = 29; break;
    case 8: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$3;
      var $31=$29;
      var $32=$30;
      var $33=((($31)-($32))|0);
      $len=$33;
      __label__ = 10; break;
    case 9: 
      var $35=$3;
      var $36=_strlen($35);
      $len=$36;
      __label__ = 10; break;
    case 10: 
      var $38=_malloc(339);
      var $39=$38;
      $g=$39;
      var $40=$g;
      var $41=(($40)|0)==0;
      if ($41) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $1=12;
      __label__ = 29; break;
    case 12: 
      var $44=$len;
      var $45=Math.floor(((($44)>>>0))/(2));
      var $46=((($45)*(3))|0);
      var $47=((($46)+(1))|0);
      var $48=$p;
      var $49=(($48+16)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=$p;
      var $51=(($50+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=_calloc($52, 4);
      var $54=$53;
      var $55=$p;
      var $56=(($55+12)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$p;
      var $58=(($57+20)|0);
      HEAP32[(($58)>>2)]=0;
      var $59=$p;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|0)==0;
      if ($62) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $64=$g;
      var $65=$64;
      _free($65);
      $1=12;
      __label__ = 29; break;
    case 14: 
      var $67=$g;
      var $68=$p;
      var $69=(($68+28)|0);
      HEAP32[(($69)>>2)]=$67;
      var $70=$3;
      var $71=$p;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$p;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$len;
      var $77=(($75+$76)|0);
      var $78=$p;
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$77;
      var $80=$p;
      var $81=(($80+8)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$p;
      var $83=(($82+24)|0);
      HEAP32[(($83)>>2)]=0;
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $85=$i;
      var $86=(($85)|0) < 10;
      if ($86) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $88=$i;
      var $89=$p;
      var $90=(($89+32)|0);
      var $91=(($90+($88<<2))|0);
      HEAP32[(($91)>>2)]=0;
      var $92=$i;
      var $93=$p;
      var $94=(($93+72)|0);
      var $95=(($94+($92<<2))|0);
      HEAP32[(($95)>>2)]=0;
      __label__ = 17; break;
    case 17: 
      var $97=$i;
      var $98=((($97)+(1))|0);
      $i=$98;
      __label__ = 15; break;
    case 18: 
      var $100=$g;
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=256;
      var $102=$g;
      var $103=(($102+16)|0);
      HEAP32[(($103)>>2)]=0;
      var $104=$g;
      var $105=(($104+20)|0);
      HEAP32[(($105)>>2)]=0;
      var $106=$g;
      var $107=(($106+12)|0);
      HEAP32[(($107)>>2)]=0;
      var $108=$4;
      var $109=$g;
      var $110=(($109+24)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$g;
      var $112=(($111+40)|0);
      HEAP32[(($112)>>2)]=0;
      var $113=$g;
      var $114=(($113+44)|0);
      HEAP32[(($114)>>2)]=0;
      var $115=$g;
      var $116=(($115+48)|0);
      HEAP32[(($116)>>2)]=0;
      var $117=$g;
      var $118=(($117+60)|0);
      HEAP32[(($118)>>2)]=0;
      var $119=$g;
      var $120=(($119+64)|0);
      HEAP32[(($120)>>2)]=0;
      var $121=$g;
      var $122=(($121+68)|0);
      HEAP32[(($122)>>2)]=0;
      var $123=$g;
      var $124=(($123+52)|0);
      HEAP32[(($124)>>2)]=1;
      var $125=$g;
      var $126=(($125+80)|0);
      var $127=(($126+128)|0);
      var $128=$g;
      var $129=(($128+56)|0);
      HEAP32[(($129)>>2)]=$127;
      var $130=$g;
      var $131=(($130+80)|0);
      var $132=(($131)|0);
      _memset($132, 0, 256, 1);
      var $133=$g;
      var $134=(($133+72)|0);
      HEAP32[(($134)>>2)]=0;
      var $135=$p;
      _doemit($135, 134217728, 0);
      var $136=$p;
      var $137=(($136+20)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      var $140=$g;
      var $141=(($140+32)|0);
      HEAP32[(($141)>>2)]=$139;
      var $142=$4;
      var $143=$142 & 1;
      var $144=(($143)|0)!=0;
      if ($144) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $146=$p;
      _p_ere($146, 128);
      __label__ = 24; break;
    case 20: 
      var $148=$4;
      var $149=$148 & 16;
      var $150=(($149)|0)!=0;
      if ($150) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $152=$p;
      _p_str($152);
      __label__ = 23; break;
    case 22: 
      var $154=$p;
      _p_bre($154, 128, 128);
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $157=$p;
      _doemit($157, 134217728, 0);
      var $158=$p;
      var $159=(($158+20)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)-(1))|0);
      var $162=$g;
      var $163=(($162+36)|0);
      HEAP32[(($163)>>2)]=$161;
      var $164=$p;
      var $165=$g;
      _categorize($164, $165);
      var $166=$p;
      var $167=$g;
      _stripsnug($166, $167);
      var $168=$p;
      var $169=$g;
      _findmust($168, $169);
      var $170=$p;
      var $171=$g;
      var $172=_pluscount($170, $171);
      var $173=$g;
      var $174=(($173+76)|0);
      HEAP32[(($174)>>2)]=$172;
      var $175=$g;
      var $176=(($175)|0);
      HEAP32[(($176)>>2)]=53829;
      var $177=$g;
      var $178=(($177+68)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$2;
      var $181=(($180+4)|0);
      HEAP32[(($181)>>2)]=$179;
      var $182=$g;
      var $183=$2;
      var $184=(($183+12)|0);
      HEAP32[(($184)>>2)]=$182;
      var $185=$2;
      var $186=(($185)|0);
      HEAP32[(($186)>>2)]=62053;
      var $187=$g;
      var $188=(($187+40)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & 4;
      var $191=(($190)|0)!=0;
      if ($191) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $193=$p;
      var $194=_seterr($193, 15);
      __label__ = 26; break;
    case 26: 
      var $196=$p;
      var $197=(($196+8)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198)|0)!=0;
      if ($199) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $201=$2;
      _llvm_regfree($201);
      __label__ = 28; break;
    case 28: 
      var $203=$p;
      var $204=(($203+8)|0);
      var $205=HEAP32[(($204)>>2)];
      $1=$205;
      __label__ = 29; break;
    case 29: 
      var $207=$1;
      STACKTOP = __stackBase__;
      return $207;
    default: assert(0, "bad label: " + __label__);
  }
}
_llvm_regcomp["X"]=1;

function _doemit($p, $op, $opnd) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$op;
      $3=$opnd;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 7; break;
    case 4: 
      var $10=$1;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$1;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|0) >= (($15)|0);
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$1;
      var $19=$1;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)+(1))|0);
      var $23=((((($22)|0))/(2))&-1);
      var $24=((($23)*(3))|0);
      _enlarge($18, $24);
      __label__ = 6; break;
    case 6: 
      var $26=$2;
      var $27=$3;
      var $28=$26 | $27;
      var $29=$1;
      var $30=(($29+20)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)+(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=$1;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+($31<<2))|0);
      HEAP32[(($36)>>2)]=$28;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_ere($p, $stop) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $c;
      var $prevback;
      var $prevfwd;
      var $conc;
      var $first;
      $1=$p;
      $2=$stop;
      $prevback=0;
      $prevfwd=0;
      $first=1;
      __label__ = 3; break;
    case 3: 
      var $4=$1;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $conc=$6;
      __label__ = 4; break;
    case 4: 
      var $8=$1;
      var $9=(($8)|0);
      var $10=HEAPU32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($10)>>>0) < (($13)>>>0);
      if ($14) { __label__ = 5; break; } else { var $28 = 0;__label__ = 7; break; }
    case 5: 
      var $16=$1;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=HEAP8[($18)];
      $c=$19;
      var $20=(($19 << 24) >> 24);
      var $21=(($20)|0)!=124;
      if ($21) { __label__ = 6; break; } else { var $28 = 0;__label__ = 7; break; }
    case 6: 
      var $23=$c;
      var $24=(($23 << 24) >> 24);
      var $25=$2;
      var $26=(($24)|0)!=(($25)|0);
      var $28 = $26;__label__ = 7; break;
    case 7: 
      var $28;
      if ($28) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $30=$1;
      _p_ere_exp($30);
      __label__ = 4; break;
    case 9: 
      var $32=$1;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$conc;
      var $36=(($34)|0)!=(($35)|0);
      if ($36) { var $42 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $38=$1;
      var $39=_seterr($38, 14);
      var $40=(($39)|0)!=0;
      var $42 = $40;__label__ = 11; break;
    case 11: 
      var $42;
      var $43=(($42)&1);
      var $44=$1;
      var $45=(($44)|0);
      var $46=HEAPU32[(($45)>>2)];
      var $47=$1;
      var $48=(($47+4)|0);
      var $49=HEAPU32[(($48)>>2)];
      var $50=(($46)>>>0) < (($49)>>>0);
      if ($50) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $52=$1;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      var $57=(($56)|0)==124;
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $59=$1;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+1)|0);
      HEAP32[(($60)>>2)]=$62;
      if (1) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 14: 
      if (0) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 19; break;
    case 16: 
      var $66=$first;
      var $67=(($66)|0)!=0;
      if ($67) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $69=$1;
      var $70=$1;
      var $71=(($70+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$conc;
      var $74=((($72)-($73))|0);
      var $75=((($74)+(1))|0);
      var $76=$conc;
      _doinsert($69, 2013265920, $75, $76);
      var $77=$conc;
      $prevfwd=$77;
      var $78=$conc;
      $prevback=$78;
      $first=0;
      __label__ = 18; break;
    case 18: 
      var $80=$1;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$prevback;
      var $85=((($83)-($84))|0);
      _doemit($80, -2147483648, $85);
      var $86=$1;
      var $87=(($86+20)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)-(1))|0);
      $prevback=$89;
      var $90=$1;
      var $91=$prevfwd;
      var $92=$1;
      var $93=(($92+20)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$prevfwd;
      var $96=((($94)-($95))|0);
      _dofwd($90, $91, $96);
      var $97=$1;
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      $prevfwd=$99;
      var $100=$1;
      _doemit($100, -2013265920, 0);
      __label__ = 3; break;
    case 19: 
      var $102=$first;
      var $103=(($102)|0)!=0;
      if ($103) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $105=$1;
      var $106=$prevfwd;
      var $107=$1;
      var $108=(($107+20)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$prevfwd;
      var $111=((($109)-($110))|0);
      _dofwd($105, $106, $111);
      var $112=$1;
      var $113=$1;
      var $114=(($113+20)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$prevback;
      var $117=((($115)-($116))|0);
      _doemit($112, -1879048192, $117);
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_ere["X"]=1;

function _p_str($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$p;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAPU32[(($3)>>2)];
      var $5=$1;
      var $6=(($5+4)|0);
      var $7=HEAPU32[(($6)>>2)];
      var $8=(($4)>>>0) < (($7)>>>0);
      if ($8) { var $14 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$1;
      var $11=_seterr($10, 14);
      var $12=(($11)|0)!=0;
      var $14 = $12;__label__ = 4; break;
    case 4: 
      var $14;
      var $15=(($14)&1);
      __label__ = 5; break;
    case 5: 
      var $17=$1;
      var $18=(($17)|0);
      var $19=HEAPU32[(($18)>>2)];
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=HEAPU32[(($21)>>2)];
      var $23=(($19)>>>0) < (($22)>>>0);
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $25=$1;
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+1)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=HEAP8[($28)];
      var $31=(($30 << 24) >> 24);
      _ordinary($25, $31);
      __label__ = 5; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _pluscount($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $scan;
      var $s;
      var $plusnest;
      var $maxnest;
      $2=$p;
      $3=$g;
      $plusnest=0;
      $maxnest=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $1=0;
      __label__ = 15; break;
    case 4: 
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+4)|0);
      $scan=$13;
      __label__ = 5; break;
    case 5: 
      var $15=$scan;
      var $16=(($15+4)|0);
      $scan=$16;
      var $17=HEAP32[(($15)>>2)];
      $s=$17;
      var $18=$s;
      var $19=$18 & -134217728;
      if ((($19)|0) == 1207959552) {
        __label__ = 6; break;
      }
      else if ((($19)|0) == 1342177280) {
        __label__ = 7; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 6: 
      var $21=$plusnest;
      var $22=((($21)+(1))|0);
      $plusnest=$22;
      __label__ = 10; break;
    case 7: 
      var $24=$plusnest;
      var $25=$maxnest;
      var $26=(($24)|0) > (($25)|0);
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $28=$plusnest;
      $maxnest=$28;
      __label__ = 9; break;
    case 9: 
      var $30=$plusnest;
      var $31=((($30)-(1))|0);
      $plusnest=$31;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $34=$s;
      var $35=$34 & -134217728;
      var $36=(($35)|0)!=134217728;
      if ($36) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 12: 
      var $38=$plusnest;
      var $39=(($38)|0)!=0;
      if ($39) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $41=$3;
      var $42=(($41+40)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 | 4;
      HEAP32[(($42)>>2)]=$44;
      __label__ = 14; break;
    case 14: 
      var $46=$maxnest;
      $1=$46;
      __label__ = 15; break;
    case 15: 
      var $48=$1;
      ;
      return $48;
    default: assert(0, "bad label: " + __label__);
  }
}
_pluscount["X"]=1;

function _seterr($p, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$e;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$2;
      var $9=$1;
      var $10=(($9+8)|0);
      HEAP32[(($10)>>2)]=$8;
      __label__ = 4; break;
    case 4: 
      var $12=$1;
      var $13=(($12)|0);
      HEAP32[(($13)>>2)]=((_nuls)|0);
      var $14=$1;
      var $15=(($14+4)|0);
      HEAP32[(($15)>>2)]=((_nuls)|0);
      ;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isinsets($g, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $col;
      var $i;
      var $ncols;
      var $uc;
      $2=$g;
      $3=$c;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((($6)+(7))|0);
      var $8=((((($7)|0))/(8))&-1);
      $ncols=$8;
      var $9=$3;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      $uc=$11;
      $i=0;
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      $col=$14;
      __label__ = 3; break;
    case 3: 
      var $16=$i;
      var $17=$ncols;
      var $18=(($16)|0) < (($17)|0);
      if ($18) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $20=$uc;
      var $21=$col;
      var $22=(($21+$20)|0);
      var $23=HEAPU8[($22)];
      var $24=(($23)&255);
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=1;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$col;
      var $35=(($34+$33)|0);
      $col=$35;
      __label__ = 3; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $38=$1;
      ;
      return $38;
    default: assert(0, "bad label: " + __label__);
  }
}
_isinsets["X"]=1;

function _samesets($g, $c1, $c2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $col;
      var $i;
      var $ncols;
      var $uc1;
      var $uc2;
      $2=$g;
      $3=$c1;
      $4=$c2;
      var $5=$2;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)+(7))|0);
      var $9=((((($8)|0))/(8))&-1);
      $ncols=$9;
      var $10=$3;
      var $11=(($10) & 255);
      var $12=(($11)&255);
      $uc1=$12;
      var $13=$4;
      var $14=(($13) & 255);
      var $15=(($14)&255);
      $uc2=$15;
      $i=0;
      var $16=$2;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      $col=$18;
      __label__ = 3; break;
    case 3: 
      var $20=$i;
      var $21=$ncols;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $24=$uc1;
      var $25=$col;
      var $26=(($25+$24)|0);
      var $27=HEAPU8[($26)];
      var $28=(($27)&255);
      var $29=$uc2;
      var $30=$col;
      var $31=(($30+$29)|0);
      var $32=HEAPU8[($31)];
      var $33=(($32)&255);
      var $34=(($28)|0)!=(($33)|0);
      if ($34) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $1=0;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $38=$i;
      var $39=((($38)+(1))|0);
      $i=$39;
      var $40=$2;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$col;
      var $44=(($43+$42)|0);
      $col=$44;
      __label__ = 3; break;
    case 8: 
      $1=1;
      __label__ = 9; break;
    case 9: 
      var $47=$1;
      ;
      return $47;
    default: assert(0, "bad label: " + __label__);
  }
}
_samesets["X"]=1;

function _p_bre($p, $end1, $end2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $start;
      var $first;
      var $wasdollar;
      $1=$p;
      $2=$end1;
      $3=$end2;
      var $4=$1;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $start=$6;
      $first=1;
      $wasdollar=0;
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAPU32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($9)>>>0) < (($12)>>>0);
      if ($13) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|0)==94;
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $22=$1;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+1)|0);
      HEAP32[(($23)>>2)]=$25;
      if (1) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 5: 
      if (0) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $28=$1;
      _doemit($28, 402653184, 0);
      var $29=$1;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 | 1;
      HEAP32[(($32)>>2)]=$34;
      var $35=$1;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[(($38)>>2)]=$40;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $43=$1;
      var $44=(($43)|0);
      var $45=HEAPU32[(($44)>>2)];
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=HEAPU32[(($47)>>2)];
      var $49=(($45)>>>0) < (($48)>>>0);
      if ($49) { __label__ = 9; break; } else { var $88 = 0;__label__ = 14; break; }
    case 9: 
      var $51=$1;
      var $52=(($51)|0);
      var $53=HEAPU32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=HEAPU32[(($55)>>2)];
      var $57=(($53)>>>0) < (($56)>>>0);
      if ($57) { __label__ = 10; break; } else { var $85 = 0;__label__ = 13; break; }
    case 10: 
      var $59=$1;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+1)|0);
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=HEAPU32[(($64)>>2)];
      var $66=(($62)>>>0) < (($65)>>>0);
      if ($66) { __label__ = 11; break; } else { var $85 = 0;__label__ = 13; break; }
    case 11: 
      var $68=$1;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=HEAP8[($70)];
      var $72=(($71 << 24) >> 24);
      var $73=$2;
      var $74=(($72)|0)==(($73)|0);
      if ($74) { __label__ = 12; break; } else { var $85 = 0;__label__ = 13; break; }
    case 12: 
      var $76=$1;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+1)|0);
      var $80=HEAP8[($79)];
      var $81=(($80 << 24) >> 24);
      var $82=$3;
      var $83=(($81)|0)==(($82)|0);
      var $85 = $83;__label__ = 13; break;
    case 13: 
      var $85;
      var $86=$85 ^ 1;
      var $88 = $86;__label__ = 14; break;
    case 14: 
      var $88;
      if ($88) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $90=$1;
      var $91=$first;
      var $92=_p_simp_re($90, $91);
      $wasdollar=$92;
      $first=0;
      __label__ = 8; break;
    case 16: 
      var $94=$wasdollar;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $97=$1;
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=((($99)-(1))|0);
      HEAP32[(($98)>>2)]=$100;
      var $101=$1;
      _doemit($101, 536870912, 0);
      var $102=$1;
      var $103=(($102+28)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+40)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$106 | 2;
      HEAP32[(($105)>>2)]=$107;
      var $108=$1;
      var $109=(($108+28)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+48)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=((($112)+(1))|0);
      HEAP32[(($111)>>2)]=$113;
      __label__ = 18; break;
    case 18: 
      var $115=$1;
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$start;
      var $119=(($117)|0)!=(($118)|0);
      if ($119) { var $125 = 1;__label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $121=$1;
      var $122=_seterr($121, 14);
      var $123=(($122)|0)!=0;
      var $125 = $123;__label__ = 20; break;
    case 20: 
      var $125;
      var $126=(($125)&1);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_bre["X"]=1;

function _categorize($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $cats;
      var $c;
      var $c2;
      var $cat;
      $1=$p;
      $2=$g;
      var $3=$2;
      var $4=(($3+56)|0);
      var $5=HEAP32[(($4)>>2)];
      $cats=$5;
      var $6=$1;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 18; break;
    case 4: 
      $c=-128;
      __label__ = 5; break;
    case 5: 
      var $13=$c;
      var $14=(($13)|0) <= 127;
      if ($14) { __label__ = 6; break; } else { __label__ = 18; break; }
    case 6: 
      var $16=$c;
      var $17=$cats;
      var $18=(($17+$16)|0);
      var $19=HEAPU8[($18)];
      var $20=(($19)&255);
      var $21=(($20)|0)==0;
      if ($21) { __label__ = 7; break; } else { __label__ = 16; break; }
    case 7: 
      var $23=$2;
      var $24=$c;
      var $25=_isinsets($23, $24);
      var $26=(($25)|0)!=0;
      if ($26) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: 
      var $28=$2;
      var $29=(($28+52)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($30) & 255);
      $cat=$32;
      var $33=$cat;
      var $34=$c;
      var $35=$cats;
      var $36=(($35+$34)|0);
      HEAP8[($36)]=$33;
      var $37=$c;
      var $38=((($37)+(1))|0);
      $c2=$38;
      __label__ = 9; break;
    case 9: 
      var $40=$c2;
      var $41=(($40)|0) <= 127;
      if ($41) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: 
      var $43=$c2;
      var $44=$cats;
      var $45=(($44+$43)|0);
      var $46=HEAPU8[($45)];
      var $47=(($46)&255);
      var $48=(($47)|0)==0;
      if ($48) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $50=$2;
      var $51=$c;
      var $52=$c2;
      var $53=_samesets($50, $51, $52);
      var $54=(($53)|0)!=0;
      if ($54) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $56=$cat;
      var $57=$c2;
      var $58=$cats;
      var $59=(($58+$57)|0);
      HEAP8[($59)]=$56;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $62=$c2;
      var $63=((($62)+(1))|0);
      $c2=$63;
      __label__ = 9; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $67=$c;
      var $68=((($67)+(1))|0);
      $c=$68;
      __label__ = 5; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_categorize["X"]=1;

function _stripsnug($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$g;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+28)|0);
      HEAP32[(($7)>>2)]=$5;
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=$1;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14<<2))|0);
      var $16=_realloc($11, $15);
      var $17=$16;
      var $18=$2;
      var $19=(($18+4)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)==0;
      if ($23) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $25=$1;
      var $26=_seterr($25, 12);
      var $27=$1;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+4)|0);
      HEAP32[(($31)>>2)]=$29;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _findmust($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $scan;
      var $start;
      var $newstart;
      var $newlen;
      var $s;
      var $cp;
      var $i;
      $1=$p;
      $2=$g;
      $start=0;
      $newstart=0;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 37; break;
    case 4: 
      $newlen=0;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+4)|0);
      $scan=$12;
      __label__ = 5; break;
    case 5: 
      var $14=$scan;
      var $15=(($14+4)|0);
      $scan=$15;
      var $16=HEAP32[(($14)>>2)];
      $s=$16;
      var $17=$s;
      var $18=$17 & -134217728;
      if ((($18)|0) == 268435456) {
        __label__ = 6; break;
      }
      else if ((($18)|0) == 1207959552 || (($18)|0) == 1744830464 || (($18)|0) == 1879048192) {
        __label__ = 9; break;
      }
      else if ((($18)|0) == 1476395008 || (($18)|0) == 2013265920) {
        __label__ = 10; break;
      }
      else {
      __label__ = 20; break;
      }
      
    case 6: 
      var $20=$newlen;
      var $21=(($20)|0)==0;
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$scan;
      var $24=((($23)-(4))|0);
      $newstart=$24;
      __label__ = 8; break;
    case 8: 
      var $26=$newlen;
      var $27=((($26)+(1))|0);
      $newlen=$27;
      __label__ = 23; break;
    case 9: 
      __label__ = 23; break;
    case 10: 
      var $30=$scan;
      var $31=((($30)-(4))|0);
      $scan=$31;
      __label__ = 11; break;
    case 11: 
      var $33=$s;
      var $34=$33 & 134217727;
      var $35=$scan;
      var $36=(($35+($34<<2))|0);
      $scan=$36;
      var $37=$scan;
      var $38=HEAP32[(($37)>>2)];
      $s=$38;
      var $39=$s;
      var $40=$39 & -134217728;
      var $41=(($40)|0)!=1610612736;
      if ($41) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $43=$s;
      var $44=$43 & -134217728;
      var $45=(($44)|0)!=-1879048192;
      if ($45) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $47=$s;
      var $48=$47 & -134217728;
      var $49=(($48)|0)!=-2013265920;
      if ($49) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $51=$2;
      var $52=(($51+40)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 | 4;
      HEAP32[(($52)>>2)]=$54;
      __label__ = 37; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $57=$s;
      var $58=$57 & -134217728;
      var $59=(($58)|0)!=1610612736;
      if ($59) { __label__ = 17; break; } else { var $65 = 0;__label__ = 18; break; }
    case 17: 
      var $61=$s;
      var $62=$61 & -134217728;
      var $63=(($62)|0)!=-1879048192;
      var $65 = $63;__label__ = 18; break;
    case 18: 
      var $65;
      if ($65) { __label__ = 11; break; } else { __label__ = 19; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $68=$newlen;
      var $69=$2;
      var $70=(($69+64)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($68)|0) > (($71)|0);
      if ($72) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $74=$newstart;
      $start=$74;
      var $75=$newlen;
      var $76=$2;
      var $77=(($76+64)|0);
      HEAP32[(($77)>>2)]=$75;
      __label__ = 22; break;
    case 22: 
      $newlen=0;
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $81=$s;
      var $82=$81 & -134217728;
      var $83=(($82)|0)!=134217728;
      if ($83) { __label__ = 5; break; } else { __label__ = 25; break; }
    case 25: 
      var $85=$2;
      var $86=(($85+64)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0)==0;
      if ($88) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 37; break;
    case 27: 
      var $91=$2;
      var $92=(($91+64)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)+(1))|0);
      var $95=_malloc($94);
      var $96=$2;
      var $97=(($96+60)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$2;
      var $99=(($98+60)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)|0)==0;
      if ($101) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $103=$2;
      var $104=(($103+64)|0);
      HEAP32[(($104)>>2)]=0;
      __label__ = 37; break;
    case 29: 
      var $106=$2;
      var $107=(($106+60)|0);
      var $108=HEAP32[(($107)>>2)];
      $cp=$108;
      var $109=$start;
      $scan=$109;
      var $110=$2;
      var $111=(($110+64)|0);
      var $112=HEAP32[(($111)>>2)];
      $i=$112;
      __label__ = 30; break;
    case 30: 
      var $114=$i;
      var $115=(($114)|0) > 0;
      if ($115) { __label__ = 31; break; } else { __label__ = 36; break; }
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $118=$scan;
      var $119=(($118+4)|0);
      $scan=$119;
      var $120=HEAP32[(($118)>>2)];
      $s=$120;
      var $121=$120 & -134217728;
      var $122=(($121)|0)!=268435456;
      if ($122) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      __label__ = 32; break;
    case 34: 
      var $125=$s;
      var $126=$125 & 134217727;
      var $127=(($126) & 255);
      var $128=$cp;
      var $129=(($128+1)|0);
      $cp=$129;
      HEAP8[($128)]=$127;
      __label__ = 35; break;
    case 35: 
      var $131=$i;
      var $132=((($131)-(1))|0);
      $i=$132;
      __label__ = 30; break;
    case 36: 
      var $134=$cp;
      var $135=(($134+1)|0);
      $cp=$135;
      HEAP8[($134)]=0;
      __label__ = 37; break;
    case 37: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_findmust["X"]=1;

function _enlarge($p, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $sp;
      $1=$p;
      $2=$size;
      var $3=$1;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($5)|0) >= (($6)|0);
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 7; break;
    case 4: 
      var $10=$1;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=$2;
      var $15=((($14<<2))|0);
      var $16=_realloc($13, $15);
      var $17=$16;
      $sp=$17;
      var $18=$sp;
      var $19=(($18)|0)==0;
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $21=$1;
      var $22=_seterr($21, 12);
      __label__ = 7; break;
    case 6: 
      var $24=$sp;
      var $25=$1;
      var $26=(($25+12)|0);
      HEAP32[(($26)>>2)]=$24;
      var $27=$2;
      var $28=$1;
      var $29=(($28+16)|0);
      HEAP32[(($29)>>2)]=$27;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_simp_re($p, $starordinary) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $count;
      var $count2;
      var $pos;
      var $i;
      var $subno;
      $2=$p;
      $3=$starordinary;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $pos=$6;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+1)|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=HEAP8[($9)];
      var $12=(($11 << 24) >> 24);
      $c=$12;
      var $13=$c;
      var $14=(($13)|0)==92;
      if ($14) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAPU32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+4)|0);
      var $21=HEAPU32[(($20)>>2)];
      var $22=(($18)>>>0) < (($21)>>>0);
      if ($22) { var $28 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $24=$2;
      var $25=_seterr($24, 5);
      var $26=(($25)|0)!=0;
      var $28 = $26;__label__ = 5; break;
    case 5: 
      var $28;
      var $29=(($28)&1);
      var $30=$2;
      var $31=(($30)|0);
      var $32=HEAPU32[(($31)>>2)];
      var $33=(($32+1)|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=HEAP8[($32)];
      var $35=(($34 << 24) >> 24);
      var $36=256 | $35;
      $c=$36;
      __label__ = 6; break;
    case 6: 
      var $38=$c;
      if ((($38)|0) == 46) {
        __label__ = 7; break;
      }
      else if ((($38)|0) == 91) {
        __label__ = 11; break;
      }
      else if ((($38)|0) == 379) {
        __label__ = 12; break;
      }
      else if ((($38)|0) == 296) {
        __label__ = 13; break;
      }
      else if ((($38)|0) == 297 || (($38)|0) == 381) {
        __label__ = 31; break;
      }
      else if ((($38)|0) == 305 || (($38)|0) == 306 || (($38)|0) == 307 || (($38)|0) == 308 || (($38)|0) == 309 || (($38)|0) == 310 || (($38)|0) == 311 || (($38)|0) == 312 || (($38)|0) == 313) {
        __label__ = 32; break;
      }
      else if ((($38)|0) == 42) {
        __label__ = 36; break;
      }
      else {
      __label__ = 39; break;
      }
      
    case 7: 
      var $40=$2;
      var $41=(($40+28)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 8;
      var $46=(($45)|0)!=0;
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $48=$2;
      _nonnewline($48);
      __label__ = 10; break;
    case 9: 
      var $50=$2;
      _doemit($50, 671088640, 0);
      __label__ = 10; break;
    case 10: 
      __label__ = 40; break;
    case 11: 
      var $53=$2;
      _p_bracket($53);
      __label__ = 40; break;
    case 12: 
      var $55=$2;
      var $56=_seterr($55, 13);
      __label__ = 40; break;
    case 13: 
      var $58=$2;
      var $59=(($58+28)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+68)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=$2;
      var $65=(($64+28)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+68)|0);
      var $68=HEAP32[(($67)>>2)];
      $subno=$68;
      var $69=$subno;
      var $70=(($69)|0) < 10;
      if ($70) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $72=$2;
      var $73=(($72+20)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$subno;
      var $76=$2;
      var $77=(($76+32)|0);
      var $78=(($77+($75<<2))|0);
      HEAP32[(($78)>>2)]=$74;
      __label__ = 15; break;
    case 15: 
      var $80=$2;
      var $81=$subno;
      _doemit($80, 1744830464, $81);
      var $82=$2;
      var $83=(($82)|0);
      var $84=HEAPU32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=HEAPU32[(($86)>>2)];
      var $88=(($84)>>>0) < (($87)>>>0);
      if ($88) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $90=$2;
      var $91=(($90)|0);
      var $92=HEAPU32[(($91)>>2)];
      var $93=$2;
      var $94=(($93+4)|0);
      var $95=HEAPU32[(($94)>>2)];
      var $96=(($92)>>>0) < (($95)>>>0);
      if ($96) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $98=$2;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+1)|0);
      var $102=$2;
      var $103=(($102+4)|0);
      var $104=HEAPU32[(($103)>>2)];
      var $105=(($101)>>>0) < (($104)>>>0);
      if ($105) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $107=$2;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=HEAP8[($109)];
      var $111=(($110 << 24) >> 24);
      var $112=(($111)|0)==92;
      if ($112) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $114=$2;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+1)|0);
      var $118=HEAP8[($117)];
      var $119=(($118 << 24) >> 24);
      var $120=(($119)|0)==41;
      if ($120) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $122=$2;
      _p_bre($122, 92, 41);
      __label__ = 21; break;
    case 21: 
      var $124=$subno;
      var $125=(($124)|0) < 10;
      if ($125) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $127=$2;
      var $128=(($127+20)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$subno;
      var $131=$2;
      var $132=(($131+72)|0);
      var $133=(($132+($130<<2))|0);
      HEAP32[(($133)>>2)]=$129;
      __label__ = 23; break;
    case 23: 
      var $135=$2;
      var $136=$subno;
      _doemit($135, 1879048192, $136);
      var $137=$2;
      var $138=(($137)|0);
      var $139=HEAPU32[(($138)>>2)];
      var $140=$2;
      var $141=(($140+4)|0);
      var $142=HEAPU32[(($141)>>2)];
      var $143=(($139)>>>0) < (($142)>>>0);
      if ($143) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $145=$2;
      var $146=(($145)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+1)|0);
      var $149=$2;
      var $150=(($149+4)|0);
      var $151=HEAPU32[(($150)>>2)];
      var $152=(($148)>>>0) < (($151)>>>0);
      if ($152) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $154=$2;
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=HEAP8[($156)];
      var $158=(($157 << 24) >> 24);
      var $159=(($158)|0)==92;
      if ($159) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $161=$2;
      var $162=(($161)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+1)|0);
      var $165=HEAP8[($164)];
      var $166=(($165 << 24) >> 24);
      var $167=(($166)|0)==41;
      if ($167) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $169=$2;
      var $170=(($169)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+2)|0);
      HEAP32[(($170)>>2)]=$172;
      if (1) { var $179 = 1;__label__ = 30; break; } else { __label__ = 29; break; }
    case 28: 
      if (0) { var $179 = 1;__label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $175=$2;
      var $176=_seterr($175, 8);
      var $177=(($176)|0)!=0;
      var $179 = $177;__label__ = 30; break;
    case 30: 
      var $179;
      var $180=(($179)&1);
      __label__ = 40; break;
    case 31: 
      var $182=$2;
      var $183=_seterr($182, 8);
      __label__ = 40; break;
    case 32: 
      var $185=$c;
      var $186=$185 & -257;
      var $187=((($186)-(48))|0);
      $i=$187;
      var $188=$i;
      var $189=$2;
      var $190=(($189+72)|0);
      var $191=(($190+($188<<2))|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192)|0)!=0;
      if ($193) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $195=$2;
      var $196=$i;
      _doemit($195, 939524096, $196);
      var $197=$2;
      var $198=$i;
      var $199=$2;
      var $200=(($199+32)|0);
      var $201=(($200+($198<<2))|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=((($202)+(1))|0);
      var $204=$i;
      var $205=$2;
      var $206=(($205+72)|0);
      var $207=(($206+($204<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=_dupl($197, $203, $208);
      var $210=$2;
      var $211=$i;
      _doemit($210, 1073741824, $211);
      __label__ = 35; break;
    case 34: 
      var $213=$2;
      var $214=_seterr($213, 6);
      __label__ = 35; break;
    case 35: 
      var $216=$2;
      var $217=(($216+28)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+72)|0);
      HEAP32[(($219)>>2)]=1;
      __label__ = 40; break;
    case 36: 
      var $221=$3;
      var $222=(($221)|0)!=0;
      if ($222) { var $228 = 1;__label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $224=$2;
      var $225=_seterr($224, 13);
      var $226=(($225)|0)!=0;
      var $228 = $226;__label__ = 38; break;
    case 38: 
      var $228;
      var $229=(($228)&1);
      __label__ = 39; break;
    case 39: 
      var $231=$2;
      var $232=$c;
      var $233=(($232) & 255);
      var $234=(($233 << 24) >> 24);
      _ordinary($231, $234);
      __label__ = 40; break;
    case 40: 
      var $236=$2;
      var $237=(($236)|0);
      var $238=HEAPU32[(($237)>>2)];
      var $239=$2;
      var $240=(($239+4)|0);
      var $241=HEAPU32[(($240)>>2)];
      var $242=(($238)>>>0) < (($241)>>>0);
      if ($242) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: 
      var $244=$2;
      var $245=(($244)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=HEAP8[($246)];
      var $248=(($247 << 24) >> 24);
      var $249=(($248)|0)==42;
      if ($249) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $251=$2;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+1)|0);
      HEAP32[(($252)>>2)]=$254;
      if (1) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 43: 
      if (0) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $257=$2;
      var $258=$2;
      var $259=(($258+20)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$pos;
      var $262=((($260)-($261))|0);
      var $263=((($262)+(1))|0);
      var $264=$pos;
      _doinsert($257, 1207959552, $263, $264);
      var $265=$2;
      var $266=$2;
      var $267=(($266+20)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$pos;
      var $270=((($268)-($269))|0);
      _doemit($265, 1342177280, $270);
      var $271=$2;
      var $272=$2;
      var $273=(($272+20)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=$pos;
      var $276=((($274)-($275))|0);
      var $277=((($276)+(1))|0);
      var $278=$pos;
      _doinsert($271, 1476395008, $277, $278);
      var $279=$2;
      var $280=$2;
      var $281=(($280+20)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$pos;
      var $284=((($282)-($283))|0);
      _doemit($279, 1610612736, $284);
      __label__ = 86; break;
    case 45: 
      var $286=$2;
      var $287=(($286)|0);
      var $288=HEAPU32[(($287)>>2)];
      var $289=$2;
      var $290=(($289+4)|0);
      var $291=HEAPU32[(($290)>>2)];
      var $292=(($288)>>>0) < (($291)>>>0);
      if ($292) { __label__ = 46; break; } else { __label__ = 50; break; }
    case 46: 
      var $294=$2;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296+1)|0);
      var $298=$2;
      var $299=(($298+4)|0);
      var $300=HEAPU32[(($299)>>2)];
      var $301=(($297)>>>0) < (($300)>>>0);
      if ($301) { __label__ = 47; break; } else { __label__ = 50; break; }
    case 47: 
      var $303=$2;
      var $304=(($303)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=HEAP8[($305)];
      var $307=(($306 << 24) >> 24);
      var $308=(($307)|0)==92;
      if ($308) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $310=$2;
      var $311=(($310)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312+1)|0);
      var $314=HEAP8[($313)];
      var $315=(($314 << 24) >> 24);
      var $316=(($315)|0)==123;
      if ($316) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $318=$2;
      var $319=(($318)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+2)|0);
      HEAP32[(($319)>>2)]=$321;
      if (1) { __label__ = 51; break; } else { __label__ = 82; break; }
    case 50: 
      if (0) { __label__ = 51; break; } else { __label__ = 82; break; }
    case 51: 
      var $324=$2;
      var $325=_p_count($324);
      $count=$325;
      var $326=$2;
      var $327=(($326)|0);
      var $328=HEAPU32[(($327)>>2)];
      var $329=$2;
      var $330=(($329+4)|0);
      var $331=HEAPU32[(($330)>>2)];
      var $332=(($328)>>>0) < (($331)>>>0);
      if ($332) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: 
      var $334=$2;
      var $335=(($334)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=HEAP8[($336)];
      var $338=(($337 << 24) >> 24);
      var $339=(($338)|0)==44;
      if ($339) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $341=$2;
      var $342=(($341)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=(($343+1)|0);
      HEAP32[(($342)>>2)]=$344;
      if (1) { __label__ = 55; break; } else { __label__ = 62; break; }
    case 54: 
      if (0) { __label__ = 55; break; } else { __label__ = 62; break; }
    case 55: 
      var $347=$2;
      var $348=(($347)|0);
      var $349=HEAPU32[(($348)>>2)];
      var $350=$2;
      var $351=(($350+4)|0);
      var $352=HEAPU32[(($351)>>2)];
      var $353=(($349)>>>0) < (($352)>>>0);
      if ($353) { __label__ = 56; break; } else { __label__ = 60; break; }
    case 56: 
      var $355=$2;
      var $356=(($355)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=HEAPU8[($357)];
      var $359=(($358)&255);
      var $360=_isdigit($359);
      var $361=(($360)|0)!=0;
      if ($361) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $363=$2;
      var $364=_p_count($363);
      $count2=$364;
      var $365=$count;
      var $366=$count2;
      var $367=(($365)|0) <= (($366)|0);
      if ($367) { var $373 = 1;__label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $369=$2;
      var $370=_seterr($369, 10);
      var $371=(($370)|0)!=0;
      var $373 = $371;__label__ = 59; break;
    case 59: 
      var $373;
      var $374=(($373)&1);
      __label__ = 61; break;
    case 60: 
      $count2=256;
      __label__ = 61; break;
    case 61: 
      __label__ = 63; break;
    case 62: 
      var $378=$count;
      $count2=$378;
      __label__ = 63; break;
    case 63: 
      var $380=$2;
      var $381=$pos;
      var $382=$count;
      var $383=$count2;
      _repeat($380, $381, $382, $383);
      var $384=$2;
      var $385=(($384)|0);
      var $386=HEAPU32[(($385)>>2)];
      var $387=$2;
      var $388=(($387+4)|0);
      var $389=HEAPU32[(($388)>>2)];
      var $390=(($386)>>>0) < (($389)>>>0);
      if ($390) { __label__ = 64; break; } else { __label__ = 68; break; }
    case 64: 
      var $392=$2;
      var $393=(($392)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=(($394+1)|0);
      var $396=$2;
      var $397=(($396+4)|0);
      var $398=HEAPU32[(($397)>>2)];
      var $399=(($395)>>>0) < (($398)>>>0);
      if ($399) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $401=$2;
      var $402=(($401)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=HEAP8[($403)];
      var $405=(($404 << 24) >> 24);
      var $406=(($405)|0)==92;
      if ($406) { __label__ = 66; break; } else { __label__ = 68; break; }
    case 66: 
      var $408=$2;
      var $409=(($408)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($410+1)|0);
      var $412=HEAP8[($411)];
      var $413=(($412 << 24) >> 24);
      var $414=(($413)|0)==125;
      if ($414) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $416=$2;
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=(($418+2)|0);
      HEAP32[(($417)>>2)]=$419;
      if (1) { __label__ = 81; break; } else { __label__ = 69; break; }
    case 68: 
      if (0) { __label__ = 81; break; } else { __label__ = 69; break; }
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $423=$2;
      var $424=(($423)|0);
      var $425=HEAPU32[(($424)>>2)];
      var $426=$2;
      var $427=(($426+4)|0);
      var $428=HEAPU32[(($427)>>2)];
      var $429=(($425)>>>0) < (($428)>>>0);
      if ($429) { __label__ = 71; break; } else { var $466 = 0;__label__ = 76; break; }
    case 71: 
      var $431=$2;
      var $432=(($431)|0);
      var $433=HEAPU32[(($432)>>2)];
      var $434=$2;
      var $435=(($434+4)|0);
      var $436=HEAPU32[(($435)>>2)];
      var $437=(($433)>>>0) < (($436)>>>0);
      if ($437) { __label__ = 72; break; } else { var $463 = 0;__label__ = 75; break; }
    case 72: 
      var $439=$2;
      var $440=(($439)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=(($441+1)|0);
      var $443=$2;
      var $444=(($443+4)|0);
      var $445=HEAPU32[(($444)>>2)];
      var $446=(($442)>>>0) < (($445)>>>0);
      if ($446) { __label__ = 73; break; } else { var $463 = 0;__label__ = 75; break; }
    case 73: 
      var $448=$2;
      var $449=(($448)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=HEAP8[($450)];
      var $452=(($451 << 24) >> 24);
      var $453=(($452)|0)==92;
      if ($453) { __label__ = 74; break; } else { var $463 = 0;__label__ = 75; break; }
    case 74: 
      var $455=$2;
      var $456=(($455)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+1)|0);
      var $459=HEAP8[($458)];
      var $460=(($459 << 24) >> 24);
      var $461=(($460)|0)==125;
      var $463 = $461;__label__ = 75; break;
    case 75: 
      var $463;
      var $464=$463 ^ 1;
      var $466 = $464;__label__ = 76; break;
    case 76: 
      var $466;
      if ($466) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $468=$2;
      var $469=(($468)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=(($470+1)|0);
      HEAP32[(($469)>>2)]=$471;
      __label__ = 70; break;
    case 78: 
      var $473=$2;
      var $474=(($473)|0);
      var $475=HEAPU32[(($474)>>2)];
      var $476=$2;
      var $477=(($476+4)|0);
      var $478=HEAPU32[(($477)>>2)];
      var $479=(($475)>>>0) < (($478)>>>0);
      if ($479) { var $485 = 1;__label__ = 80; break; } else { __label__ = 79; break; }
    case 79: 
      var $481=$2;
      var $482=_seterr($481, 9);
      var $483=(($482)|0)!=0;
      var $485 = $483;__label__ = 80; break;
    case 80: 
      var $485;
      var $486=(($485)&1);
      var $487=$2;
      var $488=_seterr($487, 10);
      __label__ = 81; break;
    case 81: 
      __label__ = 85; break;
    case 82: 
      var $491=$c;
      var $492=(($491)|0)==36;
      if ($492) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      $1=1;
      __label__ = 87; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      $1=0;
      __label__ = 87; break;
    case 87: 
      var $498=$1;
      ;
      return $498;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_simp_re["X"]=1;

function _nonnewline($p) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $oldnext;
  var $oldend;
  var $bracket=__stackBase__;
  $1=$p;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  $oldnext=$4;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=HEAP32[(($6)>>2)];
  $oldend=$7;
  var $8=(($bracket)|0);
  var $9=$1;
  var $10=(($9)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=(($bracket)|0);
  var $12=(($11+3)|0);
  var $13=$1;
  var $14=(($13+4)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=(($bracket)|0);
  HEAP8[($15)]=94;
  var $16=(($bracket+1)|0);
  HEAP8[($16)]=10;
  var $17=(($bracket+2)|0);
  HEAP8[($17)]=93;
  var $18=(($bracket+3)|0);
  HEAP8[($18)]=0;
  var $19=$1;
  _p_bracket($19);
  var $20=$oldnext;
  var $21=$1;
  var $22=(($21)|0);
  HEAP32[(($22)>>2)]=$20;
  var $23=$oldend;
  var $24=$1;
  var $25=(($24+4)|0);
  HEAP32[(($25)>>2)]=$23;
  STACKTOP = __stackBase__;
  return;
}


function _p_bracket($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $cs;
      var $invert;
      var $i;
      var $ci;
      var $i1;
      $1=$p;
      $invert=0;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+5)|0);
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=_strncmp($13, ((STRING_TABLE.__str356)|0), 6);
      var $15=(($14)|0)==0;
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $17=$1;
      _doemit($17, -1744830464, 0);
      var $18=$1;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+6)|0);
      HEAP32[(($19)>>2)]=$21;
      __label__ = 75; break;
    case 5: 
      var $23=$1;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+5)|0);
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=HEAPU32[(($28)>>2)];
      var $30=(($26)>>>0) < (($29)>>>0);
      if ($30) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $32=$1;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=_strncmp($34, ((STRING_TABLE.__str1357)|0), 6);
      var $36=(($35)|0)==0;
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $38=$1;
      _doemit($38, -1610612736, 0);
      var $39=$1;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+6)|0);
      HEAP32[(($40)>>2)]=$42;
      __label__ = 75; break;
    case 8: 
      var $44=$1;
      var $45=_allocset($44);
      $cs=$45;
      var $46=(($45)|0)==0;
      if ($46) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 75; break;
    case 10: 
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAPU32[(($50)>>2)];
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=HEAPU32[(($53)>>2)];
      var $55=(($51)>>>0) < (($54)>>>0);
      if ($55) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $57=$1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=HEAP8[($59)];
      var $61=(($60 << 24) >> 24);
      var $62=(($61)|0)==94;
      if ($62) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $64=$1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+1)|0);
      HEAP32[(($65)>>2)]=$67;
      if (1) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 13: 
      if (0) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $70=$invert;
      var $71=((($70)+(1))|0);
      $invert=$71;
      __label__ = 15; break;
    case 15: 
      var $73=$1;
      var $74=(($73)|0);
      var $75=HEAPU32[(($74)>>2)];
      var $76=$1;
      var $77=(($76+4)|0);
      var $78=HEAPU32[(($77)>>2)];
      var $79=(($75)>>>0) < (($78)>>>0);
      if ($79) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $81=$1;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=HEAP8[($83)];
      var $85=(($84 << 24) >> 24);
      var $86=(($85)|0)==93;
      if ($86) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $88=$1;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+1)|0);
      HEAP32[(($89)>>2)]=$91;
      if (1) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 18: 
      if (0) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $94=$cs;
      var $95=(($94+4)|0);
      var $96=HEAPU8[($95)];
      var $97=(($96)&255);
      var $98=$cs;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+93)|0);
      var $102=HEAPU8[($101)];
      var $103=(($102)&255);
      var $104=$103 | $97;
      var $105=(($104) & 255);
      HEAP8[($101)]=$105;
      var $106=$cs;
      var $107=(($106+5)|0);
      var $108=HEAPU8[($107)];
      var $109=(($108)&255);
      var $110=((($109)+(93))|0);
      var $111=(($110) & 255);
      HEAP8[($107)]=$111;
      __label__ = 26; break;
    case 20: 
      var $113=$1;
      var $114=(($113)|0);
      var $115=HEAPU32[(($114)>>2)];
      var $116=$1;
      var $117=(($116+4)|0);
      var $118=HEAPU32[(($117)>>2)];
      var $119=(($115)>>>0) < (($118)>>>0);
      if ($119) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $121=$1;
      var $122=(($121)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=HEAP8[($123)];
      var $125=(($124 << 24) >> 24);
      var $126=(($125)|0)==45;
      if ($126) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $128=$1;
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+1)|0);
      HEAP32[(($129)>>2)]=$131;
      if (1) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 23: 
      if (0) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $134=$cs;
      var $135=(($134+4)|0);
      var $136=HEAPU8[($135)];
      var $137=(($136)&255);
      var $138=$cs;
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+45)|0);
      var $142=HEAPU8[($141)];
      var $143=(($142)&255);
      var $144=$143 | $137;
      var $145=(($144) & 255);
      HEAP8[($141)]=$145;
      var $146=$cs;
      var $147=(($146+5)|0);
      var $148=HEAPU8[($147)];
      var $149=(($148)&255);
      var $150=((($149)+(45))|0);
      var $151=(($150) & 255);
      HEAP8[($147)]=$151;
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $155=$1;
      var $156=(($155)|0);
      var $157=HEAPU32[(($156)>>2)];
      var $158=$1;
      var $159=(($158+4)|0);
      var $160=HEAPU32[(($159)>>2)];
      var $161=(($157)>>>0) < (($160)>>>0);
      if ($161) { __label__ = 28; break; } else { var $205 = 0;__label__ = 34; break; }
    case 28: 
      var $163=$1;
      var $164=(($163)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=HEAP8[($165)];
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|0)!=93;
      if ($168) { __label__ = 29; break; } else { var $205 = 0;__label__ = 34; break; }
    case 29: 
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAPU32[(($171)>>2)];
      var $173=$1;
      var $174=(($173+4)|0);
      var $175=HEAPU32[(($174)>>2)];
      var $176=(($172)>>>0) < (($175)>>>0);
      if ($176) { __label__ = 30; break; } else { var $202 = 0;__label__ = 33; break; }
    case 30: 
      var $178=$1;
      var $179=(($178)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+1)|0);
      var $182=$1;
      var $183=(($182+4)|0);
      var $184=HEAPU32[(($183)>>2)];
      var $185=(($181)>>>0) < (($184)>>>0);
      if ($185) { __label__ = 31; break; } else { var $202 = 0;__label__ = 33; break; }
    case 31: 
      var $187=$1;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=HEAP8[($189)];
      var $191=(($190 << 24) >> 24);
      var $192=(($191)|0)==45;
      if ($192) { __label__ = 32; break; } else { var $202 = 0;__label__ = 33; break; }
    case 32: 
      var $194=$1;
      var $195=(($194)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196+1)|0);
      var $198=HEAP8[($197)];
      var $199=(($198 << 24) >> 24);
      var $200=(($199)|0)==93;
      var $202 = $200;__label__ = 33; break;
    case 33: 
      var $202;
      var $203=$202 ^ 1;
      var $205 = $203;__label__ = 34; break;
    case 34: 
      var $205;
      if ($205) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $207=$1;
      var $208=$cs;
      _p_b_term($207, $208);
      __label__ = 27; break;
    case 36: 
      var $210=$1;
      var $211=(($210)|0);
      var $212=HEAPU32[(($211)>>2)];
      var $213=$1;
      var $214=(($213+4)|0);
      var $215=HEAPU32[(($214)>>2)];
      var $216=(($212)>>>0) < (($215)>>>0);
      if ($216) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $218=$1;
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=HEAP8[($220)];
      var $222=(($221 << 24) >> 24);
      var $223=(($222)|0)==45;
      if ($223) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $225=$1;
      var $226=(($225)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+1)|0);
      HEAP32[(($226)>>2)]=$228;
      if (1) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 39: 
      if (0) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $231=$cs;
      var $232=(($231+4)|0);
      var $233=HEAPU8[($232)];
      var $234=(($233)&255);
      var $235=$cs;
      var $236=(($235)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+45)|0);
      var $239=HEAPU8[($238)];
      var $240=(($239)&255);
      var $241=$240 | $234;
      var $242=(($241) & 255);
      HEAP8[($238)]=$242;
      var $243=$cs;
      var $244=(($243+5)|0);
      var $245=HEAPU8[($244)];
      var $246=(($245)&255);
      var $247=((($246)+(45))|0);
      var $248=(($247) & 255);
      HEAP8[($244)]=$248;
      __label__ = 41; break;
    case 41: 
      var $250=$1;
      var $251=(($250)|0);
      var $252=HEAPU32[(($251)>>2)];
      var $253=$1;
      var $254=(($253+4)|0);
      var $255=HEAPU32[(($254)>>2)];
      var $256=(($252)>>>0) < (($255)>>>0);
      if ($256) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $258=$1;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260+1)|0);
      HEAP32[(($259)>>2)]=$261;
      var $262=HEAP8[($260)];
      var $263=(($262 << 24) >> 24);
      var $264=(($263)|0)==93;
      if ($264) { var $270 = 1;__label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      var $266=$1;
      var $267=_seterr($266, 7);
      var $268=(($267)|0)!=0;
      var $270 = $268;__label__ = 44; break;
    case 44: 
      var $270;
      var $271=(($270)&1);
      var $272=$1;
      var $273=(($272+8)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=(($274)|0)!=0;
      if ($275) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $277=$1;
      var $278=$cs;
      _freeset($277, $278);
      __label__ = 75; break;
    case 46: 
      var $280=$1;
      var $281=(($280+28)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=(($282+24)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$284 & 2;
      var $286=(($285)|0)!=0;
      if ($286) { __label__ = 47; break; } else { __label__ = 59; break; }
    case 47: 
      var $288=$1;
      var $289=(($288+28)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=(($290+8)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=((($292)-(1))|0);
      $i=$293;
      __label__ = 48; break;
    case 48: 
      var $295=$i;
      var $296=(($295)|0) >= 0;
      if ($296) { __label__ = 49; break; } else { __label__ = 56; break; }
    case 49: 
      var $298=$i;
      var $299=(($298) & 255);
      var $300=(($299)&255);
      var $301=$cs;
      var $302=(($301)|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=(($303+$300)|0);
      var $305=HEAPU8[($304)];
      var $306=(($305)&255);
      var $307=$cs;
      var $308=(($307+4)|0);
      var $309=HEAPU8[($308)];
      var $310=(($309)&255);
      var $311=$306 & $310;
      var $312=(($311)|0)!=0;
      if ($312) { __label__ = 50; break; } else { __label__ = 54; break; }
    case 50: 
      var $314=$i;
      var $315=_isalpha($314);
      var $316=(($315)|0)!=0;
      if ($316) { __label__ = 51; break; } else { __label__ = 54; break; }
    case 51: 
      var $318=$i;
      var $319=_othercase($318);
      var $320=(($319 << 24) >> 24);
      $ci=$320;
      var $321=$ci;
      var $322=$i;
      var $323=(($321)|0)!=(($322)|0);
      if ($323) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $325=$cs;
      var $326=(($325+4)|0);
      var $327=HEAPU8[($326)];
      var $328=(($327)&255);
      var $329=$ci;
      var $330=(($329) & 255);
      var $331=(($330)&255);
      var $332=$cs;
      var $333=(($332)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=(($334+$331)|0);
      var $336=HEAPU8[($335)];
      var $337=(($336)&255);
      var $338=$337 | $328;
      var $339=(($338) & 255);
      HEAP8[($335)]=$339;
      var $340=$ci;
      var $341=$cs;
      var $342=(($341+5)|0);
      var $343=HEAPU8[($342)];
      var $344=(($343)&255);
      var $345=((($344)+($340))|0);
      var $346=(($345) & 255);
      HEAP8[($342)]=$346;
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $350=$i;
      var $351=((($350)-(1))|0);
      $i=$351;
      __label__ = 48; break;
    case 56: 
      var $353=$cs;
      var $354=(($353+12)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355)|0)!=0;
      if ($356) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $358=$1;
      var $359=$cs;
      _mccase($358, $359);
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $362=$invert;
      var $363=(($362)|0)!=0;
      if ($363) { __label__ = 60; break; } else { __label__ = 72; break; }
    case 60: 
      var $365=$1;
      var $366=(($365+28)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=(($367+8)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=((($369)-(1))|0);
      $i1=$370;
      __label__ = 61; break;
    case 61: 
      var $372=$i1;
      var $373=(($372)|0) >= 0;
      if ($373) { __label__ = 62; break; } else { __label__ = 67; break; }
    case 62: 
      var $375=$i1;
      var $376=(($375) & 255);
      var $377=(($376)&255);
      var $378=$cs;
      var $379=(($378)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=(($380+$377)|0);
      var $382=HEAPU8[($381)];
      var $383=(($382)&255);
      var $384=$cs;
      var $385=(($384+4)|0);
      var $386=HEAPU8[($385)];
      var $387=(($386)&255);
      var $388=$383 & $387;
      var $389=(($388)|0)!=0;
      if ($389) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $391=$cs;
      var $392=(($391+4)|0);
      var $393=HEAPU8[($392)];
      var $394=(($393)&255);
      var $395=$394 ^ -1;
      var $396=$i1;
      var $397=(($396) & 255);
      var $398=(($397)&255);
      var $399=$cs;
      var $400=(($399)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=(($401+$398)|0);
      var $403=HEAPU8[($402)];
      var $404=(($403)&255);
      var $405=$404 & $395;
      var $406=(($405) & 255);
      HEAP8[($402)]=$406;
      var $407=$i1;
      var $408=$cs;
      var $409=(($408+5)|0);
      var $410=HEAPU8[($409)];
      var $411=(($410)&255);
      var $412=((($411)-($407))|0);
      var $413=(($412) & 255);
      HEAP8[($409)]=$413;
      __label__ = 65; break;
    case 64: 
      var $415=$cs;
      var $416=(($415+4)|0);
      var $417=HEAPU8[($416)];
      var $418=(($417)&255);
      var $419=$i1;
      var $420=(($419) & 255);
      var $421=(($420)&255);
      var $422=$cs;
      var $423=(($422)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=(($424+$421)|0);
      var $426=HEAPU8[($425)];
      var $427=(($426)&255);
      var $428=$427 | $418;
      var $429=(($428) & 255);
      HEAP8[($425)]=$429;
      var $430=$i1;
      var $431=$cs;
      var $432=(($431+5)|0);
      var $433=HEAPU8[($432)];
      var $434=(($433)&255);
      var $435=((($434)+($430))|0);
      var $436=(($435) & 255);
      HEAP8[($432)]=$436;
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $439=$i1;
      var $440=((($439)-(1))|0);
      $i1=$440;
      __label__ = 61; break;
    case 67: 
      var $442=$1;
      var $443=(($442+28)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($444+24)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=$446 & 8;
      var $448=(($447)|0)!=0;
      if ($448) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $450=$cs;
      var $451=(($450+4)|0);
      var $452=HEAPU8[($451)];
      var $453=(($452)&255);
      var $454=$453 ^ -1;
      var $455=$cs;
      var $456=(($455)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+10)|0);
      var $459=HEAPU8[($458)];
      var $460=(($459)&255);
      var $461=$460 & $454;
      var $462=(($461) & 255);
      HEAP8[($458)]=$462;
      var $463=$cs;
      var $464=(($463+5)|0);
      var $465=HEAPU8[($464)];
      var $466=(($465)&255);
      var $467=((($466)-(10))|0);
      var $468=(($467) & 255);
      HEAP8[($464)]=$468;
      __label__ = 69; break;
    case 69: 
      var $470=$cs;
      var $471=(($470+12)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=(($472)|0)!=0;
      if ($473) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $475=$1;
      var $476=$cs;
      _mcinvert($475, $476);
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $479=$1;
      var $480=$cs;
      var $481=_nch($479, $480);
      var $482=(($481)|0)==1;
      if ($482) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $484=$1;
      var $485=$1;
      var $486=$cs;
      var $487=_firstch($485, $486);
      _ordinary($484, $487);
      var $488=$1;
      var $489=$cs;
      _freeset($488, $489);
      __label__ = 75; break;
    case 74: 
      var $491=$1;
      var $492=$1;
      var $493=$cs;
      var $494=_freezeset($492, $493);
      _doemit($491, 805306368, $494);
      __label__ = 75; break;
    case 75: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_bracket["X"]=1;

function _dupl($p, $start, $finish) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $len;
      $2=$p;
      $3=$start;
      $4=$finish;
      var $5=$2;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $ret=$7;
      var $8=$4;
      var $9=$3;
      var $10=((($8)-($9))|0);
      $len=$10;
      var $11=$len;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$ret;
      $1=$14;
      __label__ = 5; break;
    case 4: 
      var $16=$2;
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$len;
      var $21=((($19)+($20))|0);
      _enlarge($16, $21);
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($24+($27<<2))|0);
      var $29=$28;
      var $30=$2;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$3;
      var $34=(($32+($33<<2))|0);
      var $35=$34;
      var $36=$len;
      var $37=((($36<<2))|0);
      _llvm_memmove_p0i8_p0i8_i32($29, $35, $37, 1, 0);
      var $38=$len;
      var $39=$2;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)+($38))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=$ret;
      $1=$43;
      __label__ = 5; break;
    case 5: 
      var $45=$1;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_dupl["X"]=1;

function _ordinary($p, $ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $cap;
      $1=$p;
      $2=$ch;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+56)|0);
      var $7=HEAP32[(($6)>>2)];
      $cap=$7;
      var $8=$1;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+24)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 2;
      var $14=(($13)|0)!=0;
      if ($14) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $16=$2;
      var $17=(($16) & 255);
      var $18=(($17)&255);
      var $19=_isalpha($18);
      var $20=(($19)|0)!=0;
      if ($20) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $22=$2;
      var $23=_othercase($22);
      var $24=(($23 << 24) >> 24);
      var $25=$2;
      var $26=(($24)|0)!=(($25)|0);
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $28=$1;
      var $29=$2;
      _bothcases($28, $29);
      __label__ = 9; break;
    case 6: 
      var $31=$1;
      var $32=$2;
      var $33=(($32) & 255);
      var $34=(($33)&255);
      _doemit($31, 268435456, $34);
      var $35=$2;
      var $36=$cap;
      var $37=(($36+$35)|0);
      var $38=HEAPU8[($37)];
      var $39=(($38)&255);
      var $40=(($39)|0)==0;
      if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $42=$1;
      var $43=(($42+28)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($46) & 255);
      var $49=$2;
      var $50=$cap;
      var $51=(($50+$49)|0);
      HEAP8[($51)]=$48;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ordinary["X"]=1;

function _doinsert($p, $op, $opnd, $pos) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sn;
      var $s;
      var $i;
      $1=$p;
      $2=$op;
      $3=$opnd;
      $4=$pos;
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 13; break;
    case 4: 
      var $11=$1;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      $sn=$13;
      var $14=$1;
      var $15=$2;
      var $16=$3;
      _doemit($14, $15, $16);
      var $17=$sn;
      var $18=$1;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      $s=$22;
      $i=1;
      __label__ = 5; break;
    case 5: 
      var $24=$i;
      var $25=(($24)|0) < 10;
      if ($25) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $27=$i;
      var $28=$1;
      var $29=(($28+32)|0);
      var $30=(($29+($27<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$4;
      var $33=(($31)|0) >= (($32)|0);
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $35=$i;
      var $36=$1;
      var $37=(($36+32)|0);
      var $38=(($37+($35<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[(($38)>>2)]=$40;
      __label__ = 8; break;
    case 8: 
      var $42=$i;
      var $43=$1;
      var $44=(($43+72)|0);
      var $45=(($44+($42<<2))|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$4;
      var $48=(($46)|0) >= (($47)|0);
      if ($48) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $50=$i;
      var $51=$1;
      var $52=(($51+72)|0);
      var $53=(($52+($50<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)+(1))|0);
      HEAP32[(($53)>>2)]=$55;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $58=$i;
      var $59=((($58)+(1))|0);
      $i=$59;
      __label__ = 5; break;
    case 12: 
      var $61=$4;
      var $62=((($61)+(1))|0);
      var $63=$1;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+($62<<2))|0);
      var $67=$66;
      var $68=$4;
      var $69=$1;
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($68<<2))|0);
      var $73=$72;
      var $74=$1;
      var $75=(($74+20)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$4;
      var $78=((($76)-($77))|0);
      var $79=((($78)-(1))|0);
      var $80=((($79<<2))|0);
      _llvm_memmove_p0i8_p0i8_i32($67, $73, $80, 1, 0);
      var $81=$s;
      var $82=$4;
      var $83=$1;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+($82<<2))|0);
      HEAP32[(($86)>>2)]=$81;
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_doinsert["X"]=1;

function _dofwd($p, $pos, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$pos;
      $3=$value;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $10=$2;
      var $11=$1;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+($10<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -134217728;
      var $17=$3;
      var $18=$16 | $17;
      var $19=$2;
      var $20=$1;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+($19<<2))|0);
      HEAP32[(($23)>>2)]=$18;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_count($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $count;
      var $ndigits;
      $1=$p;
      $count=0;
      $ndigits=0;
      __label__ = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAPU32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { __label__ = 4; break; } else { var $22 = 0;__label__ = 6; break; }
    case 4: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAPU8[($13)];
      var $15=(($14)&255);
      var $16=_isdigit($15);
      var $17=(($16)|0)!=0;
      if ($17) { __label__ = 5; break; } else { var $22 = 0;__label__ = 6; break; }
    case 5: 
      var $19=$count;
      var $20=(($19)|0) <= 255;
      var $22 = $20;__label__ = 6; break;
    case 6: 
      var $22;
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $24=$count;
      var $25=((($24)*(10))|0);
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+1)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=HEAP8[($28)];
      var $31=(($30 << 24) >> 24);
      var $32=((($31)-(48))|0);
      var $33=((($25)+($32))|0);
      $count=$33;
      var $34=$ndigits;
      var $35=((($34)+(1))|0);
      $ndigits=$35;
      __label__ = 3; break;
    case 8: 
      var $37=$ndigits;
      var $38=(($37)|0) > 0;
      if ($38) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $40=$count;
      var $41=(($40)|0) <= 255;
      if ($41) { var $47 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $43=$1;
      var $44=_seterr($43, 10);
      var $45=(($44)|0)!=0;
      var $47 = $45;__label__ = 11; break;
    case 11: 
      var $47;
      var $48=(($47)&1);
      var $49=$count;
      ;
      return $49;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_count["X"]=1;

function _repeat($p, $start, $from, $to) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $finish;
      var $copy;
      $1=$p;
      $2=$start;
      $3=$from;
      $4=$to;
      var $5=$1;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $finish=$7;
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 19; break;
    case 4: 
      var $14=$3;
      var $15=(($14)|0) <= 1;
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$3;
      var $23 = $17;__label__ = 7; break;
    case 6: 
      var $19=$3;
      var $20=(($19)|0)==256;
      var $21=$20 ? 3 : 2;
      var $23 = $21;__label__ = 7; break;
    case 7: 
      var $23;
      var $24=((($23<<3))|0);
      var $25=$4;
      var $26=(($25)|0) <= 1;
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $28=$4;
      var $34 = $28;__label__ = 10; break;
    case 9: 
      var $30=$4;
      var $31=(($30)|0)==256;
      var $32=$31 ? 3 : 2;
      var $34 = $32;__label__ = 10; break;
    case 10: 
      var $34;
      var $35=((($24)+($34))|0);
      if ((($35)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($35)|0) == 1 || (($35)|0) == 2 || (($35)|0) == 3) {
        __label__ = 12; break;
      }
      else if ((($35)|0) == 9) {
        __label__ = 13; break;
      }
      else if ((($35)|0) == 10) {
        __label__ = 14; break;
      }
      else if ((($35)|0) == 11) {
        __label__ = 15; break;
      }
      else if ((($35)|0) == 18) {
        __label__ = 16; break;
      }
      else if ((($35)|0) == 19) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 11: 
      var $37=$finish;
      var $38=$2;
      var $39=((($37)-($38))|0);
      var $40=$1;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)-($39))|0);
      HEAP32[(($41)>>2)]=$43;
      __label__ = 19; break;
    case 12: 
      var $45=$1;
      var $46=$1;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$2;
      var $50=((($48)-($49))|0);
      var $51=((($50)+(1))|0);
      var $52=$2;
      _doinsert($45, 2013265920, $51, $52);
      var $53=$1;
      var $54=$2;
      var $55=((($54)+(1))|0);
      var $56=$4;
      _repeat($53, $55, 1, $56);
      var $57=$1;
      var $58=$1;
      var $59=(($58+20)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      var $62=((($60)-($61))|0);
      _doemit($57, -2147483648, $62);
      var $63=$1;
      var $64=$2;
      var $65=$1;
      var $66=(($65+20)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=((($67)-($68))|0);
      _dofwd($63, $64, $69);
      var $70=$1;
      _doemit($70, -2013265920, 0);
      var $71=$1;
      var $72=$1;
      var $73=(($72+20)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)-(1))|0);
      var $76=$1;
      var $77=(($76+20)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$1;
      var $80=(($79+20)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-(1))|0);
      var $83=((($78)-($82))|0);
      _dofwd($71, $75, $83);
      var $84=$1;
      var $85=$1;
      var $86=(($85+20)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$1;
      var $89=(($88+20)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=((($90)-(2))|0);
      var $92=((($87)-($91))|0);
      _doemit($84, -1879048192, $92);
      __label__ = 19; break;
    case 13: 
      __label__ = 19; break;
    case 14: 
      var $95=$1;
      var $96=$1;
      var $97=(($96+20)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$2;
      var $100=((($98)-($99))|0);
      var $101=((($100)+(1))|0);
      var $102=$2;
      _doinsert($95, 2013265920, $101, $102);
      var $103=$1;
      var $104=$1;
      var $105=(($104+20)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=((($106)-($107))|0);
      _doemit($103, -2147483648, $108);
      var $109=$1;
      var $110=$2;
      var $111=$1;
      var $112=(($111+20)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$2;
      var $115=((($113)-($114))|0);
      _dofwd($109, $110, $115);
      var $116=$1;
      _doemit($116, -2013265920, 0);
      var $117=$1;
      var $118=$1;
      var $119=(($118+20)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)-(1))|0);
      var $122=$1;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$1;
      var $126=(($125+20)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=((($127)-(1))|0);
      var $129=((($124)-($128))|0);
      _dofwd($117, $121, $129);
      var $130=$1;
      var $131=$1;
      var $132=(($131+20)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$1;
      var $135=(($134+20)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=((($136)-(2))|0);
      var $138=((($133)-($137))|0);
      _doemit($130, -1879048192, $138);
      var $139=$1;
      var $140=$2;
      var $141=((($140)+(1))|0);
      var $142=$finish;
      var $143=((($142)+(1))|0);
      var $144=_dupl($139, $141, $143);
      $copy=$144;
      var $145=$1;
      var $146=$copy;
      var $147=$4;
      var $148=((($147)-(1))|0);
      _repeat($145, $146, 1, $148);
      __label__ = 19; break;
    case 15: 
      var $150=$1;
      var $151=$1;
      var $152=(($151+20)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$2;
      var $155=((($153)-($154))|0);
      var $156=((($155)+(1))|0);
      var $157=$2;
      _doinsert($150, 1207959552, $156, $157);
      var $158=$1;
      var $159=$1;
      var $160=(($159+20)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$2;
      var $163=((($161)-($162))|0);
      _doemit($158, 1342177280, $163);
      __label__ = 19; break;
    case 16: 
      var $165=$1;
      var $166=$2;
      var $167=$finish;
      var $168=_dupl($165, $166, $167);
      $copy=$168;
      var $169=$1;
      var $170=$copy;
      var $171=$3;
      var $172=((($171)-(1))|0);
      var $173=$4;
      var $174=((($173)-(1))|0);
      _repeat($169, $170, $172, $174);
      __label__ = 19; break;
    case 17: 
      var $176=$1;
      var $177=$2;
      var $178=$finish;
      var $179=_dupl($176, $177, $178);
      $copy=$179;
      var $180=$1;
      var $181=$copy;
      var $182=$3;
      var $183=((($182)-(1))|0);
      var $184=$4;
      _repeat($180, $181, $183, $184);
      __label__ = 19; break;
    case 18: 
      var $186=$1;
      var $187=_seterr($186, 15);
      __label__ = 19; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_repeat["X"]=1;

function _othercase($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$ch;
      var $3=$2;
      var $4=(($3) & 255);
      var $5=(($4)&255);
      $2=$5;
      var $6=$2;
      var $7=_isupper($6);
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_tolower($10);
      var $12=(($11) & 255);
      $1=$12;
      __label__ = 7; break;
    case 4: 
      var $14=$2;
      var $15=_islower($14);
      var $16=(($15)|0)!=0;
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $18=$2;
      var $19=_toupper($18);
      var $20=(($19) & 255);
      $1=$20;
      __label__ = 7; break;
    case 6: 
      var $22=$2;
      var $23=(($22) & 255);
      $1=$23;
      __label__ = 7; break;
    case 7: 
      var $25=$1;
      ;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bothcases($p, $ch) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $oldnext;
  var $oldend;
  var $bracket=__stackBase__;
  $1=$p;
  $2=$ch;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  $oldnext=$5;
  var $6=$1;
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  $oldend=$8;
  var $9=$2;
  var $10=(($9) & 255);
  var $11=(($10)&255);
  $2=$11;
  var $12=(($bracket)|0);
  var $13=$1;
  var $14=(($13)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=(($bracket)|0);
  var $16=(($15+2)|0);
  var $17=$1;
  var $18=(($17+4)|0);
  HEAP32[(($18)>>2)]=$16;
  var $19=$2;
  var $20=(($19) & 255);
  var $21=(($bracket)|0);
  HEAP8[($21)]=$20;
  var $22=(($bracket+1)|0);
  HEAP8[($22)]=93;
  var $23=(($bracket+2)|0);
  HEAP8[($23)]=0;
  var $24=$1;
  _p_bracket($24);
  var $25=$oldnext;
  var $26=$1;
  var $27=(($26)|0);
  HEAP32[(($27)>>2)]=$25;
  var $28=$oldend;
  var $29=$1;
  var $30=(($29+4)|0);
  HEAP32[(($30)>>2)]=$28;
  STACKTOP = __stackBase__;
  return;
}


function _allocset($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $no;
      var $nc;
      var $nbytes;
      var $cs;
      var $css;
      var $i;
      var $ptr;
      $2=$p;
      var $3=$2;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)+(1))|0);
      HEAP32[(($6)>>2)]=$8;
      $no=$7;
      var $9=$2;
      var $10=(($9+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      $css=$13;
      var $14=$no;
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14)|0) >= (($17)|0);
      if ($18) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $20=$2;
      var $21=(($20+24)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)+(8))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      $nc=$26;
      var $27=$nc;
      var $28=Math.floor(((($27)>>>0))/(8));
      var $29=$css;
      var $30=((($28)*($29))|0);
      $nbytes=$30;
      var $31=$2;
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$nc;
      var $38=((($37<<4))|0);
      var $39=_realloc($36, $38);
      var $40=$39;
      var $41=$40;
      $ptr=$41;
      var $42=$ptr;
      var $43=(($42)|0)==0;
      if ($43) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 16; break;
    case 5: 
      var $46=$ptr;
      var $47=$46;
      var $48=$2;
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+16)|0);
      HEAP32[(($51)>>2)]=$47;
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+20)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$nbytes;
      var $58=_realloc($56, $57);
      $ptr=$58;
      var $59=$ptr;
      var $60=(($59)|0)==0;
      if ($60) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 16; break;
    case 7: 
      var $63=$ptr;
      var $64=$2;
      var $65=(($64+28)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+20)|0);
      HEAP32[(($67)>>2)]=$63;
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $69=$i;
      var $70=$no;
      var $71=(($69)|0) < (($70)|0);
      if ($71) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $73=$2;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$css;
      var $79=$i;
      var $80=((((($79)|0))/(8))&-1);
      var $81=((($78)*($80))|0);
      var $82=(($77+$81)|0);
      var $83=$i;
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($83<<4))|0);
      var $90=(($89)|0);
      HEAP32[(($90)>>2)]=$82;
      __label__ = 10; break;
    case 10: 
      var $92=$i;
      var $93=((($92)+(1))|0);
      $i=$93;
      __label__ = 8; break;
    case 11: 
      var $95=$2;
      var $96=(($95+28)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$nbytes;
      var $101=$css;
      var $102=((($100)-($101))|0);
      var $103=(($99+$102)|0);
      var $104=$css;
      _memset($103, 0, $104, 1);
      __label__ = 12; break;
    case 12: 
      var $106=$2;
      var $107=(($106+28)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+16)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0)==0;
      if ($111) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $113=$2;
      var $114=(($113+28)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|0)==0;
      if ($118) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $121=$no;
      var $122=$2;
      var $123=(($122+28)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+16)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+($121<<4))|0);
      $cs=$127;
      var $128=$2;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+20)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$css;
      var $134=$no;
      var $135=((((($134)|0))/(8))&-1);
      var $136=((($133)*($135))|0);
      var $137=(($132+$136)|0);
      var $138=$cs;
      var $139=(($138)|0);
      HEAP32[(($139)>>2)]=$137;
      var $140=$no;
      var $141=((($140)|0))%(8);
      var $142=1 << $141;
      var $143=(($142) & 255);
      var $144=$cs;
      var $145=(($144+4)|0);
      HEAP8[($145)]=$143;
      var $146=$cs;
      var $147=(($146+5)|0);
      HEAP8[($147)]=0;
      var $148=$cs;
      var $149=(($148+8)|0);
      HEAP32[(($149)>>2)]=0;
      var $150=$cs;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=0;
      var $152=$cs;
      $1=$152;
      __label__ = 17; break;
    case 16: 
      var $154=$2;
      var $155=(($154+28)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$158;
      _free($159);
      var $160=$2;
      var $161=(($160+28)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+16)|0);
      HEAP32[(($163)>>2)]=0;
      var $164=$2;
      var $165=(($164+28)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+20)|0);
      var $168=HEAP32[(($167)>>2)];
      _free($168);
      var $169=$2;
      var $170=(($169+28)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+20)|0);
      HEAP32[(($172)>>2)]=0;
      var $173=$2;
      var $174=_seterr($173, 12);
      $1=0;
      __label__ = 17; break;
    case 17: 
      var $176=$1;
      ;
      return $176;
    default: assert(0, "bad label: " + __label__);
  }
}
_allocset["X"]=1;

function _mccase($p, $cs) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$p;
  $2=$cs;
  ;
  return;
}


function _mcinvert($p, $cs) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$p;
  $2=$cs;
  ;
  return;
}


function _freeset($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $top;
      var $css;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+($7<<4))|0);
      $top=$13;
      var $14=$1;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      $css=$18;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $20=$i;
      var $21=$css;
      var $22=(($20)>>>0) < (($21)>>>0);
      if ($22) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=HEAPU8[($25)];
      var $27=(($26)&255);
      var $28=$27 ^ -1;
      var $29=$i;
      var $30=(($29) & 255);
      var $31=(($30)&255);
      var $32=$2;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+$31)|0);
      var $36=HEAPU8[($35)];
      var $37=(($36)&255);
      var $38=$37 & $28;
      var $39=(($38) & 255);
      HEAP8[($35)]=$39;
      var $40=$i;
      var $41=$2;
      var $42=(($41+5)|0);
      var $43=HEAPU8[($42)];
      var $44=(($43)&255);
      var $45=((($44)-($40))|0);
      var $46=(($45) & 255);
      HEAP8[($42)]=$46;
      __label__ = 5; break;
    case 5: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      __label__ = 3; break;
    case 6: 
      var $51=$2;
      var $52=$top;
      var $53=((($52)-(16))|0);
      var $54=(($51)|0)==(($53)|0);
      if ($54) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $56=$1;
      var $57=(($56+28)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_freeset["X"]=1;

function _nch($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $css;
      var $n;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      $css=$7;
      $n=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $9=$i;
      var $10=$css;
      var $11=(($9)>>>0) < (($10)>>>0);
      if ($11) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $13=$i;
      var $14=(($13) & 255);
      var $15=(($14)&255);
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+$15)|0);
      var $20=HEAPU8[($19)];
      var $21=(($20)&255);
      var $22=$2;
      var $23=(($22+4)|0);
      var $24=HEAPU8[($23)];
      var $25=(($24)&255);
      var $26=$21 & $25;
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $29=$n;
      var $30=((($29)+(1))|0);
      $n=$30;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $33=$i;
      var $34=((($33)+(1))|0);
      $i=$34;
      __label__ = 3; break;
    case 8: 
      var $36=$n;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}


function _firstch($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $css;
      $2=$p;
      $3=$cs;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      $css=$8;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $10=$i;
      var $11=$css;
      var $12=(($10)>>>0) < (($11)>>>0);
      if ($12) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $14=$i;
      var $15=(($14) & 255);
      var $16=(($15)&255);
      var $17=$3;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+$16)|0);
      var $21=HEAPU8[($20)];
      var $22=(($21)&255);
      var $23=$3;
      var $24=(($23+4)|0);
      var $25=HEAPU8[($24)];
      var $26=(($25)&255);
      var $27=$22 & $26;
      var $28=(($27)|0)!=0;
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $30=$i;
      var $31=(($30) & 255);
      var $32=(($31 << 24) >> 24);
      $1=$32;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      __label__ = 3; break;
    case 8: 
      $1=0;
      __label__ = 9; break;
    case 9: 
      var $39=$1;
      ;
      return $39;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_b_term($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $c;
      var $start;
      var $finish;
      var $i;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAPU32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $18 = $15;__label__ = 5; break;
    case 4: 
      var $18 = 0;__label__ = 5; break;
    case 5: 
      var $18;
      if ((($18)|0) == 91) {
        __label__ = 6; break;
      }
      else if ((($18)|0) == 45) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 6: 
      var $20=$1;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+1)|0);
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=HEAPU32[(($25)>>2)];
      var $27=(($23)>>>0) < (($26)>>>0);
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $29=$1;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+1)|0);
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24);
      var $37 = $34;__label__ = 9; break;
    case 8: 
      var $37 = 0;__label__ = 9; break;
    case 9: 
      var $37;
      var $38=(($37) & 255);
      $c=$38;
      __label__ = 12; break;
    case 10: 
      var $40=$1;
      var $41=_seterr($40, 11);
      __label__ = 62; break;
    case 11: 
      $c=0;
      __label__ = 12; break;
    case 12: 
      var $44=$c;
      var $45=(($44 << 24) >> 24);
      if ((($45)|0) == 58) {
        __label__ = 13; break;
      }
      else if ((($45)|0) == 61) {
        __label__ = 28; break;
      }
      else {
      __label__ = 43; break;
      }
      
    case 13: 
      var $47=$1;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+2)|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=$1;
      var $52=(($51)|0);
      var $53=HEAPU32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=HEAPU32[(($55)>>2)];
      var $57=(($53)>>>0) < (($56)>>>0);
      if ($57) { var $63 = 1;__label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $59=$1;
      var $60=_seterr($59, 7);
      var $61=(($60)|0)!=0;
      var $63 = $61;__label__ = 15; break;
    case 15: 
      var $63;
      var $64=(($63)&1);
      var $65=$1;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=HEAP8[($67)];
      $c=$68;
      var $69=$c;
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)!=45;
      if ($71) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $73=$c;
      var $74=(($73 << 24) >> 24);
      var $75=(($74)|0)!=93;
      if ($75) { var $81 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $77=$1;
      var $78=_seterr($77, 4);
      var $79=(($78)|0)!=0;
      var $81 = $79;__label__ = 18; break;
    case 18: 
      var $81;
      var $82=(($81)&1);
      var $83=$1;
      var $84=$2;
      _p_b_cclass($83, $84);
      var $85=$1;
      var $86=(($85)|0);
      var $87=HEAPU32[(($86)>>2)];
      var $88=$1;
      var $89=(($88+4)|0);
      var $90=HEAPU32[(($89)>>2)];
      var $91=(($87)>>>0) < (($90)>>>0);
      if ($91) { var $97 = 1;__label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $93=$1;
      var $94=_seterr($93, 7);
      var $95=(($94)|0)!=0;
      var $97 = $95;__label__ = 20; break;
    case 20: 
      var $97;
      var $98=(($97)&1);
      var $99=$1;
      var $100=(($99)|0);
      var $101=HEAPU32[(($100)>>2)];
      var $102=$1;
      var $103=(($102+4)|0);
      var $104=HEAPU32[(($103)>>2)];
      var $105=(($101)>>>0) < (($104)>>>0);
      if ($105) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $107=$1;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+1)|0);
      var $111=$1;
      var $112=(($111+4)|0);
      var $113=HEAPU32[(($112)>>2)];
      var $114=(($110)>>>0) < (($113)>>>0);
      if ($114) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $116=$1;
      var $117=(($116)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=HEAP8[($118)];
      var $120=(($119 << 24) >> 24);
      var $121=(($120)|0)==58;
      if ($121) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $123=$1;
      var $124=(($123)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125+1)|0);
      var $127=HEAP8[($126)];
      var $128=(($127 << 24) >> 24);
      var $129=(($128)|0)==93;
      if ($129) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $131=$1;
      var $132=(($131)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+2)|0);
      HEAP32[(($132)>>2)]=$134;
      if (1) { var $141 = 1;__label__ = 27; break; } else { __label__ = 26; break; }
    case 25: 
      if (0) { var $141 = 1;__label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      var $137=$1;
      var $138=_seterr($137, 4);
      var $139=(($138)|0)!=0;
      var $141 = $139;__label__ = 27; break;
    case 27: 
      var $141;
      var $142=(($141)&1);
      __label__ = 62; break;
    case 28: 
      var $144=$1;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+2)|0);
      HEAP32[(($145)>>2)]=$147;
      var $148=$1;
      var $149=(($148)|0);
      var $150=HEAPU32[(($149)>>2)];
      var $151=$1;
      var $152=(($151+4)|0);
      var $153=HEAPU32[(($152)>>2)];
      var $154=(($150)>>>0) < (($153)>>>0);
      if ($154) { var $160 = 1;__label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $156=$1;
      var $157=_seterr($156, 7);
      var $158=(($157)|0)!=0;
      var $160 = $158;__label__ = 30; break;
    case 30: 
      var $160;
      var $161=(($160)&1);
      var $162=$1;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=HEAP8[($164)];
      $c=$165;
      var $166=$c;
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|0)!=45;
      if ($168) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $170=$c;
      var $171=(($170 << 24) >> 24);
      var $172=(($171)|0)!=93;
      if ($172) { var $178 = 1;__label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      var $174=$1;
      var $175=_seterr($174, 3);
      var $176=(($175)|0)!=0;
      var $178 = $176;__label__ = 33; break;
    case 33: 
      var $178;
      var $179=(($178)&1);
      var $180=$1;
      var $181=$2;
      _p_b_eclass($180, $181);
      var $182=$1;
      var $183=(($182)|0);
      var $184=HEAPU32[(($183)>>2)];
      var $185=$1;
      var $186=(($185+4)|0);
      var $187=HEAPU32[(($186)>>2)];
      var $188=(($184)>>>0) < (($187)>>>0);
      if ($188) { var $194 = 1;__label__ = 35; break; } else { __label__ = 34; break; }
    case 34: 
      var $190=$1;
      var $191=_seterr($190, 7);
      var $192=(($191)|0)!=0;
      var $194 = $192;__label__ = 35; break;
    case 35: 
      var $194;
      var $195=(($194)&1);
      var $196=$1;
      var $197=(($196)|0);
      var $198=HEAPU32[(($197)>>2)];
      var $199=$1;
      var $200=(($199+4)|0);
      var $201=HEAPU32[(($200)>>2)];
      var $202=(($198)>>>0) < (($201)>>>0);
      if ($202) { __label__ = 36; break; } else { __label__ = 40; break; }
    case 36: 
      var $204=$1;
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+1)|0);
      var $208=$1;
      var $209=(($208+4)|0);
      var $210=HEAPU32[(($209)>>2)];
      var $211=(($207)>>>0) < (($210)>>>0);
      if ($211) { __label__ = 37; break; } else { __label__ = 40; break; }
    case 37: 
      var $213=$1;
      var $214=(($213)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=HEAP8[($215)];
      var $217=(($216 << 24) >> 24);
      var $218=(($217)|0)==61;
      if ($218) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $220=$1;
      var $221=(($220)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=(($222+1)|0);
      var $224=HEAP8[($223)];
      var $225=(($224 << 24) >> 24);
      var $226=(($225)|0)==93;
      if ($226) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $228=$1;
      var $229=(($228)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($230+2)|0);
      HEAP32[(($229)>>2)]=$231;
      if (1) { var $238 = 1;__label__ = 42; break; } else { __label__ = 41; break; }
    case 40: 
      if (0) { var $238 = 1;__label__ = 42; break; } else { __label__ = 41; break; }
    case 41: 
      var $234=$1;
      var $235=_seterr($234, 3);
      var $236=(($235)|0)!=0;
      var $238 = $236;__label__ = 42; break;
    case 42: 
      var $238;
      var $239=(($238)&1);
      __label__ = 62; break;
    case 43: 
      var $241=$1;
      var $242=_p_b_symbol($241);
      $start=$242;
      var $243=$1;
      var $244=(($243)|0);
      var $245=HEAPU32[(($244)>>2)];
      var $246=$1;
      var $247=(($246+4)|0);
      var $248=HEAPU32[(($247)>>2)];
      var $249=(($245)>>>0) < (($248)>>>0);
      if ($249) { __label__ = 44; break; } else { __label__ = 54; break; }
    case 44: 
      var $251=$1;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=HEAP8[($253)];
      var $255=(($254 << 24) >> 24);
      var $256=(($255)|0)==45;
      if ($256) { __label__ = 45; break; } else { __label__ = 54; break; }
    case 45: 
      var $258=$1;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260+1)|0);
      var $262=$1;
      var $263=(($262+4)|0);
      var $264=HEAPU32[(($263)>>2)];
      var $265=(($261)>>>0) < (($264)>>>0);
      if ($265) { __label__ = 46; break; } else { __label__ = 54; break; }
    case 46: 
      var $267=$1;
      var $268=(($267)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($269+1)|0);
      var $271=HEAP8[($270)];
      var $272=(($271 << 24) >> 24);
      var $273=(($272)|0)!=93;
      if ($273) { __label__ = 47; break; } else { __label__ = 54; break; }
    case 47: 
      var $275=$1;
      var $276=(($275)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=(($277+1)|0);
      HEAP32[(($276)>>2)]=$278;
      var $279=$1;
      var $280=(($279)|0);
      var $281=HEAPU32[(($280)>>2)];
      var $282=$1;
      var $283=(($282+4)|0);
      var $284=HEAPU32[(($283)>>2)];
      var $285=(($281)>>>0) < (($284)>>>0);
      if ($285) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $287=$1;
      var $288=(($287)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=HEAP8[($289)];
      var $291=(($290 << 24) >> 24);
      var $292=(($291)|0)==45;
      if ($292) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $294=$1;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296+1)|0);
      HEAP32[(($295)>>2)]=$297;
      if (1) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 50: 
      if (0) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      $finish=45;
      __label__ = 53; break;
    case 52: 
      var $301=$1;
      var $302=_p_b_symbol($301);
      $finish=$302;
      __label__ = 53; break;
    case 53: 
      __label__ = 55; break;
    case 54: 
      var $305=$start;
      $finish=$305;
      __label__ = 55; break;
    case 55: 
      var $307=$start;
      var $308=(($307 << 24) >> 24);
      var $309=$finish;
      var $310=(($309 << 24) >> 24);
      var $311=(($308)|0) <= (($310)|0);
      if ($311) { var $317 = 1;__label__ = 57; break; } else { __label__ = 56; break; }
    case 56: 
      var $313=$1;
      var $314=_seterr($313, 11);
      var $315=(($314)|0)!=0;
      var $317 = $315;__label__ = 57; break;
    case 57: 
      var $317;
      var $318=(($317)&1);
      var $319=$start;
      var $320=(($319 << 24) >> 24);
      $i=$320;
      __label__ = 58; break;
    case 58: 
      var $322=$i;
      var $323=$finish;
      var $324=(($323 << 24) >> 24);
      var $325=(($322)|0) <= (($324)|0);
      if ($325) { __label__ = 59; break; } else { __label__ = 61; break; }
    case 59: 
      var $327=$2;
      var $328=(($327+4)|0);
      var $329=HEAPU8[($328)];
      var $330=(($329)&255);
      var $331=$i;
      var $332=(($331) & 255);
      var $333=(($332)&255);
      var $334=$2;
      var $335=(($334)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336+$333)|0);
      var $338=HEAPU8[($337)];
      var $339=(($338)&255);
      var $340=$339 | $330;
      var $341=(($340) & 255);
      HEAP8[($337)]=$341;
      var $342=$i;
      var $343=$2;
      var $344=(($343+5)|0);
      var $345=HEAPU8[($344)];
      var $346=(($345)&255);
      var $347=((($346)+($342))|0);
      var $348=(($347) & 255);
      HEAP8[($344)]=$348;
      __label__ = 60; break;
    case 60: 
      var $350=$i;
      var $351=((($350)+(1))|0);
      $i=$351;
      __label__ = 58; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_term["X"]=1;

function _freezeset($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $h;
      var $i;
      var $top;
      var $cs2;
      var $css;
      $1=$p;
      $2=$cs;
      var $3=$2;
      var $4=(($3+5)|0);
      var $5=HEAP8[($4)];
      $h=$5;
      var $6=$1;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($10<<4))|0);
      $top=$16;
      var $17=$1;
      var $18=(($17+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      $css=$21;
      var $22=$1;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0);
      $cs2=$27;
      __label__ = 3; break;
    case 3: 
      var $29=$cs2;
      var $30=$top;
      var $31=(($29)>>>0) < (($30)>>>0);
      if ($31) { __label__ = 4; break; } else { __label__ = 17; break; }
    case 4: 
      var $33=$cs2;
      var $34=(($33+5)|0);
      var $35=HEAPU8[($34)];
      var $36=(($35)&255);
      var $37=$h;
      var $38=(($37)&255);
      var $39=(($36)|0)==(($38)|0);
      if ($39) { __label__ = 5; break; } else { __label__ = 15; break; }
    case 5: 
      var $41=$cs2;
      var $42=$2;
      var $43=(($41)|0)!=(($42)|0);
      if ($43) { __label__ = 6; break; } else { __label__ = 15; break; }
    case 6: 
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $46=$i;
      var $47=$css;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $50=$i;
      var $51=(($50) & 255);
      var $52=(($51)&255);
      var $53=$cs2;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+$52)|0);
      var $57=HEAPU8[($56)];
      var $58=(($57)&255);
      var $59=$cs2;
      var $60=(($59+4)|0);
      var $61=HEAPU8[($60)];
      var $62=(($61)&255);
      var $63=$58 & $62;
      var $64=(($63)|0)!=0;
      var $65=$64 ^ 1;
      var $66=$65 ^ 1;
      var $67=(($66)&1);
      var $68=$i;
      var $69=(($68) & 255);
      var $70=(($69)&255);
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=$2;
      var $78=(($77+4)|0);
      var $79=HEAPU8[($78)];
      var $80=(($79)&255);
      var $81=$76 & $80;
      var $82=(($81)|0)!=0;
      var $83=$82 ^ 1;
      var $84=$83 ^ 1;
      var $85=(($84)&1);
      var $86=(($67)|0)!=(($85)|0);
      if ($86) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 12; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $90=$i;
      var $91=((($90)+(1))|0);
      $i=$91;
      __label__ = 7; break;
    case 12: 
      var $93=$i;
      var $94=$css;
      var $95=(($93)|0)==(($94)|0);
      if ($95) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 17; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $100=$cs2;
      var $101=(($100+16)|0);
      $cs2=$101;
      __label__ = 3; break;
    case 17: 
      var $103=$cs2;
      var $104=$top;
      var $105=(($103)>>>0) < (($104)>>>0);
      if ($105) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $107=$1;
      var $108=$2;
      _freeset($107, $108);
      var $109=$cs2;
      $2=$109;
      __label__ = 19; break;
    case 19: 
      var $111=$2;
      var $112=$1;
      var $113=(($112+28)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+16)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$111;
      var $118=$116;
      var $119=((($117)-($118))|0);
      var $120=((((($119)|0))/(16))&-1);
      ;
      return $120;
    default: assert(0, "bad label: " + __label__);
  }
}
_freezeset["X"]=1;

function _p_b_cclass($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $sp;
      var $cp;
      var $len;
      var $u;
      var $c;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      $sp=$5;
      __label__ = 3; break;
    case 3: 
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAPU32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=HEAPU32[(($11)>>2)];
      var $13=(($9)>>>0) < (($12)>>>0);
      if ($13) { __label__ = 4; break; } else { var $23 = 0;__label__ = 5; break; }
    case 4: 
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=HEAPU8[($17)];
      var $19=(($18)&255);
      var $20=_isalpha($19);
      var $21=(($20)|0)!=0;
      var $23 = $21;__label__ = 5; break;
    case 5: 
      var $23;
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      HEAP32[(($26)>>2)]=$28;
      __label__ = 3; break;
    case 7: 
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$sp;
      var $34=$32;
      var $35=$33;
      var $36=((($34)-($35))|0);
      $len=$36;
      $cp=((_cclasses)|0);
      __label__ = 8; break;
    case 8: 
      var $38=$cp;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)!=0;
      if ($41) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $43=$cp;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$sp;
      var $47=$len;
      var $48=_strncmp($45, $46, $47);
      var $49=(($48)|0)==0;
      if ($49) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $51=$len;
      var $52=$cp;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+$51)|0);
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $58=(($57)|0)==0;
      if ($58) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 14; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $62=$cp;
      var $63=(($62+12)|0);
      $cp=$63;
      __label__ = 8; break;
    case 14: 
      var $65=$cp;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0)==0;
      if ($68) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $70=$1;
      var $71=_seterr($70, 4);
      __label__ = 23; break;
    case 16: 
      var $73=$cp;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      $u=$75;
      __label__ = 17; break;
    case 17: 
      var $77=$u;
      var $78=(($77+1)|0);
      $u=$78;
      var $79=HEAP8[($77)];
      $c=$79;
      var $80=(($79 << 24) >> 24);
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $83=$2;
      var $84=(($83+4)|0);
      var $85=HEAPU8[($84)];
      var $86=(($85)&255);
      var $87=$c;
      var $88=(($87)&255);
      var $89=$2;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+$88)|0);
      var $93=HEAPU8[($92)];
      var $94=(($93)&255);
      var $95=$94 | $86;
      var $96=(($95) & 255);
      HEAP8[($92)]=$96;
      var $97=$c;
      var $98=(($97 << 24) >> 24);
      var $99=$2;
      var $100=(($99+5)|0);
      var $101=HEAPU8[($100)];
      var $102=(($101)&255);
      var $103=((($102)+($98))|0);
      var $104=(($103) & 255);
      HEAP8[($100)]=$104;
      __label__ = 17; break;
    case 19: 
      var $106=$cp;
      var $107=(($106+8)|0);
      var $108=HEAP32[(($107)>>2)];
      $u=$108;
      __label__ = 20; break;
    case 20: 
      var $110=$u;
      var $111=HEAP8[($110)];
      var $112=(($111 << 24) >> 24);
      var $113=(($112)|0)!=0;
      if ($113) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $115=$1;
      var $116=$2;
      var $117=$u;
      _mcadd($115, $116, $117);
      __label__ = 22; break;
    case 22: 
      var $119=$u;
      var $120=_strlen($119);
      var $121=((($120)+(1))|0);
      var $122=$u;
      var $123=(($122+$121)|0);
      $u=$123;
      __label__ = 20; break;
    case 23: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_cclass["X"]=1;

function _p_b_eclass($p, $cs) {
  ;
  var __label__;

  var $1;
  var $2;
  var $c;
  $1=$p;
  $2=$cs;
  var $3=$1;
  var $4=_p_b_coll_elem($3, 61);
  $c=$4;
  var $5=$2;
  var $6=(($5+4)|0);
  var $7=HEAPU8[($6)];
  var $8=(($7)&255);
  var $9=$c;
  var $10=(($9)&255);
  var $11=$2;
  var $12=(($11)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+$10)|0);
  var $15=HEAPU8[($14)];
  var $16=(($15)&255);
  var $17=$16 | $8;
  var $18=(($17) & 255);
  HEAP8[($14)]=$18;
  var $19=$c;
  var $20=(($19 << 24) >> 24);
  var $21=$2;
  var $22=(($21+5)|0);
  var $23=HEAPU8[($22)];
  var $24=(($23)&255);
  var $25=((($24)+($20))|0);
  var $26=(($25) & 255);
  HEAP8[($22)]=$26;
  ;
  return;
}


function _p_b_symbol($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $value;
      $2=$p;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAPU32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+4)|0);
      var $8=HEAPU32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { var $15 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $11=$2;
      var $12=_seterr($11, 7);
      var $13=(($12)|0)!=0;
      var $15 = $13;__label__ = 4; break;
    case 4: 
      var $15;
      var $16=(($15)&1);
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAPU32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=HEAPU32[(($21)>>2)];
      var $23=(($19)>>>0) < (($22)>>>0);
      if ($23) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $25=$2;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      var $29=$2;
      var $30=(($29+4)|0);
      var $31=HEAPU32[(($30)>>2)];
      var $32=(($28)>>>0) < (($31)>>>0);
      if ($32) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $34=$2;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=(($38)|0)==91;
      if ($39) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+1)|0);
      var $45=HEAP8[($44)];
      var $46=(($45 << 24) >> 24);
      var $47=(($46)|0)==46;
      if ($47) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+2)|0);
      HEAP32[(($50)>>2)]=$52;
      if (1) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 9: 
      if (0) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $55=$2;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+1)|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=HEAP8[($57)];
      $1=$59;
      __label__ = 19; break;
    case 11: 
      var $61=$2;
      var $62=_p_b_coll_elem($61, 46);
      $value=$62;
      var $63=$2;
      var $64=(($63)|0);
      var $65=HEAPU32[(($64)>>2)];
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=HEAPU32[(($67)>>2)];
      var $69=(($65)>>>0) < (($68)>>>0);
      if ($69) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+1)|0);
      var $75=$2;
      var $76=(($75+4)|0);
      var $77=HEAPU32[(($76)>>2)];
      var $78=(($74)>>>0) < (($77)>>>0);
      if ($78) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $80=$2;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=HEAP8[($82)];
      var $84=(($83 << 24) >> 24);
      var $85=(($84)|0)==46;
      if ($85) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $87=$2;
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+1)|0);
      var $91=HEAP8[($90)];
      var $92=(($91 << 24) >> 24);
      var $93=(($92)|0)==93;
      if ($93) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $95=$2;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+2)|0);
      HEAP32[(($96)>>2)]=$98;
      if (1) { var $105 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 16: 
      if (0) { var $105 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $101=$2;
      var $102=_seterr($101, 3);
      var $103=(($102)|0)!=0;
      var $105 = $103;__label__ = 18; break;
    case 18: 
      var $105;
      var $106=(($105)&1);
      var $107=$value;
      $1=$107;
      __label__ = 19; break;
    case 19: 
      var $109=$1;
      ;
      return $109;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_symbol["X"]=1;

function _p_b_coll_elem($p, $endc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      var $cp;
      var $len;
      $2=$p;
      $3=$endc;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      __label__ = 3; break;
    case 3: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=HEAPU32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=HEAPU32[(($12)>>2)];
      var $14=(($10)>>>0) < (($13)>>>0);
      if ($14) { __label__ = 4; break; } else { var $52 = 0;__label__ = 9; break; }
    case 4: 
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAPU32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+4)|0);
      var $21=HEAPU32[(($20)>>2)];
      var $22=(($18)>>>0) < (($21)>>>0);
      if ($22) { __label__ = 5; break; } else { var $49 = 0;__label__ = 8; break; }
    case 5: 
      var $24=$2;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+1)|0);
      var $28=$2;
      var $29=(($28+4)|0);
      var $30=HEAPU32[(($29)>>2)];
      var $31=(($27)>>>0) < (($30)>>>0);
      if ($31) { __label__ = 6; break; } else { var $49 = 0;__label__ = 8; break; }
    case 6: 
      var $33=$2;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=HEAP8[($35)];
      var $37=(($36 << 24) >> 24);
      var $38=$3;
      var $39=(($37)|0)==(($38)|0);
      if ($39) { __label__ = 7; break; } else { var $49 = 0;__label__ = 8; break; }
    case 7: 
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+1)|0);
      var $45=HEAP8[($44)];
      var $46=(($45 << 24) >> 24);
      var $47=(($46)|0)==93;
      var $49 = $47;__label__ = 8; break;
    case 8: 
      var $49;
      var $50=$49 ^ 1;
      var $52 = $50;__label__ = 9; break;
    case 9: 
      var $52;
      if ($52) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $54=$2;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+1)|0);
      HEAP32[(($55)>>2)]=$57;
      __label__ = 3; break;
    case 11: 
      var $59=$2;
      var $60=(($59)|0);
      var $61=HEAPU32[(($60)>>2)];
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=HEAPU32[(($63)>>2)];
      var $65=(($61)>>>0) < (($64)>>>0);
      if ($65) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $67=$2;
      var $68=_seterr($67, 7);
      $1=0;
      __label__ = 23; break;
    case 13: 
      var $70=$2;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$sp;
      var $74=$72;
      var $75=$73;
      var $76=((($74)-($75))|0);
      $len=$76;
      $cp=((_cnames)|0);
      __label__ = 14; break;
    case 14: 
      var $78=$cp;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 15; break; } else { __label__ = 20; break; }
    case 15: 
      var $83=$cp;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$sp;
      var $87=$len;
      var $88=_strncmp($85, $86, $87);
      var $89=(($88)|0)==0;
      if ($89) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $91=$len;
      var $92=$cp;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+$91)|0);
      var $96=HEAP8[($95)];
      var $97=(($96 << 24) >> 24);
      var $98=(($97)|0)==0;
      if ($98) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $100=$cp;
      var $101=(($100+4)|0);
      var $102=HEAP8[($101)];
      $1=$102;
      __label__ = 23; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $105=$cp;
      var $106=(($105+8)|0);
      $cp=$106;
      __label__ = 14; break;
    case 20: 
      var $108=$len;
      var $109=(($108)|0)==1;
      if ($109) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $111=$sp;
      var $112=HEAP8[($111)];
      $1=$112;
      __label__ = 23; break;
    case 22: 
      var $114=$2;
      var $115=_seterr($114, 3);
      $1=0;
      __label__ = 23; break;
    case 23: 
      var $117=$1;
      ;
      return $117;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_coll_elem["X"]=1;

function _mcadd($p, $cs, $cp) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $oldend;
      var $np;
      $1=$p;
      $2=$cs;
      $3=$cp;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $oldend=$6;
      var $7=$3;
      var $8=_strlen($7);
      var $9=((($8)+(1))|0);
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+($9))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=$2;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_realloc($16, $19);
      $np=$20;
      var $21=$np;
      var $22=(($21)|0)==0;
      if ($22) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      _free($31);
      __label__ = 5; break;
    case 5: 
      var $33=$2;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$1;
      var $36=_seterr($35, 12);
      __label__ = 7; break;
    case 6: 
      var $38=$np;
      var $39=$2;
      var $40=(($39+12)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$2;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$oldend;
      var $45=(($43+$44)|0);
      var $46=((($45)-(1))|0);
      var $47=$3;
      var $48=$2;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$oldend;
      var $52=((($50)-($51))|0);
      var $53=((($52)+(1))|0);
      var $54=_llvm_strlcpy($46, $47, $53);
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_mcadd["X"]=1;

function _p_ere_exp($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $c;
      var $pos;
      var $count;
      var $count2;
      var $subno;
      var $wascaret;
      $1=$p;
      $wascaret=0;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+1)|0);
      HEAP32[(($3)>>2)]=$5;
      var $6=HEAP8[($4)];
      $c=$6;
      var $7=$1;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      $pos=$9;
      var $10=$c;
      var $11=(($10 << 24) >> 24);
      if ((($11)|0) == 40) {
        __label__ = 3; break;
      }
      else if ((($11)|0) == 41) {
        __label__ = 16; break;
      }
      else if ((($11)|0) == 94) {
        __label__ = 17; break;
      }
      else if ((($11)|0) == 36) {
        __label__ = 18; break;
      }
      else if ((($11)|0) == 124) {
        __label__ = 19; break;
      }
      else if ((($11)|0) == 42 || (($11)|0) == 43 || (($11)|0) == 63) {
        __label__ = 20; break;
      }
      else if ((($11)|0) == 46) {
        __label__ = 21; break;
      }
      else if ((($11)|0) == 91) {
        __label__ = 25; break;
      }
      else if ((($11)|0) == 92) {
        __label__ = 26; break;
      }
      else if ((($11)|0) == 123) {
        __label__ = 29; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 3: 
      var $13=$1;
      var $14=(($13)|0);
      var $15=HEAPU32[(($14)>>2)];
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=HEAPU32[(($17)>>2)];
      var $19=(($15)>>>0) < (($18)>>>0);
      if ($19) { var $25 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $21=$1;
      var $22=_seterr($21, 8);
      var $23=(($22)|0)!=0;
      var $25 = $23;__label__ = 5; break;
    case 5: 
      var $25;
      var $26=(($25)&1);
      var $27=$1;
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+68)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)+(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=$1;
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+68)|0);
      var $37=HEAP32[(($36)>>2)];
      $subno=$37;
      var $38=$subno;
      var $39=(($38)|0) < 10;
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $41=$1;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$subno;
      var $45=$1;
      var $46=(($45+32)|0);
      var $47=(($46+($44<<2))|0);
      HEAP32[(($47)>>2)]=$43;
      __label__ = 7; break;
    case 7: 
      var $49=$1;
      var $50=$subno;
      _doemit($49, 1744830464, $50);
      var $51=$1;
      var $52=(($51)|0);
      var $53=HEAPU32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=HEAPU32[(($55)>>2)];
      var $57=(($53)>>>0) < (($56)>>>0);
      if ($57) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $59=$1;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=HEAP8[($61)];
      var $63=(($62 << 24) >> 24);
      var $64=(($63)|0)==41;
      if ($64) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $66=$1;
      _p_ere($66, 41);
      __label__ = 10; break;
    case 10: 
      var $68=$subno;
      var $69=(($68)|0) < 10;
      if ($69) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $71=$1;
      var $72=(($71+20)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$subno;
      var $75=$1;
      var $76=(($75+72)|0);
      var $77=(($76+($74<<2))|0);
      HEAP32[(($77)>>2)]=$73;
      __label__ = 12; break;
    case 12: 
      var $79=$1;
      var $80=$subno;
      _doemit($79, 1879048192, $80);
      var $81=$1;
      var $82=(($81)|0);
      var $83=HEAPU32[(($82)>>2)];
      var $84=$1;
      var $85=(($84+4)|0);
      var $86=HEAPU32[(($85)>>2)];
      var $87=(($83)>>>0) < (($86)>>>0);
      if ($87) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $89=$1;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+1)|0);
      HEAP32[(($90)>>2)]=$92;
      var $93=HEAP8[($91)];
      var $94=(($93 << 24) >> 24);
      var $95=(($94)|0)==41;
      if ($95) { var $101 = 1;__label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $97=$1;
      var $98=_seterr($97, 8);
      var $99=(($98)|0)!=0;
      var $101 = $99;__label__ = 15; break;
    case 15: 
      var $101;
      var $102=(($101)&1);
      __label__ = 34; break;
    case 16: 
      var $104=$1;
      var $105=_seterr($104, 8);
      __label__ = 34; break;
    case 17: 
      var $107=$1;
      _doemit($107, 402653184, 0);
      var $108=$1;
      var $109=(($108+28)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+40)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$112 | 1;
      HEAP32[(($111)>>2)]=$113;
      var $114=$1;
      var $115=(($114+28)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+44)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=((($118)+(1))|0);
      HEAP32[(($117)>>2)]=$119;
      $wascaret=1;
      __label__ = 34; break;
    case 18: 
      var $121=$1;
      _doemit($121, 536870912, 0);
      var $122=$1;
      var $123=(($122+28)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+40)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$126 | 2;
      HEAP32[(($125)>>2)]=$127;
      var $128=$1;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+48)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=((($132)+(1))|0);
      HEAP32[(($131)>>2)]=$133;
      __label__ = 34; break;
    case 19: 
      var $135=$1;
      var $136=_seterr($135, 14);
      __label__ = 34; break;
    case 20: 
      var $138=$1;
      var $139=_seterr($138, 13);
      __label__ = 34; break;
    case 21: 
      var $141=$1;
      var $142=(($141+28)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143+24)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$145 & 8;
      var $147=(($146)|0)!=0;
      if ($147) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $149=$1;
      _nonnewline($149);
      __label__ = 24; break;
    case 23: 
      var $151=$1;
      _doemit($151, 671088640, 0);
      __label__ = 24; break;
    case 24: 
      __label__ = 34; break;
    case 25: 
      var $154=$1;
      _p_bracket($154);
      __label__ = 34; break;
    case 26: 
      var $156=$1;
      var $157=(($156)|0);
      var $158=HEAPU32[(($157)>>2)];
      var $159=$1;
      var $160=(($159+4)|0);
      var $161=HEAPU32[(($160)>>2)];
      var $162=(($158)>>>0) < (($161)>>>0);
      if ($162) { var $168 = 1;__label__ = 28; break; } else { __label__ = 27; break; }
    case 27: 
      var $164=$1;
      var $165=_seterr($164, 5);
      var $166=(($165)|0)!=0;
      var $168 = $166;__label__ = 28; break;
    case 28: 
      var $168;
      var $169=(($168)&1);
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAPU32[(($171)>>2)];
      var $173=(($172+1)|0);
      HEAP32[(($171)>>2)]=$173;
      var $174=HEAP8[($172)];
      $c=$174;
      var $175=$1;
      var $176=$c;
      var $177=(($176 << 24) >> 24);
      _ordinary($175, $177);
      __label__ = 34; break;
    case 29: 
      var $179=$1;
      var $180=(($179)|0);
      var $181=HEAPU32[(($180)>>2)];
      var $182=$1;
      var $183=(($182+4)|0);
      var $184=HEAPU32[(($183)>>2)];
      var $185=(($181)>>>0) < (($184)>>>0);
      if ($185) { __label__ = 30; break; } else { var $199 = 1;__label__ = 32; break; }
    case 30: 
      var $187=$1;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=HEAPU8[($189)];
      var $191=(($190)&255);
      var $192=_isdigit($191);
      var $193=(($192)|0)!=0;
      if ($193) { __label__ = 31; break; } else { var $199 = 1;__label__ = 32; break; }
    case 31: 
      var $195=$1;
      var $196=_seterr($195, 13);
      var $197=(($196)|0)!=0;
      var $199 = $197;__label__ = 32; break;
    case 32: 
      var $199;
      var $200=(($199)&1);
      __label__ = 33; break;
    case 33: 
      var $202=$1;
      var $203=$c;
      var $204=(($203 << 24) >> 24);
      _ordinary($202, $204);
      __label__ = 34; break;
    case 34: 
      var $206=$1;
      var $207=(($206)|0);
      var $208=HEAPU32[(($207)>>2)];
      var $209=$1;
      var $210=(($209+4)|0);
      var $211=HEAPU32[(($210)>>2)];
      var $212=(($208)>>>0) < (($211)>>>0);
      if ($212) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      __label__ = 83; break;
    case 36: 
      var $215=$1;
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=HEAP8[($217)];
      $c=$218;
      var $219=$c;
      var $220=(($219 << 24) >> 24);
      var $221=(($220)|0)==42;
      if ($221) { __label__ = 43; break; } else { __label__ = 37; break; }
    case 37: 
      var $223=$c;
      var $224=(($223 << 24) >> 24);
      var $225=(($224)|0)==43;
      if ($225) { __label__ = 43; break; } else { __label__ = 38; break; }
    case 38: 
      var $227=$c;
      var $228=(($227 << 24) >> 24);
      var $229=(($228)|0)==63;
      if ($229) { __label__ = 43; break; } else { __label__ = 39; break; }
    case 39: 
      var $231=$c;
      var $232=(($231 << 24) >> 24);
      var $233=(($232)|0)==123;
      if ($233) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      var $235=$1;
      var $236=(($235)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+1)|0);
      var $239=$1;
      var $240=(($239+4)|0);
      var $241=HEAPU32[(($240)>>2)];
      var $242=(($238)>>>0) < (($241)>>>0);
      if ($242) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $244=$1;
      var $245=(($244)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=(($246+1)|0);
      var $248=HEAPU8[($247)];
      var $249=(($248)&255);
      var $250=_isdigit($249);
      var $251=(($250)|0)!=0;
      if ($251) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      __label__ = 83; break;
    case 43: 
      var $254=$1;
      var $255=(($254)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+1)|0);
      HEAP32[(($255)>>2)]=$257;
      var $258=$wascaret;
      var $259=(($258)|0)!=0;
      if ($259) { __label__ = 44; break; } else { var $265 = 1;__label__ = 45; break; }
    case 44: 
      var $261=$1;
      var $262=_seterr($261, 13);
      var $263=(($262)|0)!=0;
      var $265 = $263;__label__ = 45; break;
    case 45: 
      var $265;
      var $266=(($265)&1);
      var $267=$c;
      var $268=(($267 << 24) >> 24);
      if ((($268)|0) == 42) {
        __label__ = 46; break;
      }
      else if ((($268)|0) == 43) {
        __label__ = 47; break;
      }
      else if ((($268)|0) == 63) {
        __label__ = 48; break;
      }
      else if ((($268)|0) == 123) {
        __label__ = 49; break;
      }
      else {
      __label__ = 73; break;
      }
      
    case 46: 
      var $270=$1;
      var $271=$1;
      var $272=(($271+20)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=$pos;
      var $275=((($273)-($274))|0);
      var $276=((($275)+(1))|0);
      var $277=$pos;
      _doinsert($270, 1207959552, $276, $277);
      var $278=$1;
      var $279=$1;
      var $280=(($279+20)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=$pos;
      var $283=((($281)-($282))|0);
      _doemit($278, 1342177280, $283);
      var $284=$1;
      var $285=$1;
      var $286=(($285+20)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$pos;
      var $289=((($287)-($288))|0);
      var $290=((($289)+(1))|0);
      var $291=$pos;
      _doinsert($284, 1476395008, $290, $291);
      var $292=$1;
      var $293=$1;
      var $294=(($293+20)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=$pos;
      var $297=((($295)-($296))|0);
      _doemit($292, 1610612736, $297);
      __label__ = 73; break;
    case 47: 
      var $299=$1;
      var $300=$1;
      var $301=(($300+20)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=$pos;
      var $304=((($302)-($303))|0);
      var $305=((($304)+(1))|0);
      var $306=$pos;
      _doinsert($299, 1207959552, $305, $306);
      var $307=$1;
      var $308=$1;
      var $309=(($308+20)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=$pos;
      var $312=((($310)-($311))|0);
      _doemit($307, 1342177280, $312);
      __label__ = 73; break;
    case 48: 
      var $314=$1;
      var $315=$1;
      var $316=(($315+20)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$pos;
      var $319=((($317)-($318))|0);
      var $320=((($319)+(1))|0);
      var $321=$pos;
      _doinsert($314, 2013265920, $320, $321);
      var $322=$1;
      var $323=$1;
      var $324=(($323+20)|0);
      var $325=HEAP32[(($324)>>2)];
      var $326=$pos;
      var $327=((($325)-($326))|0);
      _doemit($322, -2147483648, $327);
      var $328=$1;
      var $329=$pos;
      var $330=$1;
      var $331=(($330+20)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=$pos;
      var $334=((($332)-($333))|0);
      _dofwd($328, $329, $334);
      var $335=$1;
      _doemit($335, -2013265920, 0);
      var $336=$1;
      var $337=$1;
      var $338=(($337+20)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=((($339)-(1))|0);
      var $341=$1;
      var $342=(($341+20)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=$1;
      var $345=(($344+20)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=((($346)-(1))|0);
      var $348=((($343)-($347))|0);
      _dofwd($336, $340, $348);
      var $349=$1;
      var $350=$1;
      var $351=(($350+20)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=$1;
      var $354=(($353+20)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=((($355)-(2))|0);
      var $357=((($352)-($356))|0);
      _doemit($349, -1879048192, $357);
      __label__ = 73; break;
    case 49: 
      var $359=$1;
      var $360=_p_count($359);
      $count=$360;
      var $361=$1;
      var $362=(($361)|0);
      var $363=HEAPU32[(($362)>>2)];
      var $364=$1;
      var $365=(($364+4)|0);
      var $366=HEAPU32[(($365)>>2)];
      var $367=(($363)>>>0) < (($366)>>>0);
      if ($367) { __label__ = 50; break; } else { __label__ = 52; break; }
    case 50: 
      var $369=$1;
      var $370=(($369)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=HEAP8[($371)];
      var $373=(($372 << 24) >> 24);
      var $374=(($373)|0)==44;
      if ($374) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $376=$1;
      var $377=(($376)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=(($378+1)|0);
      HEAP32[(($377)>>2)]=$379;
      if (1) { __label__ = 53; break; } else { __label__ = 59; break; }
    case 52: 
      if (0) { __label__ = 53; break; } else { __label__ = 59; break; }
    case 53: 
      var $382=$1;
      var $383=(($382)|0);
      var $384=HEAP32[(($383)>>2)];
      var $385=HEAPU8[($384)];
      var $386=(($385)&255);
      var $387=_isdigit($386);
      var $388=(($387)|0)!=0;
      if ($388) { __label__ = 54; break; } else { __label__ = 57; break; }
    case 54: 
      var $390=$1;
      var $391=_p_count($390);
      $count2=$391;
      var $392=$count;
      var $393=$count2;
      var $394=(($392)|0) <= (($393)|0);
      if ($394) { var $400 = 1;__label__ = 56; break; } else { __label__ = 55; break; }
    case 55: 
      var $396=$1;
      var $397=_seterr($396, 10);
      var $398=(($397)|0)!=0;
      var $400 = $398;__label__ = 56; break;
    case 56: 
      var $400;
      var $401=(($400)&1);
      __label__ = 58; break;
    case 57: 
      $count2=256;
      __label__ = 58; break;
    case 58: 
      __label__ = 60; break;
    case 59: 
      var $405=$count;
      $count2=$405;
      __label__ = 60; break;
    case 60: 
      var $407=$1;
      var $408=$pos;
      var $409=$count;
      var $410=$count2;
      _repeat($407, $408, $409, $410);
      var $411=$1;
      var $412=(($411)|0);
      var $413=HEAPU32[(($412)>>2)];
      var $414=$1;
      var $415=(($414+4)|0);
      var $416=HEAPU32[(($415)>>2)];
      var $417=(($413)>>>0) < (($416)>>>0);
      if ($417) { __label__ = 61; break; } else { __label__ = 63; break; }
    case 61: 
      var $419=$1;
      var $420=(($419)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=HEAP8[($421)];
      var $423=(($422 << 24) >> 24);
      var $424=(($423)|0)==125;
      if ($424) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $426=$1;
      var $427=(($426)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=(($428+1)|0);
      HEAP32[(($427)>>2)]=$429;
      if (1) { __label__ = 72; break; } else { __label__ = 64; break; }
    case 63: 
      if (0) { __label__ = 72; break; } else { __label__ = 64; break; }
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $433=$1;
      var $434=(($433)|0);
      var $435=HEAPU32[(($434)>>2)];
      var $436=$1;
      var $437=(($436+4)|0);
      var $438=HEAPU32[(($437)>>2)];
      var $439=(($435)>>>0) < (($438)>>>0);
      if ($439) { __label__ = 66; break; } else { var $448 = 0;__label__ = 67; break; }
    case 66: 
      var $441=$1;
      var $442=(($441)|0);
      var $443=HEAP32[(($442)>>2)];
      var $444=HEAP8[($443)];
      var $445=(($444 << 24) >> 24);
      var $446=(($445)|0)!=125;
      var $448 = $446;__label__ = 67; break;
    case 67: 
      var $448;
      if ($448) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $450=$1;
      var $451=(($450)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=(($452+1)|0);
      HEAP32[(($451)>>2)]=$453;
      __label__ = 65; break;
    case 69: 
      var $455=$1;
      var $456=(($455)|0);
      var $457=HEAPU32[(($456)>>2)];
      var $458=$1;
      var $459=(($458+4)|0);
      var $460=HEAPU32[(($459)>>2)];
      var $461=(($457)>>>0) < (($460)>>>0);
      if ($461) { var $467 = 1;__label__ = 71; break; } else { __label__ = 70; break; }
    case 70: 
      var $463=$1;
      var $464=_seterr($463, 9);
      var $465=(($464)|0)!=0;
      var $467 = $465;__label__ = 71; break;
    case 71: 
      var $467;
      var $468=(($467)&1);
      var $469=$1;
      var $470=_seterr($469, 10);
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      var $473=$1;
      var $474=(($473)|0);
      var $475=HEAPU32[(($474)>>2)];
      var $476=$1;
      var $477=(($476+4)|0);
      var $478=HEAPU32[(($477)>>2)];
      var $479=(($475)>>>0) < (($478)>>>0);
      if ($479) { __label__ = 75; break; } else { __label__ = 74; break; }
    case 74: 
      __label__ = 83; break;
    case 75: 
      var $482=$1;
      var $483=(($482)|0);
      var $484=HEAP32[(($483)>>2)];
      var $485=HEAP8[($484)];
      $c=$485;
      var $486=$c;
      var $487=(($486 << 24) >> 24);
      var $488=(($487)|0)==42;
      if ($488) { __label__ = 82; break; } else { __label__ = 76; break; }
    case 76: 
      var $490=$c;
      var $491=(($490 << 24) >> 24);
      var $492=(($491)|0)==43;
      if ($492) { __label__ = 82; break; } else { __label__ = 77; break; }
    case 77: 
      var $494=$c;
      var $495=(($494 << 24) >> 24);
      var $496=(($495)|0)==63;
      if ($496) { __label__ = 82; break; } else { __label__ = 78; break; }
    case 78: 
      var $498=$c;
      var $499=(($498 << 24) >> 24);
      var $500=(($499)|0)==123;
      if ($500) { __label__ = 79; break; } else { __label__ = 81; break; }
    case 79: 
      var $502=$1;
      var $503=(($502)|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=(($504+1)|0);
      var $506=$1;
      var $507=(($506+4)|0);
      var $508=HEAPU32[(($507)>>2)];
      var $509=(($505)>>>0) < (($508)>>>0);
      if ($509) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $511=$1;
      var $512=(($511)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=(($513+1)|0);
      var $515=HEAPU8[($514)];
      var $516=(($515)&255);
      var $517=_isdigit($516);
      var $518=(($517)|0)!=0;
      if ($518) { __label__ = 82; break; } else { __label__ = 81; break; }
    case 81: 
      __label__ = 83; break;
    case 82: 
      var $521=$1;
      var $522=_seterr($521, 13);
      __label__ = 83; break;
    case 83: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_ere_exp["X"]=1;

function _llvm_regerror($errcode, $preg, $errbuf, $errbuf_size) {
  var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $r;
      var $len;
      var $target;
      var $s;
      var $convbuf=__stackBase__;
      $1=$errcode;
      $2=$preg;
      $3=$errbuf;
      $4=$errbuf_size;
      var $5=$1;
      var $6=$5 & -257;
      $target=$6;
      var $7=$1;
      var $8=(($7)|0)==255;
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$2;
      var $11=(($convbuf)|0);
      var $12=_regatoi($10, $11, 50);
      $s=$12;
      __label__ = 17; break;
    case 4: 
      $r=((_rerrs)|0);
      __label__ = 5; break;
    case 5: 
      var $15=$r;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $20=$r;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$target;
      var $24=(($22)|0)==(($23)|0);
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 10; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $28=$r;
      var $29=(($28+12)|0);
      $r=$29;
      __label__ = 5; break;
    case 10: 
      var $31=$1;
      var $32=$31 & 256;
      var $33=(($32)|0)!=0;
      if ($33) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $35=$r;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)!=0;
      if ($38) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $40=(($convbuf)|0);
      var $41=$r;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=_llvm_strlcpy($40, $43, 50);
      __label__ = 14; break;
    case 13: 
      var $46=(($convbuf)|0);
      var $47=$target;
      var $48=_snprintf($46, 50, ((STRING_TABLE.__str442)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$47,tempInt));
      __label__ = 14; break;
    case 14: 
      var $50=(($convbuf)|0);
      $s=$50;
      __label__ = 16; break;
    case 15: 
      var $52=$r;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      $s=$54;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $57=$s;
      var $58=_strlen($57);
      var $59=((($58)+(1))|0);
      $len=$59;
      var $60=$4;
      var $61=(($60)>>>0) > 0;
      if ($61) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $63=$3;
      var $64=$s;
      var $65=$4;
      var $66=_llvm_strlcpy($63, $64, $65);
      __label__ = 19; break;
    case 19: 
      var $68=$len;
      STACKTOP = __stackBase__;
      return $68;
    default: assert(0, "bad label: " + __label__);
  }
}
_llvm_regerror["X"]=1;

function _regatoi($preg, $localbuf, $localbufsize) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $r;
      $2=$preg;
      $3=$localbuf;
      $4=$localbufsize;
      $r=((_rerrs)|0);
      __label__ = 3; break;
    case 3: 
      var $6=$r;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)!=0;
      if ($9) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $11=$r;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_strcmp($13, $16);
      var $18=(($17)|0)==0;
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 8; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $22=$r;
      var $23=(($22+12)|0);
      $r=$23;
      __label__ = 3; break;
    case 8: 
      var $25=$r;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0)==0;
      if ($28) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=((STRING_TABLE.__str1443)|0);
      __label__ = 11; break;
    case 10: 
      var $31=$3;
      var $32=$4;
      var $33=$r;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_snprintf($31, $32, ((STRING_TABLE.__str2444)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$35,tempInt));
      var $37=$3;
      $1=$37;
      __label__ = 11; break;
    case 11: 
      var $39=$1;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + __label__);
  }
}


function _llvm_regexec($preg, $string, $nmatch, $pmatch, $eflags) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $g;
      $2=$preg;
      $3=$string;
      $4=$nmatch;
      $5=$pmatch;
      $6=$eflags;
      var $7=$2;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $g=$9;
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)!=62053;
      if ($13) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $15=$g;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)!=53829;
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $1=2;
      __label__ = 11; break;
    case 5: 
      var $21=$g;
      var $22=(($21+40)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 4;
      var $25=(($24)|0)!=0;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $1=2;
      __label__ = 11; break;
    case 7: 
      var $28=$6;
      var $29=$28 & 7;
      $6=$29;
      var $30=$g;
      var $31=(($30+28)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0) <= 32;
      if ($33) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $35=$6;
      var $36=$35 & 512;
      var $37=(($36)|0)!=0;
      if ($37) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $39=$g;
      var $40=$3;
      var $41=$4;
      var $42=$5;
      var $43=$6;
      var $44=_smatcher($39, $40, $41, $42, $43);
      $1=$44;
      __label__ = 11; break;
    case 10: 
      var $46=$g;
      var $47=$3;
      var $48=$4;
      var $49=$5;
      var $50=$6;
      var $51=_lmatcher($46, $47, $48, $49, $50);
      $1=$51;
      __label__ = 11; break;
    case 11: 
      var $53=$1;
      ;
      return $53;
    default: assert(0, "bad label: " + __label__);
  }
}
_llvm_regexec["X"]=1;

function _smatcher($g, $string, $nmatch, $pmatch, $eflags) {
  var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $endp;
      var $i;
      var $mv=__stackBase__;
      var $m;
      var $dp;
      var $gf;
      var $gl;
      var $start;
      var $stop;
      $2=$g;
      $3=$string;
      $4=$nmatch;
      $5=$pmatch;
      $6=$eflags;
      $m=$mv;
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+(1))|0);
      $gf=$10;
      var $11=$2;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      $gl=$13;
      var $14=$2;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 4;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $4=0;
      __label__ = 4; break;
    case 4: 
      var $21=$6;
      var $22=$21 & 4;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$3;
      var $26=$5;
      var $27=(($26)|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($25+$29)|0);
      $start=$30;
      var $31=$3;
      var $32=$5;
      var $33=(($32)|0);
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($31+$35)|0);
      $stop=$36;
      __label__ = 7; break;
    case 6: 
      var $38=$3;
      $start=$38;
      var $39=$start;
      var $40=$start;
      var $41=_strlen($40);
      var $42=(($39+$41)|0);
      $stop=$42;
      __label__ = 7; break;
    case 7: 
      var $44=$stop;
      var $45=$start;
      var $46=(($44)>>>0) < (($45)>>>0);
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=16;
      __label__ = 82; break;
    case 9: 
      var $49=$2;
      var $50=(($49+60)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 10; break; } else { __label__ = 21; break; }
    case 10: 
      var $54=$start;
      $dp=$54;
      __label__ = 11; break;
    case 11: 
      var $56=$dp;
      var $57=$stop;
      var $58=(($56)>>>0) < (($57)>>>0);
      if ($58) { __label__ = 12; break; } else { __label__ = 18; break; }
    case 12: 
      var $60=$dp;
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$2;
      var $64=(($63+60)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0);
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24);
      var $69=(($62)|0)==(($68)|0);
      if ($69) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $71=$stop;
      var $72=$dp;
      var $73=$71;
      var $74=$72;
      var $75=((($73)-($74))|0);
      var $76=$2;
      var $77=(($76+64)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($75)|0) >= (($78)|0);
      if ($79) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $81=$dp;
      var $82=$2;
      var $83=(($82+60)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+64)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_memcmp($81, $84, $87);
      var $89=(($88)|0)==0;
      if ($89) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 18; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $93=$dp;
      var $94=(($93+1)|0);
      $dp=$94;
      __label__ = 11; break;
    case 18: 
      var $96=$dp;
      var $97=$stop;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $1=1;
      __label__ = 82; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $102=$2;
      var $103=$m;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$102;
      var $105=$6;
      var $106=$m;
      var $107=(($106+4)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$m;
      var $109=(($108+8)|0);
      HEAP32[(($109)>>2)]=0;
      var $110=$m;
      var $111=(($110+28)|0);
      HEAP32[(($111)>>2)]=0;
      var $112=$3;
      var $113=$m;
      var $114=(($113+12)|0);
      HEAP32[(($114)>>2)]=$112;
      var $115=$start;
      var $116=$m;
      var $117=(($116+16)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=$stop;
      var $119=$m;
      var $120=(($119+20)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$m;
      var $122=(($121+36)|0);
      HEAP32[(($122)>>2)]=0;
      var $123=$m;
      var $124=(($123+40)|0);
      HEAP32[(($124)>>2)]=0;
      var $125=$m;
      var $126=(($125+44)|0);
      HEAP32[(($126)>>2)]=0;
      var $127=$m;
      var $128=(($127+48)|0);
      HEAP32[(($128)>>2)]=0;
      var $129=$m;
      var $130=(($129+48)|0);
      HEAP32[(($130)>>2)]=0;
      __label__ = 22; break;
    case 22: 
      var $132=$m;
      var $133=$start;
      var $134=$stop;
      var $135=$gf;
      var $136=$gl;
      var $137=_sfast($132, $133, $134, $135, $136);
      $endp=$137;
      var $138=$endp;
      var $139=(($138)|0)==0;
      if ($139) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $141=$m;
      var $142=(($141+8)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$143;
      _free($144);
      var $145=$m;
      var $146=(($145+28)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$147;
      _free($148);
      $1=1;
      __label__ = 82; break;
    case 24: 
      var $150=$4;
      var $151=(($150)|0)==0;
      if ($151) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $153=$2;
      var $154=(($153+72)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|0)!=0;
      if ($156) { __label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      __label__ = 66; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $160=$m;
      var $161=$m;
      var $162=(($161+24)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$stop;
      var $165=$gf;
      var $166=$gl;
      var $167=_sslow($160, $163, $164, $165, $166);
      $endp=$167;
      var $168=$endp;
      var $169=(($168)|0)!=0;
      if ($169) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      __label__ = 31; break;
    case 30: 
      var $172=$m;
      var $173=(($172+24)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174+1)|0);
      HEAP32[(($173)>>2)]=$175;
      __label__ = 28; break;
    case 31: 
      var $177=$4;
      var $178=(($177)|0)==1;
      if ($178) { __label__ = 32; break; } else { __label__ = 34; break; }
    case 32: 
      var $180=$2;
      var $181=(($180+72)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|0)!=0;
      if ($183) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      __label__ = 66; break;
    case 34: 
      var $186=$m;
      var $187=(($186+8)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|0)==0;
      if ($189) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $191=$m;
      var $192=(($191)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+68)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=((($195)+(1))|0);
      var $197=((($196<<3))|0);
      var $198=_malloc($197);
      var $199=$198;
      var $200=$m;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      __label__ = 36; break;
    case 36: 
      var $203=$m;
      var $204=(($203+8)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=(($205)|0)==0;
      if ($206) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      $1=12;
      __label__ = 82; break;
    case 38: 
      $i=1;
      __label__ = 39; break;
    case 39: 
      var $210=$i;
      var $211=$m;
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213+68)|0);
      var $215=HEAPU32[(($214)>>2)];
      var $216=(($210)>>>0) <= (($215)>>>0);
      if ($216) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      var $218=$i;
      var $219=$m;
      var $220=(($219+8)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+($218<<3))|0);
      var $223=(($222+4)|0);
      HEAP32[(($223)>>2)]=-1;
      var $224=$i;
      var $225=$m;
      var $226=(($225+8)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+($224<<3))|0);
      var $229=(($228)|0);
      HEAP32[(($229)>>2)]=-1;
      __label__ = 41; break;
    case 41: 
      var $231=$i;
      var $232=((($231)+(1))|0);
      $i=$232;
      __label__ = 39; break;
    case 42: 
      var $234=$2;
      var $235=(($234+72)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236)|0)!=0;
      if ($237) { __label__ = 45; break; } else { __label__ = 43; break; }
    case 43: 
      var $239=$m;
      var $240=(($239+4)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$241 & 1024;
      var $243=(($242)|0)!=0;
      if ($243) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $245=$m;
      var $246=$m;
      var $247=(($246+24)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$endp;
      var $250=$gf;
      var $251=$gl;
      var $252=_sdissect($245, $248, $249, $250, $251);
      $dp=$252;
      __label__ = 52; break;
    case 45: 
      var $254=$2;
      var $255=(($254+76)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256)|0) > 0;
      if ($257) { __label__ = 46; break; } else { __label__ = 48; break; }
    case 46: 
      var $259=$m;
      var $260=(($259+28)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=(($261)|0)==0;
      if ($262) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $264=$2;
      var $265=(($264+76)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=((($266)+(1))|0);
      var $268=((($267<<2))|0);
      var $269=_malloc($268);
      var $270=$269;
      var $271=$m;
      var $272=(($271+28)|0);
      HEAP32[(($272)>>2)]=$270;
      __label__ = 48; break;
    case 48: 
      var $274=$2;
      var $275=(($274+76)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276)|0) > 0;
      if ($277) { __label__ = 49; break; } else { __label__ = 51; break; }
    case 49: 
      var $279=$m;
      var $280=(($279+28)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281)|0)==0;
      if ($282) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $284=$m;
      var $285=(($284+8)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=$286;
      _free($287);
      $1=12;
      __label__ = 82; break;
    case 51: 
      var $289=$m;
      var $290=$m;
      var $291=(($290+24)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=$endp;
      var $294=$gf;
      var $295=$gl;
      var $296=_sbackref($289, $292, $293, $294, $295, 0, 0);
      $dp=$296;
      __label__ = 52; break;
    case 52: 
      var $298=$dp;
      var $299=(($298)|0)!=0;
      if ($299) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      __label__ = 66; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $303=$dp;
      var $304=(($303)|0)!=0;
      if ($304) { __label__ = 57; break; } else { __label__ = 56; break; }
    case 56: 
      var $306=$endp;
      var $307=$m;
      var $308=(($307+24)|0);
      var $309=HEAPU32[(($308)>>2)];
      var $310=(($306)>>>0) <= (($309)>>>0);
      if ($310) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      __label__ = 61; break;
    case 58: 
      var $313=$m;
      var $314=$m;
      var $315=(($314+24)|0);
      var $316=HEAP32[(($315)>>2)];
      var $317=$endp;
      var $318=((($317)-(1))|0);
      var $319=$gf;
      var $320=$gl;
      var $321=_sslow($313, $316, $318, $319, $320);
      $endp=$321;
      var $322=$endp;
      var $323=(($322)|0)==0;
      if ($323) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 61; break;
    case 60: 
      var $326=$m;
      var $327=$m;
      var $328=(($327+24)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=$endp;
      var $331=$gf;
      var $332=$gl;
      var $333=_sbackref($326, $329, $330, $331, $332, 0, 0);
      $dp=$333;
      __label__ = 55; break;
    case 61: 
      var $335=$dp;
      var $336=(($335)|0)!=0;
      if ($336) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      __label__ = 66; break;
    case 63: 
      var $339=$m;
      var $340=(($339+24)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$stop;
      var $343=(($341)|0)==(($342)|0);
      if ($343) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      __label__ = 66; break;
    case 65: 
      var $346=$m;
      var $347=(($346+24)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($348+1)|0);
      $start=$349;
      __label__ = 22; break;
    case 66: 
      var $351=$4;
      var $352=(($351)>>>0) > 0;
      if ($352) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $354=$m;
      var $355=(($354+24)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=$m;
      var $358=(($357+12)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$356;
      var $361=$359;
      var $362=((($360)-($361))|0);
      var $363=$5;
      var $364=(($363)|0);
      var $365=(($364)|0);
      HEAP32[(($365)>>2)]=$362;
      var $366=$endp;
      var $367=$m;
      var $368=(($367+12)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=$366;
      var $371=$369;
      var $372=((($370)-($371))|0);
      var $373=$5;
      var $374=(($373)|0);
      var $375=(($374+4)|0);
      HEAP32[(($375)>>2)]=$372;
      __label__ = 68; break;
    case 68: 
      var $377=$4;
      var $378=(($377)>>>0) > 1;
      if ($378) { __label__ = 69; break; } else { __label__ = 77; break; }
    case 69: 
      $i=1;
      __label__ = 70; break;
    case 70: 
      var $381=$i;
      var $382=$4;
      var $383=(($381)>>>0) < (($382)>>>0);
      if ($383) { __label__ = 71; break; } else { __label__ = 76; break; }
    case 71: 
      var $385=$i;
      var $386=$m;
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=(($388+68)|0);
      var $390=HEAPU32[(($389)>>2)];
      var $391=(($385)>>>0) <= (($390)>>>0);
      if ($391) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $393=$i;
      var $394=$5;
      var $395=(($394+($393<<3))|0);
      var $396=$i;
      var $397=$m;
      var $398=(($397+8)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=(($399+($396<<3))|0);
      var $401=$395;
      var $402=$400;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($401)>>2)]=HEAP32[(($402)>>2)];HEAP32[((($401)+(4))>>2)]=HEAP32[((($402)+(4))>>2)];
      __label__ = 74; break;
    case 73: 
      var $404=$i;
      var $405=$5;
      var $406=(($405+($404<<3))|0);
      var $407=(($406)|0);
      HEAP32[(($407)>>2)]=-1;
      var $408=$i;
      var $409=$5;
      var $410=(($409+($408<<3))|0);
      var $411=(($410+4)|0);
      HEAP32[(($411)>>2)]=-1;
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      var $414=$i;
      var $415=((($414)+(1))|0);
      $i=$415;
      __label__ = 70; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      var $418=$m;
      var $419=(($418+8)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420)|0)!=0;
      if ($421) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $423=$m;
      var $424=(($423+8)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$425;
      _free($426);
      __label__ = 79; break;
    case 79: 
      var $428=$m;
      var $429=(($428+28)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=(($430)|0)!=0;
      if ($431) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $433=$m;
      var $434=(($433+28)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$435;
      _free($436);
      __label__ = 81; break;
    case 81: 
      $1=0;
      __label__ = 82; break;
    case 82: 
      var $439=$1;
      STACKTOP = __stackBase__;
      return $439;
    default: assert(0, "bad label: " + __label__);
  }
}
_smatcher["X"]=1;

function _lmatcher($g, $string, $nmatch, $pmatch, $eflags) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $endp;
      var $i;
      var $mv=__stackBase__;
      var $m;
      var $dp;
      var $gf;
      var $gl;
      var $start;
      var $stop;
      $2=$g;
      $3=$string;
      $4=$nmatch;
      $5=$pmatch;
      $6=$eflags;
      $m=$mv;
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+(1))|0);
      $gf=$10;
      var $11=$2;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      $gl=$13;
      var $14=$2;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 4;
      var $18=(($17)|0)!=0;
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $4=0;
      __label__ = 4; break;
    case 4: 
      var $21=$6;
      var $22=$21 & 4;
      var $23=(($22)|0)!=0;
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $25=$3;
      var $26=$5;
      var $27=(($26)|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($25+$29)|0);
      $start=$30;
      var $31=$3;
      var $32=$5;
      var $33=(($32)|0);
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($31+$35)|0);
      $stop=$36;
      __label__ = 7; break;
    case 6: 
      var $38=$3;
      $start=$38;
      var $39=$start;
      var $40=$start;
      var $41=_strlen($40);
      var $42=(($39+$41)|0);
      $stop=$42;
      __label__ = 7; break;
    case 7: 
      var $44=$stop;
      var $45=$start;
      var $46=(($44)>>>0) < (($45)>>>0);
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $1=16;
      __label__ = 84; break;
    case 9: 
      var $49=$2;
      var $50=(($49+60)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51)|0)!=0;
      if ($52) { __label__ = 10; break; } else { __label__ = 21; break; }
    case 10: 
      var $54=$start;
      $dp=$54;
      __label__ = 11; break;
    case 11: 
      var $56=$dp;
      var $57=$stop;
      var $58=(($56)>>>0) < (($57)>>>0);
      if ($58) { __label__ = 12; break; } else { __label__ = 18; break; }
    case 12: 
      var $60=$dp;
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$2;
      var $64=(($63+60)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0);
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24);
      var $69=(($62)|0)==(($68)|0);
      if ($69) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $71=$stop;
      var $72=$dp;
      var $73=$71;
      var $74=$72;
      var $75=((($73)-($74))|0);
      var $76=$2;
      var $77=(($76+64)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($75)|0) >= (($78)|0);
      if ($79) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $81=$dp;
      var $82=$2;
      var $83=(($82+60)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+64)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_memcmp($81, $84, $87);
      var $89=(($88)|0)==0;
      if ($89) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 18; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $93=$dp;
      var $94=(($93+1)|0);
      $dp=$94;
      __label__ = 11; break;
    case 18: 
      var $96=$dp;
      var $97=$stop;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $1=1;
      __label__ = 84; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $102=$2;
      var $103=$m;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$102;
      var $105=$6;
      var $106=$m;
      var $107=(($106+4)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$m;
      var $109=(($108+8)|0);
      HEAP32[(($109)>>2)]=0;
      var $110=$m;
      var $111=(($110+28)|0);
      HEAP32[(($111)>>2)]=0;
      var $112=$3;
      var $113=$m;
      var $114=(($113+12)|0);
      HEAP32[(($114)>>2)]=$112;
      var $115=$start;
      var $116=$m;
      var $117=(($116+16)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=$stop;
      var $119=$m;
      var $120=(($119+20)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$m;
      var $122=(($121)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+28)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=((($125<<2))|0);
      var $127=_malloc($126);
      var $128=$m;
      var $129=(($128+36)|0);
      HEAP32[(($129)>>2)]=$127;
      var $130=$m;
      var $131=(($130+36)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|0)==0;
      if ($133) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $1=12;
      __label__ = 84; break;
    case 23: 
      var $136=$m;
      var $137=(($136+32)|0);
      HEAP32[(($137)>>2)]=0;
      var $138=$m;
      var $139=(($138+32)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)+(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=$m;
      var $143=(($142)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+28)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($140)*($146))|0);
      var $148=$m;
      var $149=(($148+36)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+$147)|0);
      var $152=$m;
      var $153=(($152+40)|0);
      HEAP32[(($153)>>2)]=$151;
      var $154=$m;
      var $155=(($154+32)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=((($156)+(1))|0);
      HEAP32[(($155)>>2)]=$157;
      var $158=$m;
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160+28)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($156)*($162))|0);
      var $164=$m;
      var $165=(($164+36)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+$163)|0);
      var $168=$m;
      var $169=(($168+44)|0);
      HEAP32[(($169)>>2)]=$167;
      var $170=$m;
      var $171=(($170+32)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=((($172)+(1))|0);
      HEAP32[(($171)>>2)]=$173;
      var $174=$m;
      var $175=(($174)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+28)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=((($172)*($178))|0);
      var $180=$m;
      var $181=(($180+36)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182+$179)|0);
      var $184=$m;
      var $185=(($184+48)|0);
      HEAP32[(($185)>>2)]=$183;
      var $186=$m;
      var $187=(($186+32)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=((($188)+(1))|0);
      HEAP32[(($187)>>2)]=$189;
      var $190=$m;
      var $191=(($190)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192+28)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=((($188)*($194))|0);
      var $196=$m;
      var $197=(($196+36)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+$195)|0);
      var $200=$m;
      var $201=(($200+52)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$m;
      var $203=(($202+52)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$m;
      var $206=(($205)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($207+28)|0);
      var $209=HEAP32[(($208)>>2)];
      _memset($204, 0, $209, 1);
      __label__ = 24; break;
    case 24: 
      var $211=$m;
      var $212=$start;
      var $213=$stop;
      var $214=$gf;
      var $215=$gl;
      var $216=_lfast($211, $212, $213, $214, $215);
      $endp=$216;
      var $217=$endp;
      var $218=(($217)|0)==0;
      if ($218) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $220=$m;
      var $221=(($220+8)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$222;
      _free($223);
      var $224=$m;
      var $225=(($224+28)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$226;
      _free($227);
      var $228=$m;
      var $229=(($228+36)|0);
      var $230=HEAP32[(($229)>>2)];
      _free($230);
      $1=1;
      __label__ = 84; break;
    case 26: 
      var $232=$4;
      var $233=(($232)|0)==0;
      if ($233) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: 
      var $235=$2;
      var $236=(($235+72)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237)|0)!=0;
      if ($238) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      __label__ = 68; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $242=$m;
      var $243=$m;
      var $244=(($243+24)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$stop;
      var $247=$gf;
      var $248=$gl;
      var $249=_lslow($242, $245, $246, $247, $248);
      $endp=$249;
      var $250=$endp;
      var $251=(($250)|0)!=0;
      if ($251) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $254=$m;
      var $255=(($254+24)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+1)|0);
      HEAP32[(($255)>>2)]=$257;
      __label__ = 30; break;
    case 33: 
      var $259=$4;
      var $260=(($259)|0)==1;
      if ($260) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      var $262=$2;
      var $263=(($262+72)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264)|0)!=0;
      if ($265) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      __label__ = 68; break;
    case 36: 
      var $268=$m;
      var $269=(($268+8)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270)|0)==0;
      if ($271) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $273=$m;
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($275+68)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=((($277)+(1))|0);
      var $279=((($278<<3))|0);
      var $280=_malloc($279);
      var $281=$280;
      var $282=$m;
      var $283=(($282+8)|0);
      HEAP32[(($283)>>2)]=$281;
      __label__ = 38; break;
    case 38: 
      var $285=$m;
      var $286=(($285+8)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=(($287)|0)==0;
      if ($288) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $290=$m;
      var $291=(($290+36)|0);
      var $292=HEAP32[(($291)>>2)];
      _free($292);
      $1=12;
      __label__ = 84; break;
    case 40: 
      $i=1;
      __label__ = 41; break;
    case 41: 
      var $295=$i;
      var $296=$m;
      var $297=(($296)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=(($298+68)|0);
      var $300=HEAPU32[(($299)>>2)];
      var $301=(($295)>>>0) <= (($300)>>>0);
      if ($301) { __label__ = 42; break; } else { __label__ = 44; break; }
    case 42: 
      var $303=$i;
      var $304=$m;
      var $305=(($304+8)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+($303<<3))|0);
      var $308=(($307+4)|0);
      HEAP32[(($308)>>2)]=-1;
      var $309=$i;
      var $310=$m;
      var $311=(($310+8)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312+($309<<3))|0);
      var $314=(($313)|0);
      HEAP32[(($314)>>2)]=-1;
      __label__ = 43; break;
    case 43: 
      var $316=$i;
      var $317=((($316)+(1))|0);
      $i=$317;
      __label__ = 41; break;
    case 44: 
      var $319=$2;
      var $320=(($319+72)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321)|0)!=0;
      if ($322) { __label__ = 47; break; } else { __label__ = 45; break; }
    case 45: 
      var $324=$m;
      var $325=(($324+4)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=$326 & 1024;
      var $328=(($327)|0)!=0;
      if ($328) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      var $330=$m;
      var $331=$m;
      var $332=(($331+24)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=$endp;
      var $335=$gf;
      var $336=$gl;
      var $337=_ldissect($330, $333, $334, $335, $336);
      $dp=$337;
      __label__ = 54; break;
    case 47: 
      var $339=$2;
      var $340=(($339+76)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341)|0) > 0;
      if ($342) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $344=$m;
      var $345=(($344+28)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=(($346)|0)==0;
      if ($347) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $349=$2;
      var $350=(($349+76)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=((($351)+(1))|0);
      var $353=((($352<<2))|0);
      var $354=_malloc($353);
      var $355=$354;
      var $356=$m;
      var $357=(($356+28)|0);
      HEAP32[(($357)>>2)]=$355;
      __label__ = 50; break;
    case 50: 
      var $359=$2;
      var $360=(($359+76)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($361)|0) > 0;
      if ($362) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $364=$m;
      var $365=(($364+28)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=(($366)|0)==0;
      if ($367) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $369=$m;
      var $370=(($369+8)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371;
      _free($372);
      var $373=$m;
      var $374=(($373+36)|0);
      var $375=HEAP32[(($374)>>2)];
      _free($375);
      $1=12;
      __label__ = 84; break;
    case 53: 
      var $377=$m;
      var $378=$m;
      var $379=(($378+24)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=$endp;
      var $382=$gf;
      var $383=$gl;
      var $384=_lbackref($377, $380, $381, $382, $383, 0, 0);
      $dp=$384;
      __label__ = 54; break;
    case 54: 
      var $386=$dp;
      var $387=(($386)|0)!=0;
      if ($387) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      __label__ = 68; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $391=$dp;
      var $392=(($391)|0)!=0;
      if ($392) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $394=$endp;
      var $395=$m;
      var $396=(($395+24)|0);
      var $397=HEAPU32[(($396)>>2)];
      var $398=(($394)>>>0) <= (($397)>>>0);
      if ($398) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 63; break;
    case 60: 
      var $401=$m;
      var $402=$m;
      var $403=(($402+24)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=$endp;
      var $406=((($405)-(1))|0);
      var $407=$gf;
      var $408=$gl;
      var $409=_lslow($401, $404, $406, $407, $408);
      $endp=$409;
      var $410=$endp;
      var $411=(($410)|0)==0;
      if ($411) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      __label__ = 63; break;
    case 62: 
      var $414=$m;
      var $415=$m;
      var $416=(($415+24)|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$endp;
      var $419=$gf;
      var $420=$gl;
      var $421=_lbackref($414, $417, $418, $419, $420, 0, 0);
      $dp=$421;
      __label__ = 57; break;
    case 63: 
      var $423=$dp;
      var $424=(($423)|0)!=0;
      if ($424) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      __label__ = 68; break;
    case 65: 
      var $427=$m;
      var $428=(($427+24)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$stop;
      var $431=(($429)|0)==(($430)|0);
      if ($431) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      __label__ = 68; break;
    case 67: 
      var $434=$m;
      var $435=(($434+24)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=(($436+1)|0);
      $start=$437;
      __label__ = 24; break;
    case 68: 
      var $439=$4;
      var $440=(($439)>>>0) > 0;
      if ($440) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $442=$m;
      var $443=(($442+24)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=$m;
      var $446=(($445+12)|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=$444;
      var $449=$447;
      var $450=((($448)-($449))|0);
      var $451=$5;
      var $452=(($451)|0);
      var $453=(($452)|0);
      HEAP32[(($453)>>2)]=$450;
      var $454=$endp;
      var $455=$m;
      var $456=(($455+12)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=$454;
      var $459=$457;
      var $460=((($458)-($459))|0);
      var $461=$5;
      var $462=(($461)|0);
      var $463=(($462+4)|0);
      HEAP32[(($463)>>2)]=$460;
      __label__ = 70; break;
    case 70: 
      var $465=$4;
      var $466=(($465)>>>0) > 1;
      if ($466) { __label__ = 71; break; } else { __label__ = 79; break; }
    case 71: 
      $i=1;
      __label__ = 72; break;
    case 72: 
      var $469=$i;
      var $470=$4;
      var $471=(($469)>>>0) < (($470)>>>0);
      if ($471) { __label__ = 73; break; } else { __label__ = 78; break; }
    case 73: 
      var $473=$i;
      var $474=$m;
      var $475=(($474)|0);
      var $476=HEAP32[(($475)>>2)];
      var $477=(($476+68)|0);
      var $478=HEAPU32[(($477)>>2)];
      var $479=(($473)>>>0) <= (($478)>>>0);
      if ($479) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      var $481=$i;
      var $482=$5;
      var $483=(($482+($481<<3))|0);
      var $484=$i;
      var $485=$m;
      var $486=(($485+8)|0);
      var $487=HEAP32[(($486)>>2)];
      var $488=(($487+($484<<3))|0);
      var $489=$483;
      var $490=$488;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($489)>>2)]=HEAP32[(($490)>>2)];HEAP32[((($489)+(4))>>2)]=HEAP32[((($490)+(4))>>2)];
      __label__ = 76; break;
    case 75: 
      var $492=$i;
      var $493=$5;
      var $494=(($493+($492<<3))|0);
      var $495=(($494)|0);
      HEAP32[(($495)>>2)]=-1;
      var $496=$i;
      var $497=$5;
      var $498=(($497+($496<<3))|0);
      var $499=(($498+4)|0);
      HEAP32[(($499)>>2)]=-1;
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      var $502=$i;
      var $503=((($502)+(1))|0);
      $i=$503;
      __label__ = 72; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      var $506=$m;
      var $507=(($506+8)|0);
      var $508=HEAP32[(($507)>>2)];
      var $509=(($508)|0)!=0;
      if ($509) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $511=$m;
      var $512=(($511+8)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=$513;
      _free($514);
      __label__ = 81; break;
    case 81: 
      var $516=$m;
      var $517=(($516+28)|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=(($518)|0)!=0;
      if ($519) { __label__ = 82; break; } else { __label__ = 83; break; }
    case 82: 
      var $521=$m;
      var $522=(($521+28)|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=$523;
      _free($524);
      __label__ = 83; break;
    case 83: 
      var $526=$m;
      var $527=(($526+36)|0);
      var $528=HEAP32[(($527)>>2)];
      _free($528);
      $1=0;
      __label__ = 84; break;
    case 84: 
      var $530=$1;
      STACKTOP = __stackBase__;
      return $530;
    default: assert(0, "bad label: " + __label__);
  }
}
_lmatcher["X"]=1;

function _lfast($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $st;
      var $fresh;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $coldp;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      var $7=$2;
      var $8=(($7+40)|0);
      var $9=HEAP32[(($8)>>2)];
      $st=$9;
      var $10=$2;
      var $11=(($10+44)|0);
      var $12=HEAP32[(($11)>>2)];
      $fresh=$12;
      var $13=$2;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      $tmp=$15;
      var $16=$3;
      $p=$16;
      var $17=$3;
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $29 = 128;__label__ = 5; break;
    case 4: 
      var $24=$3;
      var $25=((($24)-(1))|0);
      var $26=HEAP8[($25)];
      var $27=(($26 << 24) >> 24);
      var $29 = $27;__label__ = 5; break;
    case 5: 
      var $29;
      $c=$29;
      var $30=$st;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      _memset($30, 0, $35, 1);
      var $36=$5;
      var $37=$st;
      var $38=(($37+$36)|0);
      HEAP8[($38)]=1;
      var $39=$2;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$5;
      var $43=$6;
      var $44=$st;
      var $45=$st;
      var $46=_lstep($41, $42, $43, $44, 132, $45);
      $st=$46;
      var $47=$fresh;
      var $48=$st;
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+28)|0);
      var $53=HEAP32[(($52)>>2)];
      _llvm_memmove_p0i8_p0i8_i32($47, $48, $53, 1, 0);
      $coldp=0;
      __label__ = 6; break;
    case 6: 
      var $55=$c;
      $lastc=$55;
      var $56=$p;
      var $57=$2;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($56)|0)==(($59)|0);
      if ($60) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $67 = 128;__label__ = 9; break;
    case 8: 
      var $63=$p;
      var $64=HEAP8[($63)];
      var $65=(($64 << 24) >> 24);
      var $67 = $65;__label__ = 9; break;
    case 9: 
      var $67;
      $c=$67;
      var $68=$st;
      var $69=$fresh;
      var $70=$2;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+28)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=_memcmp($68, $69, $74);
      var $76=(($75)|0)==0;
      if ($76) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $78=$p;
      $coldp=$78;
      __label__ = 11; break;
    case 11: 
      $flagch=0;
      $i=0;
      var $80=$lastc;
      var $81=(($80)|0)==10;
      if ($81) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $83=$2;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & 8;
      var $89=(($88)|0)!=0;
      if ($89) { __label__ = 15; break; } else { __label__ = 13; break; }
    case 13: 
      var $91=$lastc;
      var $92=(($91)|0)==128;
      if ($92) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96 & 1;
      var $98=(($97)|0)!=0;
      if ($98) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      $flagch=129;
      var $100=$2;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+44)|0);
      var $104=HEAP32[(($103)>>2)];
      $i=$104;
      __label__ = 16; break;
    case 16: 
      var $106=$c;
      var $107=(($106)|0)==10;
      if ($107) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $109=$2;
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113 & 8;
      var $115=(($114)|0)!=0;
      if ($115) { __label__ = 20; break; } else { __label__ = 18; break; }
    case 18: 
      var $117=$c;
      var $118=(($117)|0)==128;
      if ($118) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $120=$2;
      var $121=(($120+4)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$122 & 2;
      var $124=(($123)|0)!=0;
      if ($124) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $126=$flagch;
      var $127=(($126)|0)==129;
      var $128=$127 ? 131 : 130;
      $flagch=$128;
      var $129=$2;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+48)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$i;
      var $135=((($134)+($133))|0);
      $i=$135;
      __label__ = 21; break;
    case 21: 
      var $137=$i;
      var $138=(($137)|0)!=0;
      if ($138) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $141=$i;
      var $142=(($141)|0) > 0;
      if ($142) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $144=$2;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$5;
      var $148=$6;
      var $149=$st;
      var $150=$flagch;
      var $151=$st;
      var $152=_lstep($146, $147, $148, $149, $150, $151);
      $st=$152;
      __label__ = 25; break;
    case 25: 
      var $154=$i;
      var $155=((($154)-(1))|0);
      $i=$155;
      __label__ = 23; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $158=$flagch;
      var $159=(($158)|0)==129;
      if ($159) { __label__ = 31; break; } else { __label__ = 28; break; }
    case 28: 
      var $161=$lastc;
      var $162=(($161)|0)!=128;
      if ($162) { __label__ = 29; break; } else { __label__ = 35; break; }
    case 29: 
      var $164=$lastc;
      var $165=$164 & 255;
      var $166=_isalnum($165);
      var $167=(($166)|0)!=0;
      if ($167) { __label__ = 35; break; } else { __label__ = 30; break; }
    case 30: 
      var $169=$lastc;
      var $170=(($169)|0)==95;
      if ($170) { __label__ = 35; break; } else { __label__ = 31; break; }
    case 31: 
      var $172=$c;
      var $173=(($172)|0)!=128;
      if ($173) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $175=$c;
      var $176=$175 & 255;
      var $177=_isalnum($176);
      var $178=(($177)|0)!=0;
      if ($178) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $180=$c;
      var $181=(($180)|0)==95;
      if ($181) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      $flagch=133;
      __label__ = 35; break;
    case 35: 
      var $184=$lastc;
      var $185=(($184)|0)!=128;
      if ($185) { __label__ = 36; break; } else { __label__ = 43; break; }
    case 36: 
      var $187=$lastc;
      var $188=$187 & 255;
      var $189=_isalnum($188);
      var $190=(($189)|0)!=0;
      if ($190) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $192=$lastc;
      var $193=(($192)|0)==95;
      if ($193) { __label__ = 38; break; } else { __label__ = 43; break; }
    case 38: 
      var $195=$flagch;
      var $196=(($195)|0)==130;
      if ($196) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $198=$c;
      var $199=(($198)|0)!=128;
      if ($199) { __label__ = 40; break; } else { __label__ = 43; break; }
    case 40: 
      var $201=$c;
      var $202=$201 & 255;
      var $203=_isalnum($202);
      var $204=(($203)|0)!=0;
      if ($204) { __label__ = 43; break; } else { __label__ = 41; break; }
    case 41: 
      var $206=$c;
      var $207=(($206)|0)==95;
      if ($207) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      $flagch=134;
      __label__ = 43; break;
    case 43: 
      var $210=$flagch;
      var $211=(($210)|0)==133;
      if ($211) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $213=$flagch;
      var $214=(($213)|0)==134;
      if ($214) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $216=$2;
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$5;
      var $220=$6;
      var $221=$st;
      var $222=$flagch;
      var $223=$st;
      var $224=_lstep($218, $219, $220, $221, $222, $223);
      $st=$224;
      __label__ = 46; break;
    case 46: 
      var $226=$6;
      var $227=$st;
      var $228=(($227+$226)|0);
      var $229=HEAP8[($228)];
      var $230=(($229 << 24) >> 24);
      var $231=(($230)|0)!=0;
      if ($231) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $233=$p;
      var $234=$4;
      var $235=(($233)|0)==(($234)|0);
      if ($235) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $238=$tmp;
      var $239=$st;
      var $240=$2;
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=(($242+28)|0);
      var $244=HEAP32[(($243)>>2)];
      _llvm_memmove_p0i8_p0i8_i32($238, $239, $244, 1, 0);
      var $245=$st;
      var $246=$fresh;
      var $247=$2;
      var $248=(($247)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249+28)|0);
      var $251=HEAP32[(($250)>>2)];
      _llvm_memmove_p0i8_p0i8_i32($245, $246, $251, 1, 0);
      var $252=$2;
      var $253=(($252)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$5;
      var $256=$6;
      var $257=$tmp;
      var $258=$c;
      var $259=$st;
      var $260=_lstep($254, $255, $256, $257, $258, $259);
      $st=$260;
      var $261=$p;
      var $262=(($261+1)|0);
      $p=$262;
      __label__ = 6; break;
    case 50: 
      var $264=$coldp;
      var $265=$2;
      var $266=(($265+24)|0);
      HEAP32[(($266)>>2)]=$264;
      var $267=$6;
      var $268=$st;
      var $269=(($268+$267)|0);
      var $270=HEAP8[($269)];
      var $271=(($270 << 24) >> 24)!=0;
      if ($271) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $273=$p;
      var $274=(($273+1)|0);
      $1=$274;
      __label__ = 53; break;
    case 52: 
      $1=0;
      __label__ = 53; break;
    case 53: 
      var $277=$1;
      ;
      return $277;
    default: assert(0, "bad label: " + __label__);
  }
}
_lfast["X"]=1;

function _lslow($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $st;
      var $empty;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $matchp;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$1;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      $st=$8;
      var $9=$1;
      var $10=(($9+52)|0);
      var $11=HEAP32[(($10)>>2)];
      $empty=$11;
      var $12=$1;
      var $13=(($12+48)|0);
      var $14=HEAP32[(($13)>>2)];
      $tmp=$14;
      var $15=$2;
      $p=$15;
      var $16=$2;
      var $17=$1;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0)==(($19)|0);
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $28 = 128;__label__ = 5; break;
    case 4: 
      var $23=$2;
      var $24=((($23)-(1))|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $28 = $26;__label__ = 5; break;
    case 5: 
      var $28;
      $c=$28;
      var $29=$st;
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+28)|0);
      var $34=HEAP32[(($33)>>2)];
      _memset($29, 0, $34, 1);
      var $35=$4;
      var $36=$st;
      var $37=(($36+$35)|0);
      HEAP8[($37)]=1;
      var $38=$1;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$4;
      var $42=$5;
      var $43=$st;
      var $44=$st;
      var $45=_lstep($40, $41, $42, $43, 132, $44);
      $st=$45;
      $matchp=0;
      __label__ = 6; break;
    case 6: 
      var $47=$c;
      $lastc=$47;
      var $48=$p;
      var $49=$1;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($48)|0)==(($51)|0);
      if ($52) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $59 = 128;__label__ = 9; break;
    case 8: 
      var $55=$p;
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $59 = $57;__label__ = 9; break;
    case 9: 
      var $59;
      $c=$59;
      $flagch=0;
      $i=0;
      var $60=$lastc;
      var $61=(($60)|0)==10;
      if ($61) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $63=$1;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 8;
      var $69=(($68)|0)!=0;
      if ($69) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 11: 
      var $71=$lastc;
      var $72=(($71)|0)==128;
      if ($72) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & 1;
      var $78=(($77)|0)!=0;
      if ($78) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      $flagch=129;
      var $80=$1;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+44)|0);
      var $84=HEAP32[(($83)>>2)];
      $i=$84;
      __label__ = 14; break;
    case 14: 
      var $86=$c;
      var $87=(($86)|0)==10;
      if ($87) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $89=$1;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 & 8;
      var $95=(($94)|0)!=0;
      if ($95) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $97=$c;
      var $98=(($97)|0)==128;
      if ($98) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102 & 2;
      var $104=(($103)|0)!=0;
      if ($104) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $106=$flagch;
      var $107=(($106)|0)==129;
      var $108=$107 ? 131 : 130;
      $flagch=$108;
      var $109=$1;
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+48)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$i;
      var $115=((($114)+($113))|0);
      $i=$115;
      __label__ = 19; break;
    case 19: 
      var $117=$i;
      var $118=(($117)|0)!=0;
      if ($118) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $121=$i;
      var $122=(($121)|0) > 0;
      if ($122) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $124=$1;
      var $125=(($124)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$4;
      var $128=$5;
      var $129=$st;
      var $130=$flagch;
      var $131=$st;
      var $132=_lstep($126, $127, $128, $129, $130, $131);
      $st=$132;
      __label__ = 23; break;
    case 23: 
      var $134=$i;
      var $135=((($134)-(1))|0);
      $i=$135;
      __label__ = 21; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $138=$flagch;
      var $139=(($138)|0)==129;
      if ($139) { __label__ = 29; break; } else { __label__ = 26; break; }
    case 26: 
      var $141=$lastc;
      var $142=(($141)|0)!=128;
      if ($142) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      var $144=$lastc;
      var $145=$144 & 255;
      var $146=_isalnum($145);
      var $147=(($146)|0)!=0;
      if ($147) { __label__ = 33; break; } else { __label__ = 28; break; }
    case 28: 
      var $149=$lastc;
      var $150=(($149)|0)==95;
      if ($150) { __label__ = 33; break; } else { __label__ = 29; break; }
    case 29: 
      var $152=$c;
      var $153=(($152)|0)!=128;
      if ($153) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $155=$c;
      var $156=$155 & 255;
      var $157=_isalnum($156);
      var $158=(($157)|0)!=0;
      if ($158) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $160=$c;
      var $161=(($160)|0)==95;
      if ($161) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $flagch=133;
      __label__ = 33; break;
    case 33: 
      var $164=$lastc;
      var $165=(($164)|0)!=128;
      if ($165) { __label__ = 34; break; } else { __label__ = 41; break; }
    case 34: 
      var $167=$lastc;
      var $168=$167 & 255;
      var $169=_isalnum($168);
      var $170=(($169)|0)!=0;
      if ($170) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $172=$lastc;
      var $173=(($172)|0)==95;
      if ($173) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      var $175=$flagch;
      var $176=(($175)|0)==130;
      if ($176) { __label__ = 40; break; } else { __label__ = 37; break; }
    case 37: 
      var $178=$c;
      var $179=(($178)|0)!=128;
      if ($179) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $181=$c;
      var $182=$181 & 255;
      var $183=_isalnum($182);
      var $184=(($183)|0)!=0;
      if ($184) { __label__ = 41; break; } else { __label__ = 39; break; }
    case 39: 
      var $186=$c;
      var $187=(($186)|0)==95;
      if ($187) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      $flagch=134;
      __label__ = 41; break;
    case 41: 
      var $190=$flagch;
      var $191=(($190)|0)==133;
      if ($191) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      var $193=$flagch;
      var $194=(($193)|0)==134;
      if ($194) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $196=$1;
      var $197=(($196)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$4;
      var $200=$5;
      var $201=$st;
      var $202=$flagch;
      var $203=$st;
      var $204=_lstep($198, $199, $200, $201, $202, $203);
      $st=$204;
      __label__ = 44; break;
    case 44: 
      var $206=$5;
      var $207=$st;
      var $208=(($207+$206)|0);
      var $209=HEAP8[($208)];
      var $210=(($209 << 24) >> 24)!=0;
      if ($210) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $212=$p;
      $matchp=$212;
      __label__ = 46; break;
    case 46: 
      var $214=$st;
      var $215=$empty;
      var $216=$1;
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+28)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=_memcmp($214, $215, $220);
      var $222=(($221)|0)==0;
      if ($222) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $224=$p;
      var $225=$3;
      var $226=(($224)|0)==(($225)|0);
      if ($226) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $229=$tmp;
      var $230=$st;
      var $231=$1;
      var $232=(($231)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=(($233+28)|0);
      var $235=HEAP32[(($234)>>2)];
      _llvm_memmove_p0i8_p0i8_i32($229, $230, $235, 1, 0);
      var $236=$st;
      var $237=$empty;
      var $238=$1;
      var $239=(($238)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=(($240+28)|0);
      var $242=HEAP32[(($241)>>2)];
      _llvm_memmove_p0i8_p0i8_i32($236, $237, $242, 1, 0);
      var $243=$1;
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$4;
      var $247=$5;
      var $248=$tmp;
      var $249=$c;
      var $250=$st;
      var $251=_lstep($245, $246, $247, $248, $249, $250);
      $st=$251;
      var $252=$p;
      var $253=(($252+1)|0);
      $p=$253;
      __label__ = 6; break;
    case 50: 
      var $255=$matchp;
      ;
      return $255;
    default: assert(0, "bad label: " + __label__);
  }
}
_lslow["X"]=1;

function _ldissect($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $ss;
      var $es;
      var $sp;
      var $stp;
      var $rest;
      var $tail;
      var $ssub;
      var $esub;
      var $ssp;
      var $sep;
      var $oldssp;
      var $dp;
      var $dp1;
      var $dp2;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$2;
      $sp=$6;
      var $7=$4;
      $ss=$7;
      __label__ = 3; break;
    case 3: 
      var $9=$ss;
      var $10=$5;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $13=$ss;
      $es=$13;
      var $14=$es;
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+($14<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & -134217728;
      if ((($22)|0) == 1207959552 || (($22)|0) == 1476395008) {
        __label__ = 5; break;
      }
      else if ((($22)|0) == 2013265920) {
        __label__ = 6; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 5: 
      var $24=$es;
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($24<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 134217727;
      var $33=$es;
      var $34=((($33)+($32))|0);
      $es=$34;
      __label__ = 10; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $37=$es;
      var $38=$1;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($37<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & -134217728;
      var $46=(($45)|0)!=-1879048192;
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $48=$es;
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($48<<2))|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 134217727;
      var $57=$es;
      var $58=((($57)+($56))|0);
      $es=$58;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $61=$es;
      var $62=((($61)+(1))|0);
      $es=$62;
      var $63=$ss;
      var $64=$1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($63<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & -134217728;
      if ((($71)|0) == 134217728) {
        __label__ = 11; break;
      }
      else if ((($71)|0) == 268435456) {
        __label__ = 12; break;
      }
      else if ((($71)|0) == 402653184 || (($71)|0) == 536870912 || (($71)|0) == -1744830464 || (($71)|0) == -1610612736) {
        __label__ = 13; break;
      }
      else if ((($71)|0) == 671088640 || (($71)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($71)|0) == 939524096 || (($71)|0) == 1073741824) {
        __label__ = 15; break;
      }
      else if ((($71)|0) == 1476395008) {
        __label__ = 16; break;
      }
      else if ((($71)|0) == 1207959552) {
        __label__ = 24; break;
      }
      else if ((($71)|0) == 2013265920) {
        __label__ = 36; break;
      }
      else if ((($71)|0) == 1342177280 || (($71)|0) == 1610612736 || (($71)|0) == -2147483648 || (($71)|0) == -2013265920 || (($71)|0) == -1879048192) {
        __label__ = 48; break;
      }
      else if ((($71)|0) == 1744830464) {
        __label__ = 49; break;
      }
      else if ((($71)|0) == 1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 11: 
      __label__ = 52; break;
    case 12: 
      var $74=$sp;
      var $75=(($74+1)|0);
      $sp=$75;
      __label__ = 52; break;
    case 13: 
      __label__ = 52; break;
    case 14: 
      var $78=$sp;
      var $79=(($78+1)|0);
      $sp=$79;
      __label__ = 52; break;
    case 15: 
      __label__ = 52; break;
    case 16: 
      var $82=$3;
      $stp=$82;
      __label__ = 17; break;
    case 17: 
      var $84=$1;
      var $85=$sp;
      var $86=$stp;
      var $87=$ss;
      var $88=$es;
      var $89=_lslow($84, $85, $86, $87, $88);
      $rest=$89;
      var $90=$1;
      var $91=$rest;
      var $92=$3;
      var $93=$es;
      var $94=$5;
      var $95=_lslow($90, $91, $92, $93, $94);
      $tail=$95;
      var $96=$tail;
      var $97=$3;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $101=$rest;
      var $102=((($101)-(1))|0);
      $stp=$102;
      __label__ = 17; break;
    case 20: 
      var $104=$ss;
      var $105=((($104)+(1))|0);
      $ssub=$105;
      var $106=$es;
      var $107=((($106)-(1))|0);
      $esub=$107;
      var $108=$1;
      var $109=$sp;
      var $110=$rest;
      var $111=$ssub;
      var $112=$esub;
      var $113=_lslow($108, $109, $110, $111, $112);
      var $114=(($113)|0)!=0;
      if ($114) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $116=$1;
      var $117=$sp;
      var $118=$rest;
      var $119=$ssub;
      var $120=$esub;
      var $121=_ldissect($116, $117, $118, $119, $120);
      $dp=$121;
      var $122=$dp;
      __label__ = 23; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $125=$rest;
      $sp=$125;
      __label__ = 52; break;
    case 24: 
      var $127=$3;
      $stp=$127;
      __label__ = 25; break;
    case 25: 
      var $129=$1;
      var $130=$sp;
      var $131=$stp;
      var $132=$ss;
      var $133=$es;
      var $134=_lslow($129, $130, $131, $132, $133);
      $rest=$134;
      var $135=$1;
      var $136=$rest;
      var $137=$3;
      var $138=$es;
      var $139=$5;
      var $140=_lslow($135, $136, $137, $138, $139);
      $tail=$140;
      var $141=$tail;
      var $142=$3;
      var $143=(($141)|0)==(($142)|0);
      if ($143) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 28; break;
    case 27: 
      var $146=$rest;
      var $147=((($146)-(1))|0);
      $stp=$147;
      __label__ = 25; break;
    case 28: 
      var $149=$ss;
      var $150=((($149)+(1))|0);
      $ssub=$150;
      var $151=$es;
      var $152=((($151)-(1))|0);
      $esub=$152;
      var $153=$sp;
      $ssp=$153;
      var $154=$ssp;
      $oldssp=$154;
      __label__ = 29; break;
    case 29: 
      var $156=$1;
      var $157=$ssp;
      var $158=$rest;
      var $159=$ssub;
      var $160=$esub;
      var $161=_lslow($156, $157, $158, $159, $160);
      $sep=$161;
      var $162=$sep;
      var $163=(($162)|0)==0;
      if ($163) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $165=$sep;
      var $166=$ssp;
      var $167=(($165)|0)==(($166)|0);
      if ($167) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $170=$ssp;
      $oldssp=$170;
      var $171=$sep;
      $ssp=$171;
      __label__ = 29; break;
    case 33: 
      var $173=$sep;
      var $174=(($173)|0)==0;
      if ($174) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $176=$ssp;
      $sep=$176;
      var $177=$oldssp;
      $ssp=$177;
      __label__ = 35; break;
    case 35: 
      var $179=$1;
      var $180=$ssp;
      var $181=$sep;
      var $182=$ssub;
      var $183=$esub;
      var $184=_ldissect($179, $180, $181, $182, $183);
      $dp1=$184;
      var $185=$dp1;
      var $186=$rest;
      $sp=$186;
      __label__ = 52; break;
    case 36: 
      var $188=$3;
      $stp=$188;
      __label__ = 37; break;
    case 37: 
      var $190=$1;
      var $191=$sp;
      var $192=$stp;
      var $193=$ss;
      var $194=$es;
      var $195=_lslow($190, $191, $192, $193, $194);
      $rest=$195;
      var $196=$1;
      var $197=$rest;
      var $198=$3;
      var $199=$es;
      var $200=$5;
      var $201=_lslow($196, $197, $198, $199, $200);
      $tail=$201;
      var $202=$tail;
      var $203=$3;
      var $204=(($202)|0)==(($203)|0);
      if ($204) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      __label__ = 40; break;
    case 39: 
      var $207=$rest;
      var $208=((($207)-(1))|0);
      $stp=$208;
      __label__ = 37; break;
    case 40: 
      var $210=$ss;
      var $211=((($210)+(1))|0);
      $ssub=$211;
      var $212=$ss;
      var $213=$ss;
      var $214=$1;
      var $215=(($214)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+4)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+($213<<2))|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$220 & 134217727;
      var $222=((($212)+($221))|0);
      var $223=((($222)-(1))|0);
      $esub=$223;
      __label__ = 41; break;
    case 41: 
      var $225=$1;
      var $226=$sp;
      var $227=$rest;
      var $228=$ssub;
      var $229=$esub;
      var $230=_lslow($225, $226, $227, $228, $229);
      var $231=$rest;
      var $232=(($230)|0)==(($231)|0);
      if ($232) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      __label__ = 47; break;
    case 43: 
      var $235=$esub;
      var $236=((($235)+(1))|0);
      $esub=$236;
      var $237=$esub;
      var $238=((($237)+(1))|0);
      $ssub=$238;
      var $239=$esub;
      var $240=$1;
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=(($242+4)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+($239<<2))|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$246 & 134217727;
      var $248=$esub;
      var $249=((($248)+($247))|0);
      $esub=$249;
      var $250=$esub;
      var $251=$1;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+4)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=(($255+($250<<2))|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$257 & -134217728;
      var $259=(($258)|0)==-2013265920;
      if ($259) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $261=$esub;
      var $262=((($261)-(1))|0);
      $esub=$262;
      __label__ = 46; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 41; break;
    case 47: 
      var $266=$1;
      var $267=$sp;
      var $268=$rest;
      var $269=$ssub;
      var $270=$esub;
      var $271=_ldissect($266, $267, $268, $269, $270);
      $dp2=$271;
      var $272=$dp2;
      var $273=$rest;
      $sp=$273;
      __label__ = 52; break;
    case 48: 
      __label__ = 52; break;
    case 49: 
      var $276=$ss;
      var $277=$1;
      var $278=(($277)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+4)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281+($276<<2))|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=$283 & 134217727;
      $i=$284;
      var $285=$sp;
      var $286=$1;
      var $287=(($286+12)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$285;
      var $290=$288;
      var $291=((($289)-($290))|0);
      var $292=$i;
      var $293=$1;
      var $294=(($293+8)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=(($295+($292<<3))|0);
      var $297=(($296)|0);
      HEAP32[(($297)>>2)]=$291;
      __label__ = 52; break;
    case 50: 
      var $299=$ss;
      var $300=$1;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302+4)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+($299<<2))|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=$306 & 134217727;
      $i=$307;
      var $308=$sp;
      var $309=$1;
      var $310=(($309+12)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=$308;
      var $313=$311;
      var $314=((($312)-($313))|0);
      var $315=$i;
      var $316=$1;
      var $317=(($316+8)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($318+($315<<3))|0);
      var $320=(($319+4)|0);
      HEAP32[(($320)>>2)]=$314;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $324=$es;
      $ss=$324;
      __label__ = 3; break;
    case 54: 
      var $326=$sp;
      ;
      return $326;
    default: assert(0, "bad label: " + __label__);
  }
}
_ldissect["X"]=1;

function _lbackref($m, $start, $stop, $startst, $stopst, $lev, $rec) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $ss;
      var $sp;
      var $ssub;
      var $esub;
      var $ssp;
      var $dp;
      var $len;
      var $hard;
      var $s;
      var $offsave;
      var $cs;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      $7=$lev;
      $8=$rec;
      var $9=$3;
      $sp=$9;
      $hard=0;
      var $10=$5;
      $ss=$10;
      __label__ = 3; break;
    case 3: 
      var $12=$hard;
      var $13=(($12)|0)!=0;
      if ($13) { var $19 = 0;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $15=$ss;
      var $16=$6;
      var $17=(($15)|0) < (($16)|0);
      var $19 = $17;__label__ = 5; break;
    case 5: 
      var $19;
      if ($19) { __label__ = 6; break; } else { __label__ = 70; break; }
    case 6: 
      var $21=$ss;
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($21<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $s=$28;
      var $29=$28 & -134217728;
      if ((($29)|0) == 268435456) {
        __label__ = 7; break;
      }
      else if ((($29)|0) == 671088640) {
        __label__ = 11; break;
      }
      else if ((($29)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($29)|0) == 402653184) {
        __label__ = 18; break;
      }
      else if ((($29)|0) == 536870912) {
        __label__ = 26; break;
      }
      else if ((($29)|0) == -1744830464) {
        __label__ = 34; break;
      }
      else if ((($29)|0) == -1610612736) {
        __label__ = 48; break;
      }
      else if ((($29)|0) == 1610612736) {
        __label__ = 62; break;
      }
      else if ((($29)|0) == -2147483648) {
        __label__ = 63; break;
      }
      else {
      __label__ = 67; break;
      }
      
    case 7: 
      var $31=$sp;
      var $32=$4;
      var $33=(($31)|0)==(($32)|0);
      if ($33) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $35=$sp;
      var $36=(($35+1)|0);
      $sp=$36;
      var $37=HEAP8[($35)];
      var $38=(($37 << 24) >> 24);
      var $39=$s;
      var $40=$39 & 134217727;
      var $41=(($40) & 255);
      var $42=(($41 << 24) >> 24);
      var $43=(($38)|0)!=(($42)|0);
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=0;
      __label__ = 114; break;
    case 10: 
      __label__ = 68; break;
    case 11: 
      var $47=$sp;
      var $48=$4;
      var $49=(($47)|0)==(($48)|0);
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=0;
      __label__ = 114; break;
    case 13: 
      var $52=$sp;
      var $53=(($52+1)|0);
      $sp=$53;
      __label__ = 68; break;
    case 14: 
      var $55=$s;
      var $56=$55 & 134217727;
      var $57=$2;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($56<<4))|0);
      $cs=$62;
      var $63=$sp;
      var $64=$4;
      var $65=(($63)|0)==(($64)|0);
      if ($65) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $67=$sp;
      var $68=(($67+1)|0);
      $sp=$68;
      var $69=HEAPU8[($67)];
      var $70=(($69)&255);
      var $71=$cs;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=$cs;
      var $78=(($77+4)|0);
      var $79=HEAPU8[($78)];
      var $80=(($79)&255);
      var $81=$76 & $80;
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      $1=0;
      __label__ = 114; break;
    case 17: 
      __label__ = 68; break;
    case 18: 
      var $86=$sp;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($86)|0)==(($89)|0);
      if ($90) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$94 & 1;
      var $96=(($95)|0)!=0;
      if ($96) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: 
      var $98=$sp;
      var $99=$2;
      var $100=(($99+20)|0);
      var $101=HEAPU32[(($100)>>2)];
      var $102=(($98)>>>0) < (($101)>>>0);
      if ($102) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $104=$sp;
      var $105=((($104)-(1))|0);
      var $106=HEAP8[($105)];
      var $107=(($106 << 24) >> 24);
      var $108=(($107)|0)==10;
      if ($108) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $110=$2;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & 8;
      var $116=(($115)|0)!=0;
      if ($116) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 25; break;
    case 24: 
      $1=0;
      __label__ = 114; break;
    case 25: 
      __label__ = 68; break;
    case 26: 
      var $121=$sp;
      var $122=$2;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($121)|0)==(($124)|0);
      if ($125) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $127=$2;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129 & 2;
      var $131=(($130)|0)!=0;
      if ($131) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $133=$sp;
      var $134=$2;
      var $135=(($134+20)|0);
      var $136=HEAPU32[(($135)>>2)];
      var $137=(($133)>>>0) < (($136)>>>0);
      if ($137) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $139=$sp;
      var $140=HEAP8[($139)];
      var $141=(($140 << 24) >> 24);
      var $142=(($141)|0)==10;
      if ($142) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $144=$2;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+24)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 & 8;
      var $150=(($149)|0)!=0;
      if ($150) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      $1=0;
      __label__ = 114; break;
    case 33: 
      __label__ = 68; break;
    case 34: 
      var $155=$sp;
      var $156=$2;
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($155)|0)==(($158)|0);
      if ($159) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $161=$2;
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$163 & 1;
      var $165=(($164)|0)!=0;
      if ($165) { __label__ = 36; break; } else { __label__ = 42; break; }
    case 36: 
      var $167=$sp;
      var $168=$2;
      var $169=(($168+20)|0);
      var $170=HEAPU32[(($169)>>2)];
      var $171=(($167)>>>0) < (($170)>>>0);
      if ($171) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $173=$sp;
      var $174=((($173)-(1))|0);
      var $175=HEAP8[($174)];
      var $176=(($175 << 24) >> 24);
      var $177=(($176)|0)==10;
      if ($177) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $179=$2;
      var $180=(($179)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+24)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & 8;
      var $185=(($184)|0)!=0;
      if ($185) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $187=$sp;
      var $188=$2;
      var $189=(($188+16)|0);
      var $190=HEAPU32[(($189)>>2)];
      var $191=(($187)>>>0) > (($190)>>>0);
      if ($191) { __label__ = 40; break; } else { __label__ = 46; break; }
    case 40: 
      var $193=$sp;
      var $194=((($193)-(1))|0);
      var $195=HEAP8[($194)];
      var $196=(($195 << 24) >> 24);
      var $197=$196 & 255;
      var $198=_isalnum($197);
      var $199=(($198)|0)!=0;
      if ($199) { __label__ = 46; break; } else { __label__ = 41; break; }
    case 41: 
      var $201=$sp;
      var $202=((($201)-(1))|0);
      var $203=HEAP8[($202)];
      var $204=(($203 << 24) >> 24);
      var $205=(($204)|0)==95;
      if ($205) { __label__ = 46; break; } else { __label__ = 42; break; }
    case 42: 
      var $207=$sp;
      var $208=$2;
      var $209=(($208+20)|0);
      var $210=HEAPU32[(($209)>>2)];
      var $211=(($207)>>>0) < (($210)>>>0);
      if ($211) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $213=$sp;
      var $214=HEAP8[($213)];
      var $215=(($214 << 24) >> 24);
      var $216=$215 & 255;
      var $217=_isalnum($216);
      var $218=(($217)|0)!=0;
      if ($218) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $220=$sp;
      var $221=HEAP8[($220)];
      var $222=(($221 << 24) >> 24);
      var $223=(($222)|0)==95;
      if ($223) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      __label__ = 47; break;
    case 46: 
      $1=0;
      __label__ = 114; break;
    case 47: 
      __label__ = 68; break;
    case 48: 
      var $228=$sp;
      var $229=$2;
      var $230=(($229+20)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($228)|0)==(($231)|0);
      if ($232) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $234=$2;
      var $235=(($234+4)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=$236 & 2;
      var $238=(($237)|0)!=0;
      if ($238) { __label__ = 50; break; } else { __label__ = 56; break; }
    case 50: 
      var $240=$sp;
      var $241=$2;
      var $242=(($241+20)|0);
      var $243=HEAPU32[(($242)>>2)];
      var $244=(($240)>>>0) < (($243)>>>0);
      if ($244) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $246=$sp;
      var $247=HEAP8[($246)];
      var $248=(($247 << 24) >> 24);
      var $249=(($248)|0)==10;
      if ($249) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $251=$2;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+24)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=$255 & 8;
      var $257=(($256)|0)!=0;
      if ($257) { __label__ = 56; break; } else { __label__ = 53; break; }
    case 53: 
      var $259=$sp;
      var $260=$2;
      var $261=(($260+20)|0);
      var $262=HEAPU32[(($261)>>2)];
      var $263=(($259)>>>0) < (($262)>>>0);
      if ($263) { __label__ = 54; break; } else { __label__ = 60; break; }
    case 54: 
      var $265=$sp;
      var $266=HEAP8[($265)];
      var $267=(($266 << 24) >> 24);
      var $268=$267 & 255;
      var $269=_isalnum($268);
      var $270=(($269)|0)!=0;
      if ($270) { __label__ = 60; break; } else { __label__ = 55; break; }
    case 55: 
      var $272=$sp;
      var $273=HEAP8[($272)];
      var $274=(($273 << 24) >> 24);
      var $275=(($274)|0)==95;
      if ($275) { __label__ = 60; break; } else { __label__ = 56; break; }
    case 56: 
      var $277=$sp;
      var $278=$2;
      var $279=(($278+16)|0);
      var $280=HEAPU32[(($279)>>2)];
      var $281=(($277)>>>0) > (($280)>>>0);
      if ($281) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $283=$sp;
      var $284=((($283)-(1))|0);
      var $285=HEAP8[($284)];
      var $286=(($285 << 24) >> 24);
      var $287=$286 & 255;
      var $288=_isalnum($287);
      var $289=(($288)|0)!=0;
      if ($289) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $291=$sp;
      var $292=((($291)-(1))|0);
      var $293=HEAP8[($292)];
      var $294=(($293 << 24) >> 24);
      var $295=(($294)|0)==95;
      if ($295) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 61; break;
    case 60: 
      $1=0;
      __label__ = 114; break;
    case 61: 
      __label__ = 68; break;
    case 62: 
      __label__ = 68; break;
    case 63: 
      var $301=$ss;
      var $302=((($301)+(1))|0);
      $ss=$302;
      var $303=$ss;
      var $304=$2;
      var $305=(($304)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+4)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=(($308+($303<<2))|0);
      var $310=HEAP32[(($309)>>2)];
      $s=$310;
      __label__ = 64; break;
    case 64: 
      var $312=$s;
      var $313=$312 & 134217727;
      var $314=$ss;
      var $315=((($314)+($313))|0);
      $ss=$315;
      __label__ = 65; break;
    case 65: 
      var $317=$ss;
      var $318=$2;
      var $319=(($318)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+4)|0);
      var $322=HEAP32[(($321)>>2)];
      var $323=(($322+($317<<2))|0);
      var $324=HEAP32[(($323)>>2)];
      $s=$324;
      var $325=$324 & -134217728;
      var $326=(($325)|0)!=-1879048192;
      if ($326) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 66: 
      __label__ = 68; break;
    case 67: 
      $hard=1;
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $331=$ss;
      var $332=((($331)+(1))|0);
      $ss=$332;
      __label__ = 3; break;
    case 70: 
      var $334=$hard;
      var $335=(($334)|0)!=0;
      if ($335) { __label__ = 74; break; } else { __label__ = 71; break; }
    case 71: 
      var $337=$sp;
      var $338=$4;
      var $339=(($337)|0)!=(($338)|0);
      if ($339) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      $1=0;
      __label__ = 114; break;
    case 73: 
      var $342=$sp;
      $1=$342;
      __label__ = 114; break;
    case 74: 
      var $344=$ss;
      var $345=((($344)-(1))|0);
      $ss=$345;
      var $346=$ss;
      var $347=$2;
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($349+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+($346<<2))|0);
      var $353=HEAP32[(($352)>>2)];
      $s=$353;
      var $354=$s;
      var $355=$354 & -134217728;
      if ((($355)|0) == 939524096) {
        __label__ = 75; break;
      }
      else if ((($355)|0) == 1476395008) {
        __label__ = 88; break;
      }
      else if ((($355)|0) == 1207959552) {
        __label__ = 91; break;
      }
      else if ((($355)|0) == 1342177280) {
        __label__ = 92; break;
      }
      else if ((($355)|0) == 2013265920) {
        __label__ = 97; break;
      }
      else if ((($355)|0) == 1744830464) {
        __label__ = 106; break;
      }
      else if ((($355)|0) == 1879048192) {
        __label__ = 109; break;
      }
      else {
      __label__ = 112; break;
      }
      
    case 75: 
      var $357=$s;
      var $358=$357 & 134217727;
      $i=$358;
      var $359=$i;
      var $360=$2;
      var $361=(($360+8)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=(($362+($359<<3))|0);
      var $364=(($363+4)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365)|0)==-1;
      if ($366) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      $1=0;
      __label__ = 114; break;
    case 77: 
      var $369=$i;
      var $370=$2;
      var $371=(($370+8)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=(($372+($369<<3))|0);
      var $374=(($373+4)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$i;
      var $377=$2;
      var $378=(($377+8)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($379+($376<<3))|0);
      var $381=(($380)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=((($375)-($382))|0);
      $len=$383;
      var $384=$len;
      var $385=(($384)|0)==0;
      if ($385) { __label__ = 78; break; } else { __label__ = 80; break; }
    case 78: 
      var $387=$8;
      var $388=((($387)+(1))|0);
      $8=$388;
      var $389=(($387)|0) > 100;
      if ($389) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      $1=0;
      __label__ = 114; break;
    case 80: 
      var $392=$sp;
      var $393=$4;
      var $394=$len;
      var $395=(((-$394))|0);
      var $396=(($393+$395)|0);
      var $397=(($392)>>>0) > (($396)>>>0);
      if ($397) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      $1=0;
      __label__ = 114; break;
    case 82: 
      var $400=$2;
      var $401=(($400+12)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$i;
      var $404=$2;
      var $405=(($404+8)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=(($406+($403<<3))|0);
      var $408=(($407)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($402+$409)|0);
      $ssp=$410;
      var $411=$sp;
      var $412=$ssp;
      var $413=$len;
      var $414=_memcmp($411, $412, $413);
      var $415=(($414)|0)!=0;
      if ($415) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      $1=0;
      __label__ = 114; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      var $419=$ss;
      var $420=$2;
      var $421=(($420)|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=(($422+4)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=(($424+($419<<2))|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=$i;
      var $428=1073741824 | $427;
      var $429=(($426)|0)!=(($428)|0);
      if ($429) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $431=$ss;
      var $432=((($431)+(1))|0);
      $ss=$432;
      __label__ = 85; break;
    case 87: 
      var $434=$2;
      var $435=$sp;
      var $436=$len;
      var $437=(($435+$436)|0);
      var $438=$4;
      var $439=$ss;
      var $440=((($439)+(1))|0);
      var $441=$6;
      var $442=$7;
      var $443=$8;
      var $444=_lbackref($434, $437, $438, $440, $441, $442, $443);
      $1=$444;
      __label__ = 114; break;
    case 88: 
      var $446=$2;
      var $447=$sp;
      var $448=$4;
      var $449=$ss;
      var $450=((($449)+(1))|0);
      var $451=$6;
      var $452=$7;
      var $453=$8;
      var $454=_lbackref($446, $447, $448, $450, $451, $452, $453);
      $dp=$454;
      var $455=$dp;
      var $456=(($455)|0)!=0;
      if ($456) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      var $458=$dp;
      $1=$458;
      __label__ = 114; break;
    case 90: 
      var $460=$2;
      var $461=$sp;
      var $462=$4;
      var $463=$ss;
      var $464=$s;
      var $465=$464 & 134217727;
      var $466=((($463)+($465))|0);
      var $467=((($466)+(1))|0);
      var $468=$6;
      var $469=$7;
      var $470=$8;
      var $471=_lbackref($460, $461, $462, $467, $468, $469, $470);
      $1=$471;
      __label__ = 114; break;
    case 91: 
      var $473=$sp;
      var $474=$7;
      var $475=((($474)+(1))|0);
      var $476=$2;
      var $477=(($476+28)|0);
      var $478=HEAP32[(($477)>>2)];
      var $479=(($478+($475<<2))|0);
      HEAP32[(($479)>>2)]=$473;
      var $480=$2;
      var $481=$sp;
      var $482=$4;
      var $483=$ss;
      var $484=((($483)+(1))|0);
      var $485=$6;
      var $486=$7;
      var $487=((($486)+(1))|0);
      var $488=$8;
      var $489=_lbackref($480, $481, $482, $484, $485, $487, $488);
      $1=$489;
      __label__ = 114; break;
    case 92: 
      var $491=$sp;
      var $492=$7;
      var $493=$2;
      var $494=(($493+28)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=(($495+($492<<2))|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=(($491)|0)==(($497)|0);
      if ($498) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $500=$2;
      var $501=$sp;
      var $502=$4;
      var $503=$ss;
      var $504=((($503)+(1))|0);
      var $505=$6;
      var $506=$7;
      var $507=((($506)-(1))|0);
      var $508=$8;
      var $509=_lbackref($500, $501, $502, $504, $505, $507, $508);
      $1=$509;
      __label__ = 114; break;
    case 94: 
      var $511=$sp;
      var $512=$7;
      var $513=$2;
      var $514=(($513+28)|0);
      var $515=HEAP32[(($514)>>2)];
      var $516=(($515+($512<<2))|0);
      HEAP32[(($516)>>2)]=$511;
      var $517=$2;
      var $518=$sp;
      var $519=$4;
      var $520=$ss;
      var $521=$s;
      var $522=$521 & 134217727;
      var $523=((($520)-($522))|0);
      var $524=((($523)+(1))|0);
      var $525=$6;
      var $526=$7;
      var $527=$8;
      var $528=_lbackref($517, $518, $519, $524, $525, $526, $527);
      $dp=$528;
      var $529=$dp;
      var $530=(($529)|0)==0;
      if ($530) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      var $532=$2;
      var $533=$sp;
      var $534=$4;
      var $535=$ss;
      var $536=((($535)+(1))|0);
      var $537=$6;
      var $538=$7;
      var $539=((($538)-(1))|0);
      var $540=$8;
      var $541=_lbackref($532, $533, $534, $536, $537, $539, $540);
      $1=$541;
      __label__ = 114; break;
    case 96: 
      var $543=$dp;
      $1=$543;
      __label__ = 114; break;
    case 97: 
      var $545=$ss;
      var $546=((($545)+(1))|0);
      $ssub=$546;
      var $547=$ss;
      var $548=$s;
      var $549=$548 & 134217727;
      var $550=((($547)+($549))|0);
      var $551=((($550)-(1))|0);
      $esub=$551;
      __label__ = 98; break;
    case 98: 
      var $553=$2;
      var $554=$sp;
      var $555=$4;
      var $556=$ssub;
      var $557=$esub;
      var $558=$7;
      var $559=$8;
      var $560=_lbackref($553, $554, $555, $556, $557, $558, $559);
      $dp=$560;
      var $561=$dp;
      var $562=(($561)|0)!=0;
      if ($562) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $564=$dp;
      $1=$564;
      __label__ = 114; break;
    case 100: 
      var $566=$esub;
      var $567=$2;
      var $568=(($567)|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=(($569+4)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=(($571+($566<<2))|0);
      var $573=HEAP32[(($572)>>2)];
      var $574=$573 & -134217728;
      var $575=(($574)|0)==-1879048192;
      if ($575) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: 
      $1=0;
      __label__ = 114; break;
    case 102: 
      var $578=$esub;
      var $579=((($578)+(1))|0);
      $esub=$579;
      var $580=$esub;
      var $581=((($580)+(1))|0);
      $ssub=$581;
      var $582=$esub;
      var $583=$2;
      var $584=(($583)|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=(($585+4)|0);
      var $587=HEAP32[(($586)>>2)];
      var $588=(($587+($582<<2))|0);
      var $589=HEAP32[(($588)>>2)];
      var $590=$589 & 134217727;
      var $591=$esub;
      var $592=((($591)+($590))|0);
      $esub=$592;
      var $593=$esub;
      var $594=$2;
      var $595=(($594)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=(($596+4)|0);
      var $598=HEAP32[(($597)>>2)];
      var $599=(($598+($593<<2))|0);
      var $600=HEAP32[(($599)>>2)];
      var $601=$600 & -134217728;
      var $602=(($601)|0)==-2013265920;
      if ($602) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $604=$esub;
      var $605=((($604)-(1))|0);
      $esub=$605;
      __label__ = 105; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      __label__ = 98; break;
    case 106: 
      var $609=$s;
      var $610=$609 & 134217727;
      $i=$610;
      var $611=$i;
      var $612=$2;
      var $613=(($612+8)|0);
      var $614=HEAP32[(($613)>>2)];
      var $615=(($614+($611<<3))|0);
      var $616=(($615)|0);
      var $617=HEAP32[(($616)>>2)];
      $offsave=$617;
      var $618=$sp;
      var $619=$2;
      var $620=(($619+12)|0);
      var $621=HEAP32[(($620)>>2)];
      var $622=$618;
      var $623=$621;
      var $624=((($622)-($623))|0);
      var $625=$i;
      var $626=$2;
      var $627=(($626+8)|0);
      var $628=HEAP32[(($627)>>2)];
      var $629=(($628+($625<<3))|0);
      var $630=(($629)|0);
      HEAP32[(($630)>>2)]=$624;
      var $631=$2;
      var $632=$sp;
      var $633=$4;
      var $634=$ss;
      var $635=((($634)+(1))|0);
      var $636=$6;
      var $637=$7;
      var $638=$8;
      var $639=_lbackref($631, $632, $633, $635, $636, $637, $638);
      $dp=$639;
      var $640=$dp;
      var $641=(($640)|0)!=0;
      if ($641) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $643=$dp;
      $1=$643;
      __label__ = 114; break;
    case 108: 
      var $645=$offsave;
      var $646=$i;
      var $647=$2;
      var $648=(($647+8)|0);
      var $649=HEAP32[(($648)>>2)];
      var $650=(($649+($646<<3))|0);
      var $651=(($650)|0);
      HEAP32[(($651)>>2)]=$645;
      $1=0;
      __label__ = 114; break;
    case 109: 
      var $653=$s;
      var $654=$653 & 134217727;
      $i=$654;
      var $655=$i;
      var $656=$2;
      var $657=(($656+8)|0);
      var $658=HEAP32[(($657)>>2)];
      var $659=(($658+($655<<3))|0);
      var $660=(($659+4)|0);
      var $661=HEAP32[(($660)>>2)];
      $offsave=$661;
      var $662=$sp;
      var $663=$2;
      var $664=(($663+12)|0);
      var $665=HEAP32[(($664)>>2)];
      var $666=$662;
      var $667=$665;
      var $668=((($666)-($667))|0);
      var $669=$i;
      var $670=$2;
      var $671=(($670+8)|0);
      var $672=HEAP32[(($671)>>2)];
      var $673=(($672+($669<<3))|0);
      var $674=(($673+4)|0);
      HEAP32[(($674)>>2)]=$668;
      var $675=$2;
      var $676=$sp;
      var $677=$4;
      var $678=$ss;
      var $679=((($678)+(1))|0);
      var $680=$6;
      var $681=$7;
      var $682=$8;
      var $683=_lbackref($675, $676, $677, $679, $680, $681, $682);
      $dp=$683;
      var $684=$dp;
      var $685=(($684)|0)!=0;
      if ($685) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      var $687=$dp;
      $1=$687;
      __label__ = 114; break;
    case 111: 
      var $689=$offsave;
      var $690=$i;
      var $691=$2;
      var $692=(($691+8)|0);
      var $693=HEAP32[(($692)>>2)];
      var $694=(($693+($690<<3))|0);
      var $695=(($694+4)|0);
      HEAP32[(($695)>>2)]=$689;
      $1=0;
      __label__ = 114; break;
    case 112: 
      __label__ = 113; break;
    case 113: 
      $1=0;
      __label__ = 114; break;
    case 114: 
      var $699=$1;
      ;
      return $699;
    default: assert(0, "bad label: " + __label__);
  }
}
_lbackref["X"]=1;

function _lstep($g, $start, $stop, $bef, $ch, $aft) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cs;
      var $s;
      var $pc;
      var $here;
      var $look;
      var $i;
      $1=$g;
      $2=$start;
      $3=$stop;
      $4=$bef;
      $5=$ch;
      $6=$aft;
      var $7=$2;
      $pc=$7;
      var $8=$pc;
      $here=$8;
      __label__ = 3; break;
    case 3: 
      var $10=$pc;
      var $11=$3;
      var $12=(($10)|0)!=(($11)|0);
      if ($12) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $14=$pc;
      var $15=$1;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      $s=$19;
      var $20=$s;
      var $21=$20 & -134217728;
      if ((($21)|0) == 134217728) {
        __label__ = 5; break;
      }
      else if ((($21)|0) == 268435456) {
        __label__ = 6; break;
      }
      else if ((($21)|0) == 402653184) {
        __label__ = 9; break;
      }
      else if ((($21)|0) == 536870912) {
        __label__ = 13; break;
      }
      else if ((($21)|0) == -1744830464) {
        __label__ = 17; break;
      }
      else if ((($21)|0) == -1610612736) {
        __label__ = 20; break;
      }
      else if ((($21)|0) == 671088640) {
        __label__ = 23; break;
      }
      else if ((($21)|0) == 805306368) {
        __label__ = 26; break;
      }
      else if ((($21)|0) == 939524096 || (($21)|0) == 1073741824) {
        __label__ = 30; break;
      }
      else if ((($21)|0) == 1207959552) {
        __label__ = 31; break;
      }
      else if ((($21)|0) == 1342177280) {
        __label__ = 32; break;
      }
      else if ((($21)|0) == 1476395008) {
        __label__ = 36; break;
      }
      else if ((($21)|0) == 1610612736) {
        __label__ = 37; break;
      }
      else if ((($21)|0) == 1744830464 || (($21)|0) == 1879048192) {
        __label__ = 38; break;
      }
      else if ((($21)|0) == 2013265920) {
        __label__ = 39; break;
      }
      else if ((($21)|0) == -2147483648) {
        __label__ = 40; break;
      }
      else if ((($21)|0) == -2013265920) {
        __label__ = 47; break;
      }
      else if ((($21)|0) == -1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 5: 
      __label__ = 52; break;
    case 6: 
      var $24=$5;
      var $25=$s;
      var $26=$25 & 134217727;
      var $27=(($26) & 255);
      var $28=(($27 << 24) >> 24);
      var $29=(($24)|0)==(($28)|0);
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$here;
      var $32=$4;
      var $33=(($32+$31)|0);
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      var $36=$here;
      var $37=((($36)+(1))|0);
      var $38=$6;
      var $39=(($38+$37)|0);
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=$41 | $35;
      var $43=(($42) & 255);
      HEAP8[($39)]=$43;
      __label__ = 8; break;
    case 8: 
      __label__ = 52; break;
    case 9: 
      var $46=$5;
      var $47=(($46)|0)==129;
      if ($47) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $49=$5;
      var $50=(($49)|0)==131;
      if ($50) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $52=$here;
      var $53=$4;
      var $54=(($53+$52)|0);
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      var $57=$here;
      var $58=((($57)+(1))|0);
      var $59=$6;
      var $60=(($59+$58)|0);
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$62 | $56;
      var $64=(($63) & 255);
      HEAP8[($60)]=$64;
      __label__ = 12; break;
    case 12: 
      __label__ = 52; break;
    case 13: 
      var $67=$5;
      var $68=(($67)|0)==130;
      if ($68) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $70=$5;
      var $71=(($70)|0)==131;
      if ($71) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $73=$here;
      var $74=$4;
      var $75=(($74+$73)|0);
      var $76=HEAP8[($75)];
      var $77=(($76 << 24) >> 24);
      var $78=$here;
      var $79=((($78)+(1))|0);
      var $80=$6;
      var $81=(($80+$79)|0);
      var $82=HEAP8[($81)];
      var $83=(($82 << 24) >> 24);
      var $84=$83 | $77;
      var $85=(($84) & 255);
      HEAP8[($81)]=$85;
      __label__ = 16; break;
    case 16: 
      __label__ = 52; break;
    case 17: 
      var $88=$5;
      var $89=(($88)|0)==133;
      if ($89) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $91=$here;
      var $92=$4;
      var $93=(($92+$91)|0);
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=$here;
      var $97=((($96)+(1))|0);
      var $98=$6;
      var $99=(($98+$97)|0);
      var $100=HEAP8[($99)];
      var $101=(($100 << 24) >> 24);
      var $102=$101 | $95;
      var $103=(($102) & 255);
      HEAP8[($99)]=$103;
      __label__ = 19; break;
    case 19: 
      __label__ = 52; break;
    case 20: 
      var $106=$5;
      var $107=(($106)|0)==134;
      if ($107) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $109=$here;
      var $110=$4;
      var $111=(($110+$109)|0);
      var $112=HEAP8[($111)];
      var $113=(($112 << 24) >> 24);
      var $114=$here;
      var $115=((($114)+(1))|0);
      var $116=$6;
      var $117=(($116+$115)|0);
      var $118=HEAP8[($117)];
      var $119=(($118 << 24) >> 24);
      var $120=$119 | $113;
      var $121=(($120) & 255);
      HEAP8[($117)]=$121;
      __label__ = 22; break;
    case 22: 
      __label__ = 52; break;
    case 23: 
      var $124=$5;
      var $125=(($124)|0) > 127;
      if ($125) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $127=$here;
      var $128=$4;
      var $129=(($128+$127)|0);
      var $130=HEAP8[($129)];
      var $131=(($130 << 24) >> 24);
      var $132=$here;
      var $133=((($132)+(1))|0);
      var $134=$6;
      var $135=(($134+$133)|0);
      var $136=HEAP8[($135)];
      var $137=(($136 << 24) >> 24);
      var $138=$137 | $131;
      var $139=(($138) & 255);
      HEAP8[($135)]=$139;
      __label__ = 25; break;
    case 25: 
      __label__ = 52; break;
    case 26: 
      var $142=$s;
      var $143=$142 & 134217727;
      var $144=$1;
      var $145=(($144+16)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+($143<<4))|0);
      $cs=$147;
      var $148=$5;
      var $149=(($148)|0) > 127;
      if ($149) { __label__ = 29; break; } else { __label__ = 27; break; }
    case 27: 
      var $151=$5;
      var $152=(($151) & 255);
      var $153=(($152)&255);
      var $154=$cs;
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+$153)|0);
      var $158=HEAPU8[($157)];
      var $159=(($158)&255);
      var $160=$cs;
      var $161=(($160+4)|0);
      var $162=HEAPU8[($161)];
      var $163=(($162)&255);
      var $164=$159 & $163;
      var $165=(($164)|0)!=0;
      if ($165) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $167=$here;
      var $168=$4;
      var $169=(($168+$167)|0);
      var $170=HEAP8[($169)];
      var $171=(($170 << 24) >> 24);
      var $172=$here;
      var $173=((($172)+(1))|0);
      var $174=$6;
      var $175=(($174+$173)|0);
      var $176=HEAP8[($175)];
      var $177=(($176 << 24) >> 24);
      var $178=$177 | $171;
      var $179=(($178) & 255);
      HEAP8[($175)]=$179;
      __label__ = 29; break;
    case 29: 
      __label__ = 52; break;
    case 30: 
      var $182=$here;
      var $183=$6;
      var $184=(($183+$182)|0);
      var $185=HEAP8[($184)];
      var $186=(($185 << 24) >> 24);
      var $187=$here;
      var $188=((($187)+(1))|0);
      var $189=$6;
      var $190=(($189+$188)|0);
      var $191=HEAP8[($190)];
      var $192=(($191 << 24) >> 24);
      var $193=$192 | $186;
      var $194=(($193) & 255);
      HEAP8[($190)]=$194;
      __label__ = 52; break;
    case 31: 
      var $196=$here;
      var $197=$6;
      var $198=(($197+$196)|0);
      var $199=HEAP8[($198)];
      var $200=(($199 << 24) >> 24);
      var $201=$here;
      var $202=((($201)+(1))|0);
      var $203=$6;
      var $204=(($203+$202)|0);
      var $205=HEAP8[($204)];
      var $206=(($205 << 24) >> 24);
      var $207=$206 | $200;
      var $208=(($207) & 255);
      HEAP8[($204)]=$208;
      __label__ = 52; break;
    case 32: 
      var $210=$here;
      var $211=$6;
      var $212=(($211+$210)|0);
      var $213=HEAP8[($212)];
      var $214=(($213 << 24) >> 24);
      var $215=$here;
      var $216=((($215)+(1))|0);
      var $217=$6;
      var $218=(($217+$216)|0);
      var $219=HEAP8[($218)];
      var $220=(($219 << 24) >> 24);
      var $221=$220 | $214;
      var $222=(($221) & 255);
      HEAP8[($218)]=$222;
      var $223=$here;
      var $224=$s;
      var $225=$224 & 134217727;
      var $226=((($223)-($225))|0);
      var $227=$6;
      var $228=(($227+$226)|0);
      var $229=HEAP8[($228)];
      var $230=(($229 << 24) >> 24);
      $i=$230;
      var $231=$here;
      var $232=$6;
      var $233=(($232+$231)|0);
      var $234=HEAP8[($233)];
      var $235=(($234 << 24) >> 24);
      var $236=$here;
      var $237=$s;
      var $238=$237 & 134217727;
      var $239=((($236)-($238))|0);
      var $240=$6;
      var $241=(($240+$239)|0);
      var $242=HEAP8[($241)];
      var $243=(($242 << 24) >> 24);
      var $244=$243 | $235;
      var $245=(($244) & 255);
      HEAP8[($241)]=$245;
      var $246=$i;
      var $247=(($246)|0)!=0;
      if ($247) { __label__ = 35; break; } else { __label__ = 33; break; }
    case 33: 
      var $249=$here;
      var $250=$s;
      var $251=$250 & 134217727;
      var $252=((($249)-($251))|0);
      var $253=$6;
      var $254=(($253+$252)|0);
      var $255=HEAP8[($254)];
      var $256=(($255 << 24) >> 24);
      var $257=(($256)|0)!=0;
      if ($257) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $259=$s;
      var $260=$259 & 134217727;
      var $261=((($260)+(1))|0);
      var $262=$pc;
      var $263=((($262)-($261))|0);
      $pc=$263;
      var $264=$pc;
      $here=$264;
      __label__ = 35; break;
    case 35: 
      __label__ = 52; break;
    case 36: 
      var $267=$here;
      var $268=$6;
      var $269=(($268+$267)|0);
      var $270=HEAP8[($269)];
      var $271=(($270 << 24) >> 24);
      var $272=$here;
      var $273=((($272)+(1))|0);
      var $274=$6;
      var $275=(($274+$273)|0);
      var $276=HEAP8[($275)];
      var $277=(($276 << 24) >> 24);
      var $278=$277 | $271;
      var $279=(($278) & 255);
      HEAP8[($275)]=$279;
      var $280=$here;
      var $281=$6;
      var $282=(($281+$280)|0);
      var $283=HEAP8[($282)];
      var $284=(($283 << 24) >> 24);
      var $285=$here;
      var $286=$s;
      var $287=$286 & 134217727;
      var $288=((($285)+($287))|0);
      var $289=$6;
      var $290=(($289+$288)|0);
      var $291=HEAP8[($290)];
      var $292=(($291 << 24) >> 24);
      var $293=$292 | $284;
      var $294=(($293) & 255);
      HEAP8[($290)]=$294;
      __label__ = 52; break;
    case 37: 
      var $296=$here;
      var $297=$6;
      var $298=(($297+$296)|0);
      var $299=HEAP8[($298)];
      var $300=(($299 << 24) >> 24);
      var $301=$here;
      var $302=((($301)+(1))|0);
      var $303=$6;
      var $304=(($303+$302)|0);
      var $305=HEAP8[($304)];
      var $306=(($305 << 24) >> 24);
      var $307=$306 | $300;
      var $308=(($307) & 255);
      HEAP8[($304)]=$308;
      __label__ = 52; break;
    case 38: 
      var $310=$here;
      var $311=$6;
      var $312=(($311+$310)|0);
      var $313=HEAP8[($312)];
      var $314=(($313 << 24) >> 24);
      var $315=$here;
      var $316=((($315)+(1))|0);
      var $317=$6;
      var $318=(($317+$316)|0);
      var $319=HEAP8[($318)];
      var $320=(($319 << 24) >> 24);
      var $321=$320 | $314;
      var $322=(($321) & 255);
      HEAP8[($318)]=$322;
      __label__ = 52; break;
    case 39: 
      var $324=$here;
      var $325=$6;
      var $326=(($325+$324)|0);
      var $327=HEAP8[($326)];
      var $328=(($327 << 24) >> 24);
      var $329=$here;
      var $330=((($329)+(1))|0);
      var $331=$6;
      var $332=(($331+$330)|0);
      var $333=HEAP8[($332)];
      var $334=(($333 << 24) >> 24);
      var $335=$334 | $328;
      var $336=(($335) & 255);
      HEAP8[($332)]=$336;
      var $337=$here;
      var $338=$6;
      var $339=(($338+$337)|0);
      var $340=HEAP8[($339)];
      var $341=(($340 << 24) >> 24);
      var $342=$here;
      var $343=$s;
      var $344=$343 & 134217727;
      var $345=((($342)+($344))|0);
      var $346=$6;
      var $347=(($346+$345)|0);
      var $348=HEAP8[($347)];
      var $349=(($348 << 24) >> 24);
      var $350=$349 | $341;
      var $351=(($350) & 255);
      HEAP8[($347)]=$351;
      __label__ = 52; break;
    case 40: 
      var $353=$here;
      var $354=$6;
      var $355=(($354+$353)|0);
      var $356=HEAP8[($355)];
      var $357=(($356 << 24) >> 24)!=0;
      if ($357) { __label__ = 41; break; } else { __label__ = 46; break; }
    case 41: 
      $look=1;
      __label__ = 42; break;
    case 42: 
      var $360=$pc;
      var $361=$look;
      var $362=((($360)+($361))|0);
      var $363=$1;
      var $364=(($363+4)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365+($362<<2))|0);
      var $367=HEAP32[(($366)>>2)];
      $s=$367;
      var $368=$367 & -134217728;
      var $369=(($368)|0)!=-1879048192;
      if ($369) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $372=$s;
      var $373=$372 & 134217727;
      var $374=$look;
      var $375=((($374)+($373))|0);
      $look=$375;
      __label__ = 42; break;
    case 45: 
      var $377=$here;
      var $378=$6;
      var $379=(($378+$377)|0);
      var $380=HEAP8[($379)];
      var $381=(($380 << 24) >> 24);
      var $382=$here;
      var $383=$look;
      var $384=((($382)+($383))|0);
      var $385=$6;
      var $386=(($385+$384)|0);
      var $387=HEAP8[($386)];
      var $388=(($387 << 24) >> 24);
      var $389=$388 | $381;
      var $390=(($389) & 255);
      HEAP8[($386)]=$390;
      __label__ = 46; break;
    case 46: 
      __label__ = 52; break;
    case 47: 
      var $393=$here;
      var $394=$6;
      var $395=(($394+$393)|0);
      var $396=HEAP8[($395)];
      var $397=(($396 << 24) >> 24);
      var $398=$here;
      var $399=((($398)+(1))|0);
      var $400=$6;
      var $401=(($400+$399)|0);
      var $402=HEAP8[($401)];
      var $403=(($402 << 24) >> 24);
      var $404=$403 | $397;
      var $405=(($404) & 255);
      HEAP8[($401)]=$405;
      var $406=$pc;
      var $407=$s;
      var $408=$407 & 134217727;
      var $409=((($406)+($408))|0);
      var $410=$1;
      var $411=(($410+4)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($412+($409<<2))|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=$414 & -134217728;
      var $416=(($415)|0)!=-1879048192;
      if ($416) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $418=$here;
      var $419=$6;
      var $420=(($419+$418)|0);
      var $421=HEAP8[($420)];
      var $422=(($421 << 24) >> 24);
      var $423=$here;
      var $424=$s;
      var $425=$424 & 134217727;
      var $426=((($423)+($425))|0);
      var $427=$6;
      var $428=(($427+$426)|0);
      var $429=HEAP8[($428)];
      var $430=(($429 << 24) >> 24);
      var $431=$430 | $422;
      var $432=(($431) & 255);
      HEAP8[($428)]=$432;
      __label__ = 49; break;
    case 49: 
      __label__ = 52; break;
    case 50: 
      var $435=$here;
      var $436=$6;
      var $437=(($436+$435)|0);
      var $438=HEAP8[($437)];
      var $439=(($438 << 24) >> 24);
      var $440=$here;
      var $441=((($440)+(1))|0);
      var $442=$6;
      var $443=(($442+$441)|0);
      var $444=HEAP8[($443)];
      var $445=(($444 << 24) >> 24);
      var $446=$445 | $439;
      var $447=(($446) & 255);
      HEAP8[($443)]=$447;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $451=$pc;
      var $452=((($451)+(1))|0);
      $pc=$452;
      var $453=$here;
      var $454=((($453)+(1))|0);
      $here=$454;
      __label__ = 3; break;
    case 54: 
      var $456=$6;
      ;
      return $456;
    default: assert(0, "bad label: " + __label__);
  }
}
_lstep["X"]=1;

function _sfast($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $st;
      var $fresh;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $coldp;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      var $7=$2;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      $st=$9;
      var $10=$2;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      $fresh=$12;
      var $13=$2;
      var $14=(($13+44)|0);
      var $15=HEAP32[(($14)>>2)];
      $tmp=$15;
      var $16=$3;
      $p=$16;
      var $17=$3;
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $29 = 128;__label__ = 5; break;
    case 4: 
      var $24=$3;
      var $25=((($24)-(1))|0);
      var $26=HEAP8[($25)];
      var $27=(($26 << 24) >> 24);
      var $29 = $27;__label__ = 5; break;
    case 5: 
      var $29;
      $c=$29;
      $st=0;
      var $30=$5;
      var $31=1 << $30;
      var $32=$st;
      var $33=$32 | $31;
      $st=$33;
      var $34=$2;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$5;
      var $38=$6;
      var $39=$st;
      var $40=$st;
      var $41=_sstep($36, $37, $38, $39, 132, $40);
      $st=$41;
      var $42=$st;
      $fresh=$42;
      $coldp=0;
      __label__ = 6; break;
    case 6: 
      var $44=$c;
      $lastc=$44;
      var $45=$p;
      var $46=$2;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($45)|0)==(($48)|0);
      if ($49) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $56 = 128;__label__ = 9; break;
    case 8: 
      var $52=$p;
      var $53=HEAP8[($52)];
      var $54=(($53 << 24) >> 24);
      var $56 = $54;__label__ = 9; break;
    case 9: 
      var $56;
      $c=$56;
      var $57=$st;
      var $58=$fresh;
      var $59=(($57)|0)==(($58)|0);
      if ($59) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $61=$p;
      $coldp=$61;
      __label__ = 11; break;
    case 11: 
      $flagch=0;
      $i=0;
      var $63=$lastc;
      var $64=(($63)|0)==10;
      if ($64) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $66=$2;
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & 8;
      var $72=(($71)|0)!=0;
      if ($72) { __label__ = 15; break; } else { __label__ = 13; break; }
    case 13: 
      var $74=$lastc;
      var $75=(($74)|0)==128;
      if ($75) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $77=$2;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79 & 1;
      var $81=(($80)|0)!=0;
      if ($81) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      $flagch=129;
      var $83=$2;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+44)|0);
      var $87=HEAP32[(($86)>>2)];
      $i=$87;
      __label__ = 16; break;
    case 16: 
      var $89=$c;
      var $90=(($89)|0)==10;
      if ($90) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $92=$2;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96 & 8;
      var $98=(($97)|0)!=0;
      if ($98) { __label__ = 20; break; } else { __label__ = 18; break; }
    case 18: 
      var $100=$c;
      var $101=(($100)|0)==128;
      if ($101) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $103=$2;
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 & 2;
      var $107=(($106)|0)!=0;
      if ($107) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $109=$flagch;
      var $110=(($109)|0)==129;
      var $111=$110 ? 131 : 130;
      $flagch=$111;
      var $112=$2;
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+48)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$i;
      var $118=((($117)+($116))|0);
      $i=$118;
      __label__ = 21; break;
    case 21: 
      var $120=$i;
      var $121=(($120)|0)!=0;
      if ($121) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $124=$i;
      var $125=(($124)|0) > 0;
      if ($125) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $127=$2;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$5;
      var $131=$6;
      var $132=$st;
      var $133=$flagch;
      var $134=$st;
      var $135=_sstep($129, $130, $131, $132, $133, $134);
      $st=$135;
      __label__ = 25; break;
    case 25: 
      var $137=$i;
      var $138=((($137)-(1))|0);
      $i=$138;
      __label__ = 23; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $141=$flagch;
      var $142=(($141)|0)==129;
      if ($142) { __label__ = 31; break; } else { __label__ = 28; break; }
    case 28: 
      var $144=$lastc;
      var $145=(($144)|0)!=128;
      if ($145) { __label__ = 29; break; } else { __label__ = 35; break; }
    case 29: 
      var $147=$lastc;
      var $148=$147 & 255;
      var $149=_isalnum($148);
      var $150=(($149)|0)!=0;
      if ($150) { __label__ = 35; break; } else { __label__ = 30; break; }
    case 30: 
      var $152=$lastc;
      var $153=(($152)|0)==95;
      if ($153) { __label__ = 35; break; } else { __label__ = 31; break; }
    case 31: 
      var $155=$c;
      var $156=(($155)|0)!=128;
      if ($156) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $158=$c;
      var $159=$158 & 255;
      var $160=_isalnum($159);
      var $161=(($160)|0)!=0;
      if ($161) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $163=$c;
      var $164=(($163)|0)==95;
      if ($164) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      $flagch=133;
      __label__ = 35; break;
    case 35: 
      var $167=$lastc;
      var $168=(($167)|0)!=128;
      if ($168) { __label__ = 36; break; } else { __label__ = 43; break; }
    case 36: 
      var $170=$lastc;
      var $171=$170 & 255;
      var $172=_isalnum($171);
      var $173=(($172)|0)!=0;
      if ($173) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $175=$lastc;
      var $176=(($175)|0)==95;
      if ($176) { __label__ = 38; break; } else { __label__ = 43; break; }
    case 38: 
      var $178=$flagch;
      var $179=(($178)|0)==130;
      if ($179) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $181=$c;
      var $182=(($181)|0)!=128;
      if ($182) { __label__ = 40; break; } else { __label__ = 43; break; }
    case 40: 
      var $184=$c;
      var $185=$184 & 255;
      var $186=_isalnum($185);
      var $187=(($186)|0)!=0;
      if ($187) { __label__ = 43; break; } else { __label__ = 41; break; }
    case 41: 
      var $189=$c;
      var $190=(($189)|0)==95;
      if ($190) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      $flagch=134;
      __label__ = 43; break;
    case 43: 
      var $193=$flagch;
      var $194=(($193)|0)==133;
      if ($194) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $196=$flagch;
      var $197=(($196)|0)==134;
      if ($197) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $199=$2;
      var $200=(($199)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=$5;
      var $203=$6;
      var $204=$st;
      var $205=$flagch;
      var $206=$st;
      var $207=_sstep($201, $202, $203, $204, $205, $206);
      $st=$207;
      __label__ = 46; break;
    case 46: 
      var $209=$st;
      var $210=$6;
      var $211=1 << $210;
      var $212=$209 & $211;
      var $213=(($212)|0)!=0;
      if ($213) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $215=$p;
      var $216=$4;
      var $217=(($215)|0)==(($216)|0);
      if ($217) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $220=$st;
      $tmp=$220;
      var $221=$fresh;
      $st=$221;
      var $222=$2;
      var $223=(($222)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=$5;
      var $226=$6;
      var $227=$tmp;
      var $228=$c;
      var $229=$st;
      var $230=_sstep($224, $225, $226, $227, $228, $229);
      $st=$230;
      var $231=$p;
      var $232=(($231+1)|0);
      $p=$232;
      __label__ = 6; break;
    case 50: 
      var $234=$coldp;
      var $235=$2;
      var $236=(($235+24)|0);
      HEAP32[(($236)>>2)]=$234;
      var $237=$st;
      var $238=$6;
      var $239=1 << $238;
      var $240=$237 & $239;
      var $241=(($240)|0)!=0;
      if ($241) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $243=$p;
      var $244=(($243+1)|0);
      $1=$244;
      __label__ = 53; break;
    case 52: 
      $1=0;
      __label__ = 53; break;
    case 53: 
      var $247=$1;
      ;
      return $247;
    default: assert(0, "bad label: " + __label__);
  }
}
_sfast["X"]=1;

function _sslow($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $st;
      var $empty;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $matchp;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$1;
      var $7=(($6+36)|0);
      var $8=HEAP32[(($7)>>2)];
      $st=$8;
      var $9=$1;
      var $10=(($9+48)|0);
      var $11=HEAP32[(($10)>>2)];
      $empty=$11;
      var $12=$1;
      var $13=(($12+44)|0);
      var $14=HEAP32[(($13)>>2)];
      $tmp=$14;
      var $15=$2;
      $p=$15;
      var $16=$2;
      var $17=$1;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0)==(($19)|0);
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $28 = 128;__label__ = 5; break;
    case 4: 
      var $23=$2;
      var $24=((($23)-(1))|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $28 = $26;__label__ = 5; break;
    case 5: 
      var $28;
      $c=$28;
      $st=0;
      var $29=$4;
      var $30=1 << $29;
      var $31=$st;
      var $32=$31 | $30;
      $st=$32;
      var $33=$1;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$4;
      var $37=$5;
      var $38=$st;
      var $39=$st;
      var $40=_sstep($35, $36, $37, $38, 132, $39);
      $st=$40;
      $matchp=0;
      __label__ = 6; break;
    case 6: 
      var $42=$c;
      $lastc=$42;
      var $43=$p;
      var $44=$1;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($43)|0)==(($46)|0);
      if ($47) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $54 = 128;__label__ = 9; break;
    case 8: 
      var $50=$p;
      var $51=HEAP8[($50)];
      var $52=(($51 << 24) >> 24);
      var $54 = $52;__label__ = 9; break;
    case 9: 
      var $54;
      $c=$54;
      $flagch=0;
      $i=0;
      var $55=$lastc;
      var $56=(($55)|0)==10;
      if ($56) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $58=$1;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & 8;
      var $64=(($63)|0)!=0;
      if ($64) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 11: 
      var $66=$lastc;
      var $67=(($66)|0)==128;
      if ($67) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & 1;
      var $73=(($72)|0)!=0;
      if ($73) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      $flagch=129;
      var $75=$1;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+44)|0);
      var $79=HEAP32[(($78)>>2)];
      $i=$79;
      __label__ = 14; break;
    case 14: 
      var $81=$c;
      var $82=(($81)|0)==10;
      if ($82) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $84=$1;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+24)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & 8;
      var $90=(($89)|0)!=0;
      if ($90) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $92=$c;
      var $93=(($92)|0)==128;
      if ($93) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $95=$1;
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 & 2;
      var $99=(($98)|0)!=0;
      if ($99) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $101=$flagch;
      var $102=(($101)|0)==129;
      var $103=$102 ? 131 : 130;
      $flagch=$103;
      var $104=$1;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+48)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$i;
      var $110=((($109)+($108))|0);
      $i=$110;
      __label__ = 19; break;
    case 19: 
      var $112=$i;
      var $113=(($112)|0)!=0;
      if ($113) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $116=$i;
      var $117=(($116)|0) > 0;
      if ($117) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $119=$1;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$4;
      var $123=$5;
      var $124=$st;
      var $125=$flagch;
      var $126=$st;
      var $127=_sstep($121, $122, $123, $124, $125, $126);
      $st=$127;
      __label__ = 23; break;
    case 23: 
      var $129=$i;
      var $130=((($129)-(1))|0);
      $i=$130;
      __label__ = 21; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $133=$flagch;
      var $134=(($133)|0)==129;
      if ($134) { __label__ = 29; break; } else { __label__ = 26; break; }
    case 26: 
      var $136=$lastc;
      var $137=(($136)|0)!=128;
      if ($137) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      var $139=$lastc;
      var $140=$139 & 255;
      var $141=_isalnum($140);
      var $142=(($141)|0)!=0;
      if ($142) { __label__ = 33; break; } else { __label__ = 28; break; }
    case 28: 
      var $144=$lastc;
      var $145=(($144)|0)==95;
      if ($145) { __label__ = 33; break; } else { __label__ = 29; break; }
    case 29: 
      var $147=$c;
      var $148=(($147)|0)!=128;
      if ($148) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $150=$c;
      var $151=$150 & 255;
      var $152=_isalnum($151);
      var $153=(($152)|0)!=0;
      if ($153) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $155=$c;
      var $156=(($155)|0)==95;
      if ($156) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $flagch=133;
      __label__ = 33; break;
    case 33: 
      var $159=$lastc;
      var $160=(($159)|0)!=128;
      if ($160) { __label__ = 34; break; } else { __label__ = 41; break; }
    case 34: 
      var $162=$lastc;
      var $163=$162 & 255;
      var $164=_isalnum($163);
      var $165=(($164)|0)!=0;
      if ($165) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $167=$lastc;
      var $168=(($167)|0)==95;
      if ($168) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      var $170=$flagch;
      var $171=(($170)|0)==130;
      if ($171) { __label__ = 40; break; } else { __label__ = 37; break; }
    case 37: 
      var $173=$c;
      var $174=(($173)|0)!=128;
      if ($174) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $176=$c;
      var $177=$176 & 255;
      var $178=_isalnum($177);
      var $179=(($178)|0)!=0;
      if ($179) { __label__ = 41; break; } else { __label__ = 39; break; }
    case 39: 
      var $181=$c;
      var $182=(($181)|0)==95;
      if ($182) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      $flagch=134;
      __label__ = 41; break;
    case 41: 
      var $185=$flagch;
      var $186=(($185)|0)==133;
      if ($186) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      var $188=$flagch;
      var $189=(($188)|0)==134;
      if ($189) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $191=$1;
      var $192=(($191)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$4;
      var $195=$5;
      var $196=$st;
      var $197=$flagch;
      var $198=$st;
      var $199=_sstep($193, $194, $195, $196, $197, $198);
      $st=$199;
      __label__ = 44; break;
    case 44: 
      var $201=$st;
      var $202=$5;
      var $203=1 << $202;
      var $204=$201 & $203;
      var $205=(($204)|0)!=0;
      if ($205) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $207=$p;
      $matchp=$207;
      __label__ = 46; break;
    case 46: 
      var $209=$st;
      var $210=$empty;
      var $211=(($209)|0)==(($210)|0);
      if ($211) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $213=$p;
      var $214=$3;
      var $215=(($213)|0)==(($214)|0);
      if ($215) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $218=$st;
      $tmp=$218;
      var $219=$empty;
      $st=$219;
      var $220=$1;
      var $221=(($220)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$4;
      var $224=$5;
      var $225=$tmp;
      var $226=$c;
      var $227=$st;
      var $228=_sstep($222, $223, $224, $225, $226, $227);
      $st=$228;
      var $229=$p;
      var $230=(($229+1)|0);
      $p=$230;
      __label__ = 6; break;
    case 50: 
      var $232=$matchp;
      ;
      return $232;
    default: assert(0, "bad label: " + __label__);
  }
}
_sslow["X"]=1;

function _sdissect($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $ss;
      var $es;
      var $sp;
      var $stp;
      var $rest;
      var $tail;
      var $ssub;
      var $esub;
      var $ssp;
      var $sep;
      var $oldssp;
      var $dp;
      var $dp1;
      var $dp2;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$2;
      $sp=$6;
      var $7=$4;
      $ss=$7;
      __label__ = 3; break;
    case 3: 
      var $9=$ss;
      var $10=$5;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $13=$ss;
      $es=$13;
      var $14=$es;
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+($14<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & -134217728;
      if ((($22)|0) == 1207959552 || (($22)|0) == 1476395008) {
        __label__ = 5; break;
      }
      else if ((($22)|0) == 2013265920) {
        __label__ = 6; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 5: 
      var $24=$es;
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($24<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 134217727;
      var $33=$es;
      var $34=((($33)+($32))|0);
      $es=$34;
      __label__ = 10; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $37=$es;
      var $38=$1;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($37<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & -134217728;
      var $46=(($45)|0)!=-1879048192;
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $48=$es;
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($48<<2))|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 134217727;
      var $57=$es;
      var $58=((($57)+($56))|0);
      $es=$58;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $61=$es;
      var $62=((($61)+(1))|0);
      $es=$62;
      var $63=$ss;
      var $64=$1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($63<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & -134217728;
      if ((($71)|0) == 134217728) {
        __label__ = 11; break;
      }
      else if ((($71)|0) == 268435456) {
        __label__ = 12; break;
      }
      else if ((($71)|0) == 402653184 || (($71)|0) == 536870912 || (($71)|0) == -1744830464 || (($71)|0) == -1610612736) {
        __label__ = 13; break;
      }
      else if ((($71)|0) == 671088640 || (($71)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($71)|0) == 939524096 || (($71)|0) == 1073741824) {
        __label__ = 15; break;
      }
      else if ((($71)|0) == 1476395008) {
        __label__ = 16; break;
      }
      else if ((($71)|0) == 1207959552) {
        __label__ = 24; break;
      }
      else if ((($71)|0) == 2013265920) {
        __label__ = 36; break;
      }
      else if ((($71)|0) == 1342177280 || (($71)|0) == 1610612736 || (($71)|0) == -2147483648 || (($71)|0) == -2013265920 || (($71)|0) == -1879048192) {
        __label__ = 48; break;
      }
      else if ((($71)|0) == 1744830464) {
        __label__ = 49; break;
      }
      else if ((($71)|0) == 1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 11: 
      __label__ = 52; break;
    case 12: 
      var $74=$sp;
      var $75=(($74+1)|0);
      $sp=$75;
      __label__ = 52; break;
    case 13: 
      __label__ = 52; break;
    case 14: 
      var $78=$sp;
      var $79=(($78+1)|0);
      $sp=$79;
      __label__ = 52; break;
    case 15: 
      __label__ = 52; break;
    case 16: 
      var $82=$3;
      $stp=$82;
      __label__ = 17; break;
    case 17: 
      var $84=$1;
      var $85=$sp;
      var $86=$stp;
      var $87=$ss;
      var $88=$es;
      var $89=_sslow($84, $85, $86, $87, $88);
      $rest=$89;
      var $90=$1;
      var $91=$rest;
      var $92=$3;
      var $93=$es;
      var $94=$5;
      var $95=_sslow($90, $91, $92, $93, $94);
      $tail=$95;
      var $96=$tail;
      var $97=$3;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $101=$rest;
      var $102=((($101)-(1))|0);
      $stp=$102;
      __label__ = 17; break;
    case 20: 
      var $104=$ss;
      var $105=((($104)+(1))|0);
      $ssub=$105;
      var $106=$es;
      var $107=((($106)-(1))|0);
      $esub=$107;
      var $108=$1;
      var $109=$sp;
      var $110=$rest;
      var $111=$ssub;
      var $112=$esub;
      var $113=_sslow($108, $109, $110, $111, $112);
      var $114=(($113)|0)!=0;
      if ($114) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $116=$1;
      var $117=$sp;
      var $118=$rest;
      var $119=$ssub;
      var $120=$esub;
      var $121=_sdissect($116, $117, $118, $119, $120);
      $dp=$121;
      var $122=$dp;
      __label__ = 23; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $125=$rest;
      $sp=$125;
      __label__ = 52; break;
    case 24: 
      var $127=$3;
      $stp=$127;
      __label__ = 25; break;
    case 25: 
      var $129=$1;
      var $130=$sp;
      var $131=$stp;
      var $132=$ss;
      var $133=$es;
      var $134=_sslow($129, $130, $131, $132, $133);
      $rest=$134;
      var $135=$1;
      var $136=$rest;
      var $137=$3;
      var $138=$es;
      var $139=$5;
      var $140=_sslow($135, $136, $137, $138, $139);
      $tail=$140;
      var $141=$tail;
      var $142=$3;
      var $143=(($141)|0)==(($142)|0);
      if ($143) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 28; break;
    case 27: 
      var $146=$rest;
      var $147=((($146)-(1))|0);
      $stp=$147;
      __label__ = 25; break;
    case 28: 
      var $149=$ss;
      var $150=((($149)+(1))|0);
      $ssub=$150;
      var $151=$es;
      var $152=((($151)-(1))|0);
      $esub=$152;
      var $153=$sp;
      $ssp=$153;
      var $154=$ssp;
      $oldssp=$154;
      __label__ = 29; break;
    case 29: 
      var $156=$1;
      var $157=$ssp;
      var $158=$rest;
      var $159=$ssub;
      var $160=$esub;
      var $161=_sslow($156, $157, $158, $159, $160);
      $sep=$161;
      var $162=$sep;
      var $163=(($162)|0)==0;
      if ($163) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $165=$sep;
      var $166=$ssp;
      var $167=(($165)|0)==(($166)|0);
      if ($167) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $170=$ssp;
      $oldssp=$170;
      var $171=$sep;
      $ssp=$171;
      __label__ = 29; break;
    case 33: 
      var $173=$sep;
      var $174=(($173)|0)==0;
      if ($174) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $176=$ssp;
      $sep=$176;
      var $177=$oldssp;
      $ssp=$177;
      __label__ = 35; break;
    case 35: 
      var $179=$1;
      var $180=$ssp;
      var $181=$sep;
      var $182=$ssub;
      var $183=$esub;
      var $184=_sdissect($179, $180, $181, $182, $183);
      $dp1=$184;
      var $185=$dp1;
      var $186=$rest;
      $sp=$186;
      __label__ = 52; break;
    case 36: 
      var $188=$3;
      $stp=$188;
      __label__ = 37; break;
    case 37: 
      var $190=$1;
      var $191=$sp;
      var $192=$stp;
      var $193=$ss;
      var $194=$es;
      var $195=_sslow($190, $191, $192, $193, $194);
      $rest=$195;
      var $196=$1;
      var $197=$rest;
      var $198=$3;
      var $199=$es;
      var $200=$5;
      var $201=_sslow($196, $197, $198, $199, $200);
      $tail=$201;
      var $202=$tail;
      var $203=$3;
      var $204=(($202)|0)==(($203)|0);
      if ($204) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      __label__ = 40; break;
    case 39: 
      var $207=$rest;
      var $208=((($207)-(1))|0);
      $stp=$208;
      __label__ = 37; break;
    case 40: 
      var $210=$ss;
      var $211=((($210)+(1))|0);
      $ssub=$211;
      var $212=$ss;
      var $213=$ss;
      var $214=$1;
      var $215=(($214)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+4)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+($213<<2))|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$220 & 134217727;
      var $222=((($212)+($221))|0);
      var $223=((($222)-(1))|0);
      $esub=$223;
      __label__ = 41; break;
    case 41: 
      var $225=$1;
      var $226=$sp;
      var $227=$rest;
      var $228=$ssub;
      var $229=$esub;
      var $230=_sslow($225, $226, $227, $228, $229);
      var $231=$rest;
      var $232=(($230)|0)==(($231)|0);
      if ($232) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      __label__ = 47; break;
    case 43: 
      var $235=$esub;
      var $236=((($235)+(1))|0);
      $esub=$236;
      var $237=$esub;
      var $238=((($237)+(1))|0);
      $ssub=$238;
      var $239=$esub;
      var $240=$1;
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=(($242+4)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+($239<<2))|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$246 & 134217727;
      var $248=$esub;
      var $249=((($248)+($247))|0);
      $esub=$249;
      var $250=$esub;
      var $251=$1;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+4)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=(($255+($250<<2))|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$257 & -134217728;
      var $259=(($258)|0)==-2013265920;
      if ($259) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $261=$esub;
      var $262=((($261)-(1))|0);
      $esub=$262;
      __label__ = 46; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 41; break;
    case 47: 
      var $266=$1;
      var $267=$sp;
      var $268=$rest;
      var $269=$ssub;
      var $270=$esub;
      var $271=_sdissect($266, $267, $268, $269, $270);
      $dp2=$271;
      var $272=$dp2;
      var $273=$rest;
      $sp=$273;
      __label__ = 52; break;
    case 48: 
      __label__ = 52; break;
    case 49: 
      var $276=$ss;
      var $277=$1;
      var $278=(($277)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+4)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281+($276<<2))|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=$283 & 134217727;
      $i=$284;
      var $285=$sp;
      var $286=$1;
      var $287=(($286+12)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$285;
      var $290=$288;
      var $291=((($289)-($290))|0);
      var $292=$i;
      var $293=$1;
      var $294=(($293+8)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=(($295+($292<<3))|0);
      var $297=(($296)|0);
      HEAP32[(($297)>>2)]=$291;
      __label__ = 52; break;
    case 50: 
      var $299=$ss;
      var $300=$1;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302+4)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+($299<<2))|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=$306 & 134217727;
      $i=$307;
      var $308=$sp;
      var $309=$1;
      var $310=(($309+12)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=$308;
      var $313=$311;
      var $314=((($312)-($313))|0);
      var $315=$i;
      var $316=$1;
      var $317=(($316+8)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($318+($315<<3))|0);
      var $320=(($319+4)|0);
      HEAP32[(($320)>>2)]=$314;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $324=$es;
      $ss=$324;
      __label__ = 3; break;
    case 54: 
      var $326=$sp;
      ;
      return $326;
    default: assert(0, "bad label: " + __label__);
  }
}
_sdissect["X"]=1;

function _sbackref($m, $start, $stop, $startst, $stopst, $lev, $rec) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $ss;
      var $sp;
      var $ssub;
      var $esub;
      var $ssp;
      var $dp;
      var $len;
      var $hard;
      var $s;
      var $offsave;
      var $cs;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      $7=$lev;
      $8=$rec;
      var $9=$3;
      $sp=$9;
      $hard=0;
      var $10=$5;
      $ss=$10;
      __label__ = 3; break;
    case 3: 
      var $12=$hard;
      var $13=(($12)|0)!=0;
      if ($13) { var $19 = 0;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $15=$ss;
      var $16=$6;
      var $17=(($15)|0) < (($16)|0);
      var $19 = $17;__label__ = 5; break;
    case 5: 
      var $19;
      if ($19) { __label__ = 6; break; } else { __label__ = 70; break; }
    case 6: 
      var $21=$ss;
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($21<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $s=$28;
      var $29=$28 & -134217728;
      if ((($29)|0) == 268435456) {
        __label__ = 7; break;
      }
      else if ((($29)|0) == 671088640) {
        __label__ = 11; break;
      }
      else if ((($29)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($29)|0) == 402653184) {
        __label__ = 18; break;
      }
      else if ((($29)|0) == 536870912) {
        __label__ = 26; break;
      }
      else if ((($29)|0) == -1744830464) {
        __label__ = 34; break;
      }
      else if ((($29)|0) == -1610612736) {
        __label__ = 48; break;
      }
      else if ((($29)|0) == 1610612736) {
        __label__ = 62; break;
      }
      else if ((($29)|0) == -2147483648) {
        __label__ = 63; break;
      }
      else {
      __label__ = 67; break;
      }
      
    case 7: 
      var $31=$sp;
      var $32=$4;
      var $33=(($31)|0)==(($32)|0);
      if ($33) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $35=$sp;
      var $36=(($35+1)|0);
      $sp=$36;
      var $37=HEAP8[($35)];
      var $38=(($37 << 24) >> 24);
      var $39=$s;
      var $40=$39 & 134217727;
      var $41=(($40) & 255);
      var $42=(($41 << 24) >> 24);
      var $43=(($38)|0)!=(($42)|0);
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $1=0;
      __label__ = 114; break;
    case 10: 
      __label__ = 68; break;
    case 11: 
      var $47=$sp;
      var $48=$4;
      var $49=(($47)|0)==(($48)|0);
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $1=0;
      __label__ = 114; break;
    case 13: 
      var $52=$sp;
      var $53=(($52+1)|0);
      $sp=$53;
      __label__ = 68; break;
    case 14: 
      var $55=$s;
      var $56=$55 & 134217727;
      var $57=$2;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($56<<4))|0);
      $cs=$62;
      var $63=$sp;
      var $64=$4;
      var $65=(($63)|0)==(($64)|0);
      if ($65) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $67=$sp;
      var $68=(($67+1)|0);
      $sp=$68;
      var $69=HEAPU8[($67)];
      var $70=(($69)&255);
      var $71=$cs;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAPU8[($74)];
      var $76=(($75)&255);
      var $77=$cs;
      var $78=(($77+4)|0);
      var $79=HEAPU8[($78)];
      var $80=(($79)&255);
      var $81=$76 & $80;
      var $82=(($81)|0)!=0;
      if ($82) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      $1=0;
      __label__ = 114; break;
    case 17: 
      __label__ = 68; break;
    case 18: 
      var $86=$sp;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($86)|0)==(($89)|0);
      if ($90) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$94 & 1;
      var $96=(($95)|0)!=0;
      if ($96) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: 
      var $98=$sp;
      var $99=$2;
      var $100=(($99+20)|0);
      var $101=HEAPU32[(($100)>>2)];
      var $102=(($98)>>>0) < (($101)>>>0);
      if ($102) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $104=$sp;
      var $105=((($104)-(1))|0);
      var $106=HEAP8[($105)];
      var $107=(($106 << 24) >> 24);
      var $108=(($107)|0)==10;
      if ($108) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $110=$2;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & 8;
      var $116=(($115)|0)!=0;
      if ($116) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 25; break;
    case 24: 
      $1=0;
      __label__ = 114; break;
    case 25: 
      __label__ = 68; break;
    case 26: 
      var $121=$sp;
      var $122=$2;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($121)|0)==(($124)|0);
      if ($125) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $127=$2;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129 & 2;
      var $131=(($130)|0)!=0;
      if ($131) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $133=$sp;
      var $134=$2;
      var $135=(($134+20)|0);
      var $136=HEAPU32[(($135)>>2)];
      var $137=(($133)>>>0) < (($136)>>>0);
      if ($137) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $139=$sp;
      var $140=HEAP8[($139)];
      var $141=(($140 << 24) >> 24);
      var $142=(($141)|0)==10;
      if ($142) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $144=$2;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+24)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 & 8;
      var $150=(($149)|0)!=0;
      if ($150) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      $1=0;
      __label__ = 114; break;
    case 33: 
      __label__ = 68; break;
    case 34: 
      var $155=$sp;
      var $156=$2;
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($155)|0)==(($158)|0);
      if ($159) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $161=$2;
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$163 & 1;
      var $165=(($164)|0)!=0;
      if ($165) { __label__ = 36; break; } else { __label__ = 42; break; }
    case 36: 
      var $167=$sp;
      var $168=$2;
      var $169=(($168+20)|0);
      var $170=HEAPU32[(($169)>>2)];
      var $171=(($167)>>>0) < (($170)>>>0);
      if ($171) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $173=$sp;
      var $174=((($173)-(1))|0);
      var $175=HEAP8[($174)];
      var $176=(($175 << 24) >> 24);
      var $177=(($176)|0)==10;
      if ($177) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $179=$2;
      var $180=(($179)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+24)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & 8;
      var $185=(($184)|0)!=0;
      if ($185) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $187=$sp;
      var $188=$2;
      var $189=(($188+16)|0);
      var $190=HEAPU32[(($189)>>2)];
      var $191=(($187)>>>0) > (($190)>>>0);
      if ($191) { __label__ = 40; break; } else { __label__ = 46; break; }
    case 40: 
      var $193=$sp;
      var $194=((($193)-(1))|0);
      var $195=HEAP8[($194)];
      var $196=(($195 << 24) >> 24);
      var $197=$196 & 255;
      var $198=_isalnum($197);
      var $199=(($198)|0)!=0;
      if ($199) { __label__ = 46; break; } else { __label__ = 41; break; }
    case 41: 
      var $201=$sp;
      var $202=((($201)-(1))|0);
      var $203=HEAP8[($202)];
      var $204=(($203 << 24) >> 24);
      var $205=(($204)|0)==95;
      if ($205) { __label__ = 46; break; } else { __label__ = 42; break; }
    case 42: 
      var $207=$sp;
      var $208=$2;
      var $209=(($208+20)|0);
      var $210=HEAPU32[(($209)>>2)];
      var $211=(($207)>>>0) < (($210)>>>0);
      if ($211) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $213=$sp;
      var $214=HEAP8[($213)];
      var $215=(($214 << 24) >> 24);
      var $216=$215 & 255;
      var $217=_isalnum($216);
      var $218=(($217)|0)!=0;
      if ($218) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $220=$sp;
      var $221=HEAP8[($220)];
      var $222=(($221 << 24) >> 24);
      var $223=(($222)|0)==95;
      if ($223) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      __label__ = 47; break;
    case 46: 
      $1=0;
      __label__ = 114; break;
    case 47: 
      __label__ = 68; break;
    case 48: 
      var $228=$sp;
      var $229=$2;
      var $230=(($229+20)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($228)|0)==(($231)|0);
      if ($232) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $234=$2;
      var $235=(($234+4)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=$236 & 2;
      var $238=(($237)|0)!=0;
      if ($238) { __label__ = 50; break; } else { __label__ = 56; break; }
    case 50: 
      var $240=$sp;
      var $241=$2;
      var $242=(($241+20)|0);
      var $243=HEAPU32[(($242)>>2)];
      var $244=(($240)>>>0) < (($243)>>>0);
      if ($244) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $246=$sp;
      var $247=HEAP8[($246)];
      var $248=(($247 << 24) >> 24);
      var $249=(($248)|0)==10;
      if ($249) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $251=$2;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+24)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=$255 & 8;
      var $257=(($256)|0)!=0;
      if ($257) { __label__ = 56; break; } else { __label__ = 53; break; }
    case 53: 
      var $259=$sp;
      var $260=$2;
      var $261=(($260+20)|0);
      var $262=HEAPU32[(($261)>>2)];
      var $263=(($259)>>>0) < (($262)>>>0);
      if ($263) { __label__ = 54; break; } else { __label__ = 60; break; }
    case 54: 
      var $265=$sp;
      var $266=HEAP8[($265)];
      var $267=(($266 << 24) >> 24);
      var $268=$267 & 255;
      var $269=_isalnum($268);
      var $270=(($269)|0)!=0;
      if ($270) { __label__ = 60; break; } else { __label__ = 55; break; }
    case 55: 
      var $272=$sp;
      var $273=HEAP8[($272)];
      var $274=(($273 << 24) >> 24);
      var $275=(($274)|0)==95;
      if ($275) { __label__ = 60; break; } else { __label__ = 56; break; }
    case 56: 
      var $277=$sp;
      var $278=$2;
      var $279=(($278+16)|0);
      var $280=HEAPU32[(($279)>>2)];
      var $281=(($277)>>>0) > (($280)>>>0);
      if ($281) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $283=$sp;
      var $284=((($283)-(1))|0);
      var $285=HEAP8[($284)];
      var $286=(($285 << 24) >> 24);
      var $287=$286 & 255;
      var $288=_isalnum($287);
      var $289=(($288)|0)!=0;
      if ($289) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $291=$sp;
      var $292=((($291)-(1))|0);
      var $293=HEAP8[($292)];
      var $294=(($293 << 24) >> 24);
      var $295=(($294)|0)==95;
      if ($295) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 61; break;
    case 60: 
      $1=0;
      __label__ = 114; break;
    case 61: 
      __label__ = 68; break;
    case 62: 
      __label__ = 68; break;
    case 63: 
      var $301=$ss;
      var $302=((($301)+(1))|0);
      $ss=$302;
      var $303=$ss;
      var $304=$2;
      var $305=(($304)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+4)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=(($308+($303<<2))|0);
      var $310=HEAP32[(($309)>>2)];
      $s=$310;
      __label__ = 64; break;
    case 64: 
      var $312=$s;
      var $313=$312 & 134217727;
      var $314=$ss;
      var $315=((($314)+($313))|0);
      $ss=$315;
      __label__ = 65; break;
    case 65: 
      var $317=$ss;
      var $318=$2;
      var $319=(($318)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+4)|0);
      var $322=HEAP32[(($321)>>2)];
      var $323=(($322+($317<<2))|0);
      var $324=HEAP32[(($323)>>2)];
      $s=$324;
      var $325=$324 & -134217728;
      var $326=(($325)|0)!=-1879048192;
      if ($326) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 66: 
      __label__ = 68; break;
    case 67: 
      $hard=1;
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $331=$ss;
      var $332=((($331)+(1))|0);
      $ss=$332;
      __label__ = 3; break;
    case 70: 
      var $334=$hard;
      var $335=(($334)|0)!=0;
      if ($335) { __label__ = 74; break; } else { __label__ = 71; break; }
    case 71: 
      var $337=$sp;
      var $338=$4;
      var $339=(($337)|0)!=(($338)|0);
      if ($339) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      $1=0;
      __label__ = 114; break;
    case 73: 
      var $342=$sp;
      $1=$342;
      __label__ = 114; break;
    case 74: 
      var $344=$ss;
      var $345=((($344)-(1))|0);
      $ss=$345;
      var $346=$ss;
      var $347=$2;
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($349+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+($346<<2))|0);
      var $353=HEAP32[(($352)>>2)];
      $s=$353;
      var $354=$s;
      var $355=$354 & -134217728;
      if ((($355)|0) == 939524096) {
        __label__ = 75; break;
      }
      else if ((($355)|0) == 1476395008) {
        __label__ = 88; break;
      }
      else if ((($355)|0) == 1207959552) {
        __label__ = 91; break;
      }
      else if ((($355)|0) == 1342177280) {
        __label__ = 92; break;
      }
      else if ((($355)|0) == 2013265920) {
        __label__ = 97; break;
      }
      else if ((($355)|0) == 1744830464) {
        __label__ = 106; break;
      }
      else if ((($355)|0) == 1879048192) {
        __label__ = 109; break;
      }
      else {
      __label__ = 112; break;
      }
      
    case 75: 
      var $357=$s;
      var $358=$357 & 134217727;
      $i=$358;
      var $359=$i;
      var $360=$2;
      var $361=(($360+8)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=(($362+($359<<3))|0);
      var $364=(($363+4)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365)|0)==-1;
      if ($366) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      $1=0;
      __label__ = 114; break;
    case 77: 
      var $369=$i;
      var $370=$2;
      var $371=(($370+8)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=(($372+($369<<3))|0);
      var $374=(($373+4)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$i;
      var $377=$2;
      var $378=(($377+8)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($379+($376<<3))|0);
      var $381=(($380)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=((($375)-($382))|0);
      $len=$383;
      var $384=$len;
      var $385=(($384)|0)==0;
      if ($385) { __label__ = 78; break; } else { __label__ = 80; break; }
    case 78: 
      var $387=$8;
      var $388=((($387)+(1))|0);
      $8=$388;
      var $389=(($387)|0) > 100;
      if ($389) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      $1=0;
      __label__ = 114; break;
    case 80: 
      var $392=$sp;
      var $393=$4;
      var $394=$len;
      var $395=(((-$394))|0);
      var $396=(($393+$395)|0);
      var $397=(($392)>>>0) > (($396)>>>0);
      if ($397) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      $1=0;
      __label__ = 114; break;
    case 82: 
      var $400=$2;
      var $401=(($400+12)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$i;
      var $404=$2;
      var $405=(($404+8)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=(($406+($403<<3))|0);
      var $408=(($407)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($402+$409)|0);
      $ssp=$410;
      var $411=$sp;
      var $412=$ssp;
      var $413=$len;
      var $414=_memcmp($411, $412, $413);
      var $415=(($414)|0)!=0;
      if ($415) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      $1=0;
      __label__ = 114; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      var $419=$ss;
      var $420=$2;
      var $421=(($420)|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=(($422+4)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=(($424+($419<<2))|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=$i;
      var $428=1073741824 | $427;
      var $429=(($426)|0)!=(($428)|0);
      if ($429) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $431=$ss;
      var $432=((($431)+(1))|0);
      $ss=$432;
      __label__ = 85; break;
    case 87: 
      var $434=$2;
      var $435=$sp;
      var $436=$len;
      var $437=(($435+$436)|0);
      var $438=$4;
      var $439=$ss;
      var $440=((($439)+(1))|0);
      var $441=$6;
      var $442=$7;
      var $443=$8;
      var $444=_sbackref($434, $437, $438, $440, $441, $442, $443);
      $1=$444;
      __label__ = 114; break;
    case 88: 
      var $446=$2;
      var $447=$sp;
      var $448=$4;
      var $449=$ss;
      var $450=((($449)+(1))|0);
      var $451=$6;
      var $452=$7;
      var $453=$8;
      var $454=_sbackref($446, $447, $448, $450, $451, $452, $453);
      $dp=$454;
      var $455=$dp;
      var $456=(($455)|0)!=0;
      if ($456) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      var $458=$dp;
      $1=$458;
      __label__ = 114; break;
    case 90: 
      var $460=$2;
      var $461=$sp;
      var $462=$4;
      var $463=$ss;
      var $464=$s;
      var $465=$464 & 134217727;
      var $466=((($463)+($465))|0);
      var $467=((($466)+(1))|0);
      var $468=$6;
      var $469=$7;
      var $470=$8;
      var $471=_sbackref($460, $461, $462, $467, $468, $469, $470);
      $1=$471;
      __label__ = 114; break;
    case 91: 
      var $473=$sp;
      var $474=$7;
      var $475=((($474)+(1))|0);
      var $476=$2;
      var $477=(($476+28)|0);
      var $478=HEAP32[(($477)>>2)];
      var $479=(($478+($475<<2))|0);
      HEAP32[(($479)>>2)]=$473;
      var $480=$2;
      var $481=$sp;
      var $482=$4;
      var $483=$ss;
      var $484=((($483)+(1))|0);
      var $485=$6;
      var $486=$7;
      var $487=((($486)+(1))|0);
      var $488=$8;
      var $489=_sbackref($480, $481, $482, $484, $485, $487, $488);
      $1=$489;
      __label__ = 114; break;
    case 92: 
      var $491=$sp;
      var $492=$7;
      var $493=$2;
      var $494=(($493+28)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=(($495+($492<<2))|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=(($491)|0)==(($497)|0);
      if ($498) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $500=$2;
      var $501=$sp;
      var $502=$4;
      var $503=$ss;
      var $504=((($503)+(1))|0);
      var $505=$6;
      var $506=$7;
      var $507=((($506)-(1))|0);
      var $508=$8;
      var $509=_sbackref($500, $501, $502, $504, $505, $507, $508);
      $1=$509;
      __label__ = 114; break;
    case 94: 
      var $511=$sp;
      var $512=$7;
      var $513=$2;
      var $514=(($513+28)|0);
      var $515=HEAP32[(($514)>>2)];
      var $516=(($515+($512<<2))|0);
      HEAP32[(($516)>>2)]=$511;
      var $517=$2;
      var $518=$sp;
      var $519=$4;
      var $520=$ss;
      var $521=$s;
      var $522=$521 & 134217727;
      var $523=((($520)-($522))|0);
      var $524=((($523)+(1))|0);
      var $525=$6;
      var $526=$7;
      var $527=$8;
      var $528=_sbackref($517, $518, $519, $524, $525, $526, $527);
      $dp=$528;
      var $529=$dp;
      var $530=(($529)|0)==0;
      if ($530) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      var $532=$2;
      var $533=$sp;
      var $534=$4;
      var $535=$ss;
      var $536=((($535)+(1))|0);
      var $537=$6;
      var $538=$7;
      var $539=((($538)-(1))|0);
      var $540=$8;
      var $541=_sbackref($532, $533, $534, $536, $537, $539, $540);
      $1=$541;
      __label__ = 114; break;
    case 96: 
      var $543=$dp;
      $1=$543;
      __label__ = 114; break;
    case 97: 
      var $545=$ss;
      var $546=((($545)+(1))|0);
      $ssub=$546;
      var $547=$ss;
      var $548=$s;
      var $549=$548 & 134217727;
      var $550=((($547)+($549))|0);
      var $551=((($550)-(1))|0);
      $esub=$551;
      __label__ = 98; break;
    case 98: 
      var $553=$2;
      var $554=$sp;
      var $555=$4;
      var $556=$ssub;
      var $557=$esub;
      var $558=$7;
      var $559=$8;
      var $560=_sbackref($553, $554, $555, $556, $557, $558, $559);
      $dp=$560;
      var $561=$dp;
      var $562=(($561)|0)!=0;
      if ($562) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $564=$dp;
      $1=$564;
      __label__ = 114; break;
    case 100: 
      var $566=$esub;
      var $567=$2;
      var $568=(($567)|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=(($569+4)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=(($571+($566<<2))|0);
      var $573=HEAP32[(($572)>>2)];
      var $574=$573 & -134217728;
      var $575=(($574)|0)==-1879048192;
      if ($575) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: 
      $1=0;
      __label__ = 114; break;
    case 102: 
      var $578=$esub;
      var $579=((($578)+(1))|0);
      $esub=$579;
      var $580=$esub;
      var $581=((($580)+(1))|0);
      $ssub=$581;
      var $582=$esub;
      var $583=$2;
      var $584=(($583)|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=(($585+4)|0);
      var $587=HEAP32[(($586)>>2)];
      var $588=(($587+($582<<2))|0);
      var $589=HEAP32[(($588)>>2)];
      var $590=$589 & 134217727;
      var $591=$esub;
      var $592=((($591)+($590))|0);
      $esub=$592;
      var $593=$esub;
      var $594=$2;
      var $595=(($594)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=(($596+4)|0);
      var $598=HEAP32[(($597)>>2)];
      var $599=(($598+($593<<2))|0);
      var $600=HEAP32[(($599)>>2)];
      var $601=$600 & -134217728;
      var $602=(($601)|0)==-2013265920;
      if ($602) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $604=$esub;
      var $605=((($604)-(1))|0);
      $esub=$605;
      __label__ = 105; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      __label__ = 98; break;
    case 106: 
      var $609=$s;
      var $610=$609 & 134217727;
      $i=$610;
      var $611=$i;
      var $612=$2;
      var $613=(($612+8)|0);
      var $614=HEAP32[(($613)>>2)];
      var $615=(($614+($611<<3))|0);
      var $616=(($615)|0);
      var $617=HEAP32[(($616)>>2)];
      $offsave=$617;
      var $618=$sp;
      var $619=$2;
      var $620=(($619+12)|0);
      var $621=HEAP32[(($620)>>2)];
      var $622=$618;
      var $623=$621;
      var $624=((($622)-($623))|0);
      var $625=$i;
      var $626=$2;
      var $627=(($626+8)|0);
      var $628=HEAP32[(($627)>>2)];
      var $629=(($628+($625<<3))|0);
      var $630=(($629)|0);
      HEAP32[(($630)>>2)]=$624;
      var $631=$2;
      var $632=$sp;
      var $633=$4;
      var $634=$ss;
      var $635=((($634)+(1))|0);
      var $636=$6;
      var $637=$7;
      var $638=$8;
      var $639=_sbackref($631, $632, $633, $635, $636, $637, $638);
      $dp=$639;
      var $640=$dp;
      var $641=(($640)|0)!=0;
      if ($641) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $643=$dp;
      $1=$643;
      __label__ = 114; break;
    case 108: 
      var $645=$offsave;
      var $646=$i;
      var $647=$2;
      var $648=(($647+8)|0);
      var $649=HEAP32[(($648)>>2)];
      var $650=(($649+($646<<3))|0);
      var $651=(($650)|0);
      HEAP32[(($651)>>2)]=$645;
      $1=0;
      __label__ = 114; break;
    case 109: 
      var $653=$s;
      var $654=$653 & 134217727;
      $i=$654;
      var $655=$i;
      var $656=$2;
      var $657=(($656+8)|0);
      var $658=HEAP32[(($657)>>2)];
      var $659=(($658+($655<<3))|0);
      var $660=(($659+4)|0);
      var $661=HEAP32[(($660)>>2)];
      $offsave=$661;
      var $662=$sp;
      var $663=$2;
      var $664=(($663+12)|0);
      var $665=HEAP32[(($664)>>2)];
      var $666=$662;
      var $667=$665;
      var $668=((($666)-($667))|0);
      var $669=$i;
      var $670=$2;
      var $671=(($670+8)|0);
      var $672=HEAP32[(($671)>>2)];
      var $673=(($672+($669<<3))|0);
      var $674=(($673+4)|0);
      HEAP32[(($674)>>2)]=$668;
      var $675=$2;
      var $676=$sp;
      var $677=$4;
      var $678=$ss;
      var $679=((($678)+(1))|0);
      var $680=$6;
      var $681=$7;
      var $682=$8;
      var $683=_sbackref($675, $676, $677, $679, $680, $681, $682);
      $dp=$683;
      var $684=$dp;
      var $685=(($684)|0)!=0;
      if ($685) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      var $687=$dp;
      $1=$687;
      __label__ = 114; break;
    case 111: 
      var $689=$offsave;
      var $690=$i;
      var $691=$2;
      var $692=(($691+8)|0);
      var $693=HEAP32[(($692)>>2)];
      var $694=(($693+($690<<3))|0);
      var $695=(($694+4)|0);
      HEAP32[(($695)>>2)]=$689;
      $1=0;
      __label__ = 114; break;
    case 112: 
      __label__ = 113; break;
    case 113: 
      $1=0;
      __label__ = 114; break;
    case 114: 
      var $699=$1;
      ;
      return $699;
    default: assert(0, "bad label: " + __label__);
  }
}
_sbackref["X"]=1;

function _sstep($g, $start, $stop, $bef, $ch, $aft) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cs;
      var $s;
      var $pc;
      var $here;
      var $look;
      var $i;
      $1=$g;
      $2=$start;
      $3=$stop;
      $4=$bef;
      $5=$ch;
      $6=$aft;
      var $7=$2;
      $pc=$7;
      var $8=$pc;
      var $9=1 << $8;
      $here=$9;
      __label__ = 3; break;
    case 3: 
      var $11=$pc;
      var $12=$3;
      var $13=(($11)|0)!=(($12)|0);
      if ($13) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $15=$pc;
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($15<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      $s=$20;
      var $21=$s;
      var $22=$21 & -134217728;
      if ((($22)|0) == 134217728) {
        __label__ = 5; break;
      }
      else if ((($22)|0) == 268435456) {
        __label__ = 6; break;
      }
      else if ((($22)|0) == 402653184) {
        __label__ = 9; break;
      }
      else if ((($22)|0) == 536870912) {
        __label__ = 13; break;
      }
      else if ((($22)|0) == -1744830464) {
        __label__ = 17; break;
      }
      else if ((($22)|0) == -1610612736) {
        __label__ = 20; break;
      }
      else if ((($22)|0) == 671088640) {
        __label__ = 23; break;
      }
      else if ((($22)|0) == 805306368) {
        __label__ = 26; break;
      }
      else if ((($22)|0) == 939524096 || (($22)|0) == 1073741824) {
        __label__ = 30; break;
      }
      else if ((($22)|0) == 1207959552) {
        __label__ = 31; break;
      }
      else if ((($22)|0) == 1342177280) {
        __label__ = 32; break;
      }
      else if ((($22)|0) == 1476395008) {
        __label__ = 36; break;
      }
      else if ((($22)|0) == 1610612736) {
        __label__ = 37; break;
      }
      else if ((($22)|0) == 1744830464 || (($22)|0) == 1879048192) {
        __label__ = 38; break;
      }
      else if ((($22)|0) == 2013265920) {
        __label__ = 39; break;
      }
      else if ((($22)|0) == -2147483648) {
        __label__ = 40; break;
      }
      else if ((($22)|0) == -2013265920) {
        __label__ = 47; break;
      }
      else if ((($22)|0) == -1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 5: 
      __label__ = 52; break;
    case 6: 
      var $25=$5;
      var $26=$s;
      var $27=$26 & 134217727;
      var $28=(($27) & 255);
      var $29=(($28 << 24) >> 24);
      var $30=(($25)|0)==(($29)|0);
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $32=$4;
      var $33=$here;
      var $34=$32 & $33;
      var $35=$34 << 1;
      var $36=$6;
      var $37=$36 | $35;
      $6=$37;
      __label__ = 8; break;
    case 8: 
      __label__ = 52; break;
    case 9: 
      var $40=$5;
      var $41=(($40)|0)==129;
      if ($41) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $43=$5;
      var $44=(($43)|0)==131;
      if ($44) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $46=$4;
      var $47=$here;
      var $48=$46 & $47;
      var $49=$48 << 1;
      var $50=$6;
      var $51=$50 | $49;
      $6=$51;
      __label__ = 12; break;
    case 12: 
      __label__ = 52; break;
    case 13: 
      var $54=$5;
      var $55=(($54)|0)==130;
      if ($55) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $57=$5;
      var $58=(($57)|0)==131;
      if ($58) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $60=$4;
      var $61=$here;
      var $62=$60 & $61;
      var $63=$62 << 1;
      var $64=$6;
      var $65=$64 | $63;
      $6=$65;
      __label__ = 16; break;
    case 16: 
      __label__ = 52; break;
    case 17: 
      var $68=$5;
      var $69=(($68)|0)==133;
      if ($69) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $71=$4;
      var $72=$here;
      var $73=$71 & $72;
      var $74=$73 << 1;
      var $75=$6;
      var $76=$75 | $74;
      $6=$76;
      __label__ = 19; break;
    case 19: 
      __label__ = 52; break;
    case 20: 
      var $79=$5;
      var $80=(($79)|0)==134;
      if ($80) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $82=$4;
      var $83=$here;
      var $84=$82 & $83;
      var $85=$84 << 1;
      var $86=$6;
      var $87=$86 | $85;
      $6=$87;
      __label__ = 22; break;
    case 22: 
      __label__ = 52; break;
    case 23: 
      var $90=$5;
      var $91=(($90)|0) > 127;
      if ($91) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $93=$4;
      var $94=$here;
      var $95=$93 & $94;
      var $96=$95 << 1;
      var $97=$6;
      var $98=$97 | $96;
      $6=$98;
      __label__ = 25; break;
    case 25: 
      __label__ = 52; break;
    case 26: 
      var $101=$s;
      var $102=$101 & 134217727;
      var $103=$1;
      var $104=(($103+16)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+($102<<4))|0);
      $cs=$106;
      var $107=$5;
      var $108=(($107)|0) > 127;
      if ($108) { __label__ = 29; break; } else { __label__ = 27; break; }
    case 27: 
      var $110=$5;
      var $111=(($110) & 255);
      var $112=(($111)&255);
      var $113=$cs;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+$112)|0);
      var $117=HEAPU8[($116)];
      var $118=(($117)&255);
      var $119=$cs;
      var $120=(($119+4)|0);
      var $121=HEAPU8[($120)];
      var $122=(($121)&255);
      var $123=$118 & $122;
      var $124=(($123)|0)!=0;
      if ($124) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $126=$4;
      var $127=$here;
      var $128=$126 & $127;
      var $129=$128 << 1;
      var $130=$6;
      var $131=$130 | $129;
      $6=$131;
      __label__ = 29; break;
    case 29: 
      __label__ = 52; break;
    case 30: 
      var $134=$6;
      var $135=$here;
      var $136=$134 & $135;
      var $137=$136 << 1;
      var $138=$6;
      var $139=$138 | $137;
      $6=$139;
      __label__ = 52; break;
    case 31: 
      var $141=$6;
      var $142=$here;
      var $143=$141 & $142;
      var $144=$143 << 1;
      var $145=$6;
      var $146=$145 | $144;
      $6=$146;
      __label__ = 52; break;
    case 32: 
      var $148=$6;
      var $149=$here;
      var $150=$148 & $149;
      var $151=$150 << 1;
      var $152=$6;
      var $153=$152 | $151;
      $6=$153;
      var $154=$6;
      var $155=$here;
      var $156=$s;
      var $157=$156 & 134217727;
      var $158=$155 >>> (($157)>>>0);
      var $159=$154 & $158;
      var $160=(($159)|0)!=0;
      var $161=(($160)&1);
      $i=$161;
      var $162=$6;
      var $163=$here;
      var $164=$162 & $163;
      var $165=$s;
      var $166=$165 & 134217727;
      var $167=$164 >>> (($166)>>>0);
      var $168=$6;
      var $169=$168 | $167;
      $6=$169;
      var $170=$i;
      var $171=(($170)|0)!=0;
      if ($171) { __label__ = 35; break; } else { __label__ = 33; break; }
    case 33: 
      var $173=$6;
      var $174=$here;
      var $175=$s;
      var $176=$175 & 134217727;
      var $177=$174 >>> (($176)>>>0);
      var $178=$173 & $177;
      var $179=(($178)|0)!=0;
      if ($179) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $181=$s;
      var $182=$181 & 134217727;
      var $183=((($182)+(1))|0);
      var $184=$pc;
      var $185=((($184)-($183))|0);
      $pc=$185;
      var $186=$pc;
      var $187=1 << $186;
      $here=$187;
      __label__ = 35; break;
    case 35: 
      __label__ = 52; break;
    case 36: 
      var $190=$6;
      var $191=$here;
      var $192=$190 & $191;
      var $193=$192 << 1;
      var $194=$6;
      var $195=$194 | $193;
      $6=$195;
      var $196=$6;
      var $197=$here;
      var $198=$196 & $197;
      var $199=$s;
      var $200=$199 & 134217727;
      var $201=$198 << $200;
      var $202=$6;
      var $203=$202 | $201;
      $6=$203;
      __label__ = 52; break;
    case 37: 
      var $205=$6;
      var $206=$here;
      var $207=$205 & $206;
      var $208=$207 << 1;
      var $209=$6;
      var $210=$209 | $208;
      $6=$210;
      __label__ = 52; break;
    case 38: 
      var $212=$6;
      var $213=$here;
      var $214=$212 & $213;
      var $215=$214 << 1;
      var $216=$6;
      var $217=$216 | $215;
      $6=$217;
      __label__ = 52; break;
    case 39: 
      var $219=$6;
      var $220=$here;
      var $221=$219 & $220;
      var $222=$221 << 1;
      var $223=$6;
      var $224=$223 | $222;
      $6=$224;
      var $225=$6;
      var $226=$here;
      var $227=$225 & $226;
      var $228=$s;
      var $229=$228 & 134217727;
      var $230=$227 << $229;
      var $231=$6;
      var $232=$231 | $230;
      $6=$232;
      __label__ = 52; break;
    case 40: 
      var $234=$6;
      var $235=$here;
      var $236=$234 & $235;
      var $237=(($236)|0)!=0;
      if ($237) { __label__ = 41; break; } else { __label__ = 46; break; }
    case 41: 
      $look=1;
      __label__ = 42; break;
    case 42: 
      var $240=$pc;
      var $241=$look;
      var $242=((($240)+($241))|0);
      var $243=$1;
      var $244=(($243+4)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=(($245+($242<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      $s=$247;
      var $248=$247 & -134217728;
      var $249=(($248)|0)!=-1879048192;
      if ($249) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $252=$s;
      var $253=$252 & 134217727;
      var $254=$look;
      var $255=((($254)+($253))|0);
      $look=$255;
      __label__ = 42; break;
    case 45: 
      var $257=$6;
      var $258=$here;
      var $259=$257 & $258;
      var $260=$look;
      var $261=$259 << $260;
      var $262=$6;
      var $263=$262 | $261;
      $6=$263;
      __label__ = 46; break;
    case 46: 
      __label__ = 52; break;
    case 47: 
      var $266=$6;
      var $267=$here;
      var $268=$266 & $267;
      var $269=$268 << 1;
      var $270=$6;
      var $271=$270 | $269;
      $6=$271;
      var $272=$pc;
      var $273=$s;
      var $274=$273 & 134217727;
      var $275=((($272)+($274))|0);
      var $276=$1;
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+($275<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$280 & -134217728;
      var $282=(($281)|0)!=-1879048192;
      if ($282) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $284=$6;
      var $285=$here;
      var $286=$284 & $285;
      var $287=$s;
      var $288=$287 & 134217727;
      var $289=$286 << $288;
      var $290=$6;
      var $291=$290 | $289;
      $6=$291;
      __label__ = 49; break;
    case 49: 
      __label__ = 52; break;
    case 50: 
      var $294=$6;
      var $295=$here;
      var $296=$294 & $295;
      var $297=$296 << 1;
      var $298=$6;
      var $299=$298 | $297;
      $6=$299;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $303=$pc;
      var $304=((($303)+(1))|0);
      $pc=$304;
      var $305=$here;
      var $306=$305 << 1;
      $here=$306;
      __label__ = 3; break;
    case 54: 
      var $308=$6;
      ;
      return $308;
    default: assert(0, "bad label: " + __label__);
  }
}
_sstep["X"]=1;

function _llvm_strlcpy($dst, $src, $siz) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $d;
      var $s;
      var $n;
      $1=$dst;
      $2=$src;
      $3=$siz;
      var $4=$1;
      $d=$4;
      var $5=$2;
      $s=$5;
      var $6=$3;
      $n=$6;
      var $7=$n;
      var $8=(($7)|0)!=0;
      if ($8) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $11=$n;
      var $12=((($11)-(1))|0);
      $n=$12;
      var $13=(($12)|0)!=0;
      if ($13) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $15=$s;
      var $16=(($15+1)|0);
      $s=$16;
      var $17=HEAP8[($15)];
      var $18=$d;
      var $19=(($18+1)|0);
      $d=$19;
      HEAP8[($18)]=$17;
      var $20=(($17 << 24) >> 24);
      var $21=(($20)|0)==0;
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 8; break;
    case 7: 
      __label__ = 4; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $26=$n;
      var $27=(($26)|0)==0;
      if ($27) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      var $29=$3;
      var $30=(($29)|0)!=0;
      if ($30) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $32=$d;
      HEAP8[($32)]=0;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $35=$s;
      var $36=(($35+1)|0);
      $s=$36;
      var $37=HEAP8[($35)];
      var $38=(($37 << 24) >> 24)!=0;
      if ($38) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 13; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $42=$s;
      var $43=$2;
      var $44=$42;
      var $45=$43;
      var $46=((($44)-($45))|0);
      var $47=((($46)-(1))|0);
      ;
      return $47;
    default: assert(0, "bad label: " + __label__);
  }
}
_llvm_strlcpy["X"]=1;

function _llvm_regfree($preg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      $1=$preg;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)!=62053;
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 16; break;
    case 4: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      $g=$10;
      var $11=$g;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $14=$g;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=53829;
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 16; break;
    case 7: 
      var $20=$1;
      var $21=(($20)|0);
      HEAP32[(($21)>>2)]=0;
      var $22=$g;
      var $23=(($22)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=$g;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)!=0;
      if ($27) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $29=$g;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      _free($32);
      __label__ = 9; break;
    case 9: 
      var $34=$g;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)!=0;
      if ($37) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $39=$g;
      var $40=(($39+16)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      _free($42);
      __label__ = 11; break;
    case 11: 
      var $44=$g;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0)!=0;
      if ($47) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $49=$g;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      _free($51);
      __label__ = 13; break;
    case 13: 
      var $53=$g;
      var $54=(($53+60)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0)!=0;
      if ($56) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $58=$g;
      var $59=(($58+60)|0);
      var $60=HEAP32[(($59)>>2)];
      _free($60);
      __label__ = 15; break;
    case 15: 
      var $62=$g;
      var $63=$62;
      _free($63);
      __label__ = 16; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_llvm_regfree["X"]=1;

function _init_magic() {
  ;
  var __label__;

  var $1=_magic_open(0);
  HEAP32[((_m)>>2)]=$1;
  var $2=HEAP32[((_m)>>2)];
  var $3=_magic_load($2, ((STRING_TABLE.__str487)|0));
  ;
  return;
}


function _webfile_check($data, $length) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $result;
      $1=$data;
      $2=$length;
      var $3=HEAP32[((_m)>>2)];
      var $4=(($3)|0)==0;
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      _init_magic();
      __label__ = 4; break;
    case 4: 
      var $7=HEAP32[((_m)>>2)];
      var $8=$1;
      var $9=$2;
      var $10=_magic_buffer($7, $8, $9);
      $result=$10;
      var $11=$result;
      var $12=(($11)|0)==0;
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $14=HEAP32[((_m)>>2)];
      var $15=_magic_error($14);
      var $16=_printf(((STRING_TABLE.__str1488)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$15,tempInt));
      __label__ = 7; break;
    case 6: 
      var $18=$result;
      var $19=_printf(((STRING_TABLE.__str2489)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$18,tempInt));
      __label__ = 7; break;
    case 7: 
      var $21=$result;
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1; //@line 4629 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)>>>0) <= 244; //@line 4629 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($3) { __label__ = 3; break; } else { __label__ = 38; break; } //@line 4629 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=$1; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) < 11; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $14 = 16;__label__ = 6; break; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $9=$1; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=((($9)+(4))|0); //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=((($10)+(7))|0); //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & -8; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14 = $12;__label__ = 6; break; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $14; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$14; //@line 4632 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$nb; //@line 4633 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$15 >>> 3; //@line 4633 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $idx=$16; //@line 4633 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=HEAPU32[((((__gm_)|0))>>2)]; //@line 4634 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$idx; //@line 4634 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$17 >>> (($18)>>>0); //@line 4634 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $smallbits=$19; //@line 4634 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$smallbits; //@line 4636 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$20 & 3; //@line 4636 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=(($21)|0)!=0; //@line 4636 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 4636 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $24=$smallbits; //@line 4638 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$24 ^ -1; //@line 4638 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$25 & 1; //@line 4638 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$idx; //@line 4638 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=((($27)+($26))|0); //@line 4638 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $idx=$28; //@line 4638 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$idx; //@line 4639 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$29 << 1; //@line 4639 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=((((__gm_+40)|0)+($30<<2))|0); //@line 4639 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4639 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 4639 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $b=$33; //@line 4639 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$b; //@line 4640 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=(($34+8)|0); //@line 4640 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 4640 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$36; //@line 4640 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$p; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+8)|0); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($38)>>2)]; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$39; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$b; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$F; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($40)|0)==(($41)|0); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $44=$idx; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=1 << $44; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$45 ^ -1; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[((((__gm_)|0))>>2)]; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$47 & $46; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$48; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $50=$F; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=(($51)>>>0) >= (($52)>>>0); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=(($53)&1); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=(($54)==(1)); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=(($55)|0)!=0; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($56) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $58=$F; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$b; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=(($59+8)|0); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$b; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$F; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+12)|0); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($63)>>2)]=$61; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      _abort(); //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4642 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $67=$idx; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$67 << 3; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$68 | 1; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$69 | 2; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$p; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($72)>>2)]=$70; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$p; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$73; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$idx; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$75 << 3; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(($74+$76)|0); //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$77; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=(($78+4)|0); //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($79)>>2)]; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$80 | 1; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($79)>>2)]=$81; //@line 4643 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$p; //@line 4644 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$82; //@line 4644 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+8)|0); //@line 4644 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$84; //@line 4644 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4646 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $86=$nb; //@line 4649 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4649 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=(($86)>>>0) > (($87)>>>0); //@line 4649 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($88) { __label__ = 15; break; } else { __label__ = 36; break; } //@line 4649 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $90=$smallbits; //@line 4650 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=(($90)|0)!=0; //@line 4650 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($91) { __label__ = 16; break; } else { __label__ = 31; break; } //@line 4650 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $93=$smallbits; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$idx; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$93 << $94; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$idx; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=1 << $96; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$97 << 1; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$idx; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=1 << $99; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$100 << 1; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=(((-$101))|0); //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$98 | $102; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$95 & $103; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leftbits=$104; //@line 4654 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$leftbits; //@line 4655 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$leftbits; //@line 4655 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=(((-$106))|0); //@line 4655 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$105 & $107; //@line 4655 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leastbit=$108; //@line 4655 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$leastbit; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=((($109)-(1))|0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$110; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$111 >>> 12; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=$112 & 16; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$113; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$K; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$114; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$K; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$116 >>> (($115)>>>0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$117; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$118 >>> 5; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$119 & 8; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$120; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$N; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=((($121)+($120))|0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$122; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$K; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$124 >>> (($123)>>>0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$125; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$126 >>> 2; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$127 & 4; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$128; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$N; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=((($129)+($128))|0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$130; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$K; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$132 >>> (($131)>>>0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$133; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$134 >>> 1; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$135 & 2; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$136; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$N; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=((($137)+($136))|0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$138; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$K; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$140 >>> (($139)>>>0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$141; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$142 >>> 1; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$143 & 1; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$144; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$N; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=((($145)+($144))|0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$146; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$K; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$148 >>> (($147)>>>0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$149; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$N; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$Y; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=((($150)+($151))|0); //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=$152; //@line 4656 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$i; //@line 4657 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$153 << 1; //@line 4657 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=((((__gm_+40)|0)+($154<<2))|0); //@line 4657 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4657 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 4657 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $b1=$157; //@line 4657 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$b1; //@line 4658 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+8)|0); //@line 4658 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4658 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p2=$160; //@line 4658 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$p2; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=(($161+8)|0); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($162)>>2)]; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F3=$163; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$b1; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=$F3; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=(($164)|0)==(($165)|0); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($166) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $168=$i; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=1 << $168; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$169 ^ -1; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[((((__gm_)|0))>>2)]; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$171 & $170; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$172; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $174=$F3; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=(($175)>>>0) >= (($176)>>>0); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)&1); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $179=(($178)==(1)); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $180=(($179)|0)!=0; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($180) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $182=$F3; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$b1; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=(($183+8)|0); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($184)>>2)]=$182; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$b1; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$F3; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $187=(($186+12)|0); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($187)>>2)]=$185; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      _abort(); //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4660 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $191=$i; //@line 4661 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$191 << 3; //@line 4661 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$nb; //@line 4661 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=((($192)-($193))|0); //@line 4661 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$194; //@line 4661 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=$nb; //@line 4666 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$195 | 1; //@line 4666 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$196 | 2; //@line 4666 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$p2; //@line 4666 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=(($198+4)|0); //@line 4666 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($199)>>2)]=$197; //@line 4666 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=$p2; //@line 4667 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $201=$200; //@line 4667 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$nb; //@line 4667 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=(($201+$202)|0); //@line 4667 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 4667 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $r=$204; //@line 4667 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$rsize; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=$205 | 1; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$r; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=(($207+4)|0); //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($208)>>2)]=$206; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$rsize; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$r; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=$210; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$rsize; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=(($211+$212)|0); //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $214=$213; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)|0); //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($215)>>2)]=$209; //@line 4668 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $216=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $DVS=$216; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $217=$DVS; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 23; break; } else { __label__ = 30; break; } //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $220=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $DV=$220; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=$DVS; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$221 >>> 3; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$222; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=$I; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$223 << 1; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $225=((((__gm_+40)|0)+($224<<2))|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=$225; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B=$227; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=$B; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F4=$228; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $229=HEAP32[((((__gm_)|0))>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230=$I; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $231=1 << $230; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $232=$229 & $231; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)|0)!=0; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($233) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $235=$I; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $236=1 << $235; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=HEAP32[((((__gm_)|0))>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $238=$237 | $236; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$238; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $240=$B; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $241=(($240+8)|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=$242; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $245=(($243)>>>0) >= (($244)>>>0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=(($245)&1); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0)!=0; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($248) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $250=$B; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+8)|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $252=HEAP32[(($251)>>2)]; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F4=$252; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $256=$DV; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $257=$B; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $258=(($257+8)|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($258)>>2)]=$256; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=$DV; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=$F4; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $261=(($260+12)|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $262=$F4; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $263=$DV; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+8)|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($264)>>2)]=$262; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $265=$B; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $266=$DV; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $267=(($266+12)|0); //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($267)>>2)]=$265; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $269=$rsize; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$269; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $270=$r; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$270; //@line 4669 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $271=$p2; //@line 4671 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $272=$271; //@line 4671 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $273=(($272+8)|0); //@line 4671 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$273; //@line 4671 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4673 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $275=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=(($275)|0)!=0; //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($276) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $278=$nb; //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=_tmalloc_small(__gm_, $278); //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$279; //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $280=(($279)|0)!=0; //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($280) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 54; break; //@line 4678 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 4680 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 45; break; //@line 4681 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $287=$1; //@line 4682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)>>>0) >= 4294967232; //@line 4682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      $nb=-1; //@line 4683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $291=$1; //@line 4685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $292=((($291)+(4))|0); //@line 4685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $293=((($292)+(7))|0); //@line 4685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $294=$293 & -8; //@line 4685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$294; //@line 4685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $295=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $296=(($295)|0)!=0; //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($296) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $298=$nb; //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $299=_tmalloc_large(__gm_, $298); //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$299; //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $300=(($299)|0)!=0; //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($300) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 54; break; //@line 4688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $305=$nb; //@line 4692 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $306=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4692 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $307=(($305)>>>0) <= (($306)>>>0); //@line 4692 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($307) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 4692 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $309=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4693 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $310=$nb; //@line 4693 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $311=((($309)-($310))|0); //@line 4693 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize5=$311; //@line 4693 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $312=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4694 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p6=$312; //@line 4694 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $313=$rsize5; //@line 4695 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $314=(($313)>>>0) >= 16; //@line 4695 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($314) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4695 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $316=$p6; //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=$316; //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $318=$nb; //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $319=(($317+$318)|0); //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $320=$319; //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$320; //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $r7=$320; //@line 4696 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$rsize5; //@line 4697 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$321; //@line 4697 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $322=$rsize5; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=$322 | 1; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=$r7; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($325)>>2)]=$323; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=$rsize5; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $327=$r7; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $328=$327; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $329=$rsize5; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $330=(($328+$329)|0); //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $331=$330; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $332=(($331)|0); //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($332)>>2)]=$326; //@line 4698 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $333=$nb; //@line 4699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $334=$333 | 1; //@line 4699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $335=$334 | 2; //@line 4699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $336=$p6; //@line 4699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+4)|0); //@line 4699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($337)>>2)]=$335; //@line 4699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4700 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $339=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4702 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $dvs=$339; //@line 4702 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4704 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=$dvs; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=$340 | 1; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=$341 | 2; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $343=$p6; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $344=(($343+4)|0); //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($344)>>2)]=$342; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $345=$p6; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=$345; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=$dvs; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348=(($346+$347)|0); //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $349=$348; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=(($349+4)|0); //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=$351 | 1; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($350)>>2)]=$352; //@line 4705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break;
    case 49: 
      var $354=$p6; //@line 4707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $355=$354; //@line 4707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+8)|0); //@line 4707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$356; //@line 4707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $358=$nb; //@line 4712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=HEAPU32[((((__gm_+12)|0))>>2)]; //@line 4712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $360=(($358)>>>0) < (($359)>>>0); //@line 4712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($360) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $362=$nb; //@line 4713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $363=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $364=((($363)-($362))|0); //@line 4713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$364; //@line 4713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize8=$364; //@line 4713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $365=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p9=$365; //@line 4714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $366=$p9; //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=$366; //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$nb; //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=(($367+$368)|0); //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $370=$369; //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$370; //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $r10=$370; //@line 4715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $371=$rsize8; //@line 4716 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $372=$371 | 1; //@line 4716 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $373=$r10; //@line 4716 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374=(($373+4)|0); //@line 4716 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($374)>>2)]=$372; //@line 4716 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $375=$nb; //@line 4717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $376=$375 | 1; //@line 4717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $377=$376 | 2; //@line 4717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $378=$p9; //@line 4717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $379=(($378+4)|0); //@line 4717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($379)>>2)]=$377; //@line 4717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=$p9; //@line 4718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=$380; //@line 4718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$382; //@line 4718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4721 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $385=$nb; //@line 4724 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=_sys_alloc(__gm_, $385); //@line 4724 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$386; //@line 4724 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4724 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $388=$mem; //@line 4728 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $388; //@line 4728 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_malloc"] = _malloc;_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1; //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=(($3+4)|0); //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$1; //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=(($6+4)|0); //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($7)>>2)]; //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=(((-$8))|0); //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$5 & $9; //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leastbit=$10; //@line 4269 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$leastbit; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=((($11)-(1))|0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$12; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$13 >>> 12; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$14 & 16; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$15; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$K; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$16; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$K; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$18 >>> (($17)>>>0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$19; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$20 >>> 5; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$21 & 8; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$22; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$N; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=((($23)+($22))|0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$24; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$K; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26 >>> (($25)>>>0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$27; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$28 >>> 2; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$29 & 4; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$30; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$N; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=((($31)+($30))|0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$32; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$K; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$34 >>> (($33)>>>0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$35; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$36 >>> 1; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$37 & 2; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$38; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$N; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=((($39)+($38))|0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$40; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$K; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42 >>> (($41)>>>0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$43; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$44 >>> 1; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$45 & 1; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$46; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$N; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=((($47)+($46))|0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$48; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$K; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50 >>> (($49)>>>0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$51; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$N; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$Y; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=((($52)+($53))|0); //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=$54; //@line 4270 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$i; //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$1; //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$59; //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $v=$59; //@line 4271 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$t; //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=(($60+4)|0); //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=HEAP32[(($61)>>2)]; //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$62 & -8; //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$2; //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=((($63)-($64))|0); //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$65; //@line 4272 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $67=$t; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=(($67+16)|0); //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0); //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=(($70)|0)!=0; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($71) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $73=$t; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+16)|0); //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=(($74)|0); //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83 = $76;__label__ = 6; break; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $78=$t; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=(($78+16)|0); //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+4)|0); //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83 = $81;__label__ = 6; break; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $83; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$83; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=(($83)|0)!=0; //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 4274 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $86=$t; //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=(($86+4)|0); //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($87)>>2)]; //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$88 & -8; //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=$2; //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=((($89)-($90))|0); //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $trem=$91; //@line 4275 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$trem; //@line 4276 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$rsize; //@line 4276 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=(($92)>>>0) < (($93)>>>0); //@line 4276 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($94) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4276 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $96=$trem; //@line 4277 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$96; //@line 4277 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$t; //@line 4278 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $v=$97; //@line 4278 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 4279 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 3; break; //@line 4280 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $100=$v; //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$1; //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=(($101)>>>0) >= (($104)>>>0); //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)&1); //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=(($107)|0)!=0; //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 11; break; } else { __label__ = 70; break; } //@line 4282 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $110=$v; //@line 4283 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$110; //@line 4283 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$2; //@line 4283 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=(($111+$112)|0); //@line 4283 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4283 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $r=$114; //@line 4283 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$v; //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$115; //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$r; //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$117; //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=(($116)>>>0) < (($118)>>>0); //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=(($119)&1); //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=(($120)==(1)); //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)!=0; //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 12; break; } else { __label__ = 69; break; } //@line 4285 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $124=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=(($124+24)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[(($125)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$126; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=(($127+12)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=(($129)|0)!=(($130)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($131) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $133=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=(($133+8)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$135; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=(($136+12)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=HEAP32[(($137)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$138; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$F; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$139; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=(($141+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=HEAPU32[(($142)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=(($140)>>>0) >= (($143)>>>0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)&1); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=(($145)==(1)); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=(($146)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($147) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $149=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$F; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=(($150+12)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($151)>>2)]=$149; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$F; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+8)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      _abort(); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 29; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $158=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$160; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$161; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=(($161)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($162) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $164=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=(($165)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$166; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[(($166)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$167; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=(($167)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($168) { __label__ = 19; break; } else { __label__ = 28; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $171=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=(($171+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=(($172+4)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$173; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $174=HEAP32[(($173)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=(($174)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($175) { var $183 = 1;__label__ = 22; break; } else { __label__ = 21; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $177=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=(($177+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $179=(($178)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$179; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $180=HEAP32[(($179)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $181=(($180)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183 = $181;__label__ = 22; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $183;
      if ($183) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $185=$CP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$185; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=HEAP32[(($185)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$186; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $188=$RP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$188; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $190=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $191=(($190+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $192=HEAPU32[(($191)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=(($189)>>>0) >= (($192)>>>0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=(($193)&1); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=(($194)==(1)); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=(($195)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($196) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $198=$RP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $203=$XP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=(($203)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($204) { __label__ = 30; break; } else { __label__ = 57; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $206=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=(($206+28)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=HEAP32[(($207)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=(($209+304)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=(($210+($208<<2))|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H=$211; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$H; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[(($213)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $215=(($212)|0)==(($214)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($215) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $217=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $218=$H; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($218)>>2)]=$217; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $219=(($217)|0)==0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($219) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $221=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=(($221+28)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=1 << $223; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$224 ^ -1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $229=$228 & $225; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($227)>>2)]=$229; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 41; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $232=$XP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $233=$232; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $234=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $235=(($234+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $236=HEAPU32[(($235)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=(($233)>>>0) >= (($236)>>>0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $238=(($237)&1); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $239=(($238)==(1)); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $240=(($239)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($240) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $242=$XP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=(($242+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=(($243)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=(($245)|0)==(($246)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($247) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $249=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $250=$XP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($252)>>2)]=$249; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $254=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $255=$XP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $256=(($255+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $257=(($256+4)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($257)>>2)]=$254; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break;
    case 38: 
      __label__ = 40; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $262=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($263) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $265=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $266=$265; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $267=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $269=HEAPU32[(($268)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $270=(($266)>>>0) >= (($269)>>>0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $271=(($270)&1); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $272=(($271)==(1)); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $273=(($272)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($273) { __label__ = 43; break; } else { __label__ = 54; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $275=$XP; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $277=(($276+24)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($277)>>2)]=$275; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $278=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=(($278+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $280=(($279)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$281; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=(($281)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($282) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $284=$C0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $285=$284; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $286=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=(($286+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=HEAPU32[(($287)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $289=(($285)>>>0) >= (($288)>>>0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $290=(($289)&1); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $291=(($290)==(1)); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $292=(($291)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($292) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $294=$C0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $295=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $296=(($295+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $297=(($296)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($297)>>2)]=$294; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $299=$C0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $300=(($299+24)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($300)>>2)]=$298; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      _abort(); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $304=$v; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $305=(($304+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $306=(($305+4)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $307=HEAP32[(($306)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$307; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $308=(($307)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($308) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $310=$C1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $311=$310; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $312=$1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $313=(($312+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $314=HEAPU32[(($313)>>2)]; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=(($311)>>>0) >= (($314)>>>0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=(($315)&1); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=(($316)==(1)); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)|0)!=0; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($318) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $320=$C1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $322=(($321+16)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=(($322+4)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($323)>>2)]=$320; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=$R; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=$C1; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=(($325+24)|0); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($326)>>2)]=$324; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 55; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4286 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $334=$rsize; //@line 4287 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $335=(($334)>>>0) < 16; //@line 4287 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($335) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4287 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $337=$rsize; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $338=$2; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=((($337)+($338))|0); //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=$339 | 1; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=$340 | 2; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=$v; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($343)>>2)]=$341; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $344=$v; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $345=$344; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=$rsize; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=$2; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348=((($346)+($347))|0); //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $349=(($345+$348)|0); //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=$349; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+4)|0); //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $353=$352 | 1; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$353; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break; //@line 4288 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $355=$2; //@line 4290 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $356=$355 | 1; //@line 4290 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $357=$356 | 2; //@line 4290 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=$v; //@line 4290 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4290 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($359)>>2)]=$357; //@line 4290 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $360=$rsize; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $361=$360 | 1; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $362=$r; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $363=(($362+4)|0); //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($363)>>2)]=$361; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $364=$rsize; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $365=$r; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $366=$365; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=$rsize; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=(($366+$367)|0); //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=$368; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $370=(($369)|0); //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($370)>>2)]=$364; //@line 4291 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $371=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $372=(($371+8)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $373=HEAP32[(($372)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $DVS=$373; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374=$DVS; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $375=(($374)|0)!=0; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($375) { __label__ = 60; break; } else { __label__ = 67; break; } //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $377=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $378=(($377+20)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $379=HEAP32[(($378)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $DV=$379; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=$DVS; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=$380 >>> 3; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$381; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=$I; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $383=$382 << 1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $384=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $385=(($384+40)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+($383<<2))|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=$386; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $388=$387; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B=$388; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $389=$B; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F1=$389; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $390=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $391=(($390)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $392=HEAP32[(($391)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $393=$I; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $394=1 << $393; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $395=$392 & $394; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $396=(($395)|0)!=0; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($396) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $398=$I; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $399=1 << $398; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $400=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $401=(($400)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $403=$402 | $399; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($401)>>2)]=$403; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $405=$B; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $406=(($405+8)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $407=HEAP32[(($406)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $408=$407; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $409=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $410=(($409+16)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $411=HEAPU32[(($410)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $412=(($408)>>>0) >= (($411)>>>0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $413=(($412)&1); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $414=(($413)==(1)); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $415=(($414)|0)!=0; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($415) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $417=$B; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $418=(($417+8)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $419=HEAP32[(($418)>>2)]; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F1=$419; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      _abort(); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $423=$DV; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $424=$B; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $425=(($424+8)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($425)>>2)]=$423; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $426=$DV; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $427=$F1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $428=(($427+12)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($428)>>2)]=$426; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $429=$F1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $430=$DV; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $431=(($430+8)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($431)>>2)]=$429; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $432=$B; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $433=$DV; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+12)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($434)>>2)]=$432; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $436=$rsize; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $437=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $438=(($437+8)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($438)>>2)]=$436; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $439=$r; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $440=$1; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+20)|0); //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($441)>>2)]=$439; //@line 4292 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break;
    case 68: 
      var $443=$v; //@line 4294 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $444=$443; //@line 4294 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4294 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $445; //@line 4294 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 4296 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      _abort(); //@line 4298 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4298 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0; //@line 4195 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 4196 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=(((-$4))|0); //@line 4196 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$5; //@line 4196 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$3; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$6 >>> 8; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $X=$7; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$X; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)==0; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $idx=0; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $12=$X; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)>>>0) > 65535; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $idx=31; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $16=$X; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$16; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$Y; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=((($17)-(256))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$18 >>> 16; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$19 & 8; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$20; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$N; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$Y; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$22 << $21; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$23; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=((($23)-(4096))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$24 >>> 16; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$25 & 4; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$26; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$K; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$N; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=((($28)+($27))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$29; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$K; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$Y; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$31 << $30; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$32; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=((($32)-(16384))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$33 >>> 16; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 2; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$35; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$N; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=((($36)+($35))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$37; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$N; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=(((14)-($38))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$K; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$Y; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$41 << $40; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$42; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42 >>> 15; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=((($39)+($43))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$44; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$K; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$45 << 1; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$3; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$K; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=((($48)+(7))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$47 >>> (($49)>>>0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50 & 1; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=((($46)+($51))|0); //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $idx=$52; //@line 4199 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $55=$idx; //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$2; //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+304)|0); //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+($55<<2))|0); //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($58)>>2)]; //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$59; //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=0; //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 9; break; } else { __label__ = 24; break; } //@line 4200 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $62=$3; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$idx; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=(($63)|0)==31; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($64) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $73 = 0;__label__ = 12; break; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $67=$idx; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$67 >>> 1; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)+(8))|0); //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=((($69)-(2))|0); //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=(((31)-($70))|0); //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73 = $71;__label__ = 12; break; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $73; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$62 << $73; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sizebits=$74; //@line 4202 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rst=0; //@line 4203 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4204 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $76=$t; //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+4)|0); //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$78 & -8; //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$3; //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=((($79)-($80))|0); //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $trem=$81; //@line 4206 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$trem; //@line 4207 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$rsize; //@line 4207 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=(($82)>>>0) < (($83)>>>0); //@line 4207 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4207 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $86=$t; //@line 4208 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $v=$86; //@line 4208 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$trem; //@line 4209 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$87; //@line 4209 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=(($87)|0)==0; //@line 4209 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($88) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4209 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 23; break; //@line 4210 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4211 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $92=$t; //@line 4212 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=(($92+16)|0); //@line 4212 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=(($93+4)|0); //@line 4212 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=HEAP32[(($94)>>2)]; //@line 4212 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rt=$95; //@line 4212 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$sizebits; //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$96 >>> 31; //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & 1; //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$t; //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=(($99+16)|0); //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=(($100+($98<<2))|0); //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($101)>>2)]; //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$102; //@line 4213 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$rt; //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=(($103)|0)!=0; //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($104) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $106=$rt; //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$t; //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=(($106)|0)!=(($107)|0); //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4214 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $110=$rt; //@line 4215 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rst=$110; //@line 4215 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4215 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $112=$t; //@line 4216 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=(($112)|0)==0; //@line 4216 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($113) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4216 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $115=$rst; //@line 4217 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$115; //@line 4217 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4218 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $117=$sizebits; //@line 4220 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$117 << 1; //@line 4220 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sizebits=$118; //@line 4220 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4221 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      __label__ = 24; break; //@line 4222 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $121=$t; //@line 4223 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)==0; //@line 4223 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4223 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $124=$v; //@line 4223 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=(($124)|0)==0; //@line 4223 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($125) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4223 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $127=$idx; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=1 << $127; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$128 << 1; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$idx; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=1 << $130; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$131 << 1; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=(((-$132))|0); //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$129 | $133; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$2; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=(($135+4)|0); //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$134 & $137; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leftbits=$138; //@line 4224 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$leftbits; //@line 4225 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=(($139)|0)!=0; //@line 4225 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($140) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4225 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $142=$leftbits; //@line 4227 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$leftbits; //@line 4227 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=(((-$143))|0); //@line 4227 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$142 & $144; //@line 4227 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leastbit=$145; //@line 4227 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$leastbit; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=((($146)-(1))|0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y1=$147; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$148 >>> 12; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$149 & 16; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$150; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$K2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N3=$151; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$K2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$153 >>> (($152)>>>0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y1=$154; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$155 >>> 5; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$156 & 8; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$157; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$N3; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=((($158)+($157))|0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N3=$159; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$K2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$161 >>> (($160)>>>0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y1=$162; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$163 >>> 2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=$164 & 4; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$165; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$N3; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $167=((($166)+($165))|0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N3=$167; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$K2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$169 >>> (($168)>>>0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y1=$170; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$171 >>> 1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$172 & 2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$173; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $174=$N3; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=((($174)+($173))|0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N3=$175; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=$K2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$177 >>> (($176)>>>0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y1=$178; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $180=$179 >>> 1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $181=$180 & 1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$181; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$N3; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=((($182)+($181))|0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N3=$183; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$K2; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$185 >>> (($184)>>>0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y1=$186; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$N3; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$Y1; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=((($187)+($188))|0); //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=$189; //@line 4228 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $190=$i; //@line 4229 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$2; //@line 4229 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $192=(($191+304)|0); //@line 4229 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=(($192+($190<<2))|0); //@line 4229 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4229 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$194; //@line 4229 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4230 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4231 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break; //@line 4233 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $198=$t; //@line 4233 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)|0)!=0; //@line 4233 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($199) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 4233 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $201=$t; //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=(($201+4)|0); //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($202)>>2)]; //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=$203 & -8; //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$3; //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=((($204)-($205))|0); //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $trem4=$206; //@line 4234 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$trem4; //@line 4235 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$rsize; //@line 4235 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=(($207)>>>0) < (($208)>>>0); //@line 4235 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($209) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4235 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $211=$trem4; //@line 4236 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$211; //@line 4236 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$t; //@line 4237 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $v=$212; //@line 4237 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4238 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $214=$t; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $215=(($214+16)|0); //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $216=(($215)|0); //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $217=HEAP32[(($216)>>2)]; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $220=$t; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=(($220+16)|0); //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=(($221)|0); //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=HEAP32[(($222)>>2)]; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230 = $223;__label__ = 36; break; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $225=$t; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=(($225+16)|0); //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=(($226+4)|0); //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=HEAP32[(($227)>>2)]; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230 = $228;__label__ = 36; break; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $230; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $t=$230; //@line 4239 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4240 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $232=$v; //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)|0)!=0; //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($233) { __label__ = 38; break; } else { __label__ = 127; break; } //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $235=$rsize; //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $236=$2; //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=(($236+8)|0); //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $238=HEAP32[(($237)>>2)]; //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $239=$3; //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $240=((($238)-($239))|0); //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $241=(($235)>>>0) < (($240)>>>0); //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($241) { __label__ = 39; break; } else { __label__ = 127; break; } //@line 4243 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $243=$v; //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=$243; //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $245=$2; //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=(($245+16)|0); //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=HEAPU32[(($246)>>2)]; //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=(($244)>>>0) >= (($247)>>>0); //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $249=(($248)&1); //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $250=(($249)==(1)); //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $251=(($250)|0)!=0; //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($251) { __label__ = 40; break; } else { __label__ = 126; break; } //@line 4244 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $253=$v; //@line 4245 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $254=$253; //@line 4245 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $255=$3; //@line 4245 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $256=(($254+$255)|0); //@line 4245 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $257=$256; //@line 4245 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $r=$257; //@line 4245 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $258=$v; //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=$258; //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=$r; //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $261=$260; //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $262=(($259)>>>0) < (($261)>>>0); //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)&1); //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $264=(($263)==(1)); //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $265=(($264)|0)!=0; //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($265) { __label__ = 41; break; } else { __label__ = 125; break; } //@line 4247 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $267=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+24)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$269; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $270=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $271=(($270+12)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $273=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $274=(($272)|0)!=(($273)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($274) { __label__ = 42; break; } else { __label__ = 46; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $276=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $277=(($276+8)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $278=HEAP32[(($277)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$278; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+12)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $281=HEAP32[(($280)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$281; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=$F; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $283=$282; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $284=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $286=HEAPU32[(($285)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=(($283)>>>0) >= (($286)>>>0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)&1); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $289=(($288)==(1)); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $290=(($289)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($290) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $292=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $293=$F; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+12)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=$292; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $295=$F; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $296=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $297=(($296+8)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($297)>>2)]=$295; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      _abort(); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 58; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $301=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $302=(($301+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $303=(($302+4)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$303; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $304=HEAP32[(($303)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$304; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $305=(($304)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($305) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $307=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $308=(($307+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $309=(($308)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$309; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $310=HEAP32[(($309)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$310; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $311=(($310)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($311) { __label__ = 48; break; } else { __label__ = 57; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $314=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=(($314+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=(($315+4)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$316; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=HEAP32[(($316)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($318) { var $326 = 1;__label__ = 51; break; } else { __label__ = 50; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $320=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=(($320+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $322=(($321)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$322; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=HEAP32[(($322)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=(($323)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326 = $324;__label__ = 51; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $326;
      if ($326) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $328=$CP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$328; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $329=HEAP32[(($328)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$329; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $331=$RP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $332=$331; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $333=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $334=(($333+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $335=HEAPU32[(($334)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $336=(($332)>>>0) >= (($335)>>>0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $337=(($336)&1); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $338=(($337)==(1)); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=(($338)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($339) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $341=$RP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($341)>>2)]=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $346=$XP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=(($346)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($347) { __label__ = 59; break; } else { __label__ = 86; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $349=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=(($349+28)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=HEAP32[(($350)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+304)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $354=(($353+($351<<2))|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H=$354; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $355=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $356=$H; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $357=HEAP32[(($356)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=(($355)|0)==(($357)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($358) { __label__ = 60; break; } else { __label__ = 63; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $360=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $361=$H; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($361)>>2)]=$360; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $362=(($360)|0)==0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($362) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $364=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $365=(($364+28)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $366=HEAP32[(($365)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=1 << $366; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$367 ^ -1; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $370=(($369+4)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $371=HEAP32[(($370)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $372=$371 & $368; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($370)>>2)]=$372; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      __label__ = 70; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $375=$XP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $376=$375; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $377=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $378=(($377+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $379=HEAPU32[(($378)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=(($376)>>>0) >= (($379)>>>0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=(($380)&1); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=(($381)==(1)); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $383=(($382)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($383) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $385=$XP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $389=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $390=(($388)|0)==(($389)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($390) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $392=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $393=$XP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $394=(($393+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $395=(($394)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($395)>>2)]=$392; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $397=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $398=$XP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $399=(($398+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($400)>>2)]=$397; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $405=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $406=(($405)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($406) { __label__ = 71; break; } else { __label__ = 85; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $408=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $409=$408; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $410=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $412=HEAPU32[(($411)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $413=(($409)>>>0) >= (($412)>>>0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $414=(($413)&1); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $415=(($414)==(1)); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $416=(($415)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($416) { __label__ = 72; break; } else { __label__ = 83; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $418=$XP; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $419=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $420=(($419+24)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $421=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $422=(($421+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $423=(($422)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $424=HEAP32[(($423)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$424; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $425=(($424)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($425) { __label__ = 73; break; } else { __label__ = 77; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $427=$C0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $428=$427; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $429=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $430=(($429+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $431=HEAPU32[(($430)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $432=(($428)>>>0) >= (($431)>>>0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $433=(($432)&1); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $434=(($433)==(1)); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $435=(($434)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($435) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $437=$C0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $438=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $440=(($439)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($440)>>2)]=$437; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $441=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $442=$C0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $443=(($442+24)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($443)>>2)]=$441; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      _abort(); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $447=$v; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $448=(($447+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $449=(($448+4)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $450=HEAP32[(($449)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$450; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $451=(($450)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($451) { __label__ = 78; break; } else { __label__ = 82; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $453=$C1; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $454=$453; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $455=$2; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $456=(($455+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $457=HEAPU32[(($456)>>2)]; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $458=(($454)>>>0) >= (($457)>>>0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $459=(($458)&1); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $460=(($459)==(1)); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $461=(($460)|0)!=0; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($461) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $463=$C1; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $464=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $465=(($464+16)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $466=(($465+4)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($466)>>2)]=$463; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $467=$R; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $468=$C1; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $469=(($468+24)|0); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 81; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 80: 
      _abort(); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 81: 
      __label__ = 82; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      __label__ = 84; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      _abort(); //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      __label__ = 86; break; //@line 4248 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $477=$rsize; //@line 4249 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $478=(($477)>>>0) < 16; //@line 4249 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($478) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 4249 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $480=$rsize; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $481=$3; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $482=((($480)+($481))|0); //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $483=$482 | 1; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $484=$483 | 2; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $485=$v; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $486=(($485+4)|0); //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $487=$v; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $488=$487; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $489=$rsize; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $490=$3; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $491=((($489)+($490))|0); //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $492=(($488+$491)|0); //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $493=$492; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $494=(($493+4)|0); //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $495=HEAP32[(($494)>>2)]; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $496=$495 | 1; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($494)>>2)]=$496; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4250 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $498=$3; //@line 4252 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $499=$498 | 1; //@line 4252 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $500=$499 | 2; //@line 4252 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $501=$v; //@line 4252 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $502=(($501+4)|0); //@line 4252 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($502)>>2)]=$500; //@line 4252 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $503=$rsize; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $504=$503 | 1; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $505=$r; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $507=$rsize; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $508=$r; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $509=$508; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $510=$rsize; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $511=(($509+$510)|0); //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $512=$511; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $513=(($512)|0); //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($513)>>2)]=$507; //@line 4253 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $514=$rsize; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $515=$514 >>> 3; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $516=(($515)>>>0) < 32; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($516) { __label__ = 89; break; } else { __label__ = 96; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $518=$rsize; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $519=$518 >>> 3; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$519; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $520=$I; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $521=$520 << 1; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $522=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $523=(($522+40)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $524=(($523+($521<<2))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $525=$524; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $526=$525; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B=$526; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $527=$B; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F5=$527; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $528=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $529=(($528)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $530=HEAP32[(($529)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $531=$I; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $532=1 << $531; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $533=$530 & $532; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $534=(($533)|0)!=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($534) { __label__ = 91; break; } else { __label__ = 90; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $536=$I; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $537=1 << $536; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $538=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $539=(($538)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $540=HEAP32[(($539)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $541=$540 | $537; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($539)>>2)]=$541; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 95; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $543=$B; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $544=(($543+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $545=HEAP32[(($544)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $546=$545; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $547=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $548=(($547+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $549=HEAPU32[(($548)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $550=(($546)>>>0) >= (($549)>>>0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $551=(($550)&1); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $552=(($551)==(1)); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $553=(($552)|0)!=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($553) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $555=$B; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $556=(($555+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $557=HEAP32[(($556)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F5=$557; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 94; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      _abort(); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 94: 
      __label__ = 95; break;
    case 95: 
      var $561=$r; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $562=$B; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $563=(($562+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($563)>>2)]=$561; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $564=$r; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $565=$F5; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $566=(($565+12)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($566)>>2)]=$564; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $567=$F5; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $568=$r; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $569=(($568+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($569)>>2)]=$567; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $570=$B; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $571=$r; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $572=(($571+12)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($572)>>2)]=$570; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $574=$r; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $575=$574; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$575; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $576=$rsize; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $577=$576 >>> 8; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $X8=$577; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $578=$X8; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $579=(($578)|0)==0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($579) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 97: 
      $I7=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 98: 
      var $582=$X8; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $583=(($582)>>>0) > 65535; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($583) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 99: 
      $I7=31; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $586=$X8; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y9=$586; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $587=$Y9; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $588=((($587)-(256))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $589=$588 >>> 16; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $590=$589 & 8; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N10=$590; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $591=$N10; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $592=$Y9; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $593=$592 << $591; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y9=$593; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $594=((($593)-(4096))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $595=$594 >>> 16; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $596=$595 & 4; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K11=$596; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $597=$K11; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $598=$N10; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $599=((($598)+($597))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N10=$599; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $600=$K11; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $601=$Y9; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $602=$601 << $600; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y9=$602; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $603=((($602)-(16384))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $604=$603 >>> 16; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $605=$604 & 2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K11=$605; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $606=$N10; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $607=((($606)+($605))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N10=$607; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $608=$N10; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $609=(((14)-($608))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $610=$K11; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $611=$Y9; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $612=$611 << $610; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y9=$612; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $613=$612 >>> 15; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $614=((($609)+($613))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K11=$614; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $615=$K11; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $616=$615 << 1; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $617=$rsize; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $618=$K11; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $619=((($618)+(7))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $620=$617 >>> (($619)>>>0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $621=$620 & 1; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $622=((($616)+($621))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I7=$622; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      var $625=$I7; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $626=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $627=(($626+304)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $628=(($627+($625<<2))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H6=$628; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $629=$I7; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $630=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $631=(($630+28)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($631)>>2)]=$629; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $632=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $633=(($632+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $634=(($633+4)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($634)>>2)]=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $635=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $636=(($635+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $637=(($636)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($637)>>2)]=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $638=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $639=(($638+4)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $640=HEAP32[(($639)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $641=$I7; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $642=1 << $641; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $643=$640 & $642; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $644=(($643)|0)!=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($644) { __label__ = 104; break; } else { __label__ = 103; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $646=$I7; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $647=1 << $646; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $648=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $649=(($648+4)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $650=HEAP32[(($649)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $651=$650 | $647; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($649)>>2)]=$651; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $652=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $653=$H6; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($653)>>2)]=$652; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $654=$H6; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $655=$654; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $656=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $657=(($656+24)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($657)>>2)]=$655; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $658=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $659=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $660=(($659+12)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($660)>>2)]=$658; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $661=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $662=(($661+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($662)>>2)]=$658; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 122; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $664=$H6; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $665=HEAP32[(($664)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$665; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $666=$rsize; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $667=$I7; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $668=(($667)|0)==31; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($668) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $677 = 0;__label__ = 107; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 106: 
      var $671=$I7; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $672=$671 >>> 1; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $673=((($672)+(8))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $674=((($673)-(2))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $675=(((31)-($674))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $677 = $675;__label__ = 107; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $677; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $678=$666 << $677; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K12=$678; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $680=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $681=(($680+4)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $682=HEAP32[(($681)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $683=$682 & -8; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $684=$rsize; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $685=(($683)|0)!=(($684)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($685) { __label__ = 109; break; } else { __label__ = 115; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $687=$K12; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $688=$687 >>> 31; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $689=$688 & 1; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $690=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $691=(($690+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $692=(($691+($689<<2))|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C=$692; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $693=$K12; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $694=$693 << 1; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K12=$694; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $695=$C; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $696=HEAP32[(($695)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $697=(($696)|0)!=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($697) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $699=$C; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $700=HEAP32[(($699)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$700; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 114; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $702=$C; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $703=$702; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $704=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $705=(($704+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $706=HEAPU32[(($705)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $707=(($703)>>>0) >= (($706)>>>0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $708=(($707)&1); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $709=(($708)==(1)); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $710=(($709)|0)!=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($710) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $712=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $713=$C; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($713)>>2)]=$712; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $714=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $715=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $716=(($715+24)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($716)>>2)]=$714; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $717=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $718=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $719=(($718+12)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($719)>>2)]=$717; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $720=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $721=(($720+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($721)>>2)]=$717; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 113: 
      _abort(); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 114: 
      __label__ = 120; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $725=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $726=(($725+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $727=HEAP32[(($726)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F13=$727; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $728=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $729=$728; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $730=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $731=(($730+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $732=HEAPU32[(($731)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $733=(($729)>>>0) >= (($732)>>>0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($733) { __label__ = 116; break; } else { var $742 = 0;__label__ = 117; break; } //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $735=$F13; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $736=$735; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $737=$2; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $738=(($737+16)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $739=HEAPU32[(($738)>>2)]; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $740=(($736)>>>0) >= (($739)>>>0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $742 = $740;__label__ = 117; break;
    case 117: 
      var $742;
      var $743=(($742)&1);
      var $744=(($743)==(1));
      var $745=(($744)|0)!=0;
      if ($745) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: 
      var $747=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $748=$F13; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $749=(($748+12)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($749)>>2)]=$747; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $750=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $751=(($750+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($751)>>2)]=$747; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $752=$F13; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $753=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $754=(($753+8)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($754)>>2)]=$752; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $755=$T; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $756=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $757=(($756+12)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($757)>>2)]=$755; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $758=$TP; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $759=(($758+24)|0); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($759)>>2)]=0; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 119: 
      _abort(); //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 120: 
      __label__ = 108; break; //@line 4254 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 124; break;
    case 124: 
      var $766=$v; //@line 4256 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $767=$766; //@line 4256 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $768=(($767+8)|0); //@line 4256 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$768; //@line 4256 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4256 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 125: 
      __label__ = 126; break; //@line 4258 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 126: 
      _abort(); //@line 4259 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4259 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 127: 
      $1=0; //@line 4261 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4261 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $773=$1; //@line 4262 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $773; //@line 4262 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1; //@line 3876 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=0; //@line 3877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)!=0; //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($5) { var $10 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=_init_mparams(); //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10 = $8;__label__ = 4; break; //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $10;
      var $11=(($10)&1); //@line 3880 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$2; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12+440)|0); //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$14 & 0; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $18=$3; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=HEAPU32[((((_mparams+12)|0))>>2)]; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=(($18)>>>0) >= (($19)>>>0); //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $22=$2; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=(($22+12)|0); //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)!=0; //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3883 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $27=$2; //@line 3884 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$3; //@line 3884 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=_mmap_alloc($27, $28); //@line 3884 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$29; //@line 3884 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$mem; //@line 3885 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)!=0; //@line 3885 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3885 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $33=$mem; //@line 3886 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$33; //@line 3886 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3886 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 10; break; //@line 3887 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $36=$2; //@line 3911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=(($36+440)|0); //@line 3911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$38 & 4; //@line 3911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0)!=0; //@line 3911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($40) { __label__ = 43; break; } else { __label__ = 11; break; } //@line 3911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      $br=-1; //@line 3912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$2; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+24)|0); //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=(($44)|0)==0; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $55 = 0;__label__ = 14; break; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $48=$2; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$2; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=(($49+24)|0); //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=HEAP32[(($50)>>2)]; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$51; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=_segment_holding($48, $52); //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55 = $53;__label__ = 14; break; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $55; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $ss=$55; //@line 3913 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asize=0; //@line 3914 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$ss; //@line 3917 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($56)|0)==0; //@line 3917 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 15; break; } else { __label__ = 23; break; } //@line 3917 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $59=_sbrk(0); //@line 3918 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $base=$59; //@line 3918 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$base; //@line 3919 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)|0)!=-1; //@line 3919 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($61) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 3919 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $63=$3; //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=((($63)+(48))|0); //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=((($65)-(1))|0); //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=((($64)+($66))|0); //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)-(1))|0); //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$69 ^ -1; //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$67 & $70; //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$71; //@line 3920 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$base; //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$72; //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=((($74)-(1))|0); //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$73 & $75; //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(($76)|0)==0; //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($77) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3922 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $79=$base; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=((($81)-(1))|0); //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=((($80)+($82))|0); //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=((($84)-(1))|0); //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$85 ^ -1; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$83 & $86; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$base; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$88; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=((($87)-($89))|0); //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$asize; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=((($91)+($90))|0); //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$92; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3923 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $94=$asize; //@line 3925 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=(($94)>>>0) < 2147483647; //@line 3925 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($95) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3925 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $97=$asize; //@line 3926 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=_sbrk($97); //@line 3926 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $br=$98; //@line 3926 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$base; //@line 3926 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=(($98)|0)==(($99)|0); //@line 3926 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($100) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3926 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $102=$base; //@line 3927 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$102; //@line 3927 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$asize; //@line 3928 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$103; //@line 3928 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3929 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 3930 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 27; break; //@line 3931 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $107=$3; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$2; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=(($108+12)|0); //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=((($107)-($110))|0); //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=((($111)+(48))|0); //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=((($113)-(1))|0); //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=((($112)+($114))|0); //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=((($116)-(1))|0); //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$117 ^ -1; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$115 & $118; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$119; //@line 3934 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$asize; //@line 3936 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=(($120)>>>0) < 2147483647; //@line 3936 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($121) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 3936 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $123=$asize; //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=_sbrk($123); //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $br=$124; //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$ss; //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=(($125)|0); //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$ss; //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=(($128+4)|0); //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=HEAP32[(($129)>>2)]; //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=(($127+$130)|0); //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=(($124)|0)==(($131)|0); //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($132) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3937 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $134=$br; //@line 3938 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$134; //@line 3938 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$asize; //@line 3939 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$135; //@line 3939 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 3940 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $138=$tbase; //@line 3943 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=(($138)|0)==-1; //@line 3943 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($139) { __label__ = 28; break; } else { __label__ = 42; break; } //@line 3943 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $141=$br; //@line 3944 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=(($141)|0)!=-1; //@line 3944 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($142) { __label__ = 29; break; } else { __label__ = 38; break; } //@line 3944 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $144=$asize; //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)>>>0) < 2147483647; //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($145) { __label__ = 30; break; } else { __label__ = 37; break; } //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $147=$asize; //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$3; //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=((($148)+(48))|0); //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=(($147)>>>0) < (($149)>>>0); //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($150) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 3945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $152=$3; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=((($152)+(48))|0); //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$asize; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=((($153)-($154))|0); //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=((($156)-(1))|0); //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=((($155)+($157))|0); //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=((($159)-(1))|0); //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$160 ^ -1; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$158 & $161; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $esize=$162; //@line 3947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$esize; //@line 3948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=(($163)>>>0) < 2147483647; //@line 3948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($164) { __label__ = 32; break; } else { __label__ = 36; break; } //@line 3948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $166=$esize; //@line 3949 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $167=_sbrk($166); //@line 3949 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $end=$167; //@line 3949 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$end; //@line 3950 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=(($168)|0)!=-1; //@line 3950 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($169) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3950 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $171=$esize; //@line 3951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$asize; //@line 3951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=((($172)+($171))|0); //@line 3951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$173; //@line 3951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 3951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $175=$asize; //@line 3953 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=(((-$175))|0); //@line 3953 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=_sbrk($176); //@line 3953 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $br=-1; //@line 3954 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 3956 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break; //@line 3957 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      __label__ = 38; break; //@line 3958 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $182=$br; //@line 3959 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=(($182)|0)!=-1; //@line 3959 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($183) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3959 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $185=$br; //@line 3960 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$185; //@line 3960 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$asize; //@line 3961 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$186; //@line 3961 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3962 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $188=$2; //@line 3964 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=(($188+440)|0); //@line 3964 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 3964 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$190 | 4; //@line 3964 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($189)>>2)]=$191; //@line 3964 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break; //@line 3965 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break; //@line 3968 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $195=$tbase; //@line 3982 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=(($195)|0)==-1; //@line 3982 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($196) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 3982 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $198=$3; //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=((($198)+(48))|0); //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $201=((($200)-(1))|0); //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=((($199)+($201))|0); //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=((($203)-(1))|0); //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$204 ^ -1; //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=$202 & $205; //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asize1=$206; //@line 3983 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$asize1; //@line 3984 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=(($207)>>>0) < 2147483647; //@line 3984 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($208) { __label__ = 45; break; } else { __label__ = 52; break; } //@line 3984 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      $br2=-1; //@line 3985 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $end3=-1; //@line 3986 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$asize1; //@line 3988 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=_sbrk($210); //@line 3988 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $br2=$211; //@line 3988 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=_sbrk(0); //@line 3989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $end3=$212; //@line 3989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$br2; //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $214=(($213)|0)!=-1; //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($214) { __label__ = 46; break; } else { __label__ = 51; break; } //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $216=$end3; //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $217=(($216)|0)!=-1; //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($217) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $219=$br2; //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$end3; //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=(($219)>>>0) < (($220)>>>0); //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($221) { __label__ = 48; break; } else { __label__ = 51; break; } //@line 3991 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $223=$end3; //@line 3992 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$br2; //@line 3992 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$223; //@line 3992 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=$224; //@line 3992 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=((($225)-($226))|0); //@line 3992 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $ssize=$227; //@line 3992 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=$ssize; //@line 3993 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $229=$3; //@line 3993 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230=((($229)+(40))|0); //@line 3993 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $231=(($228)>>>0) > (($230)>>>0); //@line 3993 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3993 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $233=$br2; //@line 3994 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$233; //@line 3994 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $234=$ssize; //@line 3995 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$234; //@line 3995 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 3996 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      __label__ = 51; break; //@line 3997 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 3998 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 3999 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $239=$tbase; //@line 4001 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $240=(($239)|0)!=-1; //@line 4001 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($240) { __label__ = 54; break; } else { __label__ = 92; break; } //@line 4001 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $242=$tsize; //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=$2; //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=(($243+432)|0); //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $245=HEAP32[(($244)>>2)]; //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=((($245)+($242))|0); //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($244)>>2)]=$246; //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=$2; //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=(($247+436)|0); //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $250=(($246)>>>0) > (($249)>>>0); //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($250) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 4003 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $252=$2; //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $253=(($252+432)|0); //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $254=HEAP32[(($253)>>2)]; //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $255=$2; //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $256=(($255+436)|0); //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($256)>>2)]=$254; //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $258=$2; //@line 4006 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+24)|0); //@line 4006 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=HEAP32[(($259)>>2)]; //@line 4006 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $261=(($260)|0)!=0; //@line 4006 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($261) { __label__ = 64; break; } else { __label__ = 57; break; } //@line 4006 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $263=$2; //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $265=HEAP32[(($264)>>2)]; //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $266=(($265)|0)==0; //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($266) { __label__ = 59; break; } else { __label__ = 58; break; } //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $268=$tbase; //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $269=$2; //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $270=(($269+16)|0); //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $271=HEAPU32[(($270)>>2)]; //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $272=(($268)>>>0) < (($271)>>>0); //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($272) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4007 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $274=$tbase; //@line 4008 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $275=$2; //@line 4008 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=(($275+16)|0); //@line 4008 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($276)>>2)]=$274; //@line 4008 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 60; break; //@line 4008 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $278=$tbase; //@line 4009 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=$2; //@line 4009 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+444)|0); //@line 4009 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $281=(($280)|0); //@line 4009 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($281)>>2)]=$278; //@line 4009 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=$tsize; //@line 4010 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $283=$2; //@line 4010 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $284=(($283+444)|0); //@line 4010 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+4)|0); //@line 4010 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($285)>>2)]=$282; //@line 4010 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $286=$mmap_flag; //@line 4011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=$2; //@line 4011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=(($287+444)|0); //@line 4011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $289=(($288+12)|0); //@line 4011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($289)>>2)]=$286; //@line 4011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $290=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $291=$2; //@line 4012 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+36)|0); //@line 4012 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 4012 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $293=$2; //@line 4013 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+32)|0); //@line 4013 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=-1; //@line 4013 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $295=$2; //@line 4014 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _init_bins($295); //@line 4014 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $296=$2; //@line 4016 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $297=(($296)|0)==((__gm_)|0); //@line 4016 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($297) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4016 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $299=$2; //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $300=$tbase; //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $301=$300; //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $302=$tsize; //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $303=((($302)-(40))|0); //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($299, $301, $303); //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4017 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $305=$2; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $306=$305; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $307=((($306)-(8))|0); //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $308=$307; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $309=$308; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $310=$2; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $311=$310; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $312=((($311)-(8))|0); //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $313=$312; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $314=(($313+4)|0); //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=HEAP32[(($314)>>2)]; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=$315 & -8; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=(($309+$316)|0); //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $318=$317; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mn=$318; //@line 4022 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $319=$2; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $320=$mn; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$tbase; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $322=$tsize; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=(($321+$322)|0); //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=$mn; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=$324; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=$323; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $327=$325; //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $328=((($326)-($327))|0); //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $329=((($328)-(40))|0); //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($319, $320, $329); //@line 4023 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break;
    case 63: 
      __label__ = 89; break; //@line 4025 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $332=$2; //@line 4029 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $333=(($332+444)|0); //@line 4029 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$333; //@line 4029 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $335=$sp; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $336=(($335)|0)!=0; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($336) { __label__ = 66; break; } else { var $348 = 0;__label__ = 67; break; } //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $338=$tbase; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=$sp; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)|0); //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=HEAP32[(($340)>>2)]; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=$sp; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $343=(($342+4)|0); //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $344=HEAP32[(($343)>>2)]; //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $345=(($341+$344)|0); //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=(($338)|0)!=(($345)|0); //@line 4031 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348 = $346;__label__ = 67; break;
    case 67: 
      var $348;
      if ($348) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $350=$sp; //@line 4032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+8)|0); //@line 4032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=HEAP32[(($351)>>2)]; //@line 4032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$352; //@line 4032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $354=$sp; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $355=(($354)|0)!=0; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($355) { __label__ = 70; break; } else { __label__ = 75; break; } //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $357=$sp; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=(($357+12)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $360=$359 & 8; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $361=(($360)|0)!=0; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($361) { __label__ = 75; break; } else { __label__ = 71; break; } //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $363=$sp; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $364=(($363+12)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $365=HEAP32[(($364)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $366=$365 & 0; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=$mmap_flag; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=(($366)|0)==(($367)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($368) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $370=$2; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $371=(($370+24)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $372=HEAP32[(($371)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $373=$372; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374=$sp; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $375=(($374)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $376=HEAPU32[(($375)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $377=(($373)>>>0) >= (($376)>>>0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($377) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $379=$2; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=(($379+24)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=HEAP32[(($380)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=$381; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $383=$sp; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $384=(($383)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=$sp; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=(($386+4)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $388=HEAP32[(($387)>>2)]; //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $389=(($385+$388)|0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $390=(($382)>>>0) < (($389)>>>0); //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($390) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $392=$tsize; //@line 4037 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $393=$sp; //@line 4037 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $394=(($393+4)|0); //@line 4037 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $395=HEAP32[(($394)>>2)]; //@line 4037 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $396=((($395)+($392))|0); //@line 4037 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($394)>>2)]=$396; //@line 4037 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $397=$2; //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $398=$2; //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $399=(($398+24)|0); //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $400=HEAP32[(($399)>>2)]; //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $401=$2; //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $402=(($401+12)|0); //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $403=HEAP32[(($402)>>2)]; //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $404=$tsize; //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $405=((($403)+($404))|0); //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($397, $400, $405); //@line 4038 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 88; break; //@line 4039 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $407=$tbase; //@line 4041 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $408=$2; //@line 4041 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $409=(($408+16)|0); //@line 4041 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $410=HEAPU32[(($409)>>2)]; //@line 4041 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $411=(($407)>>>0) < (($410)>>>0); //@line 4041 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($411) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 4041 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $413=$tbase; //@line 4042 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $414=$2; //@line 4042 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $415=(($414+16)|0); //@line 4042 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($415)>>2)]=$413; //@line 4042 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4042 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $417=$2; //@line 4043 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $418=(($417+444)|0); //@line 4043 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$418; //@line 4043 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $420=$sp; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $421=(($420)|0)!=0; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($421) { __label__ = 79; break; } else { var $431 = 0;__label__ = 80; break; } //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $423=$sp; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $424=(($423)|0); //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $425=HEAP32[(($424)>>2)]; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $426=$tbase; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $427=$tsize; //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $428=(($426+$427)|0); //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $429=(($425)|0)!=(($428)|0); //@line 4044 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $431 = $429;__label__ = 80; break;
    case 80: 
      var $431;
      if ($431) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $433=$sp; //@line 4045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+8)|0); //@line 4045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$435; //@line 4045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $437=$sp; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $438=(($437)|0)!=0; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($438) { __label__ = 83; break; } else { __label__ = 86; break; } //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $440=$sp; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+12)|0); //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $442=HEAP32[(($441)>>2)]; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $443=$442 & 8; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $444=(($443)|0)!=0; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($444) { __label__ = 86; break; } else { __label__ = 84; break; } //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $446=$sp; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $447=(($446+12)|0); //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $448=HEAP32[(($447)>>2)]; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $449=$448 & 0; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $450=$mmap_flag; //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $451=(($449)|0)==(($450)|0); //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($451) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $453=$sp; //@line 4049 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $454=(($453)|0); //@line 4049 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $455=HEAP32[(($454)>>2)]; //@line 4049 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldbase=$455; //@line 4049 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $456=$tbase; //@line 4050 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $457=$sp; //@line 4050 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $458=(($457)|0); //@line 4050 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($458)>>2)]=$456; //@line 4050 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $459=$tsize; //@line 4051 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $460=$sp; //@line 4051 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $461=(($460+4)|0); //@line 4051 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $462=HEAP32[(($461)>>2)]; //@line 4051 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $463=((($462)+($459))|0); //@line 4051 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($461)>>2)]=$463; //@line 4051 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $464=$2; //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $465=$tbase; //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $466=$oldbase; //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $467=$3; //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $468=_prepend_alloc($464, $465, $466, $467); //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$468; //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $470=$2; //@line 4055 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $471=$tbase; //@line 4055 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $472=$tsize; //@line 4055 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $473=$mmap_flag; //@line 4055 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _add_segment($470, $471, $472, $473); //@line 4055 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      var $477=$3; //@line 4059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $478=$2; //@line 4059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $479=(($478+12)|0); //@line 4059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $480=HEAPU32[(($479)>>2)]; //@line 4059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $481=(($477)>>>0) < (($480)>>>0); //@line 4059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($481) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 4059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $483=$3; //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $484=$2; //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $485=(($484+12)|0); //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $486=HEAP32[(($485)>>2)]; //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $487=((($486)-($483))|0); //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($485)>>2)]=$487; //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$487; //@line 4060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $488=$2; //@line 4061 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $489=(($488+24)|0); //@line 4061 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $490=HEAP32[(($489)>>2)]; //@line 4061 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$490; //@line 4061 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $491=$p; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $492=$491; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $493=$3; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $494=(($492+$493)|0); //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $495=$494; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $496=$2; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+24)|0); //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $r=$495; //@line 4062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $498=$rsize; //@line 4063 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $499=$498 | 1; //@line 4063 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $500=$r; //@line 4063 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $501=(($500+4)|0); //@line 4063 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($501)>>2)]=$499; //@line 4063 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $502=$3; //@line 4064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $503=$502 | 1; //@line 4064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $504=$503 | 2; //@line 4064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $505=$p; //@line 4064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $506=(($505+4)|0); //@line 4064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($506)>>2)]=$504; //@line 4064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $507=$p; //@line 4067 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $508=$507; //@line 4067 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $509=(($508+8)|0); //@line 4067 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$509; //@line 4067 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4067 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      __label__ = 92; break; //@line 4069 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $512=___errno(); //@line 4071 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($512)>>2)]=12; //@line 4071 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=0; //@line 4072 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4072 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $514=$1; //@line 4073 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $514; //@line 4073 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1; //@line 4741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($3) { __label__ = 3; break; } else { __label__ = 197; break; } //@line 4741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=$1; //@line 4742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=((($5)-(8))|0); //@line 4742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 4742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$7; //@line 4742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$p; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$8; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=(($9)>>>0) >= (($10)>>>0); //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 4; break; } else { var $19 = 0;__label__ = 5; break; } //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$p; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 3; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(($16)|0)!=1; //@line 4754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19 = $17;__label__ = 5; break;
    case 5: 
      var $19;
      var $20=(($19)&1);
      var $21=(($20)==(1));
      var $22=(($21)|0)!=0;
      if ($22) { __label__ = 6; break; } else { __label__ = 194; break; }
    case 6: 
      var $24=$p; //@line 4755 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+4)|0); //@line 4755 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 4755 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & -8; //@line 4755 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$27; //@line 4755 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$p; //@line 4756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 4756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$psize; //@line 4756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($29+$30)|0); //@line 4756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $next=$32; //@line 4756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$p; //@line 4757 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+4)|0); //@line 4757 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 4757 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$35 & 1; //@line 4757 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0)!=0; //@line 4757 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($37) { __label__ = 78; break; } else { __label__ = 7; break; } //@line 4757 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $39=$p; //@line 4758 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0); //@line 4758 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 4758 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $prevsize=$41; //@line 4758 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$p; //@line 4759 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+4)|0); //@line 4759 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4759 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 3; //@line 4759 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)==0; //@line 4759 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4759 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $48=$prevsize; //@line 4760 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=((($48)+(16))|0); //@line 4760 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$psize; //@line 4760 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=((($50)+($49))|0); //@line 4760 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$51; //@line 4760 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4763 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $53=$p; //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$prevsize; //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=(((-$55))|0); //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($54+$56)|0); //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$57; //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $prev=$58; //@line 4766 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$prevsize; //@line 4767 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$psize; //@line 4767 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=((($60)+($59))|0); //@line 4767 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$61; //@line 4767 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$prev; //@line 4768 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$62; //@line 4768 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$prev; //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$63; //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=(($64)>>>0) >= (($65)>>>0); //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=(($66)&1); //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=(($67)==(1)); //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0)!=0; //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($69) { __label__ = 10; break; } else { __label__ = 75; break; } //@line 4769 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $71=$p; //@line 4770 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4770 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=(($71)|0)!=(($72)|0); //@line 4770 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($73) { __label__ = 11; break; } else { __label__ = 71; break; } //@line 4770 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $75=$prevsize; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$75 >>> 3; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(($76)>>>0) < 32; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($77) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $79=$p; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+8)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$81; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$p; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+12)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B=$84; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$prevsize; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$85 >>> 3; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$86; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$F; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$B; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=(($87)|0)==(($88)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($89) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $91=$I; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=1 << $91; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$92 ^ -1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=HEAP32[((((__gm_)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$94 & $93; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$95; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $97=$F; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$I; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$98 << 1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=((((__gm_+40)|0)+($99<<2))|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=(($97)|0)==(($102)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($103) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $105=$F; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$105; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=(($106)>>>0) >= (($107)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 16; break; } else { var $125 = 0;__label__ = 19; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $110=$B; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$I; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$111 << 1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=((((__gm_+40)|0)+($112<<2))|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=(($110)|0)==(($115)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($116) { var $123 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $118=$B; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$118; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=(($119)>>>0) >= (($120)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123 = $121;__label__ = 18; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $123;
      var $125 = $123;__label__ = 19; break;
    case 19: 
      var $125;
      var $126=(($125)&1);
      var $127=(($126)==(1));
      var $128=(($127)|0)!=0;
      if ($128) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $130=$B; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$F; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($132)>>2)]=$130; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$F; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$B; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=(($134+8)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($135)>>2)]=$133; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 70; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $140=$p; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$140; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$141; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=(($142+24)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$144; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=(($145+12)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=(($147)|0)!=(($148)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($149) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $151=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+8)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F1=$153; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=(($154+12)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=HEAP32[(($155)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$156; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$F1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=(($158)>>>0) >= (($159)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=(($160)&1); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=(($161)==(1)); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=(($162)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($163) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $165=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$F1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $167=(($166+12)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($167)>>2)]=$165; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$F1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+8)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($170)>>2)]=$168; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 41; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $174=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=(($174+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$176; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$177; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($178) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $180=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $181=(($180+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $182=(($181)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$182; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=HEAP32[(($182)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$183; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=(($183)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($184) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      __label__ = 32; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $187=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=(($188+4)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$189; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($189)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $191=(($190)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($191) { var $199 = 1;__label__ = 34; break; } else { __label__ = 33; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $193=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=(($194)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$195; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=HEAP32[(($195)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=(($196)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199 = $197;__label__ = 34; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $199;
      if ($199) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $201=$CP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$201; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=HEAP32[(($201)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$202; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $204=$RP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$204; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=(($205)>>>0) >= (($206)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=(($207)&1); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=(($208)==(1)); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=(($209)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($210) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $212=$RP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($212)>>2)]=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $217=$XP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $218=(($217)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($218) { __label__ = 42; break; } else { __label__ = 69; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $220=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=(($220+28)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=HEAP32[(($221)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=((((__gm_+304)|0)+($222<<2))|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H=$223; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$H; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=HEAP32[(($225)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=(($224)|0)==(($226)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($227) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $229=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230=$H; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($230)>>2)]=$229; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $231=(($229)|0)==0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $233=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $234=(($233+28)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $235=HEAP32[(($234)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $236=1 << $235; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=$236 ^ -1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $238=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $239=$238 & $237; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$239; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 53; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $242=$XP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=$242; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $245=(($243)>>>0) >= (($244)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=(($245)&1); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=(($246)==(1)); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($248) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $250=$XP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $251=(($250+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $253=HEAP32[(($252)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $254=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $255=(($253)|0)==(($254)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($255) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $257=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $258=$XP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=(($259)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($260)>>2)]=$257; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $262=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $263=$XP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $264=(($263+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $265=(($264+4)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($265)>>2)]=$262; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break;
    case 50: 
      __label__ = 52; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $270=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $271=(($270)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($271) { __label__ = 54; break; } else { __label__ = 68; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $273=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $274=$273; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=(($274)>>>0) >= (($275)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $277=(($276)&1); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=(($278)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($279) { __label__ = 55; break; } else { __label__ = 66; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $281=$XP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $283=(($282+24)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($283)>>2)]=$281; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $284=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $285=(($284+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $286=(($285)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=HEAP32[(($286)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$287; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=(($287)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $290=$C0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $291=$290; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $292=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $293=(($291)>>>0) >= (($292)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $294=(($293)&1); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $295=(($294)==(1)); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $296=(($295)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($296) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $298=$C0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $299=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $300=(($299+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $301=(($300)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($301)>>2)]=$298; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $302=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $303=$C0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $304=(($303+24)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($304)>>2)]=$302; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      __label__ = 60; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $308=$TP; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $309=(($308+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $310=(($309+4)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $311=HEAP32[(($310)>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$311; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $312=(($311)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($312) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $314=$C1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=$314; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=(($315)>>>0) >= (($316)>>>0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $318=(($317)&1); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $319=(($318)==(1)); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $320=(($319)|0)!=0; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($320) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $322=$C1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=(($323+16)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+4)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($325)>>2)]=$322; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=$R; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $327=$C1; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $328=(($327+24)|0); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($328)>>2)]=$326; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 65; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 67; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      _abort(); //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 68; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 4771 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 74; break; //@line 4772 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $338=$next; //@line 4773 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=(($338+4)|0); //@line 4773 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=HEAP32[(($339)>>2)]; //@line 4773 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=$340 & 3; //@line 4773 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)==3; //@line 4773 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4773 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $344=$psize; //@line 4774 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$344; //@line 4774 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $345=$next; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=(($345+4)|0); //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=HEAP32[(($346)>>2)]; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348=$347 & -2; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($346)>>2)]=$348; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $349=$psize; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=$349 | 1; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=$p; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=(($351+4)|0); //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($352)>>2)]=$350; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $353=$psize; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $354=$p; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $355=$354; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $356=$psize; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $357=(($355+$356)|0); //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=$357; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=(($358)|0); //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($359)>>2)]=$353; //@line 4775 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4776 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 76; break; //@line 4778 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 195; break; //@line 4780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break; //@line 4782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $366=$p; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=$366; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$next; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=$368; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $370=(($367)>>>0) < (($369)>>>0); //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($370) { __label__ = 79; break; } else { var $378 = 0;__label__ = 80; break; } //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $372=$next; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $373=(($372+4)|0); //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374=HEAP32[(($373)>>2)]; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $375=$374 & 1; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $376=(($375)|0)!=0; //@line 4784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $378 = $376;__label__ = 80; break;
    case 80: 
      var $378;
      var $379=(($378)&1);
      var $380=(($379)==(1));
      var $381=(($380)|0)!=0;
      if ($381) { __label__ = 81; break; } else { __label__ = 193; break; }
    case 81: 
      var $383=$next; //@line 4785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $384=(($383+4)|0); //@line 4785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=$385 & 2; //@line 4785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0)!=0; //@line 4785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($387) { __label__ = 154; break; } else { __label__ = 82; break; } //@line 4785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $389=$next; //@line 4786 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $390=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4786 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $391=(($389)|0)==(($390)|0); //@line 4786 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($391) { __label__ = 83; break; } else { __label__ = 88; break; } //@line 4786 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $393=$psize; //@line 4787 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $394=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4787 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $395=((($394)+($393))|0); //@line 4787 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$395; //@line 4787 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$395; //@line 4787 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $396=$p; //@line 4788 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$396; //@line 4788 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $397=$tsize; //@line 4789 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $398=$397 | 1; //@line 4789 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $399=$p; //@line 4789 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $400=(($399+4)|0); //@line 4789 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($400)>>2)]=$398; //@line 4789 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $401=$p; //@line 4790 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4790 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $403=(($401)|0)==(($402)|0); //@line 4790 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($403) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4790 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4791 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $406=$tsize; //@line 4794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $407=HEAPU32[((((__gm_+28)|0))>>2)]; //@line 4794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $408=(($406)>>>0) > (($407)>>>0); //@line 4794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($408) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 4794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $410=_sys_trim(__gm_, 0); //@line 4795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 4795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 87: 
      __label__ = 196; break; //@line 4796 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $413=$next; //@line 4798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $414=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $415=(($413)|0)==(($414)|0); //@line 4798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($415) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $417=$psize; //@line 4799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $418=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $419=((($418)+($417))|0); //@line 4799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$419; //@line 4799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $dsize=$419; //@line 4799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $420=$p; //@line 4800 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$420; //@line 4800 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $421=$dsize; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $422=$421 | 1; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $423=$p; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $424=(($423+4)|0); //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($424)>>2)]=$422; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $425=$dsize; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $426=$p; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $427=$426; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $428=$dsize; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $429=(($427+$428)|0); //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $430=$429; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $431=(($430)|0); //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($431)>>2)]=$425; //@line 4801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4802 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $433=$next; //@line 4805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $434=(($433+4)|0); //@line 4805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $435=HEAP32[(($434)>>2)]; //@line 4805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $436=$435 & -8; //@line 4805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nsize=$436; //@line 4805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $437=$nsize; //@line 4806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $438=$psize; //@line 4806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $439=((($438)+($437))|0); //@line 4806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$439; //@line 4806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $440=$nsize; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $441=$440 >>> 3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $442=(($441)>>>0) < 32; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($442) { __label__ = 91; break; } else { __label__ = 103; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $444=$next; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $445=(($444+8)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $446=HEAP32[(($445)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F2=$446; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $447=$next; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $448=(($447+12)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $449=HEAP32[(($448)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B3=$449; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $450=$nsize; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $451=$450 >>> 3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I4=$451; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $452=$F2; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $453=$B3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $454=(($452)|0)==(($453)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($454) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $456=$I4; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $457=1 << $456; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $458=$457 ^ -1; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $459=HEAP32[((((__gm_)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $460=$459 & $458; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$460; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $462=$F2; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $463=$I4; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $464=$463 << 1; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $465=((((__gm_+40)|0)+($464<<2))|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $466=$465; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $467=$466; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $468=(($462)|0)==(($467)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($468) { __label__ = 95; break; } else { __label__ = 94; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $470=$F2; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $471=$470; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $472=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $473=(($471)>>>0) >= (($472)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($473) { __label__ = 95; break; } else { var $490 = 0;__label__ = 98; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $475=$B3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $476=$I4; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $477=$476 << 1; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $478=((((__gm_+40)|0)+($477<<2))|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $479=$478; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $480=$479; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $481=(($475)|0)==(($480)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($481) { var $488 = 1;__label__ = 97; break; } else { __label__ = 96; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $483=$B3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $484=$483; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $485=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $486=(($484)>>>0) >= (($485)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $488 = $486;__label__ = 97; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $488;
      var $490 = $488;__label__ = 98; break;
    case 98: 
      var $490;
      var $491=(($490)&1);
      var $492=(($491)==(1));
      var $493=(($492)|0)!=0;
      if ($493) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $495=$B3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $496=$F2; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+12)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $498=$F2; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $499=$B3; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $500=(($499+8)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($500)>>2)]=$498; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 100: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 149; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $505=$next; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $506=$505; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $TP5=$506; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $507=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $508=(($507+24)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $509=HEAP32[(($508)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $XP6=$509; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $510=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $511=(($510+12)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $512=HEAP32[(($511)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $513=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $514=(($512)|0)!=(($513)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($514) { __label__ = 104; break; } else { __label__ = 108; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $516=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $517=(($516+8)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $518=HEAP32[(($517)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F8=$518; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $519=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $520=(($519+12)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $521=HEAP32[(($520)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R7=$521; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $522=$F8; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $523=$522; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $524=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $525=(($523)>>>0) >= (($524)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $526=(($525)&1); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $527=(($526)==(1)); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $528=(($527)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($528) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $530=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $531=$F8; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $532=(($531+12)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($532)>>2)]=$530; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $533=$F8; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $534=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $535=(($534+8)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($535)>>2)]=$533; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 106: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 107: 
      __label__ = 120; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $539=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $540=(($539+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $541=(($540+4)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP9=$541; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $542=HEAP32[(($541)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R7=$542; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $543=(($542)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($543) { __label__ = 110; break; } else { __label__ = 109; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $545=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $546=(($545+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $547=(($546)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP9=$547; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $548=HEAP32[(($547)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R7=$548; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $549=(($548)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($549) { __label__ = 110; break; } else { __label__ = 119; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 110: 
      __label__ = 111; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $552=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $553=(($552+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $554=(($553+4)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP10=$554; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $555=HEAP32[(($554)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $556=(($555)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($556) { var $564 = 1;__label__ = 113; break; } else { __label__ = 112; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $558=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $559=(($558+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $560=(($559)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP10=$560; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $561=HEAP32[(($560)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $562=(($561)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $564 = $562;__label__ = 113; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 113: 
      var $564;
      if ($564) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $566=$CP10; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP9=$566; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $567=HEAP32[(($566)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R7=$567; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 111; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $569=$RP9; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $570=$569; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $571=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $572=(($570)>>>0) >= (($571)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $573=(($572)&1); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $574=(($573)==(1)); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $575=(($574)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($575) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $577=$RP9; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($577)>>2)]=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 118; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 117: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 118: 
      __label__ = 119; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 119: 
      __label__ = 120; break;
    case 120: 
      var $582=$XP6; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $583=(($582)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($583) { __label__ = 121; break; } else { __label__ = 148; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 121: 
      var $585=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $586=(($585+28)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $587=HEAP32[(($586)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $588=((((__gm_+304)|0)+($587<<2))|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H11=$588; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $589=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $590=$H11; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $591=HEAP32[(($590)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $592=(($589)|0)==(($591)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($592) { __label__ = 122; break; } else { __label__ = 125; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 122: 
      var $594=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $595=$H11; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($595)>>2)]=$594; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $596=(($594)|0)==0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($596) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 123: 
      var $598=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $599=(($598+28)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $600=HEAP32[(($599)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $601=1 << $600; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $602=$601 ^ -1; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $603=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $604=$603 & $602; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$604; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 124: 
      __label__ = 132; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 125: 
      var $607=$XP6; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $608=$607; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $609=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $610=(($608)>>>0) >= (($609)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $611=(($610)&1); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $612=(($611)==(1)); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $613=(($612)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($613) { __label__ = 126; break; } else { __label__ = 130; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 126: 
      var $615=$XP6; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $616=(($615+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $617=(($616)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $618=HEAP32[(($617)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $619=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $620=(($618)|0)==(($619)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($620) { __label__ = 127; break; } else { __label__ = 128; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $622=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $623=$XP6; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $624=(($623+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $625=(($624)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($625)>>2)]=$622; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $627=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $628=$XP6; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $629=(($628+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $630=(($629+4)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($630)>>2)]=$627; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break;
    case 129: 
      __label__ = 131; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 130: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 131: 
      __label__ = 132; break;
    case 132: 
      var $635=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $636=(($635)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($636) { __label__ = 133; break; } else { __label__ = 147; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 133: 
      var $638=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $639=$638; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $640=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $641=(($639)>>>0) >= (($640)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $642=(($641)&1); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $643=(($642)==(1)); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $644=(($643)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($644) { __label__ = 134; break; } else { __label__ = 145; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 134: 
      var $646=$XP6; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $647=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $648=(($647+24)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($648)>>2)]=$646; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $649=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $650=(($649+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $651=(($650)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $652=HEAP32[(($651)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C012=$652; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $653=(($652)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($653) { __label__ = 135; break; } else { __label__ = 139; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 135: 
      var $655=$C012; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $656=$655; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $657=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $658=(($656)>>>0) >= (($657)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $659=(($658)&1); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $660=(($659)==(1)); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $661=(($660)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($661) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 136: 
      var $663=$C012; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $664=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $665=(($664+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $666=(($665)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($666)>>2)]=$663; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $667=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $668=$C012; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $669=(($668+24)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($669)>>2)]=$667; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 138; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 137: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 138: 
      __label__ = 139; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 139: 
      var $673=$TP5; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $674=(($673+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $675=(($674+4)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $676=HEAP32[(($675)>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C113=$676; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $677=(($676)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($677) { __label__ = 140; break; } else { __label__ = 144; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 140: 
      var $679=$C113; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $680=$679; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $681=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $682=(($680)>>>0) >= (($681)>>>0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $683=(($682)&1); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $684=(($683)==(1)); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $685=(($684)|0)!=0; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($685) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 141: 
      var $687=$C113; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $688=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $689=(($688+16)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $690=(($689+4)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($690)>>2)]=$687; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $691=$R7; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $692=$C113; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $693=(($692+24)|0); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($693)>>2)]=$691; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 143; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 142: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 143: 
      __label__ = 144; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 144: 
      __label__ = 146; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 145: 
      _abort(); //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 146: 
      __label__ = 147; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 147: 
      __label__ = 148; break; //@line 4807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 148: 
      __label__ = 149; break;
    case 149: 
      var $702=$psize; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $703=$702 | 1; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $704=$p; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $705=(($704+4)|0); //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($705)>>2)]=$703; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $706=$psize; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $707=$p; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $708=$707; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $709=$psize; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $710=(($708+$709)|0); //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $711=$710; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $712=(($711)|0); //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($712)>>2)]=$706; //@line 4808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $713=$p; //@line 4809 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $714=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4809 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $715=(($713)|0)==(($714)|0); //@line 4809 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($715) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 4809 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 150: 
      var $717=$psize; //@line 4810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$717; //@line 4810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 151: 
      __label__ = 152; break;
    case 152: 
      __label__ = 153; break;
    case 153: 
      __label__ = 155; break; //@line 4814 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 154: 
      var $722=$next; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $723=(($722+4)|0); //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $724=HEAP32[(($723)>>2)]; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $725=$724 & -2; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($723)>>2)]=$725; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $726=$psize; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $727=$726 | 1; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $728=$p; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $729=(($728+4)|0); //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($729)>>2)]=$727; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $730=$psize; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $731=$p; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $732=$731; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $733=$psize; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $734=(($732+$733)|0); //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $735=$734; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $736=(($735)|0); //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($736)>>2)]=$730; //@line 4816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 155; break;
    case 155: 
      var $738=$psize; //@line 4818 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $739=$738 >>> 3; //@line 4818 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $740=(($739)>>>0) < 32; //@line 4818 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($740) { __label__ = 156; break; } else { __label__ = 163; break; } //@line 4818 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 156: 
      var $742=$psize; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $743=$742 >>> 3; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I14=$743; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $744=$I14; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $745=$744 << 1; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $746=((((__gm_+40)|0)+($745<<2))|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $747=$746; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $748=$747; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B15=$748; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $749=$B15; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F16=$749; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $750=HEAP32[((((__gm_)|0))>>2)]; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $751=$I14; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $752=1 << $751; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $753=$750 & $752; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $754=(($753)|0)!=0; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($754) { __label__ = 158; break; } else { __label__ = 157; break; } //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 157: 
      var $756=$I14; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $757=1 << $756; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $758=HEAP32[((((__gm_)|0))>>2)]; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $759=$758 | $757; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$759; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 162; break; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 158: 
      var $761=$B15; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $762=(($761+8)|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $763=HEAP32[(($762)>>2)]; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $764=$763; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $765=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $766=(($764)>>>0) >= (($765)>>>0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $767=(($766)&1); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $768=(($767)==(1)); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $769=(($768)|0)!=0; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($769) { __label__ = 159; break; } else { __label__ = 160; break; } //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 159: 
      var $771=$B15; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $772=(($771+8)|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $773=HEAP32[(($772)>>2)]; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F16=$773; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 161; break; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 160: 
      _abort(); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 161: 
      __label__ = 162; break;
    case 162: 
      var $777=$p; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $778=$B15; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $779=(($778+8)|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($779)>>2)]=$777; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $780=$p; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $781=$F16; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $782=(($781+12)|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($782)>>2)]=$780; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $783=$F16; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $784=$p; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $785=(($784+8)|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($785)>>2)]=$783; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $786=$B15; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $787=$p; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $788=(($787+12)|0); //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($788)>>2)]=$786; //@line 4819 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 192; break; //@line 4821 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 163: 
      var $790=$p; //@line 4823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $791=$790; //@line 4823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tp=$791; //@line 4823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $792=$psize; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $793=$792 >>> 8; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $X=$793; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $794=$X; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $795=(($794)|0)==0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($795) { __label__ = 164; break; } else { __label__ = 165; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 164: 
      $I18=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 169; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 165: 
      var $798=$X; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $799=(($798)>>>0) > 65535; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($799) { __label__ = 166; break; } else { __label__ = 167; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 166: 
      $I18=31; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 167: 
      var $802=$X; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$802; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $803=$Y; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $804=((($803)-(256))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $805=$804 >>> 16; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $806=$805 & 8; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$806; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $807=$N; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $808=$Y; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $809=$808 << $807; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$809; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $810=((($809)-(4096))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $811=$810 >>> 16; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $812=$811 & 4; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$812; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $813=$K; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $814=$N; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $815=((($814)+($813))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$815; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $816=$K; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $817=$Y; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $818=$817 << $816; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$818; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $819=((($818)-(16384))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $820=$819 >>> 16; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $821=$820 & 2; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$821; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $822=$N; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $823=((($822)+($821))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$823; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $824=$N; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $825=(((14)-($824))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $826=$K; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $827=$Y; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $828=$827 << $826; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$828; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $829=$828 >>> 15; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $830=((($825)+($829))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$830; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $831=$K; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $832=$831 << 1; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $833=$psize; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $834=$K; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $835=((($834)+(7))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $836=$833 >>> (($835)>>>0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $837=$836 & 1; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $838=((($832)+($837))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I18=$838; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break;
    case 168: 
      __label__ = 169; break;
    case 169: 
      var $841=$I18; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $842=((((__gm_+304)|0)+($841<<2))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H17=$842; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $843=$I18; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $844=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $845=(($844+28)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($845)>>2)]=$843; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $846=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $847=(($846+16)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $848=(($847+4)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($848)>>2)]=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $849=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $850=(($849+16)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $851=(($850)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($851)>>2)]=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $852=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $853=$I18; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $854=1 << $853; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $855=$852 & $854; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $856=(($855)|0)!=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($856) { __label__ = 171; break; } else { __label__ = 170; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 170: 
      var $858=$I18; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $859=1 << $858; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $860=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $861=$860 | $859; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$861; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $862=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $863=$H17; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($863)>>2)]=$862; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $864=$H17; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $865=$864; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $866=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $867=(($866+24)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($867)>>2)]=$865; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $868=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $869=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $870=(($869+12)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($870)>>2)]=$868; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $871=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $872=(($871+8)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($872)>>2)]=$868; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 189; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 171: 
      var $874=$H17; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $875=HEAP32[(($874)>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$875; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $876=$psize; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $877=$I18; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $878=(($877)|0)==31; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($878) { __label__ = 172; break; } else { __label__ = 173; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 172: 
      var $887 = 0;__label__ = 174; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 173: 
      var $881=$I18; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $882=$881 >>> 1; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $883=((($882)+(8))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $884=((($883)-(2))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $885=(((31)-($884))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $887 = $885;__label__ = 174; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 174: 
      var $887; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $888=$876 << $887; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K19=$888; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 175; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 175: 
      var $890=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $891=(($890+4)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $892=HEAP32[(($891)>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $893=$892 & -8; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $894=$psize; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $895=(($893)|0)!=(($894)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($895) { __label__ = 176; break; } else { __label__ = 182; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 176: 
      var $897=$K19; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $898=$897 >>> 31; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $899=$898 & 1; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $900=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $901=(($900+16)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $902=(($901+($899<<2))|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C=$902; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $903=$K19; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $904=$903 << 1; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K19=$904; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $905=$C; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $906=HEAP32[(($905)>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $907=(($906)|0)!=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($907) { __label__ = 177; break; } else { __label__ = 178; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 177: 
      var $909=$C; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $910=HEAP32[(($909)>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$910; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 181; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 178: 
      var $912=$C; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $913=$912; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $914=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $915=(($913)>>>0) >= (($914)>>>0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $916=(($915)&1); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $917=(($916)==(1)); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $918=(($917)|0)!=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($918) { __label__ = 179; break; } else { __label__ = 180; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 179: 
      var $920=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $921=$C; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($921)>>2)]=$920; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $922=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $923=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $924=(($923+24)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($924)>>2)]=$922; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $925=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $926=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $927=(($926+12)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($927)>>2)]=$925; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $928=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $929=(($928+8)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($929)>>2)]=$925; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 180: 
      _abort(); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 181: 
      __label__ = 187; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 182: 
      var $933=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $934=(($933+8)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $935=HEAP32[(($934)>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F20=$935; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $936=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $937=$936; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $938=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $939=(($937)>>>0) >= (($938)>>>0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($939) { __label__ = 183; break; } else { var $946 = 0;__label__ = 184; break; } //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 183: 
      var $941=$F20; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $942=$941; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $943=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $944=(($942)>>>0) >= (($943)>>>0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $946 = $944;__label__ = 184; break;
    case 184: 
      var $946;
      var $947=(($946)&1);
      var $948=(($947)==(1));
      var $949=(($948)|0)!=0;
      if ($949) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $951=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $952=$F20; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $953=(($952+12)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($953)>>2)]=$951; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $954=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $955=(($954+8)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($955)>>2)]=$951; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $956=$F20; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $957=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $958=(($957+8)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($958)>>2)]=$956; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $959=$T; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $960=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $961=(($960+12)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($961)>>2)]=$959; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $962=$tp; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $963=(($962+24)|0); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($963)>>2)]=0; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 186: 
      _abort(); //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 187: 
      __label__ = 175; break; //@line 4824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 188: 
      __label__ = 189; break;
    case 189: 
      var $968=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $969=((($968)-(1))|0); //@line 4826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$969; //@line 4826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $970=(($969)|0)==0; //@line 4826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($970) { __label__ = 190; break; } else { __label__ = 191; break; } //@line 4826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 190: 
      var $972=_release_unused_segments(__gm_); //@line 4827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 191; break; //@line 4827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 191: 
      __label__ = 192; break;
    case 192: 
      __label__ = 196; break; //@line 4829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 193: 
      __label__ = 194; break; //@line 4831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 194: 
      __label__ = 195; break; //@line 4831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 195: 
      _abort(); //@line 4833 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4833 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 196: 
      __label__ = 197; break; //@line 4837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 197: 
      ;
      return; //@line 4841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_free"] = _free;_free["X"]=1;

function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0; //@line 4126 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($4) { var $9 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=_init_mparams(); //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=(($6)|0)!=0; //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9 = $7;__label__ = 4; break; //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $9;
      var $10=(($9)&1); //@line 4127 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$2; //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)>>>0) < 4294967232; //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 26; break; } //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $14=$1; //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+24)|0); //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(($16)|0)!=0; //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($17) { __label__ = 6; break; } else { __label__ = 26; break; } //@line 4128 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $19=$2; //@line 4129 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=((($19)+(40))|0); //@line 4129 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $2=$20; //@line 4129 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$1; //@line 4131 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+12)|0); //@line 4131 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=HEAPU32[(($22)>>2)]; //@line 4131 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$2; //@line 4131 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($23)>>>0) > (($24)>>>0); //@line 4131 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 22; break; } //@line 4131 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $27=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $unit=$27; //@line 4133 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$1; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$2; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=((($30)-($31))|0); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$unit; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=((($33)-(1))|0); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=((($32)+($34))|0); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$unit; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0))); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=((($37)-(1))|0); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$unit; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=((($38)*($39))|0); //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $extra=$40; //@line 4135 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$1; //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$1; //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+24)|0); //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$44; //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=_segment_holding($41, $45); //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$46; //@line 4136 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$sp; //@line 4138 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+12)|0); //@line 4138 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 4138 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$49 & 8; //@line 4138 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=(($50)|0)!=0; //@line 4138 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($51) { __label__ = 19; break; } else { __label__ = 8; break; } //@line 4138 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $53=$sp; //@line 4139 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=(($53+12)|0); //@line 4139 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 4139 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$55 & 0; //@line 4139 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($56)|0)!=0; //@line 4139 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4139 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 18; break; //@line 4151 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $60=$extra; //@line 4153 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)>>>0) >= 2147483647; //@line 4153 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($61) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4153 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $63=$unit; //@line 4154 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=(((-2147483648)-($63))|0); //@line 4154 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $extra=$64; //@line 4154 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4154 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $66=_sbrk(0); //@line 4158 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $old_br=$66; //@line 4158 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$old_br; //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$sp; //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0); //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$sp; //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+4)|0); //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($70+$73)|0); //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=(($67)|0)==(($74)|0); //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($75) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4159 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $77=$extra; //@line 4160 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=(((-$77))|0); //@line 4160 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=_sbrk($78); //@line 4160 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rel_br=$79; //@line 4160 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=_sbrk(0); //@line 4161 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $new_br=$80; //@line 4161 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$rel_br; //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=(($81)|0)!=-1; //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($82) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $84=$new_br; //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$old_br; //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=(($84)>>>0) < (($85)>>>0); //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($86) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4162 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $88=$old_br; //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$new_br; //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=$88; //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$89; //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=((($90)-($91))|0); //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $released=$92; //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4163 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4164 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break; //@line 4168 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $97=$released; //@line 4170 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=(($97)|0)!=0; //@line 4170 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($98) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4170 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $100=$released; //@line 4171 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$sp; //@line 4171 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=(($101+4)|0); //@line 4171 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4171 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=((($103)-($100))|0); //@line 4171 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($102)>>2)]=$104; //@line 4171 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$released; //@line 4172 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$1; //@line 4172 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+432)|0); //@line 4172 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4172 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=((($108)-($105))|0); //@line 4172 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($107)>>2)]=$109; //@line 4172 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$1; //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$1; //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+24)|0); //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$1; //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=(($114+12)|0); //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($115)>>2)]; //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$released; //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=((($116)-($117))|0); //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($110, $113, $118); //@line 4173 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4175 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 4176 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $121=$released; //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=(($121)|0)==0; //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($122) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $124=$1; //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=(($124+12)|0); //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=HEAPU32[(($125)>>2)]; //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$1; //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=(($127+28)|0); //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=HEAPU32[(($128)>>2)]; //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=(($126)>>>0) > (($129)>>>0); //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($130) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4183 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $132=$1; //@line 4184 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=(($132+28)|0); //@line 4184 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($133)>>2)]=-1; //@line 4184 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4184 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break; //@line 4185 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $136=$released; //@line 4187 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=(($136)|0)!=0; //@line 4187 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$137 ? 1 : 0; //@line 4187 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $138; //@line 4187 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_trim["X"]=1;

function _calloc($n_elements, $elem_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $mem;
      var $req;
      $1=$n_elements;
      $2=$elem_size;
      $req=0; //@line 4845 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$1; //@line 4846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=$1; //@line 4847 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$2; //@line 4847 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=((($6)*($7))|0); //@line 4847 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $req=$8; //@line 4847 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$1; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$2; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$9 | $10; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & -65536; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)!=0; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $15=$req; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$1; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=Math.floor(((($15)>>>0))/((($16)>>>0))); //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$2; //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=(($17)|0)!=(($18)|0); //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4848 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $req=-1; //@line 4850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      __label__ = 7; break; //@line 4851 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $23=$req; //@line 4852 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=_malloc($23); //@line 4852 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$24; //@line 4852 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$mem; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)!=0; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $28=$mem; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=((($28)-(8))|0); //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($30+4)|0); //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=HEAP32[(($31)>>2)]; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$32 & 3; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=(($33)|0)==0; //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($34) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 4853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $36=$mem; //@line 4854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$req; //@line 4854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _memset($36, 0, $37, 1); //@line 4854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 4854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $39=$mem; //@line 4855 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $39; //@line 4855 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _realloc($oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2; //@line 4859 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)==0; //@line 4859 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4859 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=$3; //@line 4860 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=_malloc($7); //@line 4860 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$8; //@line 4860 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4860 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $m=__gm_; //@line 4869 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$m; //@line 4877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$2; //@line 4877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$3; //@line 4877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=_internal_realloc($10, $11, $12); //@line 4877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$13; //@line 4877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4877 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $15=$1; //@line 4879 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $15; //@line 4879 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0; //@line 4079 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nsegs=0; //@line 4080 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$1; //@line 4081 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2+444)|0); //@line 4081 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $pred=$3; //@line 4081 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$pred; //@line 4082 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+8)|0); //@line 4082 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 4082 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$6; //@line 4082 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4083 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8=$sp; //@line 4083 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)!=0; //@line 4083 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 88; break; } //@line 4083 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $11=$sp; //@line 4084 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)|0); //@line 4084 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 4084 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $base=$13; //@line 4084 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$sp; //@line 4085 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+4)|0); //@line 4085 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 4085 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $size=$16; //@line 4085 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$sp; //@line 4086 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+8)|0); //@line 4086 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 4086 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $next=$19; //@line 4086 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$nsegs; //@line 4087 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=((($20)+(1))|0); //@line 4087 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nsegs=$21; //@line 4087 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$sp; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=(($22+12)|0); //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$24 & 0; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)!=0; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 5; break; } else { __label__ = 87; break; } //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $28=$sp; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+12)|0); //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$30 & 8; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=(($31)|0)!=0; //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($32) { __label__ = 87; break; } else { __label__ = 6; break; } //@line 4088 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $34=$base; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$base; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=(($35+8)|0); //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$36; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$37 & 7; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=(($38)|0)==0; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $49 = 0;__label__ = 9; break; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $42=$base; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=(($42+8)|0); //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 7; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(((8)-($45))|0); //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$46 & 7; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49 = $47;__label__ = 9; break; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $49; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=(($34+$49)|0); //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$51; //@line 4089 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$p; //@line 4090 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=(($52+4)|0); //@line 4090 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4090 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$54 & -8; //@line 4090 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$55; //@line 4090 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$p; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+4)|0); //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=HEAP32[(($57)>>2)]; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$58 & 3; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=1; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 86; break; } else { __label__ = 10; break; } //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $62=$p; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$psize; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=(($63+$64)|0); //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$base; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$size; //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=(($66+$67)|0); //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)-(40))|0); //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=(($65)>>>0) >= (($69)>>>0); //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($70) { __label__ = 11; break; } else { __label__ = 86; break; } //@line 4092 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $72=$p; //@line 4093 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$72; //@line 4093 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tp=$73; //@line 4093 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$p; //@line 4095 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$1; //@line 4095 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=(($75+20)|0); //@line 4095 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=HEAP32[(($76)>>2)]; //@line 4095 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=(($74)|0)==(($77)|0); //@line 4095 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($78) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4095 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $80=$1; //@line 4096 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=(($80+20)|0); //@line 4096 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($81)>>2)]=0; //@line 4096 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$1; //@line 4097 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+8)|0); //@line 4097 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($83)>>2)]=0; //@line 4097 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4098 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $85=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+24)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$87; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+12)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=(($90)|0)!=(($91)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($92) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $94=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+8)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$96; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+12)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=HEAP32[(($98)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$99; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$F; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$100; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($103)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=(($101)>>>0) >= (($104)>>>0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)&1); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=(($106)==(1)); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=(($107)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($108) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $110=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$F; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+12)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($112)>>2)]=$110; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=$F; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=(($114+8)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($115)>>2)]=$113; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      _abort(); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 30; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $119=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+4)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$121; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$122; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=(($122)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($123) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $125=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=(($126)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$127; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$128; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=(($128)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($129) { __label__ = 20; break; } else { __label__ = 29; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $132=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=(($132+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=(($133+4)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$134; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($134)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($136) { var $144 = 1;__label__ = 23; break; } else { __label__ = 22; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $138=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=(($138+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=(($139)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$140; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=(($141)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144 = $142;__label__ = 23; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $144;
      if ($144) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $146=$CP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$146; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($146)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$147; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $149=$RP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$149; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=HEAPU32[(($152)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=(($150)>>>0) >= (($153)>>>0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=(($154)&1); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=(($155)==(1)); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=(($156)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($157) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $159=$RP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($159)>>2)]=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $164=$XP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=(($164)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($165) { __label__ = 31; break; } else { __label__ = 58; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $167=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=(($167+28)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=HEAP32[(($168)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=(($170+304)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=(($171+($169<<2))|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H=$172; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $174=$H; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=HEAP32[(($174)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=(($173)|0)==(($175)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($176) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $178=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$H; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $180=(($178)|0)==0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($180) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $182=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+28)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=1 << $184; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$185 ^ -1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+4)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $190=$189 & $186; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($188)>>2)]=$190; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 42; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $193=$XP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=$193; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=(($195+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=HEAPU32[(($196)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=(($194)>>>0) >= (($197)>>>0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)&1); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=(($199)==(1)); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $201=(($200)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($201) { __label__ = 36; break; } else { __label__ = 40; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $203=$XP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=(($203+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=(($204)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=HEAP32[(($205)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=(($206)|0)==(($207)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($208) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $210=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=$XP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=(($211+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=(($212)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($213)>>2)]=$210; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $215=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $216=$XP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $217=(($216+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $218=(($217+4)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($218)>>2)]=$215; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break;
    case 39: 
      __label__ = 41; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $223=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=(($223)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($224) { __label__ = 43; break; } else { __label__ = 57; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $226=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $229=(($228+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230=HEAPU32[(($229)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $231=(($227)>>>0) >= (($230)>>>0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $232=(($231)&1); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $233=(($232)==(1)); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $234=(($233)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($234) { __label__ = 44; break; } else { __label__ = 55; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $236=$XP; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $238=(($237+24)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($238)>>2)]=$236; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $239=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $240=(($239+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $241=(($240)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($241)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$242; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=(($242)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($243) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $245=$C0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=$245; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=(($247+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $249=HEAPU32[(($248)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $250=(($246)>>>0) >= (($249)>>>0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $251=(($250)&1); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $252=(($251)==(1)); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $253=(($252)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($253) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $255=$C0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $256=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $257=(($256+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $258=(($257)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($258)>>2)]=$255; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=$C0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $261=(($260+24)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$259; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      _abort(); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $265=$tp; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $266=(($265+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $267=(($266+4)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $268=HEAP32[(($267)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$268; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $269=(($268)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($269) { __label__ = 50; break; } else { __label__ = 54; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $271=$C1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $272=$271; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $273=$1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $274=(($273+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[(($274)>>2)]; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=(($272)>>>0) >= (($275)>>>0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $277=(($276)&1); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $278=(($277)==(1)); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=(($278)|0)!=0; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($279) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $281=$C1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $283=(($282+16)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $284=(($283+4)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($284)>>2)]=$281; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $285=$R; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $286=$C1; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=(($286+24)|0); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($287)>>2)]=$285; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      _abort(); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 54; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 56; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break; //@line 4100 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $296=$psize; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $297=$296 >>> 8; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $X=$297; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$X; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $299=(($298)|0)==0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($299) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      $I=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $302=$X; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $303=(($302)>>>0) > 65535; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($303) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      $I=31; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $306=$X; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$306; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $307=$Y; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $308=((($307)-(256))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $309=$308 >>> 16; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $310=$309 & 8; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$310; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $311=$N; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $312=$Y; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $313=$312 << $311; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$313; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $314=((($313)-(4096))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=$314 >>> 16; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=$315 & 4; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$316; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=$K; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $318=$N; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $319=((($318)+($317))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$319; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $320=$K; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$Y; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $322=$321 << $320; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$322; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=((($322)-(16384))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=$323 >>> 16; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=$324 & 2; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$325; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=$N; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $327=((($326)+($325))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$327; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $328=$N; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $329=(((14)-($328))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $330=$K; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $331=$Y; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $332=$331 << $330; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$332; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $333=$332 >>> 15; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $334=((($329)+($333))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$334; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $335=$K; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $336=$335 << 1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $337=$psize; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $338=$K; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=((($338)+(7))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=$337 >>> (($339)>>>0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=$340 & 1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=((($336)+($341))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$342; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $345=$I; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=$1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=(($346+304)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+($345<<2))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H1=$348; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $349=$I; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+28)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+16)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $354=(($353+4)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($354)>>2)]=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $355=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+16)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $357=(($356)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($357)>>2)]=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=$1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=(($358+4)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $360=HEAP32[(($359)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $361=$I; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $362=1 << $361; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $363=$360 & $362; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $364=(($363)|0)!=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($364) { __label__ = 67; break; } else { __label__ = 66; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $366=$I; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=1 << $366; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=(($368+4)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $370=HEAP32[(($369)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $371=$370 | $367; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($369)>>2)]=$371; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $372=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $373=$H1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($373)>>2)]=$372; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374=$H1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $375=$374; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $376=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $377=(($376+24)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($377)>>2)]=$375; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $378=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $379=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=(($379+12)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($380)>>2)]=$378; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+8)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($382)>>2)]=$378; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $384=$H1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($384)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$385; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=$psize; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=$I; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $388=(($387)|0)==31; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($388) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $397 = 0;__label__ = 70; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $391=$I; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $392=$391 >>> 1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $393=((($392)+(8))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $394=((($393)-(2))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $395=(((31)-($394))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $397 = $395;__label__ = 70; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $397; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $398=$386 << $397; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$398; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 71; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $400=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $401=(($400+4)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $402=HEAP32[(($401)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $403=$402 & -8; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $404=$psize; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $405=(($403)|0)!=(($404)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($405) { __label__ = 72; break; } else { __label__ = 78; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $407=$K2; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $408=$407 >>> 31; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $409=$408 & 1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $410=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $411=(($410+16)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $412=(($411+($409<<2))|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C=$412; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $413=$K2; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $414=$413 << 1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$414; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $415=$C; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $416=HEAP32[(($415)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $417=(($416)|0)!=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($417) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $419=$C; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $420=HEAP32[(($419)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$420; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $422=$C; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $423=$422; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $424=$1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $425=(($424+16)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $426=HEAPU32[(($425)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $427=(($423)>>>0) >= (($426)>>>0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $428=(($427)&1); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $429=(($428)==(1)); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $430=(($429)|0)!=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($430) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $432=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $433=$C; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($433)>>2)]=$432; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $434=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $435=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $436=(($435+24)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($436)>>2)]=$434; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $437=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $438=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $439=(($438+12)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($439)>>2)]=$437; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $440=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $441=(($440+8)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($441)>>2)]=$437; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      _abort(); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      __label__ = 83; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $445=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $446=(($445+8)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $447=HEAP32[(($446)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F3=$447; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $448=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $449=$448; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $450=$1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $451=(($450+16)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $452=HEAPU32[(($451)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $453=(($449)>>>0) >= (($452)>>>0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($453) { __label__ = 79; break; } else { var $462 = 0;__label__ = 80; break; } //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $455=$F3; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $456=$455; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $457=$1; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $458=(($457+16)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $459=HEAPU32[(($458)>>2)]; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $460=(($456)>>>0) >= (($459)>>>0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $462 = $460;__label__ = 80; break;
    case 80: 
      var $462;
      var $463=(($462)&1);
      var $464=(($463)==(1));
      var $465=(($464)|0)!=0;
      if ($465) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $467=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $468=$F3; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $469=(($468+12)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($469)>>2)]=$467; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $470=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $471=(($470+8)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($471)>>2)]=$467; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $472=$F3; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $473=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $474=(($473+8)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($474)>>2)]=$472; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $475=$T; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $476=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $477=(($476+12)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $478=$tp; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $479=(($478+24)|0); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($479)>>2)]=0; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      _abort(); //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 71; break; //@line 4110 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break; //@line 4112 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      __label__ = 87; break; //@line 4113 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $486=$sp; //@line 4116 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $pred=$486; //@line 4116 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $487=$next; //@line 4117 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$487; //@line 4117 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4118 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $489=$nsegs; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $490=(($489)>>>0) > 4294967295; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($490) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $492=$nsegs; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $495 = $492;__label__ = 91; break; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $495 = -1;__label__ = 91; break; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $495; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $496=$1; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $497=(($496+32)|0); //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($497)>>2)]=$495; //@line 4120 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $498=$released; //@line 4122 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $498; //@line 4122 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_release_unused_segments["X"]=1;

function _memalign($alignment, $bytes) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$alignment;
  $2=$bytes;
  var $3=$1; //@line 4882 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $4=$2; //@line 4882 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $5=_internal_memalign(__gm_, $3, $4); //@line 4882 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return $5; //@line 4882 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _internal_memalign($m, $alignment, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $a;
      var $nb;
      var $req;
      var $mem;
      var $leader;
      var $trailer;
      var $p;
      var $br;
      var $pos;
      var $newp;
      var $leadsize;
      var $newsize;
      var $size;
      var $remainder_size;
      var $remainder;
      $2=$m;
      $3=$alignment;
      $4=$bytes;
      var $5=$3; //@line 4380 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) <= 8; //@line 4380 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4380 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8=$4; //@line 4381 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=_malloc($8); //@line 4381 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$9; //@line 4381 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4381 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $11=$3; //@line 4382 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=(($11)>>>0) < 16; //@line 4382 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4382 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $3=16; //@line 4383 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4383 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $15=$3; //@line 4384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$3; //@line 4384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=((($16)-(1))|0); //@line 4384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$15 & $17; //@line 4384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)!=0; //@line 4384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 4384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      $a=16; //@line 4385 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $22=$a; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$3; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=(($22)>>>0) < (($23)>>>0); //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $26=$a; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26 << 1; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $a=$27; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $29=$a; //@line 4387 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $3=$29; //@line 4387 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 4388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $31=$4; //@line 4390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$3; //@line 4390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=(((-64)-($32))|0); //@line 4390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=(($31)>>>0) >= (($33)>>>0); //@line 4390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($34) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 4390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $36=$2; //@line 4391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0)!=0; //@line 4391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($37) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $39=___errno(); //@line 4392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($39)>>2)]=12; //@line 4392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 4393 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      __label__ = 37; break; //@line 4394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $42=$4; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=(($42)>>>0) < 11; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($43) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $51 = 16;__label__ = 18; break; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $46=$4; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=((($46)+(4))|0); //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=((($47)+(7))|0); //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$48 & -8; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51 = $49;__label__ = 18; break; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $51; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$51; //@line 4396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$nb; //@line 4397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$3; //@line 4397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=((($52)+($53))|0); //@line 4397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=((($54)+(16))|0); //@line 4397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=((($55)-(4))|0); //@line 4397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $req=$56; //@line 4397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$req; //@line 4398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=_malloc($57); //@line 4398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$58; //@line 4398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$mem; //@line 4399 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=(($59)|0)!=0; //@line 4399 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($60) { __label__ = 19; break; } else { __label__ = 36; break; } //@line 4399 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      $leader=0; //@line 4400 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $trailer=0; //@line 4401 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$mem; //@line 4402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=((($62)-(8))|0); //@line 4402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$63; //@line 4402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$64; //@line 4402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$mem; //@line 4405 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4405 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$3; //@line 4405 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=((($66)>>>0))%((($67)>>>0)); //@line 4405 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=(($68)|0)!=0; //@line 4405 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($69) { __label__ = 20; break; } else { __label__ = 27; break; } //@line 4405 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $71=$mem; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$3; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=(($71+$72)|0); //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=((($73)-(1))|0); //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$74; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$3; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(((-$76))|0); //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$75 & $77; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$78; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=((($79)-(8))|0); //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$80; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$81; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $br=$82; //@line 4417 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$br; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$p; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$84; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$83; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$85; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=((($86)-($87))|0); //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=(($88)>>>0) >= 16; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $91=$br; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97 = $91;__label__ = 23; break; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $93=$br; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$3; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=(($93+$94)|0); //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97 = $95;__label__ = 23; break; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $97; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $pos=$97; //@line 4419 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$pos; //@line 4420 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4420 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$99; //@line 4420 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$pos; //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$p; //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$100; //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$102; //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=((($103)-($104))|0); //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leadsize=$105; //@line 4421 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$p; //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+4)|0); //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$108 & -8; //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$leadsize; //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=((($109)-($110))|0); //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newsize=$111; //@line 4422 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$p; //@line 4424 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=(($112+4)|0); //@line 4424 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 4424 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$114 & 3; //@line 4424 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=(($115)|0)==0; //@line 4424 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($116) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4424 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $118=$p; //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=(($118)|0); //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=HEAP32[(($119)>>2)]; //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$leadsize; //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=((($120)+($121))|0); //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$newp; //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=(($123)|0); //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($124)>>2)]=$122; //@line 4425 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$newsize; //@line 4426 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$newp; //@line 4426 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=(($126+4)|0); //@line 4426 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($127)>>2)]=$125; //@line 4426 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 4427 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $129=$newp; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=(($129+4)|0); //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$131 & 1; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$newsize; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$132 | $133; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$134 | 2; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$newp; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=(($136+4)|0); //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($137)>>2)]=$135; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$newp; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$newsize; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=(($139+$140)|0); //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$141; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=(($142+4)|0); //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$144 | 1; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($143)>>2)]=$145; //@line 4429 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$p; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=(($146+4)|0); //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=HEAP32[(($147)>>2)]; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$148 & 1; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$leadsize; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$149 | $150; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$151 | 2; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$p; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+4)|0); //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$p; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$leadsize; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=(($156+$157)|0); //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=$158; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+4)|0); //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($160)>>2)]; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$161 | 1; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($160)>>2)]=$162; //@line 4430 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$p; //@line 4431 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 4431 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+8)|0); //@line 4431 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $leader=$165; //@line 4431 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break;
    case 26: 
      var $167=$newp; //@line 4433 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$167; //@line 4433 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4434 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $169=$p; //@line 4437 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+4)|0); //@line 4437 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[(($170)>>2)]; //@line 4437 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$171 & 3; //@line 4437 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=(($172)|0)==0; //@line 4437 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($173) { __label__ = 31; break; } else { __label__ = 28; break; } //@line 4437 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $175=$p; //@line 4438 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+4)|0); //@line 4438 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 4438 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$177 & -8; //@line 4438 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $size=$178; //@line 4438 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$size; //@line 4439 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $180=$nb; //@line 4439 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $181=((($180)+(16))|0); //@line 4439 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $182=(($179)>>>0) > (($181)>>>0); //@line 4439 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($182) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 4439 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $184=$size; //@line 4440 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$nb; //@line 4440 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=((($184)-($185))|0); //@line 4440 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$186; //@line 4440 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$p; //@line 4441 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$187; //@line 4441 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$nb; //@line 4441 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $190=(($188+$189)|0); //@line 4441 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$190; //@line 4441 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $remainder=$191; //@line 4441 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$p; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=(($192+4)|0); //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=HEAP32[(($193)>>2)]; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=$194 & 1; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$nb; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$195 | $196; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$197 | 2; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$p; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=(($199+4)|0); //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($200)>>2)]=$198; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $201=$p; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$201; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=$nb; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=(($202+$203)|0); //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$204; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=(($205+4)|0); //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$207 | 1; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($206)>>2)]=$208; //@line 4442 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$remainder; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=(($209+4)|0); //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=HEAP32[(($210)>>2)]; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$211 & 1; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$remainder_size; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $214=$212 | $213; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $215=$214 | 2; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $216=$remainder; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $217=(($216+4)|0); //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($217)>>2)]=$215; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $218=$remainder; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$218; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$remainder_size; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=(($219+$220)|0); //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$221; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=(($222+4)|0); //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=HEAP32[(($223)>>2)]; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$224 | 1; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($223)>>2)]=$225; //@line 4443 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=$remainder; //@line 4444 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4444 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=(($227+8)|0); //@line 4444 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $trailer=$228; //@line 4444 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4445 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 31; break; //@line 4446 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $231=$leader; //@line 4452 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $232=(($231)|0)!=0; //@line 4452 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($232) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4452 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $234=$leader; //@line 4453 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _free($234); //@line 4453 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4454 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $236=$trailer; //@line 4455 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=(($236)|0)!=0; //@line 4455 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($237) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4455 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $239=$trailer; //@line 4456 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _free($239); //@line 4456 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4457 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $241=$p; //@line 4458 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $242=$241; //@line 4458 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=(($242+8)|0); //@line 4458 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$243; //@line 4458 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4458 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break;
    case 37: 
      $1=0; //@line 4461 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4461 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $247=$1; //@line 4462 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $247; //@line 4462 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_memalign["X"]=1;

function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $1;
  var $2;
  var $3;
  var $sz=__stackBase__;
  $1=$n_elements;
  $2=$elem_size;
  $3=$chunks;
  var $4=$2; //@line 4887 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  HEAP32[(($sz)>>2)]=$4; //@line 4887 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $5=$1; //@line 4888 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $6=$3; //@line 4888 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $7=_ialloc(__gm_, $5, $sz, 3, $6); //@line 4888 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  STACKTOP = __stackBase__;
  return $7; //@line 4888 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _internal_realloc($m, $oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4; //@line 4305 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)>>>0) >= 4294967232; //@line 4305 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4305 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $8=___errno(); //@line 4306 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($8)>>2)]=12; //@line 4306 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=0; //@line 4307 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4307 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $10=$3; //@line 4310 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=((($10)-(8))|0); //@line 4310 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 4310 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldp=$12; //@line 4310 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$oldp; //@line 4311 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+4)|0); //@line 4311 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 4311 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & -8; //@line 4311 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldsize=$16; //@line 4311 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$oldp; //@line 4312 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$17; //@line 4312 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$oldsize; //@line 4312 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=(($18+$19)|0); //@line 4312 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4312 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $next=$21; //@line 4312 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newp=0; //@line 4313 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $extra=0; //@line 4314 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$oldp; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$2; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+16)|0); //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=HEAPU32[(($25)>>2)]; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=(($23)>>>0) >= (($26)>>>0); //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($27) { __label__ = 5; break; } else { var $47 = 0;__label__ = 8; break; } //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $29=$oldp; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=(($29+4)|0); //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$31 & 3; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=(($32)|0)!=1; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($33) { __label__ = 6; break; } else { var $47 = 0;__label__ = 8; break; } //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $35=$oldp; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$35; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$next; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$37; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=(($36)>>>0) < (($38)>>>0); //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($39) { __label__ = 7; break; } else { var $47 = 0;__label__ = 8; break; } //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $41=$next; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($41+4)|0); //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$43 & 1; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=(($44)|0)!=0; //@line 4318 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47 = $45;__label__ = 8; break;
    case 8: 
      var $47;
      var $48=(($47)&1);
      var $49=(($48)==(1));
      var $50=(($49)|0)!=0;
      if ($50) { __label__ = 9; break; } else { __label__ = 24; break; }
    case 9: 
      var $52=$4; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=(($52)>>>0) < 11; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($53) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $61 = 16;__label__ = 12; break; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $56=$4; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=((($56)+(4))|0); //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=((($57)+(7))|0); //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$58 & -8; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61 = $59;__label__ = 12; break; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $61; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$61; //@line 4320 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$oldp; //@line 4321 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+4)|0); //@line 4321 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4321 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$64 & 3; //@line 4321 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=(($65)|0)==0; //@line 4321 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($66) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4321 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $68=$2; //@line 4322 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$oldp; //@line 4322 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$nb; //@line 4322 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=_mmap_resize($68, $69, $70); //@line 4322 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$71; //@line 4322 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4322 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $73=$oldsize; //@line 4323 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$nb; //@line 4323 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=(($73)>>>0) >= (($74)>>>0); //@line 4323 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($75) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 4323 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $77=$oldsize; //@line 4324 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$nb; //@line 4324 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=((($77)-($78))|0); //@line 4324 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$79; //@line 4324 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$oldp; //@line 4325 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$80; //@line 4325 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$rsize; //@line 4326 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=(($81)>>>0) >= 16; //@line 4326 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($82) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4326 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $84=$newp; //@line 4327 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$84; //@line 4327 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$nb; //@line 4327 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=(($85+$86)|0); //@line 4327 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$87; //@line 4327 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $remainder=$88; //@line 4327 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$newp; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+4)|0); //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$91 & 1; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$nb; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$92 | $93; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$94 | 2; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$newp; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=(($96+4)|0); //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$newp; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$nb; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=(($99+$100)|0); //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$101; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=(($102+4)|0); //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=HEAP32[(($103)>>2)]; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$104 | 1; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($103)>>2)]=$105; //@line 4328 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$rsize; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$106 | 1; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$107 | 2; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$remainder; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=(($109+4)|0); //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($110)>>2)]=$108; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$remainder; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$111; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=$rsize; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=(($112+$113)|0); //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=(($115+4)|0); //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$117 | 1; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($116)>>2)]=$118; //@line 4329 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$remainder; //@line 4330 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4330 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+8)|0); //@line 4330 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $extra=$121; //@line 4330 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4331 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 22; break; //@line 4332 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $124=$next; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$2; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+24)|0); //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=(($124)|0)==(($127)|0); //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($128) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $130=$oldsize; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$2; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+12)|0); //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=((($130)+($133))|0); //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$nb; //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=(($134)>>>0) > (($135)>>>0); //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($136) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4333 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $138=$oldsize; //@line 4335 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$2; //@line 4335 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=(($139+12)|0); //@line 4335 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 4335 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=((($138)+($141))|0); //@line 4335 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newsize=$142; //@line 4335 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$newsize; //@line 4336 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$nb; //@line 4336 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=((($143)-($144))|0); //@line 4336 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newtopsize=$145; //@line 4336 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$oldp; //@line 4337 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4337 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$nb; //@line 4337 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=(($147+$148)|0); //@line 4337 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$149; //@line 4337 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newtop=$150; //@line 4337 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$oldp; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=(($151+4)|0); //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$153 & 1; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$nb; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$154 | $155; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$156 | 2; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$oldp; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=(($158+4)|0); //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($159)>>2)]=$157; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$oldp; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$nb; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=(($161+$162)|0); //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=(($164+4)|0); //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=HEAP32[(($165)>>2)]; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $167=$166 | 1; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($165)>>2)]=$167; //@line 4338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$newtopsize; //@line 4339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$168 | 1; //@line 4339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$newtop; //@line 4339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=(($170+4)|0); //@line 4339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($171)>>2)]=$169; //@line 4339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$newtop; //@line 4340 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$2; //@line 4340 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $174=(($173+24)|0); //@line 4340 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($174)>>2)]=$172; //@line 4340 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$newtopsize; //@line 4341 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=$2; //@line 4341 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=(($176+12)|0); //@line 4341 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($177)>>2)]=$175; //@line 4341 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$oldp; //@line 4342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$178; //@line 4342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4343 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 25; break; //@line 4344 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      _abort(); //@line 4346 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4346 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $184=$newp; //@line 4358 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=(($184)|0)!=0; //@line 4358 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($185) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4358 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $187=$extra; //@line 4359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $188=(($187)|0)!=0; //@line 4359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($188) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $190=$extra; //@line 4360 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _free($190); //@line 4360 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4361 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $192=$newp; //@line 4362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$192; //@line 4362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+8)|0); //@line 4362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$194; //@line 4362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $196=$4; //@line 4365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=_malloc($196); //@line 4365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newmem=$197; //@line 4365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$newmem; //@line 4366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=(($198)|0)!=0; //@line 4366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($199) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 4366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $201=$oldsize; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$oldp; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=(($202+4)|0); //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$204 & 3; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=(($205)|0)==0; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$206 ? 8 : 4; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=((($201)-($207))|0); //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oc=$208; //@line 4367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$newmem; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$3; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=$oc; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$4; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=(($211)>>>0) < (($212)>>>0); //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($213) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $215=$oc; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $219 = $215;__label__ = 33; break; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $217=$4; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $219 = $217;__label__ = 33; break; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $219; //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      assert($219 % 1 === 0, 'memcpy given ' + $219 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($209, $210, $219, 1); //@line 4368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$3; //@line 4369 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _free($220); //@line 4369 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4370 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $222=$newmem; //@line 4371 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$222; //@line 4371 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4371 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $224=$1; //@line 4375 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $224; //@line 4375 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_realloc["X"]=1;

function _malloc_footprint() {
  ;
  var __label__;

  var $1=HEAP32[((((__gm_+432)|0))>>2)]; //@line 4921 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return $1; //@line 4921 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _malloc_max_footprint() {
  ;
  var __label__;

  var $1=HEAP32[((((__gm_+436)|0))>>2)]; //@line 4925 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return $1; //@line 4925 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _ialloc($m, $n_elements, $sizes, $opts, $chunks) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $element_size;
      var $contents_size;
      var $array_size;
      var $mem;
      var $p;
      var $remainder_size;
      var $marray;
      var $array_chunk;
      var $was_enabled;
      var $size;
      var $i;
      var $array_chunk_size;
      $2=$m;
      $3=$n_elements;
      $4=$sizes;
      $5=$opts;
      $6=$chunks;
      var $7=HEAP32[((((_mparams)|0))>>2)]; //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($8) { var $13 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $10=_init_mparams(); //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=(($10)|0)!=0; //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13 = $11;__label__ = 4; break; //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13;
      var $14=(($13)&1); //@line 4492 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$6; //@line 4494 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 4494 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 4494 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $18=$3; //@line 4495 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)==0; //@line 4495 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4495 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $21=$6; //@line 4496 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$21; //@line 4496 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4496 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $23=$6; //@line 4497 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $marray=$23; //@line 4497 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $array_size=0; //@line 4498 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 4499 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $25=$3; //@line 4502 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=(($25)|0)==0; //@line 4502 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4502 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $28=_malloc(0); //@line 4503 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 4503 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$29; //@line 4503 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4503 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      $marray=0; //@line 4504 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$3; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=((($31<<2))|0); //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=(($32)>>>0) < 11; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($33) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $42 = 16;__label__ = 13; break; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $36=$3; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=((($36<<2))|0); //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=((($37)+(4))|0); //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=((($38)+(7))|0); //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$39 & -8; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42 = $40;__label__ = 13; break; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $42; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $array_size=$42; //@line 4505 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break;
    case 14: 
      var $44=$5; //@line 4509 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$44 & 1; //@line 4509 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)!=0; //@line 4509 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 4509 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $48=$4; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=HEAPU32[(($48)>>2)]; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=(($49)>>>0) < 11; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($50) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $59 = 16;__label__ = 18; break; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $53=$4; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=((($54)+(4))|0); //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=((($55)+(7))|0); //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$56 & -8; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59 = $57;__label__ = 18; break; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $59; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $element_size=$59; //@line 4510 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$3; //@line 4511 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$element_size; //@line 4511 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=((($60)*($61))|0); //@line 4511 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $contents_size=$62; //@line 4511 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4512 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      $element_size=0; //@line 4514 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $contents_size=0; //@line 4515 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=0; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $65=$i; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$3; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=(($65)|0)!=(($66)|0); //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($67) { __label__ = 21; break; } else { __label__ = 26; break; } //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $69=$i; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$4; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+($69<<2))|0); //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAPU32[(($71)>>2)]; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=(($72)>>>0) < 11; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($73) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $84 = 16;__label__ = 24; break; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $76=$i; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$4; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+($76<<2))|0); //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=((($79)+(4))|0); //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=((($80)+(7))|0); //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$81 & -8; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84 = $82;__label__ = 24; break; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $84; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$contents_size; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=((($85)+($84))|0); //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $contents_size=$86; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4517 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $88=$i; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=((($88)+(1))|0); //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=$89; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4516 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $92=$contents_size; //@line 4520 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$array_size; //@line 4520 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=((($92)+($93))|0); //@line 4520 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $size=$94; //@line 4520 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$2; //@line 4527 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+440)|0); //@line 4527 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 4527 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & 0; //@line 4527 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $was_enabled=$98; //@line 4527 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$2; //@line 4528 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=(($99+440)|0); //@line 4528 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($100)>>2)]; //@line 4528 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($100)>>2)]=$101; //@line 4528 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$size; //@line 4529 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=((($102)-(4))|0); //@line 4529 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=_malloc($103); //@line 4529 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$104; //@line 4529 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$was_enabled; //@line 4530 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=(($105)|0)!=0; //@line 4530 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($106) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4530 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $108=$2; //@line 4531 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=(($108+440)|0); //@line 4531 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 4531 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($109)>>2)]=$110; //@line 4531 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4531 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $112=$mem; //@line 4532 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=(($112)|0)==0; //@line 4532 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($113) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4532 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      $1=0; //@line 4533 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4533 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $116=$mem; //@line 4536 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=((($116)-(8))|0); //@line 4536 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$117; //@line 4536 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$118; //@line 4536 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$p; //@line 4537 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+4)|0); //@line 4537 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=HEAP32[(($120)>>2)]; //@line 4537 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$121 & -8; //@line 4537 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$122; //@line 4537 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$5; //@line 4541 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$123 & 2; //@line 4541 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=(($124)|0)!=0; //@line 4541 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($125) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4541 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $127=$mem; //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$127; //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$128; //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$remainder_size; //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=((($130)-(4))|0); //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$array_size; //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=((($131)-($132))|0); //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _memset($129, 0, $133, 4); //@line 4542 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4543 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $135=$marray; //@line 4546 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0)==0; //@line 4546 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($136) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4546 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $138=$p; //@line 4548 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4548 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$contents_size; //@line 4548 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=(($139+$140)|0); //@line 4548 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$141; //@line 4548 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $array_chunk=$142; //@line 4548 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$remainder_size; //@line 4549 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$contents_size; //@line 4549 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=((($143)-($144))|0); //@line 4549 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $array_chunk_size=$145; //@line 4549 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$array_chunk; //@line 4550 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4550 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=(($147+8)|0); //@line 4550 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$148; //@line 4550 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $marray=$149; //@line 4550 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$array_chunk_size; //@line 4551 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$150 | 1; //@line 4551 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$151 | 2; //@line 4551 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$array_chunk; //@line 4551 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=(($153+4)|0); //@line 4551 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($154)>>2)]=$152; //@line 4551 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$contents_size; //@line 4552 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$155; //@line 4552 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4553 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      $i=0; //@line 4556 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 36; break; //@line 4556 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $158=$p; //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=$158; //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=(($159+8)|0); //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$i; //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$marray; //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=(($162+($161<<2))|0); //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($163)>>2)]=$160; //@line 4557 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$i; //@line 4558 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=$3; //@line 4558 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=((($165)-(1))|0); //@line 4558 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $167=(($164)|0)!=(($166)|0); //@line 4558 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($167) { __label__ = 37; break; } else { __label__ = 44; break; } //@line 4558 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $169=$element_size; //@line 4559 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=(($169)|0)!=0; //@line 4559 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($170) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4559 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $172=$element_size; //@line 4560 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $size=$172; //@line 4560 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 43; break; //@line 4560 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $174=$i; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$4; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+($174<<2))|0); //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=HEAPU32[(($176)>>2)]; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=(($177)>>>0) < 11; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($178) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $189 = 16;__label__ = 42; break; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $181=$i; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$4; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+($181<<2))|0); //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($183)>>2)]; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=((($184)+(4))|0); //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=((($185)+(7))|0); //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$186 & -8; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189 = $187;__label__ = 42; break; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $189; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $size=$189; //@line 4562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 43; break;
    case 43: 
      var $191=$size; //@line 4563 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$remainder_size; //@line 4563 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=((($192)-($191))|0); //@line 4563 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$193; //@line 4563 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=$size; //@line 4564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=$194 | 1; //@line 4564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$195 | 2; //@line 4564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$p; //@line 4564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=(($197+4)|0); //@line 4564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 4564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$p; //@line 4565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=$199; //@line 4565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $201=$size; //@line 4565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=(($200+$201)|0); //@line 4565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=$202; //@line 4565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$203; //@line 4565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $205=$remainder_size; //@line 4568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=$205 | 1; //@line 4568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$206 | 2; //@line 4568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$p; //@line 4568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=(($208+4)|0); //@line 4568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($209)>>2)]=$207; //@line 4568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4569 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 46; break; //@line 4571 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $212=$i; //@line 4556 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=((($212)+(1))|0); //@line 4556 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=$213; //@line 4556 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 36; break; //@line 4556 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $215=$marray; //@line 4590 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$215; //@line 4590 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4590 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $217=$1; //@line 4591 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $217; //@line 4591 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_ialloc["X"]=1;

function _independent_comalloc($n_elements, $sizes, $chunks) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$n_elements;
  $2=$sizes;
  $3=$chunks;
  var $4=$1; //@line 4893 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $5=$2; //@line 4893 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $6=$3; //@line 4893 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $7=_ialloc(__gm_, $4, $5, 0, $6); //@line 4893 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return $7; //@line 4893 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _valloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $pagesz;
      $1=$bytes;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=_init_mparams(); //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 4; break; //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $8;
      var $9=(($8)&1); //@line 4898 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4899 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $pagesz=$10; //@line 4899 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$pagesz; //@line 4900 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$1; //@line 4900 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=_memalign($11, $12); //@line 4900 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $13; //@line 4900 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _pvalloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $pagesz;
      $1=$bytes;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=_init_mparams(); //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 4; break; //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $8;
      var $9=(($8)&1); //@line 4905 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4906 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $pagesz=$10; //@line 4906 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$pagesz; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$1; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$pagesz; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=((($12)+($13))|0); //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=((($14)-(1))|0); //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$pagesz; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=((($16)-(1))|0); //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$17 ^ -1; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$15 & $18; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=_memalign($11, $19); //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $20; //@line 4907 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_trim($pad) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $result;
      $1=$pad;
      $result=0; //@line 4911 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=_init_mparams(); //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 4; break; //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $8;
      var $9=(($8)&1); //@line 4912 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$1; //@line 4914 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=_sys_trim(__gm_, $10); //@line 4914 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $result=$11; //@line 4914 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$result; //@line 4917 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $12; //@line 4917 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mallinfo($agg_result) {
  ;
  var __label__;

  _internal_mallinfo($agg_result, __gm_); //@line 4930 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return; //@line 4930 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _internal_mallinfo($agg_result, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $nm=__stackBase__;
      var $nfree;
      var $mfree;
      var $sum;
      var $s;
      var $q;
      var $sz;
      $1=$m;
      var $2=$nm; //@line 3338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      for (var $$dest = $2>>2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      }; //@line 3338 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[((((_mparams)|0))>>2)]; //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($4) { var $9 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=_init_mparams(); //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=(($6)|0)!=0; //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9 = $7;__label__ = 4; break; //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $9;
      var $10=(($9)&1); //@line 3339 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$1; //@line 3342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=(($11+24)|0); //@line 3342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 3342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=(($13)|0)!=0; //@line 3342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 21; break; } //@line 3342 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $nfree=1; //@line 3343 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$1; //@line 3344 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(($16+12)|0); //@line 3344 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($17)>>2)]; //@line 3344 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=((($18)+(40))|0); //@line 3344 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mfree=$19; //@line 3344 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$mfree; //@line 3345 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sum=$20; //@line 3345 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$1; //@line 3346 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+444)|0); //@line 3346 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $s=$22; //@line 3346 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3347 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $24=$s; //@line 3347 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)!=0; //@line 3347 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 3347 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $27=$s; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($28)>>2)]; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$s; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=HEAP32[(($31)>>2)]; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$33; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 7; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=(($35)|0)==0; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $48 = 0;__label__ = 10; break; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $39=$s; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=(($39)|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($41+8)|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$43 & 7; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=(((8)-($44))|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$45 & 7; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48 = $46;__label__ = 10; break; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $48; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=(($29+$48)|0); //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $q=$50; //@line 3348 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $52=$q; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$52; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$s; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=(($54)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=HEAPU32[(($55)>>2)]; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($53)>>>0) >= (($56)>>>0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($57) { __label__ = 12; break; } else { var $81 = 0;__label__ = 15; break; } //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $59=$q; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$s; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=(($61)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=HEAP32[(($62)>>2)]; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$s; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=(($64+4)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=(($63+$66)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=(($60)>>>0) < (($67)>>>0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($68) { __label__ = 13; break; } else { var $81 = 0;__label__ = 15; break; } //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $70=$q; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$1; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=(($71+24)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($70)|0)!=(($73)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($74) { __label__ = 14; break; } else { var $81 = 0;__label__ = 15; break; } //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $76=$q; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+4)|0); //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($77)>>2)]; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=(($78)|0)!=7; //@line 3349 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81 = $79;__label__ = 15; break;
    case 15: 
      var $81;
      if ($81) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $83=$q; //@line 3351 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+4)|0); //@line 3351 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 3351 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$85 & -8; //@line 3351 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sz=$86; //@line 3351 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$sz; //@line 3352 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$sum; //@line 3352 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=((($88)+($87))|0); //@line 3352 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sum=$89; //@line 3352 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=$q; //@line 3353 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=(($90+4)|0); //@line 3353 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($91)>>2)]; //@line 3353 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$92 & 3; //@line 3353 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=(($93)|0)!=1; //@line 3353 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($94) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3353 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $96=$sz; //@line 3354 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$mfree; //@line 3354 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=((($97)+($96))|0); //@line 3354 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mfree=$98; //@line 3354 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$nfree; //@line 3355 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=((($99)+(1))|0); //@line 3355 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nfree=$100; //@line 3355 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3356 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $102=$q; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=(($104+4)|0); //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=HEAP32[(($105)>>2)]; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$106 & -8; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=(($103+$107)|0); //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $q=$109; //@line 3357 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3358 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $111=$s; //@line 3359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+8)|0); //@line 3359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 3359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $s=$113; //@line 3359 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3360 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $115=$sum; //@line 3362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=(($nm)|0); //@line 3362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($116)>>2)]=$115; //@line 3362 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$nfree; //@line 3363 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=(($nm+4)|0); //@line 3363 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($118)>>2)]=$117; //@line 3363 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$1; //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=(($119+432)|0); //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=HEAP32[(($120)>>2)]; //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$sum; //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=((($121)-($122))|0); //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=(($nm+16)|0); //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($124)>>2)]=$123; //@line 3364 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$1; //@line 3365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=(($125+436)|0); //@line 3365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 3365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=(($nm+20)|0); //@line 3365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($128)>>2)]=$127; //@line 3365 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$1; //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=(($129+432)|0); //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$mfree; //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=((($131)-($132))|0); //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=(($nm+28)|0); //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($134)>>2)]=$133; //@line 3366 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$mfree; //@line 3367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=(($nm+32)|0); //@line 3367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($136)>>2)]=$135; //@line 3367 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$1; //@line 3368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=(($137+12)|0); //@line 3368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=HEAP32[(($138)>>2)]; //@line 3368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=(($nm+36)|0); //@line 3368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($140)>>2)]=$139; //@line 3368 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3369 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $142=$agg_result; //@line 3373 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$nm; //@line 3373 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $143>>2, $$dest = $142>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      }; //@line 3373 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      STACKTOP = __stackBase__;
      return; //@line 3373 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_mallinfo["X"]=1;

function _malloc_stats() {
  ;
  var __label__;

  _internal_malloc_stats(__gm_); //@line 4935 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return; //@line 4936 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _internal_malloc_stats($m) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $maxfp;
      var $fp;
      var $used;
      var $s;
      var $q;
      $1=$m;
      var $2=HEAP32[((((_mparams)|0))>>2)]; //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $3=(($2)|0)!=0; //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($3) { var $8 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $5=_init_mparams(); //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5)|0)!=0; //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8 = $6;__label__ = 4; break; //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $8;
      var $9=(($8)&1); //@line 3378 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $maxfp=0; //@line 3380 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $fp=0; //@line 3381 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $used=0; //@line 3382 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$1; //@line 3384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=(($10+24)|0); //@line 3384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 3384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)!=0; //@line 3384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 21; break; } //@line 3384 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $15=$1; //@line 3385 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+444)|0); //@line 3385 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $s=$16; //@line 3385 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$1; //@line 3386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+436)|0); //@line 3386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 3386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $maxfp=$19; //@line 3386 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$1; //@line 3387 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=(($20+432)|0); //@line 3387 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[(($21)>>2)]; //@line 3387 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $fp=$22; //@line 3387 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$fp; //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$1; //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+12)|0); //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=((($26)+(40))|0); //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=((($23)-($27))|0); //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $used=$28; //@line 3388 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $30=$s; //@line 3390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)!=0; //@line 3390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 3390 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $33=$s; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=(($33)|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$s; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=(($36)|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=(($38+8)|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$40 & 7; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($41)|0)==0; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $54 = 0;__label__ = 10; break; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $45=$s; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[(($46)>>2)]; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=(($47+8)|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$48; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$49 & 7; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=(((8)-($50))|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$51 & 7; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54 = $52;__label__ = 10; break; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $54; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=(($35+$54)|0); //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $q=$56; //@line 3391 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $58=$q; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$58; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$s; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=(($60)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=HEAPU32[(($61)>>2)]; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=(($59)>>>0) >= (($62)>>>0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($63) { __label__ = 12; break; } else { var $87 = 0;__label__ = 15; break; } //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $65=$q; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$s; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=(($67)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=HEAP32[(($68)>>2)]; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$s; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($71)>>2)]; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=(($69+$72)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($66)>>>0) < (($73)>>>0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($74) { __label__ = 13; break; } else { var $87 = 0;__label__ = 15; break; } //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $76=$q; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$1; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+24)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=(($76)|0)!=(($79)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($80) { __label__ = 14; break; } else { var $87 = 0;__label__ = 15; break; } //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $82=$q; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=(($82+4)|0); //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=(($84)|0)!=7; //@line 3392 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87 = $85;__label__ = 15; break;
    case 15: 
      var $87;
      if ($87) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $89=$q; //@line 3394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+4)|0); //@line 3394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 3394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$91 & 3; //@line 3394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=(($92)|0)!=1; //@line 3394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($93) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3394 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $95=$q; //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+4)|0); //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$97 & -8; //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$used; //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=((($99)-($98))|0); //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $used=$100; //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3395 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $102=$q; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=(($104+4)|0); //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=HEAP32[(($105)>>2)]; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$106 & -8; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=(($103+$107)|0); //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $q=$109; //@line 3396 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3397 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $111=$s; //@line 3398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $112=(($111+8)|0); //@line 3398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 3398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $s=$113; //@line 3398 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3399 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 3400 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $116=HEAP32[((_stderr)>>2)]; //@line 3402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$maxfp; //@line 3402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=_fprintf($116, ((STRING_TABLE.__str490)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$117,tempInt)); //@line 3402 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $119=HEAP32[((_stderr)>>2)]; //@line 3403 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$fp; //@line 3403 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=_fprintf($119, ((STRING_TABLE.__str1491)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$120,tempInt)); //@line 3403 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[((_stderr)>>2)]; //@line 3404 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$used; //@line 3404 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=_fprintf($122, ((STRING_TABLE.__str2492)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$123,tempInt)); //@line 3404 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      STACKTOP = __stackBase__;
      return; //@line 3408 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_malloc_stats["X"]=1;

function _mallopt($param_number, $value) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$param_number;
  $2=$value;
  var $3=$1; //@line 4939 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $4=$2; //@line 4939 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  var $5=_change_mparam($3, $4); //@line 4939 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
  ;
  return $5; //@line 4939 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
}


function _init_mparams() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $2=(($1)|0)==0; //@line 2965 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($2) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 2965 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $4=_sysconf(8); //@line 2971 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$4; //@line 2971 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$psize; //@line 2972 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $gsize=$5; //@line 2972 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$gsize; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$gsize; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=((($7)-(1))|0); //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$6 & $8; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=(($9)|0)!=0; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $12=$psize; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$psize; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=((($13)-(1))|0); //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$12 & $14; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($15)|0)!=0; //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2989 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      _abort(); //@line 2997 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $19=$gsize; //@line 2999 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$19; //@line 2999 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$psize; //@line 3000 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$20; //@line 3000 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$21; //@line 3011 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=_time(0); //@line 3030 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$22 ^ 1431655765; //@line 3030 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $magic=$23; //@line 3030 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$magic; //@line 3032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$24 | 8; //@line 3032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $magic=$25; //@line 3032 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$magic; //@line 3033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & -8; //@line 3033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $magic=$27; //@line 3033 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$magic; //@line 3034 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$28; //@line 3034 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 3036 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      ;
      return 1; //@line 3039 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_usable_size($mem) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      $2=$mem;
      var $3=$2; //@line 4945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)|0)!=0; //@line 4945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 4945 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=$2; //@line 4946 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=((($6)-(8))|0); //@line 4946 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 4946 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$8; //@line 4946 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$p; //@line 4947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=(($9+4)|0); //@line 4947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($10)>>2)]; //@line 4947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11 & 3; //@line 4947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)!=1; //@line 4947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4947 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $15=$p; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+4)|0); //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & -8; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=(($19+4)|0); //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($20)>>2)]; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$21 & 3; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=(($22)|0)==0; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$23 ? 8 : 4; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=((($18)-($24))|0); //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$25; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4948 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      __label__ = 6; break; //@line 4949 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      $1=0; //@line 4950 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4950 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $29=$1; //@line 4951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $29; //@line 4951 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mmap_resize($m, $oldp, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3; //@line 3699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+4)|0); //@line 3699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$7 & -8; //@line 3699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldsize=$8; //@line 3699 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$4; //@line 3700 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$9 >>> 3; //@line 3700 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=(($10)>>>0) < 32; //@line 3700 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3700 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $1=0; //@line 3701 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3701 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $14=$oldsize; //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$4; //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=((($15)+(4))|0); //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(($14)>>>0) >= (($16)>>>0); //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$oldsize; //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$4; //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=((($19)-($20))|0); //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$22 << 1; //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=(($21)>>>0) <= (($23)>>>0); //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3703 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $26=$3; //@line 3705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$26; //@line 3705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3705 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $28=$3; //@line 3707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=(($28)|0); //@line 3707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 3707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$30; //@line 3707 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$oldsize; //@line 3708 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$offset; //@line 3708 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=((($31)+($32))|0); //@line 3708 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=((($33)+(16))|0); //@line 3708 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldmmsize=$34; //@line 3708 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$4; //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=((($35)+(24))|0); //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=((($36)+(7))|0); //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=((($38)-(1))|0); //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=((($37)+($39))|0); //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=((($41)-(1))|0); //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42 ^ -1; //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$40 & $43; //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newmmsize=$44; //@line 3709 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $cp=-1; //@line 3711 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$cp; //@line 3712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0)!=-1; //@line 3712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 3712 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $48=$cp; //@line 3713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$offset; //@line 3713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=(($48+$49)|0); //@line 3713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 3713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$51; //@line 3713 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$newmmsize; //@line 3714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$offset; //@line 3714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=((($52)-($53))|0); //@line 3714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=((($54)-(16))|0); //@line 3714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$55; //@line 3714 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$psize; //@line 3715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$newp; //@line 3715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=(($57+4)|0); //@line 3715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($58)>>2)]=$56; //@line 3715 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$newp; //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$psize; //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+4)|0); //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($64)>>2)]=7; //@line 3717 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$newp; //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$psize; //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=((($67)+(4))|0); //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=(($66+$68)|0); //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=(($70+4)|0); //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($71)>>2)]=0; //@line 3718 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$cp; //@line 3720 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$2; //@line 3720 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+16)|0); //@line 3720 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=HEAPU32[(($74)>>2)]; //@line 3720 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=(($72)>>>0) < (($75)>>>0); //@line 3720 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($76) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3720 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $78=$cp; //@line 3721 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$2; //@line 3721 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+16)|0); //@line 3721 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($80)>>2)]=$78; //@line 3721 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3721 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $82=$newmmsize; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$oldmmsize; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=((($82)-($83))|0); //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$2; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+432)|0); //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=((($87)+($84))|0); //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($86)>>2)]=$88; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$2; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+436)|0); //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=HEAPU32[(($90)>>2)]; //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=(($88)>>>0) > (($91)>>>0); //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($92) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3722 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $94=$2; //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+432)|0); //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$2; //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=(($97+436)|0); //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($98)>>2)]=$96; //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3723 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $100=$newp; //@line 3725 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$100; //@line 3725 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3725 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break;
    case 14: 
      $1=0; //@line 3728 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3728 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $104=$1; //@line 3729 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $104; //@line 3729 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2; //@line 2562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=(($4+444)|0); //@line 2562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$5; //@line 2562 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 2563 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=$3; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$sp; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0); //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAPU32[(($9)>>2)]; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=(($7)>>>0) >= (($10)>>>0); //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$3; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$sp; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=(($14)|0); //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$sp; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=(($17+4)|0); //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=(($16+$19)|0); //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=(($13)>>>0) < (($20)>>>0); //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2564 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $23=$sp; //@line 2565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$23; //@line 2565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2565 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $25=$sp; //@line 2566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=(($25+8)|0); //@line 2566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=HEAP32[(($26)>>2)]; //@line 2566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$27; //@line 2566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0)==0; //@line 2566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2566 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      $1=0; //@line 2567 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2567 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 3; break; //@line 2568 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $32=$1; //@line 2569 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $32; //@line 2569 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$4; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+8)|0); //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$7 & 7; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=(($8)|0)==0; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $20 = 0;__label__ = 5; break; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $12=$2; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$12; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 7; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(((8)-($16))|0); //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & 7; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20 = $18;__label__ = 5; break; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $20; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$20; //@line 3736 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$2; //@line 3737 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3737 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$offset; //@line 3737 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=(($22+$23)|0); //@line 3737 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$24; //@line 3737 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $2=$25; //@line 3737 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$offset; //@line 3738 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$3; //@line 3738 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=((($27)-($26))|0); //@line 3738 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $3=$28; //@line 3738 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$2; //@line 3740 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$1; //@line 3740 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($30+24)|0); //@line 3740 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($31)>>2)]=$29; //@line 3740 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$3; //@line 3741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$1; //@line 3741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=(($33+12)|0); //@line 3741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($34)>>2)]=$32; //@line 3741 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$3; //@line 3742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$35 | 1; //@line 3742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$2; //@line 3742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=(($37+4)|0); //@line 3742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($38)>>2)]=$36; //@line 3742 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$2; //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$3; //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=(($43+4)|0); //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($44)>>2)]=40; //@line 3744 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$1; //@line 3745 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=(($46+28)|0); //@line 3745 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($47)>>2)]=$45; //@line 3745 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3746 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3; //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=((($4)+(24))|0); //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=((($5)+(7))|0); //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=((($7)-(1))|0); //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=((($6)+($8))|0); //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=((($10)-(1))|0); //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11 ^ -1; //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$9 & $12; //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $mmsize=$13; //@line 3672 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$mmsize; //@line 3673 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$3; //@line 3673 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($14)>>>0) > (($15)>>>0); //@line 3673 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 3673 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $mm=-1; //@line 3674 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$mm; //@line 3675 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=(($18)|0)!=-1; //@line 3675 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 3675 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $21=$mm; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=(($21+8)|0); //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$23 & 7; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24)|0)==0; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $35 = 0;__label__ = 7; break; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $28=$mm; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=(($28+8)|0); //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$30 & 7; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=(((8)-($31))|0); //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$32 & 7; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35 = $33;__label__ = 7; break; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $35; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$35; //@line 3676 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$mmsize; //@line 3677 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$offset; //@line 3677 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38=((($36)-($37))|0); //@line 3677 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=((($38)-(16))|0); //@line 3677 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$39; //@line 3677 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$mm; //@line 3678 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$offset; //@line 3678 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3678 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3678 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$43; //@line 3678 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$offset; //@line 3679 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$p; //@line 3679 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(($45)|0); //@line 3679 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($46)>>2)]=$44; //@line 3679 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$psize; //@line 3680 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$p; //@line 3680 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=(($48+4)|0); //@line 3680 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($49)>>2)]=$47; //@line 3680 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$p; //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$psize; //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=(($51+$52)|0); //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=(($54+4)|0); //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($55)>>2)]=7; //@line 3682 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$p; //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$psize; //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=((($58)+(4))|0); //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=(($57+$59)|0); //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$60; //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=(($61+4)|0); //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($62)>>2)]=0; //@line 3683 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$2; //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=(($63+16)|0); //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=HEAP32[(($64)>>2)]; //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=(($65)|0)==0; //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($66) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $68=$mm; //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$2; //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=(($69+16)|0); //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=HEAPU32[(($70)>>2)]; //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=(($68)>>>0) < (($71)>>>0); //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($72) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3685 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $74=$mm; //@line 3686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$2; //@line 3686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=(($75+16)|0); //@line 3686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($76)>>2)]=$74; //@line 3686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3686 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $78=$mmsize; //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$2; //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=(($79+432)|0); //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=((($81)+($78))|0); //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($80)>>2)]=$82; //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$2; //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=(($83+436)|0); //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=HEAPU32[(($84)>>2)]; //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=(($82)>>>0) > (($85)>>>0); //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($86) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3687 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $88=$2; //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=(($88+432)|0); //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$2; //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=(($91+436)|0); //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($92)>>2)]=$90; //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3688 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $94=$p; //@line 3691 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$94; //@line 3691 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=(($95+8)|0); //@line 3691 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=$96; //@line 3691 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3691 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break; //@line 3693 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      $1=0; //@line 3694 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3694 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $100=$1; //@line 3695 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $100; //@line 3695 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$i; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $4=(($3)>>>0) < 32; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $6=$i; //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$6 << 1; //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$1; //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=(($8+40)|0); //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=(($9+($7<<2))|0); //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$10; //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $bin=$12; //@line 3753 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$bin; //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$bin; //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=(($14+12)|0); //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($15)>>2)]=$13; //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$bin; //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(($16+8)|0); //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($17)>>2)]=$13; //@line 3754 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3755 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$i; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=((($19)+(1))|0); //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $i=$20; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      ;
      return; //@line 3756 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _change_mparam($param_number, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $val;
      $2=$param_number;
      $3=$value;
      var $4=HEAP32[((((_mparams)|0))>>2)]; //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $5=(($4)|0)!=0; //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($5) { var $10 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $7=_init_mparams(); //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=(($7)|0)!=0; //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10 = $8;__label__ = 4; break; //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $10;
      var $11=(($10)&1); //@line 3045 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$3; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0)==-1; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $18 = -1;__label__ = 7; break; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $16=$3; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18 = $16;__label__ = 7; break; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $18; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $val=$18; //@line 3046 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$2; //@line 3047 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ((($19)|0) == -1) {
        __label__ = 8; break;
      }
      else if ((($19)|0) == -2) {
        __label__ = 9; break;
      }
      else if ((($19)|0) == -3) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 8: 
      var $21=$val; //@line 3049 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=$21; //@line 3049 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=1; //@line 3050 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3050 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $23=$val; //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=HEAPU32[((((_mparams+4)|0))>>2)]; //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($23)>>>0) >= (($24)>>>0); //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($25) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $27=$val; //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$val; //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=((($28)-(1))|0); //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$27 & $29; //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $31=(($30)|0)==0; //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($31) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3052 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $33=$val; //@line 3053 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$33; //@line 3053 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=1; //@line 3054 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3054 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      $1=0; //@line 3057 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3057 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $36=$val; //@line 3059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=$36; //@line 3059 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $1=1; //@line 3060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3060 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      $1=0; //@line 3062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3062 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $39=$1; //@line 3064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $39; //@line 3064 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_change_mparam["X"]=1;

function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$2; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=(($6+8)|0); //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$8 & 7; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=(($9)|0)==0; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $20 = 0;__label__ = 5; break; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$2; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=(($13+8)|0); //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$15 & 7; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=(((8)-($16))|0); //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$17 & 7; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20 = $18;__label__ = 5; break; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $20; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=(($5+$20)|0); //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$22; //@line 3780 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$3; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$3; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=(($24+8)|0); //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26 & 7; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=(($27)|0)==0; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $38 = 0;__label__ = 8; break; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $31=$3; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $32=(($31+8)|0); //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$33 & 7; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=(((8)-($34))|0); //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$35 & 7; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $38 = $36;__label__ = 8; break; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $38; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39=(($23+$38)|0); //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$40; //@line 3781 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$oldfirst; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$41; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$p; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$42; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$44; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $47=((($45)-($46))|0); //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$47; //@line 3782 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$p; //@line 3783 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$48; //@line 3783 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$4; //@line 3783 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $51=(($49+$50)|0); //@line 3783 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$51; //@line 3783 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $q=$52; //@line 3783 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$psize; //@line 3784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$4; //@line 3784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=((($53)-($54))|0); //@line 3784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $qsize=$55; //@line 3784 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$4; //@line 3785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$56 | 1; //@line 3785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$57 | 2; //@line 3785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$p; //@line 3785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=(($59+4)|0); //@line 3785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($60)>>2)]=$58; //@line 3785 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$oldfirst; //@line 3792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$1; //@line 3792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=(($62+24)|0); //@line 3792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 3792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=(($61)|0)==(($64)|0); //@line 3792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($65) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3792 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $67=$qsize; //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$1; //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=(($68+12)|0); //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($69)>>2)]; //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=((($70)+($67))|0); //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($69)>>2)]=$71; //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$71; //@line 3793 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$q; //@line 3794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$1; //@line 3794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+24)|0); //@line 3794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3794 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$tsize; //@line 3795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$75 | 1; //@line 3795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$q; //@line 3795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=(($77+4)|0); //@line 3795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($78)>>2)]=$76; //@line 3795 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 110; break; //@line 3797 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $80=$oldfirst; //@line 3798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$1; //@line 3798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+20)|0); //@line 3798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=HEAP32[(($82)>>2)]; //@line 3798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=(($80)|0)==(($83)|0); //@line 3798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($84) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3798 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $86=$qsize; //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$1; //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=(($87+8)|0); //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($88)>>2)]; //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=((($89)+($86))|0); //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($88)>>2)]=$90; //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $dsize=$90; //@line 3799 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$q; //@line 3800 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$1; //@line 3800 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=(($92+20)|0); //@line 3800 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($93)>>2)]=$91; //@line 3800 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$dsize; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$94 | 1; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$q; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $97=(($96+4)|0); //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=$95; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$dsize; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$q; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$dsize; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=(($100+$101)|0); //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=(($103)|0); //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($104)>>2)]=$98; //@line 3801 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 109; break; //@line 3802 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $106=$oldfirst; //@line 3804 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=(($106+4)|0); //@line 3804 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 3804 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$108 & 3; //@line 3804 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $110=(($109)|0)!=1; //@line 3804 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($110) { __label__ = 73; break; } else { __label__ = 13; break; } //@line 3804 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $112=$oldfirst; //@line 3805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $113=(($112+4)|0); //@line 3805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 3805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$114 & -8; //@line 3805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nsize=$115; //@line 3805 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$nsize; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$116 >>> 3; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $118=(($117)>>>0) < 32; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($118) { __label__ = 14; break; } else { __label__ = 26; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $120=$oldfirst; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=(($120+8)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($121)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$122; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$oldfirst; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=(($123+12)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=HEAP32[(($124)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B=$125; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$nsize; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$126 >>> 3; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$127; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$F; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$B; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=(($128)|0)==(($129)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($130) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $132=$I; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=1 << $132; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$133 ^ -1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=(($135)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$137 & $134; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($136)>>2)]=$138; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $140=$F; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$I; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$141 << 1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=(($143+40)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=(($144+($142<<2))|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$145; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=(($140)|0)==(($147)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($148) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $150=$F; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$150; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=(($152+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=HEAPU32[(($153)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=(($151)>>>0) >= (($154)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($155) { __label__ = 18; break; } else { var $176 = 0;__label__ = 21; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $157=$B; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$I; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=$158 << 1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=(($160+40)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=(($161+($159<<2))|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$162; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$163; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=(($157)|0)==(($164)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($165) { var $174 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $167=$B; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$167; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=(($169+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=HEAPU32[(($170)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=(($168)>>>0) >= (($171)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $174 = $172;__label__ = 20; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $174;
      var $176 = $174;__label__ = 21; break;
    case 21: 
      var $176;
      var $177=(($176)&1);
      var $178=(($177)==(1));
      var $179=(($178)|0)!=0;
      if ($179) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $181=$B; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$F; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=(($182+12)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($183)>>2)]=$181; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$F; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$B; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $186=(($185+8)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($186)>>2)]=$184; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 72; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $191=$oldfirst; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$191; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$192; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=(($193+24)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($194)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$195; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=(($196+12)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=HEAP32[(($197)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=(($198)|0)!=(($199)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($200) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $202=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=(($202+8)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=HEAP32[(($203)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F1=$204; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $206=(($205+12)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=HEAP32[(($206)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$207; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$F1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$208; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=(($210+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $212=HEAPU32[(($211)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $213=(($209)>>>0) >= (($212)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $214=(($213)&1); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)==(1)); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $216=(($215)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($216) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $218=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$F1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $220=(($219+12)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($220)>>2)]=$218; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=$F1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=(($222+8)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($223)>>2)]=$221; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 43; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $227=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=(($227+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $229=(($228+4)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$229; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230=HEAP32[(($229)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$230; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $231=(($230)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($231) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $233=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $234=(($233+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $235=(($234)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$235; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $236=HEAP32[(($235)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$236; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=(($236)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($237) { __label__ = 33; break; } else { __label__ = 42; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 34; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $240=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $241=(($240+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $242=(($241+4)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$242; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=HEAP32[(($242)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=(($243)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($244) { var $252 = 1;__label__ = 36; break; } else { __label__ = 35; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $246=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=(($246+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=(($247)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$248; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $250=(($249)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $252 = $250;__label__ = 36; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $252;
      if ($252) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $254=$CP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$254; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $255=HEAP32[(($254)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $R=$255; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $257=$RP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $258=$257; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=(($259+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $261=HEAPU32[(($260)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $262=(($258)>>>0) >= (($261)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $263=(($262)&1); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $264=(($263)==(1)); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $265=(($264)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($265) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $267=$RP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($267)>>2)]=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $272=$XP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $273=(($272)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($273) { __label__ = 44; break; } else { __label__ = 71; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $275=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=(($275+28)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $277=HEAP32[(($276)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $278=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=(($278+304)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $280=(($279+($277<<2))|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H=$280; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $281=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=$H; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $283=HEAP32[(($282)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $284=(($281)|0)==(($283)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($284) { __label__ = 45; break; } else { __label__ = 48; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $286=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=$H; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($287)>>2)]=$286; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=(($286)|0)==0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($288) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $290=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $291=(($290+28)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $292=HEAP32[(($291)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $293=1 << $292; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $294=$293 ^ -1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $295=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $296=(($295+4)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$297 & $294; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($296)>>2)]=$298; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 55; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $301=$XP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $302=$301; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $303=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $304=(($303+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $305=HEAPU32[(($304)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $306=(($302)>>>0) >= (($305)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $307=(($306)&1); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $308=(($307)==(1)); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $309=(($308)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($309) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $311=$XP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $312=(($311+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $313=(($312)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=(($314)|0)==(($315)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($316) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $318=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $319=$XP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $320=(($319+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=(($320)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($321)>>2)]=$318; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $323=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=$XP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=(($324+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=(($325+4)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($326)>>2)]=$323; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break;
    case 52: 
      __label__ = 54; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $331=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $332=(($331)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($332) { __label__ = 56; break; } else { __label__ = 70; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $334=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $335=$334; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $336=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=(($335)>>>0) >= (($338)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)&1); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 57; break; } else { __label__ = 68; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $344=$XP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $345=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=(($345+24)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($346)>>2)]=$344; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $349=(($348)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=HEAP32[(($349)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$350; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=(($350)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($351) { __label__ = 58; break; } else { __label__ = 62; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $353=$C0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $354=$353; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $355=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $356=(($355+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $357=HEAPU32[(($356)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=(($354)>>>0) >= (($357)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=(($358)&1); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $360=(($359)==(1)); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $361=(($360)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($361) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $363=$C0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $364=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $365=(($364+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $366=(($365)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($366)>>2)]=$363; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $367=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$C0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=(($368+24)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($369)>>2)]=$367; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 61; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      __label__ = 62; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $373=$TP; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374=(($373+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $375=(($374+4)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $376=HEAP32[(($375)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$376; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $377=(($376)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($377) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $379=$C1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=$379; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=$1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=(($381+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $383=HEAPU32[(($382)>>2)]; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $384=(($380)>>>0) >= (($383)>>>0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $385=(($384)&1); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=(($385)==(1)); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=(($386)|0)!=0; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($387) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $389=$C1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $390=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $391=(($390+16)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $392=(($391+4)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($392)>>2)]=$389; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $393=$R; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $394=$C1; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $395=(($394+24)|0); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($395)>>2)]=$393; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 67; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 69; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      __label__ = 71; break; //@line 3806 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $404=$oldfirst; //@line 3807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $405=$404; //@line 3807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $406=$nsize; //@line 3807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $407=(($405+$406)|0); //@line 3807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $408=$407; //@line 3807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$408; //@line 3807 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $409=$nsize; //@line 3808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $410=$qsize; //@line 3808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $411=((($410)+($409))|0); //@line 3808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $qsize=$411; //@line 3808 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 73; break; //@line 3809 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $413=$oldfirst; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $414=(($413+4)|0); //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $415=HEAP32[(($414)>>2)]; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $416=$415 & -2; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($414)>>2)]=$416; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $417=$qsize; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $418=$417 | 1; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $419=$q; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $420=(($419+4)|0); //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($420)>>2)]=$418; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $421=$qsize; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $422=$q; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $423=$422; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $424=$qsize; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $425=(($423+$424)|0); //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $426=$425; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $427=(($426)|0); //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($427)>>2)]=$421; //@line 3810 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $428=$qsize; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $429=$428 >>> 3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $430=(($429)>>>0) < 32; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($430) { __label__ = 74; break; } else { __label__ = 81; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $432=$qsize; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $433=$432 >>> 3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I2=$433; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $434=$I2; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $435=$434 << 1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $436=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $437=(($436+40)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $438=(($437+($435<<2))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $439=$438; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $440=$439; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B3=$440; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $441=$B3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F4=$441; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $442=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $443=(($442)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $444=HEAP32[(($443)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $445=$I2; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $446=1 << $445; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $447=$444 & $446; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $448=(($447)|0)!=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($448) { __label__ = 76; break; } else { __label__ = 75; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $450=$I2; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $451=1 << $450; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $452=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $453=(($452)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $454=HEAP32[(($453)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $455=$454 | $451; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($453)>>2)]=$455; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 80; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $457=$B3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $458=(($457+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $459=HEAP32[(($458)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $460=$459; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $461=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $462=(($461+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $463=HEAPU32[(($462)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $464=(($460)>>>0) >= (($463)>>>0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $465=(($464)&1); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $466=(($465)==(1)); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $467=(($466)|0)!=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($467) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $469=$B3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $470=(($469+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $471=HEAP32[(($470)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F4=$471; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 79; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      _abort(); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $475=$q; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $476=$B3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $477=(($476+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($477)>>2)]=$475; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $478=$q; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $479=$F4; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $480=(($479+12)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($480)>>2)]=$478; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $481=$F4; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $482=$q; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $483=(($482+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($483)>>2)]=$481; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $484=$B3; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $485=$q; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $486=(($485+12)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($486)>>2)]=$484; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $488=$q; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $489=$488; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $TP5=$489; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $490=$qsize; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $491=$490 >>> 8; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $X=$491; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $492=$X; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $493=(($492)|0)==0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($493) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      $I7=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $496=$X; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $497=(($496)>>>0) > 65535; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($497) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      $I7=31; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $500=$X; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$500; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $501=$Y; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $502=((($501)-(256))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $503=$502 >>> 16; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $504=$503 & 8; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$504; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $505=$N; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $506=$Y; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $507=$506 << $505; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$507; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $508=((($507)-(4096))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $509=$508 >>> 16; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $510=$509 & 4; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$510; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $511=$K; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $512=$N; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $513=((($512)+($511))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$513; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $514=$K; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $515=$Y; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $516=$515 << $514; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$516; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $517=((($516)-(16384))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $518=$517 >>> 16; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $519=$518 & 2; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$519; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $520=$N; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $521=((($520)+($519))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$521; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $522=$N; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $523=(((14)-($522))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $524=$K; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $525=$Y; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $526=$525 << $524; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$526; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $527=$526 >>> 15; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $528=((($523)+($527))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$528; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $529=$K; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $530=$529 << 1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $531=$qsize; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $532=$K; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $533=((($532)+(7))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $534=$531 >>> (($533)>>>0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $535=$534 & 1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $536=((($530)+($535))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I7=$536; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $539=$I7; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $540=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $541=(($540+304)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $542=(($541+($539<<2))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H6=$542; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $543=$I7; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $544=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $545=(($544+28)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($545)>>2)]=$543; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $546=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $547=(($546+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $548=(($547+4)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($548)>>2)]=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $549=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $550=(($549+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $551=(($550)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($551)>>2)]=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $552=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $553=(($552+4)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $554=HEAP32[(($553)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $555=$I7; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $556=1 << $555; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $557=$554 & $556; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $558=(($557)|0)!=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($558) { __label__ = 89; break; } else { __label__ = 88; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $560=$I7; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $561=1 << $560; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $562=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $563=(($562+4)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $564=HEAP32[(($563)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $565=$564 | $561; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($563)>>2)]=$565; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $566=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $567=$H6; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($567)>>2)]=$566; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $568=$H6; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $569=$568; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $570=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $571=(($570+24)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($571)>>2)]=$569; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $572=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $573=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $574=(($573+12)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($574)>>2)]=$572; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $575=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $576=(($575+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($576)>>2)]=$572; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $578=$H6; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $579=HEAP32[(($578)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$579; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $580=$qsize; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $581=$I7; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $582=(($581)|0)==31; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($582) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $591 = 0;__label__ = 92; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $585=$I7; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $586=$585 >>> 1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $587=((($586)+(8))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $588=((($587)-(2))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $589=(((31)-($588))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $591 = $589;__label__ = 92; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $591; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $592=$580 << $591; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K8=$592; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $594=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $595=(($594+4)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $596=HEAP32[(($595)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $597=$596 & -8; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $598=$qsize; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $599=(($597)|0)!=(($598)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($599) { __label__ = 94; break; } else { __label__ = 100; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $601=$K8; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $602=$601 >>> 31; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $603=$602 & 1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $604=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $605=(($604+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $606=(($605+($603<<2))|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C=$606; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $607=$K8; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $608=$607 << 1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K8=$608; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $609=$C; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $610=HEAP32[(($609)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $611=(($610)|0)!=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($611) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $613=$C; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $614=HEAP32[(($613)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$614; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 99; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $616=$C; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $617=$616; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $618=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $619=(($618+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $620=HEAPU32[(($619)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $621=(($617)>>>0) >= (($620)>>>0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $622=(($621)&1); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $623=(($622)==(1)); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $624=(($623)|0)!=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($624) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $626=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $627=$C; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($627)>>2)]=$626; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $628=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $629=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $630=(($629+24)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($630)>>2)]=$628; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $631=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $632=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $633=(($632+12)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($633)>>2)]=$631; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $634=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $635=(($634+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($635)>>2)]=$631; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 98: 
      _abort(); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 99: 
      __label__ = 105; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $639=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $640=(($639+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $641=HEAP32[(($640)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F9=$641; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $642=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $643=$642; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $644=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $645=(($644+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $646=HEAPU32[(($645)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $647=(($643)>>>0) >= (($646)>>>0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($647) { __label__ = 101; break; } else { var $656 = 0;__label__ = 102; break; } //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 101: 
      var $649=$F9; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $650=$649; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $651=$1; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $652=(($651+16)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $653=HEAPU32[(($652)>>2)]; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $654=(($650)>>>0) >= (($653)>>>0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $656 = $654;__label__ = 102; break;
    case 102: 
      var $656;
      var $657=(($656)&1);
      var $658=(($657)==(1));
      var $659=(($658)|0)!=0;
      if ($659) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $661=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $662=$F9; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $663=(($662+12)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($663)>>2)]=$661; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $664=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $665=(($664+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($665)>>2)]=$661; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $666=$F9; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $667=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $668=(($667+8)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($668)>>2)]=$666; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $669=$T; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $670=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $671=(($670+12)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($671)>>2)]=$669; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $672=$TP5; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $673=(($672+24)|0); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($673)>>2)]=0; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 104: 
      _abort(); //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 105: 
      __label__ = 93; break; //@line 3811 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $681=$p; //@line 3816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $682=$681; //@line 3816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $683=(($682+8)|0); //@line 3816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $683; //@line 3816 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_prepend_alloc["X"]=1;

function __ZNKSt9bad_alloc4whatEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return ((STRING_TABLE.__str3493)|0); //@line 160 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZSt15get_new_handlerv() {
  ;
  var __label__;

  var $1=(tempValue=HEAP32[((__ZL13__new_handler)>>2)],HEAP32[((__ZL13__new_handler)>>2)]=tempValue+0,tempValue); //@line 146 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  var $2=$1; //@line 146 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return $2; //@line 146 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZSt15set_new_handlerPFvvE($handler) {
  ;
  var __label__;

  var $1;
  $1=$handler;
  var $2=$1; //@line 140 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  var $3=$2; //@line 140 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  var $4=(tempValue=HEAP32[((__ZL13__new_handler)>>2)],HEAP32[((__ZL13__new_handler)>>2)]=$3,tempValue); //@line 140 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  var $5=$4; //@line 140 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return $5; //@line 140 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt9bad_allocC2Ev($this) {
  ;
  var __label__;

  var $1;
  var $2;
  $2=$this;
  var $3=$2;
  var $4=$3; //@line 150 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  $1=$4;
  var $5=$1;
  var $6=$5; //@line 90 "/data/workspace/sources/emscripten/system/include/libcxx/exception"
  HEAP32[(($6)>>2)]=((__ZTVSt9exception+8)|0); //@line 90 "/data/workspace/sources/emscripten/system/include/libcxx/exception"
  var $7=$3; //@line 150 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  HEAP32[(($7)>>2)]=((__ZTVSt9bad_alloc+8)|0); //@line 150 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  ;
  return; //@line 151 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdlPv($ptr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ptr;
      var $2=$1; //@line 107 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $3=(($2)|0)!=0; //@line 107 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 107 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      var $5=$1; //@line 108 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      _free($5); //@line 108 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 108 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      ;
      return; //@line 109 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$ptr;
  $3=$0;
  var $4=$2; //@line 115 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  __ZdlPv($4); //@line 115 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 116 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdaPv($ptr) {
  ;
  var __label__;

  var $1;
  $1=$ptr;
  var $2=$1; //@line 122 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  __ZdlPv($2); //@line 122 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 123 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  ;
  var __label__;

  var $2;
  var $3;
  $2=$ptr;
  $3=$0;
  var $4=$2; //@line 129 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  __ZdaPv($4); //@line 129 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 130 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt9bad_allocD0Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  FUNCTION_TABLE[__ZNSt9bad_allocD1Ev]($2); //@line 154 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  var $3=$2; //@line 154 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  __ZdlPv($3); //@line 154 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  ;
  return; //@line 155 "/data/workspace/sources/emscripten/system/include/libcxx/new"
}


function __ZNSt9bad_allocD2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2; //@line 155 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  __ZNSt9exceptionD2Ev($3); //@line 155 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 155 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt20bad_array_new_lengthC2Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  var $3=$2; //@line 164 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  __ZNSt9bad_allocC2Ev($3); //@line 164 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  var $4=$2; //@line 164 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  HEAP32[(($4)>>2)]=((__ZTVSt20bad_array_new_length+8)|0); //@line 164 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  ;
  return; //@line 165 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1; //@line 3822 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $6=(($5+24)|0); //@line 3822 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 3822 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$7; //@line 3822 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $old_top=$8; //@line 3822 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$1; //@line 3823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$old_top; //@line 3823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $11=_segment_holding($9, $10); //@line 3823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $oldsp=$11; //@line 3823 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$oldsp; //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $13=(($12)|0); //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$oldsp; //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $16=(($15+4)|0); //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $18=(($14+$17)|0); //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $old_end=$18; //@line 3824 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $ssize=24; //@line 3825 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$old_end; //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$ssize; //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $21=((($20)+(16))|0); //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $22=((($21)+(7))|0); //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $23=(((-$22))|0); //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $24=(($19+$23)|0); //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $rawsp=$24; //@line 3826 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$rawsp; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $26=(($25+8)|0); //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$27 & 7; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $29=(($28)|0)==0; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($29) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $39 = 0;__label__ = 5; break; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $32=$rawsp; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $33=(($32+8)|0); //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$33; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$34 & 7; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $36=(((8)-($35))|0); //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$36 & 7; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $39 = $37;__label__ = 5; break; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $39; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$39; //@line 3827 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$rawsp; //@line 3828 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$offset; //@line 3828 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $42=(($40+$41)|0); //@line 3828 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $asp=$42; //@line 3828 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$asp; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$old_top; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $45=(($44+16)|0); //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $46=(($43)>>>0) < (($45)>>>0); //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($46) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $48=$old_top; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52 = $48;__label__ = 8; break; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $50=$asp; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $52 = $50;__label__ = 8; break; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $52; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $csp=$52; //@line 3829 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$csp; //@line 3830 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$53; //@line 3830 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$54; //@line 3830 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$sp; //@line 3831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 3831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $57=(($56+8)|0); //@line 3831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$57; //@line 3831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $ss=$58; //@line 3831 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$sp; //@line 3832 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$59; //@line 3832 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$ssize; //@line 3832 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $62=(($60+$61)|0); //@line 3832 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$62; //@line 3832 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tnext=$63; //@line 3832 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$tnext; //@line 3833 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$64; //@line 3833 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nfences=0; //@line 3834 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$1; //@line 3837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$2; //@line 3837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$66; //@line 3837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$3; //@line 3837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $69=((($68)-(40))|0); //@line 3837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($65, $67, $69); //@line 3837 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$ssize; //@line 3841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$70 | 1; //@line 3841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$71 | 2; //@line 3841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$sp; //@line 3841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $74=(($73+4)|0); //@line 3841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($74)>>2)]=$72; //@line 3841 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$ss; //@line 3842 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$1; //@line 3842 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $77=(($76+444)|0); //@line 3842 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$75; //@line 3842 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$77; //@line 3842 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)]; //@line 3842 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$2; //@line 3843 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$1; //@line 3843 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $82=(($81+444)|0); //@line 3843 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $83=(($82)|0); //@line 3843 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($83)>>2)]=$80; //@line 3843 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$3; //@line 3844 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$1; //@line 3844 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $86=(($85+444)|0); //@line 3844 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $87=(($86+4)|0); //@line 3844 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($87)>>2)]=$84; //@line 3844 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$4; //@line 3845 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$1; //@line 3845 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $90=(($89+444)|0); //@line 3845 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $91=(($90+12)|0); //@line 3845 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($91)>>2)]=$88; //@line 3845 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$ss; //@line 3846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$1; //@line 3846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $94=(($93+444)|0); //@line 3846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $95=(($94+8)|0); //@line 3846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($95)>>2)]=$92; //@line 3846 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3849 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $97=$p; //@line 3850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$97; //@line 3850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $99=(($98+4)|0); //@line 3850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nextp=$100; //@line 3850 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$p; //@line 3851 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $102=(($101+4)|0); //@line 3851 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($102)>>2)]=7; //@line 3851 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$nfences; //@line 3852 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $104=((($103)+(1))|0); //@line 3852 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $nfences=$104; //@line 3852 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$nextp; //@line 3853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $106=(($105+4)|0); //@line 3853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 3853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$old_end; //@line 3853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $109=(($107)>>>0) < (($108)>>>0); //@line 3853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($109) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3853 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $111=$nextp; //@line 3854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $p=$111; //@line 3854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3854 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 13; break; //@line 3856 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 9; break; //@line 3857 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $115=$csp; //@line 3861 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$old_top; //@line 3861 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $117=(($115)|0)!=(($116)|0); //@line 3861 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($117) { __label__ = 14; break; } else { __label__ = 50; break; } //@line 3861 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $119=$old_top; //@line 3862 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 3862 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $q=$120; //@line 3862 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$csp; //@line 3863 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$old_top; //@line 3863 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$121; //@line 3863 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$122; //@line 3863 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $125=((($123)-($124))|0); //@line 3863 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$125; //@line 3863 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$q; //@line 3864 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$126; //@line 3864 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$psize; //@line 3864 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $129=(($127+$128)|0); //@line 3864 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$129; //@line 3864 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $tn=$130; //@line 3864 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$tn; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $132=(($131+4)|0); //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($132)>>2)]; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$133 & -2; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($132)>>2)]=$134; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$psize; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$135 | 1; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$q; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $138=(($137+4)|0); //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($138)>>2)]=$136; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$psize; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$q; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$140; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$psize; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $143=(($141+$142)|0); //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$143; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $145=(($144)|0); //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($145)>>2)]=$139; //@line 3865 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$psize; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$146 >>> 3; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $148=(($147)>>>0) < 32; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($148) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $150=$psize; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$150 >>> 3; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I=$151; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$I; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$152 << 1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $155=(($154+40)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $156=(($155+($153<<2))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $B=$158; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $159=$B; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$159; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $161=(($160)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($161)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$I; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $164=1 << $163; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $165=$162 & $164; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $166=(($165)|0)!=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($166) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $168=$I; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $169=1 << $168; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $171=(($170)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($171)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$172 | $169; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($171)>>2)]=$173; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $175=$B; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $176=(($175+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($176)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$177; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $180=(($179+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $181=HEAPU32[(($180)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $182=(($178)>>>0) >= (($181)>>>0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $183=(($182)&1); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $184=(($183)==(1)); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $185=(($184)|0)!=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($185) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $187=$B; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $188=(($187+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($188)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F=$189; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      _abort(); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $193=$q; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $194=$B; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $195=(($194+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($195)>>2)]=$193; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$q; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$F; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $198=(($197+12)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($198)>>2)]=$196; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$F; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $200=$q; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $201=(($200+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($201)>>2)]=$199; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$B; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $203=$q; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $204=(($203+12)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($204)>>2)]=$202; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $206=$q; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$206; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$207; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$psize; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$208 >>> 8; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $X=$209; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$X; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $211=(($210)|0)==0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($211) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      $I1=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $214=$X; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $215=(($214)>>>0) > 65535; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($215) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      $I1=31; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $218=$X; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$218; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$Y; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $220=((($219)-(256))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $221=$220 >>> 16; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$221 & 8; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$222; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $223=$N; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$Y; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$224 << $223; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$225; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $226=((($225)-(4096))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$226 >>> 16; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $228=$227 & 4; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$228; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $229=$K; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $230=$N; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $231=((($230)+($229))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$231; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $232=$K; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $233=$Y; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $234=$233 << $232; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$234; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $235=((($234)-(16384))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $236=$235 >>> 16; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $237=$236 & 2; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$237; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $238=$N; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $239=((($238)+($237))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $N=$239; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $240=$N; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $241=(((14)-($240))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $242=$K; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $243=$Y; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $244=$243 << $242; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$244; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $245=$244 >>> 15; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $246=((($241)+($245))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K=$246; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $247=$K; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $248=$247 << 1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $249=$psize; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $250=$K; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $251=((($250)+(7))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $252=$249 >>> (($251)>>>0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $253=$252 & 1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $254=((($248)+($253))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $I1=$254; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $257=$I1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $258=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $259=(($258+304)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $260=(($259+($257<<2))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $H=$260; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $261=$I1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $262=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $263=(($262+28)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($263)>>2)]=$261; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $264=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $265=(($264+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $266=(($265+4)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($266)>>2)]=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $267=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $268=(($267+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $269=(($268)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($269)>>2)]=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $270=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $271=(($270+4)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($271)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $273=$I1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $274=1 << $273; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $275=$272 & $274; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $276=(($275)|0)!=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($276) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $278=$I1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $279=1 << $278; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $280=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $281=(($280+4)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $283=$282 | $279; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($281)>>2)]=$283; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $284=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $285=$H; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($285)>>2)]=$284; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $286=$H; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $287=$286; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $288=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $289=(($288+24)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($289)>>2)]=$287; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $290=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $291=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $292=(($291+12)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($292)>>2)]=$290; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $293=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $294=(($293+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($294)>>2)]=$290; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $296=$H; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $297=HEAP32[(($296)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$297; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$psize; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $299=$I1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $300=(($299)|0)==31; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($300) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $309 = 0;__label__ = 33; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $303=$I1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $304=$303 >>> 1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $305=((($304)+(8))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $306=((($305)-(2))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $307=(((31)-($306))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $309 = $307;__label__ = 33; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $309; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $310=$298 << $309; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$310; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $312=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $313=(($312+4)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $314=HEAP32[(($313)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $315=$314 & -8; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $316=$psize; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $317=(($315)|0)!=(($316)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($317) { __label__ = 35; break; } else { __label__ = 41; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $319=$K2; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $320=$319 >>> 31; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$320 & 1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $322=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $323=(($322+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $324=(($323+($321<<2))|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $C=$324; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $325=$K2; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $326=$325 << 1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $K2=$326; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $327=$C; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $328=HEAP32[(($327)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $329=(($328)|0)!=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($329) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $331=$C; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $332=HEAP32[(($331)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $T=$332; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $334=$C; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $335=$334; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $336=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $337=(($336+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $338=HEAPU32[(($337)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $339=(($335)>>>0) >= (($338)>>>0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $340=(($339)&1); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $341=(($340)==(1)); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $342=(($341)|0)!=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($342) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $344=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $345=$C; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($345)>>2)]=$344; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $346=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $347=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $348=(($347+24)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($348)>>2)]=$346; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $349=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $350=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $351=(($350+12)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($351)>>2)]=$349; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $352=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $353=(($352+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($353)>>2)]=$349; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 46; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $357=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $358=(($357+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $359=HEAP32[(($358)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      $F3=$359; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $360=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $361=$360; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $362=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $363=(($362+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $364=HEAPU32[(($363)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $365=(($361)>>>0) >= (($364)>>>0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      if ($365) { __label__ = 42; break; } else { var $374 = 0;__label__ = 43; break; } //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $367=$F3; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$367; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $369=$1; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $370=(($369+16)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $371=HEAPU32[(($370)>>2)]; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $372=(($368)>>>0) >= (($371)>>>0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $374 = $372;__label__ = 43; break;
    case 43: 
      var $374;
      var $375=(($374)&1);
      var $376=(($375)==(1));
      var $377=(($376)|0)!=0;
      if ($377) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $379=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $380=$F3; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $381=(($380+12)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($381)>>2)]=$379; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $382=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $383=(($382+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($383)>>2)]=$379; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $384=$F3; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $385=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $386=(($385+8)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($386)>>2)]=$384; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $387=$T; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $388=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $389=(($388+12)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($389)>>2)]=$387; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $390=$TP; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      var $391=(($390+24)|0); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($391)>>2)]=0; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      _abort(); //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 34; break; //@line 3866 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break; //@line 3867 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      ;
      return; //@line 3870 "/data/workspace/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_add_segment["X"]=1;

function __Znwj($size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $p;
      var $nh;
      var $2;
      var $3;
      $1=$size;
      var $4=$1; //@line 35 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $5=(($4)|0)==0; //@line 35 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 35 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      $1=1; //@line 36 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 36 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      __label__ = 5; break; //@line 38 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $9=$1; //@line 38 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $10=_malloc($9); //@line 38 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $p=$10; //@line 38 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $11=(($10)|0)==0; //@line 38 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      if ($11) { __label__ = 6; break; } else { __label__ = 14; break; } //@line 38 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $13=__ZSt15get_new_handlerv(); //@line 42 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $nh=$13; //@line 42 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $14=$nh; //@line 43 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $15=(($14)|0)!=0; //@line 43 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      if ($15) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 43 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $17=$nh; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 13; break; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $21=$20.f0; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $2=$21; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $22=$20.f1; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $3=$22; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 10; break; //@line 44 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 10: 
      var $24=$3; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $25=(($24)|0) < 0; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      if ($25) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 11: 
      var $27=$2; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($27); //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 12: 
      var $29=___cxa_allocate_exception(4); //@line 47 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $30=$29; //@line 47 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      FUNCTION_TABLE[__ZNSt9bad_allocC1Ev]($30); //@line 47 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_throw($29, __ZTISt9bad_alloc, 6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 16; break; } else { __label__ = 9; break; }
    case 13: 
      __label__ = 5; break; //@line 51 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 14: 
      var $33=$p; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $33; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 15: 
      var $35=$2; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $36=$3; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $37=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $35, tempValue); //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $38=($37.f1 = $36, $37); //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      Module.print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)]; //@line 52 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 16: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}
__Znwj["X"]=1;

function __ZnwjRKSt9nothrow_t($size, $0) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $2;
      var $3;
      var $p;
      var $4;
      var $5;
      $2=$size;
      $3=$0;
      $p=0; //@line 59 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $6=$2; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $7 = (function() { try { __THREW__ = false; return __Znwj($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $p=$7; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 7; break; //@line 66 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $10=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]);
      var $11=$10.f0; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $4=$11; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $12=$10.f1; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $5=$12; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 5; break; //@line 64 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $14=$4; //@line 66 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $15=___cxa_begin_catch($14); //@line 66 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break; //@line 69 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $18=$p; //@line 71 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $18; //@line 71 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $20=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $21=$20.f0; //@line 69 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $4=$21; //@line 69 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $22=$20.f1; //@line 69 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $5=$22; //@line 69 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 9; break; //@line 69 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $24=$4; //@line 71 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($24); //@line 71 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 71 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Znaj($size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$size;
      var $4=$1; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $5 = (function() { try { __THREW__ = false; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      ;
      return $5; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $8=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $9=$8.f0; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $2=$9; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $10=$8.f1; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $3=$10; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 5; break; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $12=$3; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $13=(($12)|0) < 0; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $15=$2; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($15); //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $17=$2; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $18=$3; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $19=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $17, tempValue); //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $20=($19.f1 = $18, $19); //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      Module.print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)]; //@line 81 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZnajRKSt9nothrow_t($size, $nothrow) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      var $3;
      var $4;
      $1=$size;
      $2=$nothrow;
      $p=0; //@line 88 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $5=$1; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $6 = (function() { try { __THREW__ = false; return __Znaj($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $p=$6; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 7; break; //@line 95 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $9=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]);
      var $10=$9.f0; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $3=$10; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $11=$9.f1; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $4=$11; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 5; break; //@line 93 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $13=$3; //@line 95 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $14=___cxa_begin_catch($13); //@line 95 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break; //@line 98 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $17=$p; //@line 100 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $17; //@line 100 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $19=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $20=$19.f0; //@line 98 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $3=$20; //@line 98 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      var $21=$19.f1; //@line 98 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      $4=$21; //@line 98 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 9; break; //@line 98 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $23=$3; //@line 100 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($23); //@line 100 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 100 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNKSt20bad_array_new_length4whatEv($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  ;
  return ((STRING_TABLE.__str14494)|0); //@line 174 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt20bad_array_new_lengthD0Ev($this) {
  ;
  var __label__;

  var $1;
  $1=$this;
  var $2=$1;
  FUNCTION_TABLE[__ZNSt20bad_array_new_lengthD1Ev]($2); //@line 168 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  var $3=$2; //@line 168 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  __ZdlPv($3); //@line 168 "/data/workspace/sources/emscripten/system/include/libcxx/new"
  ;
  return; //@line 169 "/data/workspace/sources/emscripten/system/include/libcxx/new"
}


function __ZSt17__throw_bad_allocv() {
  ;
  var __label__;

  var $1=___cxa_allocate_exception(4); //@line 181 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  var $2=$1; //@line 181 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  FUNCTION_TABLE[__ZNSt9bad_allocC1Ev]($2); //@line 181 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ___cxa_throw($1, __ZTISt9bad_alloc, 6); //@line 181 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  throw "Reached an unreachable!" //@line 181 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 183 "/data/workspace/sources/emscripten/system/lib/libcxx/new.cpp"
}

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
var goog = { math: {} };


/**
 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
 * values as *signed* integers.  See the from* functions below for more
 * convenient ways of constructing Longs.
 *
 * The internal representation of a long is the two given signed, 32-bit values.
 * We use 32-bit pieces because these are the size of integers on which
 * Javascript performs bit-operations.  For operations like addition and
 * multiplication, we split each number into 16-bit pieces, which can easily be
 * multiplied within Javascript's floating-point representation without overflow
 * or change in sign.
 *
 * In the algorithms below, we frequently reduce the negative case to the
 * positive case by negating the input(s) and then post-processing the result.
 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
 * a positive number, it overflows back into a negative).  Not handling this
 * case would often result in infinite recursion.
 *
 * @param {number} low  The low (signed) 32 bits of the long.
 * @param {number} high  The high (signed) 32 bits of the long.
 * @constructor
 */
goog.math.Long = function(low, high) {
  /**
   * @type {number}
   * @private
   */
  this.low_ = low | 0;  // force into 32 signed bits.

  /**
   * @type {number}
   * @private
   */
  this.high_ = high | 0;  // force into 32 signed bits.
};


// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
// from* methods on which they depend.


/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @private
 */
goog.math.Long.IntCache_ = {};


/**
 * Returns a Long representing the given (32-bit) integer value.
 * @param {number} value The 32-bit integer in question.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }

  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};


/**
 * Returns a Long representing the given value, provided that it is a finite
 * number.  Otherwise, zero is returned.
 * @param {number} value The number in question.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
    return goog.math.Long.MIN_VALUE;
  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
    return goog.math.Long.MAX_VALUE;
  } else if (value < 0) {
    return goog.math.Long.fromNumber(-value).negate();
  } else {
    return new goog.math.Long(
        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
  }
};


/**
 * Returns a Long representing the 64-bit integer that comes by concatenating
 * the given high and low bits.  Each is assumed to use 32 bits.
 * @param {number} lowBits The low 32-bits.
 * @param {number} highBits The high 32-bits.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};


/**
 * Returns a Long representation of the given string, written using the given
 * radix.
 * @param {string} str The textual representation of the Long.
 * @param {number=} opt_radix The radix in which the text is written.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error('number format error: empty string');
  }

  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error('radix out of range: ' + radix);
  }

  if (str.charAt(0) == '-') {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else if (str.indexOf('-') >= 0) {
    throw Error('number format error: interior "-" character: ' + str);
  }

  // Do several (8) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

  var result = goog.math.Long.ZERO;
  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};


// NOTE: the compiler should inline these constant values below and then remove
// these variables, so there should be no runtime penalty for these.


/**
 * Number used repeated below in calculations.  This must appear before the
 * first call to any from* function below.
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_32_DBL_ =
    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_31_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ / 2;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_48_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_64_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_63_DBL_ =
    goog.math.Long.TWO_PWR_64_DBL_ / 2;


/** @type {!goog.math.Long} */
goog.math.Long.ZERO = goog.math.Long.fromInt(0);


/** @type {!goog.math.Long} */
goog.math.Long.ONE = goog.math.Long.fromInt(1);


/** @type {!goog.math.Long} */
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


/** @type {!goog.math.Long} */
goog.math.Long.MAX_VALUE =
    goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


/** @type {!goog.math.Long} */
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


/**
 * @type {!goog.math.Long}
 * @private
 */
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


/** @return {number} The value, assuming it is a 32-bit integer. */
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};


/** @return {number} The closest floating-point representation to this value. */
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
         this.getLowBitsUnsigned();
};


/**
 * @param {number=} opt_radix The radix in which the text should be written.
 * @return {string} The textual representation of this value.
 */
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error('radix out of range: ' + radix);
  }

  if (this.isZero()) {
    return '0';
  }

  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      // We need to change the Long value before it can be negated, so we remove
      // the bottom-most digit in this base and then recurse to do the rest.
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return '-' + this.negate().toString(radix);
    }
  }

  // Do several (6) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

  var rem = this;
  var result = '';
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);

    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = '0' + digits;
      }
      result = '' + digits + result;
    }
  }
};


/** @return {number} The high 32-bits as a signed value. */
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};


/** @return {number} The low 32-bits as a signed value. */
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};


/** @return {number} The low 32-bits as an unsigned value. */
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return (this.low_ >= 0) ?
      this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};


/**
 * @return {number} Returns the number of bits needed to represent the absolute
 *     value of this Long.
 */
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31; bit > 0; bit--) {
      if ((val & (1 << bit)) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};


/** @return {boolean} Whether this value is zero. */
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};


/** @return {boolean} Whether this value is negative. */
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};


/** @return {boolean} Whether this value is odd. */
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long equals the other.
 */
goog.math.Long.prototype.equals = function(other) {
  return (this.high_ == other.high_) && (this.low_ == other.low_);
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long does not equal the other.
 */
goog.math.Long.prototype.notEquals = function(other) {
  return (this.high_ != other.high_) || (this.low_ != other.low_);
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is less than the other.
 */
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is less than or equal to the other.
 */
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is greater than the other.
 */
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is greater than or equal to the other.
 */
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};


/**
 * Compares this Long with the given one.
 * @param {goog.math.Long} other Long to compare against.
 * @return {number} 0 if they are the same, 1 if the this is greater, and -1
 *     if the given one is greater.
 */
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }

  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }

  // at this point, the signs are the same, so subtraction will not overflow
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};


/** @return {!goog.math.Long} The negation of this value. */
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};


/**
 * Returns the sum of this and the given Long.
 * @param {goog.math.Long} other Long to add to this one.
 * @return {!goog.math.Long} The sum of this and the given Long.
 */
goog.math.Long.prototype.add = function(other) {
  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 0xFFFF;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 0xFFFF;

  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 0xFFFF;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 + b48;
  c48 &= 0xFFFF;
  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
};


/**
 * Returns the difference of this and the given Long.
 * @param {goog.math.Long} other Long to subtract from this.
 * @return {!goog.math.Long} The difference of this and the given Long.
 */
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};


/**
 * Returns the product of this and the given long.
 * @param {goog.math.Long} other Long to multiply with this.
 * @return {!goog.math.Long} The product of this and the other.
 */
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else if (other.isZero()) {
    return goog.math.Long.ZERO;
  }

  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  }

  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else if (other.isNegative()) {
    return this.multiply(other.negate()).negate();
  }

  // If both longs are small, use float multiplication
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
      other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }

  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
  // We can skip products that would overflow.

  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 0xFFFF;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 0xFFFF;

  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 0xFFFF;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 0xFFFF;
  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
};


/**
 * Returns this Long divided by the given one.
 * @param {goog.math.Long} other Long by which to divide.
 * @return {!goog.math.Long} This Long divided by the given one.
 */
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error('division by zero');
  } else if (this.isZero()) {
    return goog.math.Long.ZERO;
  }

  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) ||
        other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ONE;
    } else {
      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
      var halfThis = this.shiftRight(1);
      var approx = halfThis.div(other).shiftLeft(1);
      if (approx.equals(goog.math.Long.ZERO)) {
        return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
      } else {
        var rem = this.subtract(other.multiply(approx));
        var result = approx.add(rem.div(other));
        return result;
      }
    }
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.ZERO;
  }

  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else if (other.isNegative()) {
    return this.div(other.negate()).negate();
  }

  // Repeat the following until the remainder is less than other:  find a
  // floating-point that approximates remainder / other *from below*, add this
  // into the result, and subtract it from the remainder.  It is critical that
  // the approximate value is less than or equal to the real value so that the
  // remainder never becomes negative.
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    // Approximate the result of division. This may be a little greater or
    // smaller than the actual value.
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

    // We will tweak the approximate result by changing it in the 48-th digit or
    // the smallest non-fractional digit, whichever is larger.
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

    // Decrease the approximation until it is smaller than the remainder.  Note
    // that if it is too large, the product overflows and is negative.
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }

    // We know the answer can't be zero... and actually, zero would cause
    // infinite recursion since we would make no progress.
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }

    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};


/**
 * Returns this Long modulo the given one.
 * @param {goog.math.Long} other Long by which to mod.
 * @return {!goog.math.Long} This Long modulo the given one.
 */
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};


/** @return {!goog.math.Long} The bitwise-NOT of this value. */
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};


/**
 * Returns the bitwise-AND of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to AND.
 * @return {!goog.math.Long} The bitwise-AND of this and the other.
 */
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_,
                                 this.high_ & other.high_);
};


/**
 * Returns the bitwise-OR of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to OR.
 * @return {!goog.math.Long} The bitwise-OR of this and the other.
 */
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_,
                                 this.high_ | other.high_);
};


/**
 * Returns the bitwise-XOR of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to XOR.
 * @return {!goog.math.Long} The bitwise-XOR of this and the other.
 */
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                 this.high_ ^ other.high_);
};


/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the left by the given amount.
 */
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(
          low << numBits,
          (high << numBits) | (low >>> (32 - numBits)));
    } else {
      return goog.math.Long.fromBits(0, low << (numBits - 32));
    }
  }
};


/**
 * Returns this Long with bits shifted to the right by the given amount.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the right by the given amount.
 */
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(
          (low >>> numBits) | (high << (32 - numBits)),
          high >> numBits);
    } else {
      return goog.math.Long.fromBits(
          high >> (numBits - 32),
          high >= 0 ? 0 : -1);
    }
  }
};


/**
 * Returns this Long with bits shifted to the right by the given amount, with
 * the new top bits matching the current sign bit.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the right by the given amount, with
 *     zeros placed into the new leading bits.
 */
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(
          (low >>> numBits) | (high << (32 - numBits)),
          high >>> numBits);
    } else if (numBits == 32) {
      return goog.math.Long.fromBits(high, 0);
    } else {
      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
    }
  }
};

//======= begin jsbn =======

var navigator = { appName: 'Modern Browser' }; // polyfill a little

// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// http://www-cs-students.stanford.edu/~tjw/jsbn/

/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

// Basic JavaScript BN library - subset useful for RSA encryption.

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary&0xffffff)==0xefcafe);

// (public) Constructor
function BigInteger(a,b,c) {
  if(a != null)
    if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
}

// return new, unset BigInteger
function nbi() { return new BigInteger(null); }

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i,x,w,j,c,n) {
  while(--n >= 0) {
    var v = x*this[i++]+w[j]+c;
    c = Math.floor(v/0x4000000);
    w[j++] = v&0x3ffffff;
  }
  return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i,x,w,j,c,n) {
  var xl = x&0x7fff, xh = x>>15;
  while(--n >= 0) {
    var l = this[i]&0x7fff;
    var h = this[i++]>>15;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
    w[j++] = l&0x3fffffff;
  }
  return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i,x,w,j,c,n) {
  var xl = x&0x3fff, xh = x>>14;
  while(--n >= 0) {
    var l = this[i]&0x3fff;
    var h = this[i++]>>14;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
    c = (l>>28)+(m>>14)+xh*h;
    w[j++] = l&0xfffffff;
  }
  return c;
}
if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
  BigInteger.prototype.am = am2;
  dbits = 30;
}
else if(j_lm && (navigator.appName != "Netscape")) {
  BigInteger.prototype.am = am1;
  dbits = 26;
}
else { // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1<<dbits)-1);
BigInteger.prototype.DV = (1<<dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2,BI_FP);
BigInteger.prototype.F1 = BI_FP-dbits;
BigInteger.prototype.F2 = 2*dbits-BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr,vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) { return BI_RM.charAt(n); }
function intAt(s,i) {
  var c = BI_RC[s.charCodeAt(i)];
  return (c==null)?-1:c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1;
  this.s = (x<0)?-1:0;
  if(x > 0) this[0] = x;
  else if(x < -1) this[0] = x+DV;
  else this.t = 0;
}

// return bigint initialized to value
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

// (protected) set from string and radix
function bnpFromString(s,b) {
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 256) k = 8; // byte array
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else { this.fromRadix(s,b); return; }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while(--i >= 0) {
    var x = (k==8)?s[i]&0xff:intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-") mi = true;
      continue;
    }
    mi = false;
    if(sh == 0)
      this[this.t++] = x;
    else if(sh+k > this.DB) {
      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
      this[this.t++] = (x>>(this.DB-sh));
    }
    else
      this[this.t-1] |= x<<sh;
    sh += k;
    if(sh >= this.DB) sh -= this.DB;
  }
  if(k == 8 && (s[0]&0x80) != 0) {
    this.s = -1;
    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
  }
  this.clamp();
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s&this.DM;
  while(this.t > 0 && this[this.t-1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
  if(this.s < 0) return "-"+this.negate().toString(b);
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else return this.toRadix(b);
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
  var p = this.DB-(i*this.DB)%k;
  if(i-- > 0) {
    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
    while(i >= 0) {
      if(p < k) {
        d = (this[i]&((1<<p)-1))<<(k-p);
        d |= this[--i]>>(p+=this.DB-k);
      }
      else {
        d = (this[i]>>(p-=k))&km;
        if(p <= 0) { p += this.DB; --i; }
      }
      if(d > 0) m = true;
      if(m) r += int2char(d);
    }
  }
  return m?r:"0";
}

// (public) -this
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

// (public) |this|
function bnAbs() { return (this.s<0)?this.negate():this; }

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s-a.s;
  if(r != 0) return r;
  var i = this.t;
  r = i-a.t;
  if(r != 0) return r;
  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
  return 0;
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1, t;
  if((t=x>>>16) != 0) { x = t; r += 16; }
  if((t=x>>8) != 0) { x = t; r += 8; }
  if((t=x>>4) != 0) { x = t; r += 4; }
  if((t=x>>2) != 0) { x = t; r += 2; }
  if((t=x>>1) != 0) { x = t; r += 1; }
  return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if(this.t <= 0) return 0;
  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n,r) {
  var i;
  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
  for(i = n-1; i >= 0; --i) r[i] = 0;
  r.t = this.t+n;
  r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n,r) {
  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
  r.t = Math.max(this.t-n,0);
  r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n,r) {
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<cbs)-1;
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
  for(i = this.t-1; i >= 0; --i) {
    r[i+ds+1] = (this[i]>>cbs)|c;
    c = (this[i]&bm)<<bs;
  }
  for(i = ds-1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t+ds+1;
  r.s = this.s;
  r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n,r) {
  r.s = this.s;
  var ds = Math.floor(n/this.DB);
  if(ds >= this.t) { r.t = 0; return; }
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<bs)-1;
  r[0] = this[ds]>>bs;
  for(var i = ds+1; i < this.t; ++i) {
    r[i-ds-1] |= (this[i]&bm)<<cbs;
    r[i-ds] = this[i]>>bs;
  }
  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
  r.t = this.t-ds;
  r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]-a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c -= a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c -= a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = (c<0)?-1:0;
  if(c < -1) r[i++] = this.DV+c;
  else if(c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a,r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i+y.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
  r.s = 0;
  r.clamp();
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2*x.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < x.t-1; ++i) {
    var c = x.am(i,x[i],r,2*i,0,1);
    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
      r[i+x.t] -= x.DV;
      r[i+x.t+1] = 1;
    }
  }
  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
  r.s = 0;
  r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m,q,r) {
  var pm = m.abs();
  if(pm.t <= 0) return;
  var pt = this.abs();
  if(pt.t < pm.t) {
    if(q != null) q.fromInt(0);
    if(r != null) this.copyTo(r);
    return;
  }
  if(r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
  else { pm.copyTo(y); pt.copyTo(r); }
  var ys = y.t;
  var y0 = y[ys-1];
  if(y0 == 0) return;
  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
  y.dlShiftTo(j,t);
  if(r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t,r);
  }
  BigInteger.ONE.dlShiftTo(ys,t);
  t.subTo(y,y);	// "negative" y so we can replace sub with am later
  while(y.t < ys) y[y.t++] = 0;
  while(--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
      y.dlShiftTo(j,t);
      r.subTo(t,r);
      while(r[i] < --qd) r.subTo(t,r);
    }
  }
  if(q != null) {
    r.drShiftTo(ys,q);
    if(ts != ms) BigInteger.ZERO.subTo(q,q);
  }
  r.t = ys;
  r.clamp();
  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
  if(ts < 0) BigInteger.ZERO.subTo(r,r);
}

// (public) this mod a
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a,null,r);
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
  return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) { this.m = m; }
function cConvert(x) {
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
  else return x;
}
function cRevert(x) { return x; }
function cReduce(x) { x.divRemTo(this.m,null,x); }
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if(this.t < 1) return 0;
  var x = this[0];
  if((x&1) == 0) return 0;
  var y = x&3;		// y == 1/x mod 2^2
  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y>0)?this.DV-y:-y;
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp&0x7fff;
  this.mph = this.mp>>15;
  this.um = (1<<(m.DB-15))-1;
  this.mt2 = 2*m.t;
}

// xR mod m
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t,r);
  r.divRemTo(this.m,null,r);
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
  return r;
}

// x/R mod m
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while(x.t <= this.mt2)	// pad x so am has enough room later
    x[x.t++] = 0;
  for(var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i]&0x7fff;
    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
    // use am to combine the multiply-shift-add into one call
    j = i+this.m.t;
    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
    // propagate carry
    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
  }
  x.clamp();
  x.drShiftTo(this.m.t,x);
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = "xy/R mod m"; x,y != r
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e,z) {
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
  g.copyTo(r);
  while(--i >= 0) {
    z.sqrTo(r,r2);
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
    else { var t = r; r = r2; r2 = t; }
  }
  return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e,m) {
  var z;
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e,z);
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// jsbn2 stuff

// (protected) convert from radix string
function bnpFromRadix(s,b) {
  this.fromInt(0);
  if(b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
  for(var i = 0; i < s.length; ++i) {
    var x = intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
      continue;
    }
    w = b*w+x;
    if(++j >= cs) {
      this.dMultiply(d);
      this.dAddOffset(w,0);
      j = 0;
      w = 0;
    }
  }
  if(j > 0) {
    this.dMultiply(Math.pow(b,j));
    this.dAddOffset(w,0);
  }
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) return x s.t. r^x < DV
function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

// (public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
  if(this.s < 0) return -1;
  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
  else return 1;
}

// (protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
  this[this.t] = this.am(0,n-1,this,0,0,this.t);
  ++this.t;
  this.clamp();
}

// (protected) this += n << w words, this >= 0
function bnpDAddOffset(n,w) {
  if(n == 0) return;
  while(this.t <= w) this[this.t++] = 0;
  this[w] += n;
  while(this[w] >= this.DV) {
    this[w] -= this.DV;
    if(++w >= this.t) this[this.t++] = 0;
    ++this[w];
  }
}

// (protected) convert to radix string
function bnpToRadix(b) {
  if(b == null) b = 10;
  if(this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b,cs);
  var d = nbv(a), y = nbi(), z = nbi(), r = "";
  this.divRemTo(d,y,z);
  while(y.signum() > 0) {
    r = (a+z.intValue()).toString(b).substr(1) + r;
    y.divRemTo(d,y,z);
  }
  return z.intValue().toString(b) + r;
}

// (public) return value as integer
function bnIntValue() {
  if(this.s < 0) {
    if(this.t == 1) return this[0]-this.DV;
    else if(this.t == 0) return -1;
  }
  else if(this.t == 1) return this[0];
  else if(this.t == 0) return 0;
  // assumes 16 < DB < 32
  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
}

// (protected) r = this + a
function bnpAddTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]+a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c += a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c += a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += a.s;
  }
  r.s = (c<0)?-1:0;
  if(c > 0) r[i++] = c;
  else if(c < -1) r[i++] = this.DV+c;
  r.t = i;
  r.clamp();
}

BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.addTo = bnpAddTo;

//======= end jsbn =======

// Emscripten wrapper
var Wrapper = {
  result: [0, 0], // return result stored here
  add: function(xl, xh, yl, yh) {
    var x = new goog.math.Long(xl, xh);
    var y = new goog.math.Long(yl, yh);
    var ret = x.add(y);
    Wrapper.result[0] = ret.low_;
    Wrapper.result[1] = ret.high_;
  },
  subtract: function(xl, xh, yl, yh) {
    var x = new goog.math.Long(xl, xh);
    var y = new goog.math.Long(yl, yh);
    var ret = x.subtract(y);
    Wrapper.result[0] = ret.low_;
    Wrapper.result[1] = ret.high_;
  },
  multiply: function(xl, xh, yl, yh) {
    var x = new goog.math.Long(xl, xh);
    var y = new goog.math.Long(yl, yh);
    var ret = x.multiply(y);
    Wrapper.result[0] = ret.low_;
    Wrapper.result[1] = ret.high_;
  },
  makeTwo32: function() {
    Wrapper.two32 = new BigInteger();
    Wrapper.two32.fromString('4294967296', 10);
  },
  lh2bignum: function(l, h) {
    var a = new BigInteger();
    a.fromString(h.toString(), 10);
    var b = new BigInteger();
    a.multiplyTo(Wrapper.two32, b);
    var c = new BigInteger();
    c.fromString(l.toString(), 10);
    var d = new BigInteger();
    c.addTo(b, d);
    return d;
  },
  divide: function(xl, xh, yl, yh, unsigned) {
    if (!Wrapper.two32) Wrapper.makeTwo32();
    if (!unsigned) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.div(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    } else {
      // slow precise bignum division
      var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
      var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
      var z = new BigInteger();
      x.divRemTo(y, z, null);
      var l = new BigInteger();
      var h = new BigInteger();
      z.divRemTo(Wrapper.two32, h, l);
      Wrapper.result[0] = parseInt(l.toString()) | 0;
      Wrapper.result[1] = parseInt(h.toString()) | 0;
    }
  },
  modulo: function(xl, xh, yl, yh, unsigned) {
    if (!Wrapper.two32) Wrapper.makeTwo32();
    if (!unsigned) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.modulo(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    } else {
      // slow precise bignum division
      var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
      var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
      var z = new BigInteger();
      x.divRemTo(y, null, z);
      var l = new BigInteger();
      var h = new BigInteger();
      z.divRemTo(Wrapper.two32, h, l);
      Wrapper.result[0] = parseInt(l.toString()) | 0;
      Wrapper.result[1] = parseInt(h.toString()) | 0;
    }
  },
  stringify: function(l, h, unsigned) {
    var ret = new goog.math.Long(l, h).toString();
    if (unsigned && ret[0] == '-') {
      // unsign slowly using jsbn bignums
      if (!Wrapper.two64) {
        Wrapper.two64 = new BigInteger();
        Wrapper.two64.fromString('18446744073709551616', 10);
      }
      var bignum = new BigInteger();
      bignum.fromString(ret, 10);
      ret = new BigInteger();
      Wrapper.two64.addTo(bignum, ret);
      ret = ret.toString(10);
    }
    return ret;
  }
};
return Wrapper;
})();

//======= end closure i64 code =======



  
  
  
  var _environ=null;
  
  var ___environ=null;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (_environ === null) {
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        _environ = allocate([envPtr], 'i8**', ALLOC_STATIC);
        // Set up global variable alias.
        ___environ = _environ;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;

  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          throw 'Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc';
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // Allocate these on the stack (and never free, we are called from ATINIT or earlier), to keep their locations low
        _stdin = allocate([1], 'void*', ALLOC_STACK);
        _stdout = allocate([2], 'void*', ALLOC_STACK);
        _stderr = allocate([3], 'void*', ALLOC_STACK);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        var path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  var ___stat_struct_layout={__size__:72,st_dev:0,st_ino:4,st_mode:8,st_nlink:12,st_uid:16,st_gid:20,st_rdev:24,st_size:28,st_atime:32,st_spare1:36,st_mtime:40,st_spare2:44,st_ctime:48,st_spare3:52,st_blksize:56,st_blocks:60,st_spare4:64};function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
      if (obj === null || !FS.forceLoadFile(obj)) return -1;
  
      var offsets = ___stat_struct_layout;
  
      // Constants.
      HEAP32[(((buf)+(offsets.st_nlink))>>2)]=1
      HEAP32[(((buf)+(offsets.st_uid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_gid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_blksize))>>2)]=4096
  
      // Variables.
      HEAP32[(((buf)+(offsets.st_ino))>>2)]=obj.inodeNumber
      var time = Math.floor(obj.timestamp / 1000);
      if (offsets.st_atime === undefined) {
        offsets.st_atime = offsets.st_atim.tv_sec;
        offsets.st_mtime = offsets.st_mtim.tv_sec;
        offsets.st_ctime = offsets.st_ctim.tv_sec;
        var nanosec = (obj.timestamp % 1000) * 1000;
        HEAP32[(((buf)+(offsets.st_atim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_mtim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_ctim.tv_nsec))>>2)]=nanosec
      }
      HEAP32[(((buf)+(offsets.st_atime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_mtime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_ctime))>>2)]=time
      var mode = 0;
      var size = 0;
      var blocks = 0;
      var dev = 0;
      var rdev = 0;
      if (obj.isDevice) {
        //  Device numbers reuse inode numbers.
        dev = rdev = obj.inodeNumber;
        size = blocks = 0;
        mode = 0x2000;  // S_IFCHR.
      } else {
        dev = 1;
        rdev = 0;
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        if (obj.isFolder) {
          size = 4096;
          blocks = 1;
          mode = 0x4000;  // S_IFDIR.
        } else {
          var data = obj.contents || obj.link;
          size = data.length;
          blocks = Math.ceil(data.length / 4096);
          mode = obj.link === undefined ? 0x8000 : 0xA000;  // S_IFREG, S_IFLNK.
        }
      }
      HEAP32[(((buf)+(offsets.st_dev))>>2)]=dev;
      HEAP32[(((buf)+(offsets.st_rdev))>>2)]=rdev;
      HEAP32[(((buf)+(offsets.st_size))>>2)]=size
      HEAP32[(((buf)+(offsets.st_blocks))>>2)]=blocks
      if (obj.read) mode |= 0x16D;  // S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH.
      if (obj.write) mode |= 0x92;  // S_IWUSR | S_IWGRP | S_IWOTH.
      HEAP32[(((buf)+(offsets.st_mode))>>2)]=mode
  
      return 0;
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else {
        var pathArray = intArrayFromString(FS.streams[fildes].path);
        return _stat(allocate(pathArray, 'i8', ALLOC_STACK), buf);
      }
    }


  
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      FS.checkStreams();
      return id;
    }

  
  var ___flock_struct_layout=null;function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      var stream = FS.streams[fildes];
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream = {};
          for (var member in stream) {
            newStream[member] = stream[member];
          }
          arg = dup2 ? arg : Math.max(arg, FS.streams.length); // dup2 wants exactly arg; fcntl wants a free descriptor >= arg
          for (var i = FS.streams.length; i < arg; i++) {
            FS.streams[i] = null; // Keep dense
          }
          FS.streams[arg] = newStream;
          FS.checkStreams();
          return arg;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          var flags = 0;
          if (stream.isRead && stream.isWrite) flags = 2;
          else if (!stream.isRead && stream.isWrite) flags = 1;
          else if (stream.isRead && !stream.isWrite) flags = 0;
          if (stream.isAppend) flags |= 8;
          // Synchronization and blocking flags are irrelevant to us.
          return flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.isAppend = Boolean(arg | 8);
          // Synchronization and blocking flags are irrelevant to us.
          return 0;
        case 7:
        case 20:
          var arg = HEAP32[((varargs)>>2)];
          var offset = ___flock_struct_layout.l_type;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=3
          return 0;
        case 8:
        case 9:
        case 21:
        case 22:
          // Pretend that the locking is successful.
          return 0;
        case 6:
        case 5:
          // These are for sockets. We don't have them implemented (yet?).
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }

  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP8[((buf)+(i))]=contents[offset + i]
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32=_memset;

  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      var target = FS.findObject(path);
      if (target === null) return -1;
      if ((amode & 2 && !target.write) ||  // W_OK.
          ((amode & 1 || amode & 4) && !target.read)) {  // X_OK, R_OK.
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        return 0;
      }
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _strdup(ptr) {
      var len = String_len(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len, 1);
      HEAP8[((newStr)+(len))]=0;
      return newStr;
    }

  function _strlen(ptr) {
      return String_len(ptr);
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[(((varargs)+(argIndex))>>2)],tempDoubleI32[1]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = String_len(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }


  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = FS.absolutePath(Pointer_stringify(dirname));
      if (path === null) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var target = FS.findObject(path);
      if (target === null) return 0;
      if (!target.isFolder) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      } else if (!target.read) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return 0;
      }
      var id = FS.streams.length; // Keep dense
      var contents = [];
      for (var key in target.contents) contents.push(key);
      FS.streams[id] = {
        path: path,
        object: target,
        // An index into contents. Special values: -2 is ".", -1 is "..".
        position: -2,
        isRead: true,
        isWrite: false,
        isAppend: false,
        error: false,
        eof: false,
        ungotten: [],
        // Folder-specific properties:
        // Remember the contents at the time of opening in an array, so we can
        // seek between them relying on a single order.
        contents: contents,
        // Each stream has its own area for readdir() returns.
        currentEntry: _malloc(___dirent_struct_layout.__size__)
      };
      FS.checkStreams();
      return id;
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var stream = FS.streams[dirp];
      var loc = stream.position;
      var entries = 0;
      for (var key in stream.contents) entries++;
      if (loc < -2 || loc >= entries) {
        HEAP32[((result)>>2)]=0
      } else {
        var name, inode, type;
        if (loc === -2) {
          name = '.';
          inode = 1;  // Really undefined.
          type = 4; //DT_DIR
        } else if (loc === -1) {
          name = '..';
          inode = 1;  // Really undefined.
          type = 4; //DT_DIR
        } else {
          var object;
          name = stream.contents[loc];
          object = stream.object.contents[name];
          inode = object.inodeNumber;
          type = object.isDevice ? 2 // DT_CHR, character device.
                : object.isFolder ? 4 // DT_DIR, directory.
                : object.link !== undefined ? 10 // DT_LNK, symbolic link.
                : 8; // DT_REG, regular file.
        }
        stream.position++;
        var offsets = ___dirent_struct_layout;
        HEAP32[(((entry)+(offsets.d_ino))>>2)]=inode
        HEAP32[(((entry)+(offsets.d_off))>>2)]=stream.position
        HEAP32[(((entry)+(offsets.d_reclen))>>2)]=name.length + 1
        for (var i = 0; i < name.length; i++) {
          HEAP8[((entry + offsets.d_name)+(i))]=name.charCodeAt(i)
        }
        HEAP8[((entry + offsets.d_name)+(i))]=0
        HEAP8[((entry)+(offsets.d_type))]=type
        HEAP32[((result)>>2)]=entry
      }
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      } else {
        if (!_readdir.result) _readdir.result = _malloc(4);
        _readdir_r(dirp, FS.streams[dirp].currentEntry, _readdir.result);
        if (HEAP32[((_readdir.result)>>2)] === 0) {
          return 0;
        } else {
          return FS.streams[dirp].currentEntry;
        }
      }
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      } else {
        _free(FS.streams[dirp].currentEntry);
        FS.streams[dirp] = null;
        return 0;
      }
    }

  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }function _qsort(base, num, size, comparator) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      comparator = FUNCTION_TABLE[comparator];
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }

  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
var _getline; // stub for _getline

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        ret = [ret>>>0,Math.min(Math.floor((ret)/4294967296), 4294967295)];
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }

  function _strtoull(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 18446744073709551615, 64, true);  // ULONG_MAX; imprecise.
    }

  function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      HEAP8[((s)+(i))]=0;
      return result.length;
    }

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
var _llvm_va_start; // stub for _llvm_va_start

  var _vfprintf=_fprintf;

  function _llvm_va_end() {}

  
  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  var ___tm_current=0;
  
  
  var ___tm_timezones={};
  
  
  var __tzname=null;
  
  var __daylight=null;
  
  var __timezone=null;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (__tzname) return; // glibc does not need the double __
  
      __timezone = _malloc(4);
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      __daylight = _malloc(4);
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      __tzname = _malloc(2 * 4); // glibc does not need the double __
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _localtime_r(time, ___tm_current);
    }
  
  
  var ___tm_formatted=0;
  
  
  function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[((buf)+(index))]=chr.charCodeAt(0)
      });
      HEAP8[((buf)+(25))]=0
      return buf;
    }function _asctime(tmPtr) {
      if (!___tm_formatted) ___tm_formatted = _malloc(26);
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }

  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
  
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _gmtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _gmtime_r(time, ___tm_current);
    }


  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _lstat(path, buf) {
      // int lstat(const char *path, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/lstat.html
      return _stat(path, buf, true);
    }

  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      var target = FS.findObject(Pointer_stringify(path), true);
      if (target === null) return -1;
      if (target.link !== undefined) {
        var length = Math.min(bufsize - 1, target.link.length);
        for (var i = 0; i < length; i++) {
          HEAP8[((buf)+(i))]=target.link.charCodeAt(i)
        }
        if (bufsize - 1 > length) HEAP8[((buf)+(i))]=0
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        if (HEAP8[((pdest)+(len+i))] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[((pdest)+(len+i))]=0
          break;
        }
      }
      return pdest;
    }


  function _llvm_va_copy(ppdest, ppsrc) {
      HEAP8[(ppdest)]=HEAP8[(ppsrc)];HEAP8[((ppdest)+(1))]=HEAP8[((ppsrc)+(1))];HEAP8[((ppdest)+(2))]=HEAP8[((ppsrc)+(2))];HEAP8[((ppdest)+(3))]=HEAP8[((ppsrc)+(3))];
      /* Alternate implementation that copies the actual DATA; it assumes the va_list is prefixed by its size
      var psrc = IHEAP[ppsrc]-1;
      var num = IHEAP[psrc]; // right before the data, is the number of (flattened) values
      var pdest = _malloc(num+1);
      _memcpy(pdest, psrc, num+1);
      IHEAP[ppdest] = pdest+1;
      */
    }

  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  var _vsprintf=_sprintf;

  
  function _memmove(dest, src, num, align) {
      if (src < dest && dest < src + num) {
        // Copy backwards in a safe manner
        src += num;
        dest += num;
        while (num--) {
          dest--;
          src--;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num, align);
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function ___gxx_personality_v0() {
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return { f0:thrown, f1:typeArray[i] };
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return { f0:thrown, f1 :throwntype };
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      Module.printErr('Compiled code throwing an exception, ' + [ptr,type,destructor] + ', at ' + new Error().stack);
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_call_unexpected(exception) {
      ABORT = true;
      throw exception;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = false;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        FUNCTION_TABLE[destructor](ptr);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
var __ZNSt9exceptionD2Ev; // stub for __ZNSt9exceptionD2Ev





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        addRunDependency('al ' + url);
      },setCanvasSize:function (width, height) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
      }};
___buildEnvironment(ENV);
___setErrNo(0);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}












var _get_default_magic_default_magic;




var _llvm_used;

var _file_nformats;
var _file_nnames;



var _file_formats;
var _file_names;
var _magicsize;





var _stderr;












var _ar;


var _maxmagic;






var __str24;






var _bang;


var _parse_last_cont_level;
































var _type_tbl;



var _get_cond_cond_tbl;













var _init_file_tables_done;

















































































var __str7166;








var _stdout;


var _file_fmttime_daylight;























var __str20207;


































var _tartype;



var _cdf_bo;



var _vn;


























var _cdf_ctime_ctbuf;

var _mdays;

var __str307;







































var _nuls;

































































































var _cnames;
var _cclasses;


var __str99;





















var _rerrs;



































var __str35477;

var _m;



var __gm_;
var _mparams;



var __ZSt7nothrow;
var __ZL13__new_handler;
var __ZTVSt9bad_alloc;

var __ZTVSt20bad_array_new_length;

var __ZTVN10__cxxabiv120__si_class_type_infoE;

var __ZTISt9exception;
var __ZTISt9bad_alloc;

var __ZTISt20bad_array_new_length;
var __ZTVSt9exception;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
STRING_TABLE._rcsid=allocate([64,40,35,41,36,70,105,108,101,58,32,109,97,103,105,99,46,99,44,118,32,49,46,55,52,32,50,48,49,49,47,48,53,47,50,54,32,48,49,58,50,55,58,53,57,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: magic.c,v */, "i8", ALLOC_STATIC);
STRING_TABLE.__str=allocate([77,65,71,73,67,0] /* MAGIC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([47,101,116,99,47,109,97,103,105,99,0] /* /etc/magic\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2=allocate([117,110,107,110,111,119,110,0] /* unknown\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3=allocate([99,97,110,110,111,116,32,114,101,97,100,32,96,37,115,39,0] /* cannot read `%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([119,114,105,116,97,98,108,101,44,32,0] /* writable, \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([101,120,101,99,117,116,97,98,108,101,44,32,0] /* executable, \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([114,101,103,117,108,97,114,32,102,105,108,101,44,32,0] /* regular file, \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([110,111,32,114,101,97,100,32,112,101,114,109,105,115,115,105,111,110,0] /* no read permission\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._get_default_magic_hmagic=allocate([47,46,109,97,103,105,99,47,109,97,103,105,99,46,109,103,99,0] /* /.magic/magic.mgc\00 */, "i8", ALLOC_STATIC);
_get_default_magic_default_magic=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([72,79,77,69,0] /* HOME\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([37,115,47,46,109,97,103,105,99,0] /* %s/.magic\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([37,115,47,37,115,0] /* %s/%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([37,115,58,37,115,0] /* %s:%s\00 */, "i8", ALLOC_STATIC);
_llvm_used=allocate(64, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid1=allocate([64,40,35,41,36,70,105,108,101,58,32,97,112,112,114,101,110,116,105,99,101,46,99,44,118,32,49,46,49,55,51,32,50,48,49,49,47,49,50,47,48,56,32,49,50,58,51,56,58,50,52,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: apprentic */, "i8", ALLOC_STATIC);
_file_nformats=allocate([42], ["i32",0,0,0], ALLOC_STATIC);
_file_nnames=allocate([42], ["i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str12=allocate([99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,97,110,121,32,109,97,103,105,99,32,102,105,108,101,115,33,0] /* could not find any m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str113=allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,58,32,109,45,62,116,121,112,101,61,37,100,10,0] /* cannot happen: m-_ty */, "i8", ALLOC_STATIC);
STRING_TABLE.__str214=allocate([37,46,51,111,0] /* %.3o\00 */, "i8", ALLOC_STATIC);
_file_formats=allocate(168, "i8", ALLOC_STATIC);
_file_names=allocate(168, "i8", ALLOC_STATIC);
_magicsize=allocate([232], ["i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str315=allocate([109,97,103,105,99,32,101,108,101,109,101,110,116,32,115,105,122,101,32,37,108,117,32,33,61,32,37,108,117,0] /* magic element size % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str416=allocate([117,115,105,110,103,32,114,101,103,117,108,97,114,32,109,97,103,105,99,32,102,105,108,101,32,96,37,115,39,0] /* using regular magic  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str517=allocate([66,105,110,97,114,121,32,112,97,116,116,101,114,110,115,58,10,0] /* Binary patterns:\0A\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str618=allocate([84,101,120,116,32,112,97,116,116,101,114,110,115,58,10,0] /* Text patterns:\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str719=allocate([83,116,114,101,110,103,116,104,32,61,32,37,51,122,117,32,58,32,37,115,32,91,37,115,93,10,0] /* Strength = %3zu : %s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str820=allocate([66,97,100,32,116,121,112,101,32,37,100,10,0] /* Bad type %d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str921=allocate([66,97,100,32,114,101,108,97,116,105,111,110,32,37,99,10,0] /* Bad relation %c\0A\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1022=allocate([99,97,110,110,111,116,32,115,116,97,116,32,96,37,115,39,0] /* cannot stat `%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1123=allocate([102,105,108,101,32,96,37,115,39,32,105,115,32,116,111,111,32,115,109,97,108,108,0] /* file `%s' is too sma */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1224=allocate([98,97,100,32,109,97,103,105,99,32,105,110,32,96,37,115,39,0] /* bad magic in `%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13=allocate([70,105,108,101,32,37,115,32,115,117,112,112,111,114,116,115,32,111,110,108,121,32,118,101,114,115,105,111,110,32,37,100,32,109,97,103,105,99,32,102,105,108,101,115,46,32,96,37,115,39,32,105,115,32,118,101,114,115,105,111,110,32,37,100,0] /* File %s supports onl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([53,46,49,49,0] /* 5.11\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._ext=allocate([46,109,103,99,0] /* .mgc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([37,46,42,115,46,109,105,109,101,37,115,0] /* %._s.mime%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([37,46,42,115,37,115,0] /* %._s%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([46,109,105,109,101,0] /* .mime\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([99,97,110,110,111,116,32,111,112,101,110,32,96,37,115,39,0] /* cannot open `%s'\00 */, "i8", ALLOC_STATIC);
_ar=allocate([-249691108, 0, 0, 0, 8, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str19=allocate([101,114,114,111,114,32,119,114,105,116,105,110,103,32,96,37,115,39,0] /* error writing `%s'\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([101,114,114,111,114,32,115,101,101,107,105,110,103,32,96,37,115,39,0] /* error seeking `%s'\0 */, "i8", ALLOC_STATIC);
_maxmagic=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._usg_hdr=allocate([99,111,110,116,9,111,102,102,115,101,116,9,116,121,112,101,9,111,112,99,111,100,101,9,109,97,115,107,9,118,97,108,117,101,9,100,101,115,99,0] /* cont\09offset\09type */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([37,115,47,37,115,0] /* %s/%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._apprentice_load_text=allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._apprentice_load_binary=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([37,115,37,115,37,115,58,32,37,115,10,0] /* %s%s%s: %s\0A\00 */, "i8", ALLOC_STATIC);
__str24=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([59,32,0] /* ; \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([40,110,111,32,100,101,115,99,114,105,112,116,105,111,110,41,0] /* (no description)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([42,42,42,32,80,111,115,115,105,98,108,101,32,98,105,110,97,114,121,32,116,101,115,116,32,102,111,114,32,116,101,120,116,32,116,121,112,101,10,0] /* ___ Possible binary  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([108,101,118,101,108,32,48,32,34,100,101,102,97,117,108,116,34,32,100,105,100,32,110,111,116,32,115,111,114,116,32,108,97,115,116,0] /* level 0 \22default\2 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([99,97,110,110,111,116,32,114,101,97,100,32,109,97,103,105,99,32,102,105,108,101,32,96,37,115,39,0] /* cannot read magic fi */, "i8", ALLOC_STATIC);
_bang=allocate([0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str31=allocate([85,110,107,110,111,119,110,32,33,58,32,101,110,116,114,121,32,96,37,115,39,0] /* Unknown !: entry `%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([78,111,32,99,117,114,114,101,110,116,32,101,110,116,114,121,32,102,111,114,32,58,33,37,115,32,116,121,112,101,0] /* No current entry for */, "i8", ALLOC_STATIC);
_parse_last_cont_level=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([78,111,32,99,117,114,114,101,110,116,32,101,110,116,114,121,32,102,111,114,32,99,111,110,116,105,110,117,97,116,105,111,110,0] /* No current entry for */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([114,101,108,97,116,105,118,101,32,111,102,102,115,101,116,32,97,116,32,108,101,118,101,108,32,48,0] /* relative offset at l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([111,102,102,115,101,116,32,96,37,115,39,32,105,110,118,97,108,105,100,0] /* offset `%s' invalid\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36=allocate([105,110,100,105,114,101,99,116,32,111,102,102,115,101,116,32,116,121,112,101,32,96,37,99,39,32,105,110,118,97,108,105,100,0] /* indirect offset type */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37=allocate([105,110,95,111,102,102,115,101,116,32,96,37,115,39,32,105,110,118,97,108,105,100,0] /* in_offset `%s' inval */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([109,105,115,115,105,110,103,32,39,41,39,32,105,110,32,105,110,100,105,114,101,99,116,32,111,102,102,115,101,116,0] /* missing ')' in indir */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([116,121,112,101,32,96,37,115,39,32,105,110,118,97,108,105,100,0] /* type `%s' invalid\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([39,126,39,32,105,110,118,97,108,105,100,32,102,111,114,32,115,116,114,105,110,103,32,116,121,112,101,115,0] /* '~' invalid for stri */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41=allocate([109,117,108,116,105,112,108,101,32,114,97,110,103,101,115,0] /* multiple ranges\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([122,101,114,111,32,114,97,110,103,101,0] /* zero range\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([115,116,114,105,110,103,32,101,120,116,101,110,115,105,111,110,32,96,37,99,39,32,105,110,118,97,108,105,100,0] /* string extension `%c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,111,112,58,32,37,99,0] /* invalid string op: % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45=allocate([37,99,61,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* %c= not supported\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46=allocate([100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,32,116,114,117,110,99,97,116,101,100,0] /* description `%s' tru */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47=allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,32,98,101,116,119,101,101,110,32,109,45,62,116,121,112,101,32,97,110,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,115,0] /* Internal error incon */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48=allocate([78,111,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,102,111,114,32,96,37,115,39,32,119,105,116,104,32,100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,0] /* No format string for */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49=allocate([80,114,105,110,116,102,32,102,111,114,109,97,116,32,96,37,99,39,32,105,115,32,110,111,116,32,118,97,108,105,100,32,102,111,114,32,116,121,112,101,32,96,37,115,39,32,105,110,32,100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,0] /* Printf format `%c' i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50=allocate([84,111,111,32,109,97,110,121,32,102,111,114,109,97,116,32,115,116,114,105,110,103,115,32,40,115,104,111,117,108,100,32,104,97,118,101,32,97,116,32,109,111,115,116,32,111,110,101,41,32,102,111,114,32,96,37,115,39,32,119,105,116,104,32,100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,0] /* Too many format stri */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51=allocate([99,97,110,110,111,116,32,103,101,116,32,115,116,114,105,110,103,32,102,114,111,109,32,96,37,115,39,0] /* cannot get string fr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,58,32,96,37,115,39,0] /* string too long: `%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([105,110,99,111,109,112,108,101,116,101,32,101,115,99,97,112,101,0] /* incomplete escape\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54=allocate([101,115,99,97,112,101,100,32,116,97,98,32,102,111,117,110,100,44,32,117,115,101,32,92,116,32,105,110,115,116,101,97,100,0] /* escaped tab found, u */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55=allocate([60,62,38,94,61,33,0] /* __&^=!\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56=allocate([91,93,40,41,46,42,63,94,36,124,123,125,0] /* []()._?^$|{}\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57=allocate([110,111,32,110,101,101,100,32,116,111,32,101,115,99,97,112,101,32,96,37,99,39,0] /* no need to escape `% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58=allocate([117,110,107,110,111,119,110,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32,92,37,48,51,111,0] /* unknown escape seque */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([39,47,66,72,104,76,108,39,32,109,111,100,105,102,105,101,114,115,32,97,114,101,32,111,110,108,121,32,97,108,108,111,119,101,100,32,102,111,114,32,112,97,115,99,97,108,32,115,116,114,105,110,103,115,10,0] /* '/BHhLl' modifiers a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60=allocate([110,111,32,109,111,100,105,102,105,101,114,115,32,97,108,108,111,119,101,100,32,102,111,114,32,49,54,45,98,105,116,32,115,116,114,105,110,103,115,10,0] /* no modifiers allowed */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61=allocate([39,47,37,99,39,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,32,114,101,103,101,120,32,97,110,100,32,115,101,97,114,99,104,10,0] /* '/%c' only allowed o */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62=allocate([109,105,115,115,105,110,103,32,114,97,110,103,101,59,32,100,101,102,97,117,108,116,105,110,103,32,116,111,32,37,100,10,0] /* missing range; defau */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63=allocate([39,47,37,99,39,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,114,101,103,101,120,10,0] /* '/%c' not allowed on */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64=allocate([99,111,100,105,110,103,32,101,114,114,111,114,58,32,109,45,62,116,121,112,101,61,37,100,10,0] /* coding error: m-_typ */, "i8", ALLOC_STATIC);
_type_tbl=allocate([98, 121, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 115, 104, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 100, 101, 102, 97, 117, 108, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 98, 101, 115, 104, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 98, 101, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 98, 101, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 108, 101, 115, 104, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 108, 101, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 108, 101, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 112, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0, 2, 0, 0, 0, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 98, 101, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 108, 101, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 114, 101, 103, 101, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 98, 101, 115, 116, 114, 105, 110, 103, 49, 54, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 18, 0, 0, 0, 2, 0, 0, 0, 108, 101, 115, 116, 114, 105, 110, 103, 49, 54, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 2, 0, 0, 0, 115, 101, 97, 114, 99, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 20, 0, 0, 0, 2, 0, 0, 0, 109, 101, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 21, 0, 0, 0, 2, 0, 0, 0, 109, 101, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 22, 0, 0, 0, 2, 0, 0, 0, 109, 101, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 108, 101, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 98, 101, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 26, 0, 0, 0, 3, 0, 0, 0, 113, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 27, 0, 0, 0, 2, 0, 0, 0, 108, 101, 113, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 28, 0, 0, 0, 2, 0, 0, 0, 98, 101, 113, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 29, 0, 0, 0, 2, 0, 0, 0, 113, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 30, 0, 0, 0, 2, 0, 0, 0, 108, 101, 113, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 31, 0, 0, 0, 2, 0, 0, 0, 98, 101, 113, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 2, 0, 0, 0, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 33, 0, 0, 0, 4, 0, 0, 0, 98, 101, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 34, 0, 0, 0, 4, 0, 0, 0, 108, 101, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 35, 0, 0, 0, 4, 0, 0, 0, 100, 111, 117, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 36, 0, 0, 0, 5, 0, 0, 0, 98, 101, 100, 111, 117, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 37, 0, 0, 0, 5, 0, 0, 0, 108, 101, 100, 111, 117, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 38, 0, 0, 0, 5, 0, 0, 0, 108, 101, 105, 100, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 98, 101, 105, 100, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 105, 110, 100, 105, 114, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str65=allocate([115,121,110,116,97,120,32,101,114,114,111,114,58,32,96,105,102,39,0] /* syntax error: `if'\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66=allocate([115,121,110,116,97,120,32,101,114,114,111,114,58,32,96,101,108,105,102,39,0] /* syntax error: `elif' */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67=allocate([115,121,110,116,97,120,32,101,114,114,111,114,58,32,96,101,108,115,101,39,0] /* syntax error: `else' */, "i8", ALLOC_STATIC);
_get_cond_cond_tbl=allocate([105, 102, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 101, 108, 105, 102, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 101, 108, 115, 101, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str68=allocate([109,105,109,101,0] /* mime\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69=allocate([97,112,112,108,101,0] /* apple\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70=allocate([115,116,114,101,110,103,116,104,0] /* strength\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71=allocate([67,117,114,114,101,110,116,32,101,110,116,114,121,32,97,108,114,101,97,100,121,32,104,97,115,32,97,32,115,116,114,101,110,103,116,104,32,116,121,112,101,58,32,37,99,32,37,100,0] /* Current entry alread */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([85,110,107,110,111,119,110,32,102,97,99,116,111,114,32,111,112,32,96,37,99,39,0] /* Unknown factor op `% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73=allocate([84,111,111,32,108,97,114,103,101,32,102,97,99,116,111,114,32,96,37,108,117,39,0] /* Too large factor `%l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74=allocate([66,97,100,32,102,97,99,116,111,114,32,96,37,115,39,0] /* Bad factor `%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75=allocate([67,97,110,110,111,116,32,104,97,118,101,32,102,97,99,116,111,114,32,111,112,32,96,37,99,39,32,97,110,100,32,102,97,99,116,111,114,32,37,117,0] /* Cannot have factor o */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76=allocate([67,117,114,114,101,110,116,32,101,110,116,114,121,32,97,108,114,101,97,100,121,32,104,97,115,32,97,32,65,80,80,76,69,32,116,121,112,101,32,96,37,46,56,115,39,44,32,110,101,119,32,116,121,112,101,32,96,37,115,39,0] /* Current entry alread */, "i8", ALLOC_STATIC);
STRING_TABLE.__str77=allocate([45,43,47,46,0] /* -+/.\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([65,80,80,76,69,32,116,121,112,101,32,96,37,115,39,32,116,114,117,110,99,97,116,101,100,32,37,122,117,0] /* APPLE type `%s' trun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str79=allocate([67,117,114,114,101,110,116,32,101,110,116,114,121,32,97,108,114,101,97,100,121,32,104,97,115,32,97,32,77,73,77,69,32,116,121,112,101,32,96,37,115,39,44,32,110,101,119,32,116,121,112,101,32,96,37,115,39,0] /* Current entry alread */, "i8", ALLOC_STATIC);
STRING_TABLE.__str80=allocate([77,73,77,69,32,116,121,112,101,32,96,37,115,39,32,116,114,117,110,99,97,116,101,100,32,37,122,117,0] /* MIME type `%s' trunc */, "i8", ALLOC_STATIC);
_init_file_tables_done=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid30=allocate([64,40,35,41,36,70,105,108,101,58,32,115,111,102,116,109,97,103,105,99,46,99,44,118,32,49,46,49,52,55,32,50,48,49,49,47,49,49,47,48,53,32,49,53,58,52,52,58,50,50,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: softmagic */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81=allocate([32,0] /*  \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str182=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str283=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str384=allocate([37,104,117,0] /* %hu\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str485=allocate([37,117,0] /* %u\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str586=allocate([37,103,0] /* %g\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str687=allocate([105,110,118,97,108,105,100,32,109,45,62,116,121,112,101,32,40,37,100,41,32,105,110,32,109,112,114,105,110,116,40,41,0] /* invalid m-_type (%d) */, "i8", ALLOC_STATIC);
STRING_TABLE.__str788=allocate([37,91,45,48,45,57,92,46,93,42,115,0] /* %[-0-9\5C.]_s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str889=allocate([114,101,103,101,120,32,101,114,114,111,114,32,37,100,44,32,40,37,115,41,0] /* regex error %d, (%s) */, "i8", ALLOC_STATIC);
STRING_TABLE.__str990=allocate([10,45,32,0] /* \0A- \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1091=allocate([37,46,56,115,0] /* %.8s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1192=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1293=allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,32,119,105,116,104,32,102,108,111,97,116,58,32,105,110,118,97,108,105,100,32,114,101,108,97,116,105,111,110,32,96,37,99,39,0] /* cannot happen with f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1394=allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,32,119,105,116,104,32,100,111,117,98,108,101,58,32,105,110,118,97,108,105,100,32,114,101,108,97,116,105,111,110,32,96,37,99,39,0] /* cannot happen with d */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1495=allocate([114,101,103,101,120,101,99,32,101,114,114,111,114,32,37,100,44,32,40,37,115,41,0] /* regexec error %d, (% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1596=allocate([105,110,118,97,108,105,100,32,116,121,112,101,32,37,100,32,105,110,32,109,97,103,105,99,99,104,101,99,107,40,41,0] /* invalid type %d in m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1697=allocate([37,108,108,117,32,61,61,32,42,97,110,121,42,32,61,32,49,10,0] /* %llu == _any_ = 1\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1798=allocate([37,108,108,117,32,33,61,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu != %llu = %d\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1899=allocate([37,108,108,117,32,61,61,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu == %llu = %d\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19100=allocate([37,108,108,117,32,62,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu _ %llu = %d\0A\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20101=allocate([37,108,108,100,32,62,32,37,108,108,100,32,61,32,37,100,10,0] /* %lld _ %lld = %d\0A\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21102=allocate([37,108,108,117,32,60,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu _ %llu = %d\0A\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22103=allocate([37,108,108,100,32,60,32,37,108,108,100,32,61,32,37,100,10,0] /* %lld _ %lld = %d\0A\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23104=allocate([40,40,37,108,108,120,32,38,32,37,108,108,120,41,32,61,61,32,37,108,108,120,41,32,61,32,37,100,10,0] /* ((%llx & %llx) == %l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24105=allocate([40,40,37,108,108,120,32,38,32,37,108,108,120,41,32,33,61,32,37,108,108,120,41,32,61,32,37,100,10,0] /* ((%llx & %llx) != %l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25106=allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,58,32,105,110,118,97,108,105,100,32,114,101,108,97,116,105,111,110,32,96,37,99,39,0] /* cannot happen: inval */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26107=allocate([105,110,118,97,108,105,100,32,116,121,112,101,32,37,100,32,105,110,32,109,99,111,110,118,101,114,116,40,41,0] /* invalid type %d in m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27108=allocate([109,103,101,116,32,64,37,100,58,32,0] /* mget @%d: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28109=allocate([105,110,118,97,108,105,100,32,111,102,102,115,101,116,32,37,117,32,105,110,32,109,99,111,112,121,40,41,0] /* invalid offset %u in */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid111=allocate([64,40,35,41,36,70,105,108,101,58,32,97,115,99,109,97,103,105,99,46,99,44,118,32,49,46,56,52,32,50,48,49,49,47,49,50,47,48,56,32,49,50,58,51,56,58,50,52,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: ascmagic. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str112=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1113=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2114=allocate([116,101,120,116,47,112,108,97,105,110,0] /* text/plain\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3115=allocate([32,116,101,120,116,36,0] /*  text$\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4116=allocate([44,32,0] /* , \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5117=allocate([32,116,101,120,116,32,101,120,101,99,117,116,97,98,108,101,36,0] /*  text executable$\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6118=allocate([32,37,115,0] /*  %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7119=allocate([32,101,120,101,99,117,116,97,98,108,101,0] /*  executable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8120=allocate([44,32,119,105,116,104,32,118,101,114,121,32,108,111,110,103,32,108,105,110,101,115,0] /* , with very long lin */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9121=allocate([44,32,119,105,116,104,0] /* , with\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10122=allocate([32,110,111,0] /*  no\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11123=allocate([32,67,82,76,70,0] /*  CRLF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12124=allocate([44,0] /* ,\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13125=allocate([32,67,82,0] /*  CR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14126=allocate([32,76,70,0] /*  LF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15127=allocate([32,78,69,76,0] /*  NEL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16128=allocate([32,108,105,110,101,32,116,101,114,109,105,110,97,116,111,114,115,0] /*  line terminators\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17129=allocate([44,32,119,105,116,104,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,115,0] /* , with escape sequen */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18130=allocate([44,32,119,105,116,104,32,111,118,101,114,115,116,114,105,107,105,110,103,0] /* , with overstriking\ */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid132=allocate([64,40,35,41,36,70,105,108,101,58,32,101,110,99,111,100,105,110,103,46,99,44,118,32,49,46,55,32,50,48,49,50,47,48,49,47,50,52,32,49,57,58,48,50,58,48,50,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: encoding. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str133=allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1134=allocate([65,83,67,73,73,0] /* ASCII\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2135=allocate([117,115,45,97,115,99,105,105,0] /* us-ascii\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3136=allocate([85,84,70,45,56,32,85,110,105,99,111,100,101,32,40,119,105,116,104,32,66,79,77,41,0] /* UTF-8 Unicode (with  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4137=allocate([117,116,102,45,56,0] /* utf-8\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5138=allocate([85,84,70,45,56,32,85,110,105,99,111,100,101,0] /* UTF-8 Unicode\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6139=allocate([76,105,116,116,108,101,45,101,110,100,105,97,110,32,85,84,70,45,49,54,32,85,110,105,99,111,100,101,0] /* Little-endian UTF-16 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7140=allocate([117,116,102,45,49,54,108,101,0] /* utf-16le\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8141=allocate([66,105,103,45,101,110,100,105,97,110,32,85,84,70,45,49,54,32,85,110,105,99,111,100,101,0] /* Big-endian UTF-16 Un */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9142=allocate([117,116,102,45,49,54,98,101,0] /* utf-16be\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10143=allocate([73,83,79,45,56,56,53,57,0] /* ISO-8859\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11144=allocate([105,115,111,45,56,56,53,57,45,49,0] /* iso-8859-1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12145=allocate([78,111,110,45,73,83,79,32,101,120,116,101,110,100,101,100,45,65,83,67,73,73,0] /* Non-ISO extended-ASC */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13146=allocate([117,110,107,110,111,119,110,45,56,98,105,116,0] /* unknown-8bit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14147=allocate([69,66,67,68,73,67,0] /* EBCDIC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15148=allocate([101,98,99,100,105,99,0] /* ebcdic\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16149=allocate([73,110,116,101,114,110,97,116,105,111,110,97,108,32,69,66,67,68,73,67,0] /* International EBCDIC */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17150=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._text_chars=allocate([0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2] /* \00\00\00\00\00\00\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._ebcdic_to_ascii=allocate([0,1,2,3,156,9,134,127,151,141,142,11,12,13,14,15,16,17,18,19,157,133,8,135,24,25,146,143,28,29,30,31,128,129,130,131,132,10,23,27,136,137,138,139,140,5,6,7,144,145,22,147,148,149,150,4,152,153,154,155,20,21,158,26,32,160,161,162,163,164,165,166,167,168,213,46,60,40,43,124,38,169,170,171,172,173,174,175,176,177,33,36,42,41,59,126,45,47,178,179,180,181,182,183,184,185,203,44,37,95,62,63,186,187,188,189,190,191,192,193,194,96,58,35,64,39,61,34,195,97,98,99,100,101,102,103,104,105,196,197,198,199,200,201,202,106,107,108,109,110,111,112,113,114,94,204,205,206,207,208,209,229,115,116,117,118,119,120,121,122,210,211,212,91,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,93,230,231,123,65,66,67,68,69,70,71,72,73,232,233,234,235,236,237,125,74,75,76,77,78,79,80,81,82,238,239,240,241,242,243,92,159,83,84,85,86,87,88,89,90,244,245,246,247,248,249,48,49,50,51,52,53,54,55,56,57,250,251,252,253,254,255] /* \00\01\02\03\9C\09\8 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid156=allocate([64,40,35,41,36,70,105,108,101,58,32,114,101,97,100,101,108,102,46,99,44,118,32,49,46,57,48,32,50,48,49,49,47,48,56,47,50,51,32,48,56,58,48,49,58,49,50,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: readelf.c */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid158=allocate([64,40,35,41,36,70,105,108,101,58,32,112,114,105,110,116,46,99,44,118,32,49,46,55,49,32,50,48,49,49,47,48,57,47,50,48,32,49,53,58,50,56,58,48,57,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: print.c,v */, "i8", ALLOC_STATIC);
STRING_TABLE._file_mdump_optyp=allocate([38,124,94,43,45,42,47,37,0] /* &|^+-_/%\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str159=allocate([37,117,58,32,37,46,42,115,32,37,117,0] /* %u: %._s %u\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1160=allocate([62,62,62,62,62,62,62,62,0] /* ________\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2161=allocate([40,37,115,44,0] /* (%s,\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3162=allocate([42,98,97,100,42,0] /* _bad_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4163=allocate([37,99,37,117,41,44,0] /* %c%u),\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5164=allocate([32,37,115,37,115,0] /*  %s%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6165=allocate([117,0] /* u\00 */, "i8", ALLOC_STATIC);
__str7166=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str8167=allocate([47,37,117,0] /* /%u\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9168=allocate([37,46,56,108,108,120,0] /* %.8llx\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10169=allocate([44,37,99,0] /* ,%c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11170=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12171=allocate([37,108,108,100,0] /* %lld\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13172=allocate([37,115,44,0] /* %s,\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14173=allocate([37,71,0] /* %G\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15174=allocate([44,34,37,115,34,93,10,0] /* ,\22%s\22]\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16175=allocate([37,115,44,32,37,108,117,58,32,0] /* %s, %lu: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17176=allocate([87,97,114,110,105,110,103,58,32,0] /* Warning: \00 */, "i8", ALLOC_STATIC);
_file_fmttime_daylight=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str18177=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19178=allocate([42,73,110,118,97,108,105,100,32,116,105,109,101,42,0] /* _Invalid time_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid186=allocate([64,40,35,41,36,70,105,108,101,58,32,102,117,110,99,115,46,99,44,118,32,49,46,54,48,32,50,48,49,49,47,49,50,47,48,56,32,49,50,58,51,56,58,50,52,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: funcs.c,v */, "i8", ALLOC_STATIC);
STRING_TABLE.__str187=allocate([37,115,37,115,0] /* %s%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1188=allocate([118,97,115,112,114,105,110,116,102,32,102,97,105,108,101,100,0] /* vasprintf failed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2189=allocate([99,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,37,122,117,32,98,121,116,101,115,0] /* cannot allocate %zu  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3190=allocate([101,114,114,111,114,32,115,101,101,107,105,110,103,0] /* error seeking\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4191=allocate([101,114,114,111,114,32,114,101,97,100,105,110,103,0] /* error reading\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5192=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6193=allocate([97,112,112,108,105,99,97,116,105,111,110,47,120,45,101,109,112,116,121,0] /* application/x-empty\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7194=allocate([101,109,112,116,121,0] /* empty\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8195=allocate([97,112,112,108,105,99,97,116,105,111,110,47,111,99,116,101,116,45,115,116,114,101,97,109,0] /* application/octet-st */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9196=allocate([118,101,114,121,32,115,104,111,114,116,32,102,105,108,101,32,40,110,111,32,109,97,103,105,99,41,0] /* very short file (no  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10197=allocate([116,97,114,32,37,100,10,0] /* tar %d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11198=allocate([99,100,102,32,37,100,10,0] /* cdf %d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12199=allocate([115,111,102,116,109,97,103,105,99,32,37,100,10,0] /* softmagic %d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13200=allocate([97,115,99,109,97,103,105,99,32,37,100,10,0] /* ascmagic %d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14201=allocate([97,115,99,109,97,103,105,99,47,101,110,99,32,37,100,10,0] /* ascmagic/enc %d\0A\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15202=allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16203=allocate([59,32,99,104,97,114,115,101,116,61,0] /* ; charset=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17204=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18205=allocate([110,111,32,109,97,103,105,99,32,102,105,108,101,115,32,108,111,97,100,101,100,0] /* no magic files loade */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19206=allocate([114,101,103,101,120,32,101,114,114,111,114,32,37,100,44,32,40,37,115,41,0] /* regex error %d, (%s) */, "i8", ALLOC_STATIC);
__str20207=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str21208=allocate([108,105,110,101,32,37,122,117,58,32,0] /* line %zu: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22209=allocate([32,40,37,115,41,0] /*  (%s)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid233=allocate([64,40,35,41,36,70,105,108,101,58,32,97,112,112,116,121,112,101,46,99,44,118,32,49,46,49,51,32,50,48,49,49,47,48,57,47,48,55,32,50,49,58,53,55,58,49,53,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: apptype.c */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid235=allocate([64,40,35,41,36,70,105,108,101,58,32,102,115,109,97,103,105,99,46,99,44,118,32,49,46,54,52,32,50,48,49,49,47,48,56,47,49,52,32,48,57,58,48,51,58,49,50,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: fsmagic.c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str236=allocate([99,97,110,110,111,116,32,115,116,97,116,32,96,37,115,39,0] /* cannot stat `%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1237=allocate([99,97,110,110,111,116,32,111,112,101,110,32,96,37,115,39,32,40,37,115,41,0] /* cannot open `%s' (%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2238=allocate([115,101,116,117,105,100,32,0] /* setuid \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3239=allocate([115,101,116,103,105,100,32,0] /* setgid \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4240=allocate([115,116,105,99,107,121,32,0] /* sticky \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5241=allocate([100,105,114,101,99,116,111,114,121,0] /* directory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6242=allocate([99,104,97,114,100,101,118,105,99,101,0] /* chardevice\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7243=allocate([99,104,97,114,97,99,116,101,114,32,115,112,101,99,105,97,108,0] /* character special\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8244=allocate([98,108,111,99,107,100,101,118,105,99,101,0] /* blockdevice\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9245=allocate([98,108,111,99,107,32,115,112,101,99,105,97,108,0] /* block special\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10246=allocate([102,105,102,111,0] /* fifo\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11247=allocate([102,105,102,111,32,40,110,97,109,101,100,32,112,105,112,101,41,0] /* fifo (named pipe)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12248=allocate([117,110,114,101,97,100,97,98,108,101,32,115,121,109,108,105,110,107,32,96,37,115,39,0] /* unreadable symlink ` */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13249=allocate([115,121,109,108,105,110,107,0] /* symlink\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14250=allocate([117,110,114,101,97,100,97,98,108,101,32,115,121,109,108,105,110,107,32,96,37,115,39,32,40,37,115,41,0] /* unreadable symlink ` */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15251=allocate([112,97,116,104,32,116,111,111,32,108,111,110,103,58,32,96,37,115,39,0] /* path too long: `%s'\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16252=allocate([120,45,112,97,116,104,45,116,111,111,45,108,111,110,103,0] /* x-path-too-long\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17253=allocate([115,121,109,98,111,108,105,99,32,108,105,110,107,32,116,111,32,96,37,115,39,0] /* symbolic link to `%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18254=allocate([115,111,99,107,101,116,0] /* socket\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19255=allocate([105,110,118,97,108,105,100,32,109,111,100,101,32,48,37,111,0] /* invalid mode 0%o\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20256=allocate([120,45,101,109,112,116,121,0] /* x-empty\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21257=allocate([101,109,112,116,121,0] /* empty\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22258=allocate([105,110,111,100,101,47,115,121,109,108,105,110,107,0] /* inode/symlink\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23259=allocate([98,114,111,107,101,110,32,115,121,109,98,111,108,105,99,32,108,105,110,107,32,116,111,32,96,37,115,39,0] /* broken symbolic link */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24260=allocate([105,110,111,100,101,47,37,115,0] /* inode/%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25261=allocate([59,32,99,104,97,114,115,101,116,61,0] /* ; charset=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26262=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid266=allocate([64,40,35,41,36,70,105,108,101,58,32,105,115,95,116,97,114,46,99,44,118,32,49,46,51,55,32,50,48,49,48,47,49,49,47,51,48,32,49,52,58,53,56,58,53,51,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: is_tar.c, */, "i8", ALLOC_STATIC);
STRING_TABLE.__str267=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1268=allocate([97,112,112,108,105,99,97,116,105,111,110,47,120,45,116,97,114,0] /* application/x-tar\00 */, "i8", ALLOC_STATIC);
_tartype=allocate([116, 97, 114, 32, 97, 114, 99, 104, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 79, 83, 73, 88, 32, 116, 97, 114, 32, 97, 114, 99, 104, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 79, 83, 73, 88, 32, 116, 97, 114, 32, 97, 114, 99, 104, 105, 118, 101, 32, 40, 71, 78, 85, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
STRING_TABLE.__str2269=allocate([117,115,116,97,114,32,32,0] /* ustar  \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3270=allocate([117,115,116,97,114,0] /* ustar\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid274=allocate([64,40,35,41,36,70,105,108,101,58,32,99,100,102,46,99,44,118,32,49,46,53,48,32,50,48,49,50,47,48,50,47,50,48,32,50,50,58,51,53,58,50,57,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: cdf.c,v 1 */, "i8", ALLOC_STATIC);
_cdf_bo=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str275=allocate([1,2,3,4,0] /* \01\02\03\04\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._cdf_read_summary_info_name=allocate([5,83,117,109,109,97,114,121,73,110,102,111,114,109,97,116,105,111,110,0] /* \05SummaryInformatio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1276=allocate([37,46,56,120,45,37,46,52,120,45,37,46,52,120,45,37,46,50,120,37,46,50,120,45,37,46,50,120,37,46,50,120,37,46,50,120,37,46,50,120,37,46,50,120,37,46,50,120,0] /* %.8x-%.4x-%.4x-%.2x% */, "i8", ALLOC_STATIC);
_vn=allocate([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str2277=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3278=allocate([48,120,37,120,0] /* 0x%x\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4279=allocate([37,100,100,43,0] /* %dd+\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5280=allocate([37,46,50,100,58,0] /* %.2d:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6281=allocate([37,46,50,100,0] /* %.2d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7282=allocate([67,111,100,101,32,112,97,103,101,0] /* Code page\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8283=allocate([84,105,116,108,101,0] /* Title\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9284=allocate([83,117,98,106,101,99,116,0] /* Subject\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10285=allocate([65,117,116,104,111,114,0] /* Author\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11286=allocate([75,101,121,119,111,114,100,115,0] /* Keywords\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12287=allocate([67,111,109,109,101,110,116,115,0] /* Comments\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13288=allocate([84,101,109,112,108,97,116,101,0] /* Template\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14289=allocate([76,97,115,116,32,83,97,118,101,100,32,66,121,0] /* Last Saved By\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15290=allocate([82,101,118,105,115,105,111,110,32,78,117,109,98,101,114,0] /* Revision Number\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16291=allocate([84,111,116,97,108,32,69,100,105,116,105,110,103,32,84,105,109,101,0] /* Total Editing Time\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17292=allocate([76,97,115,116,32,80,114,105,110,116,101,100,0] /* Last Printed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18293=allocate([67,114,101,97,116,101,32,84,105,109,101,47,68,97,116,101,0] /* Create Time/Date\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19294=allocate([76,97,115,116,32,83,97,118,101,100,32,84,105,109,101,47,68,97,116,101,0] /* Last Saved Time/Date */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20295=allocate([78,117,109,98,101,114,32,111,102,32,80,97,103,101,115,0] /* Number of Pages\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21296=allocate([78,117,109,98,101,114,32,111,102,32,87,111,114,100,115,0] /* Number of Words\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22297=allocate([78,117,109,98,101,114,32,111,102,32,67,104,97,114,97,99,116,101,114,115,0] /* Number of Characters */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23298=allocate([84,104,117,109,98,110,97,105,108,0] /* Thumbnail\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24299=allocate([78,97,109,101,32,111,102,32,67,114,101,97,116,105,110,103,32,65,112,112,108,105,99,97,116,105,111,110,0] /* Name of Creating App */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25300=allocate([83,101,99,117,114,105,116,121,0] /* Security\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26301=allocate([76,111,99,97,108,101,32,73,68,0] /* Locale ID\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid303=allocate([64,40,35,41,36,70,105,108,101,58,32,99,100,102,95,116,105,109,101,46,99,44,118,32,49,46,49,49,32,50,48,49,49,47,49,50,47,49,51,32,49,51,58,52,56,58,52,49,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: cdf_time. */, "i8", ALLOC_STATIC);
_cdf_ctime_ctbuf=allocate(26, "i8", ALLOC_STATIC);
STRING_TABLE.__str304=allocate([42,66,97,100,42,32,48,120,37,49,54,46,49,54,108,108,120,10,0] /* _Bad_ 0x%16.16llx\0A */, "i8", ALLOC_STATIC);
_mdays=allocate([31, 0, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE._rcsid306=allocate([64,40,35,41,36,70,105,108,101,58,32,114,101,97,100,99,100,102,46,99,44,118,32,49,46,50,57,32,50,48,49,50,47,48,50,47,50,48,32,50,48,58,48,52,58,53,56,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: readcdf.c */, "i8", ALLOC_STATIC);
__str307=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str1308=allocate([99,111,114,114,117,112,116,58,32,0] /* corrupt: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2309=allocate([67,97,110,39,116,32,114,101,97,100,32,83,65,84,0] /* Can't read SAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3310=allocate([67,97,110,39,116,32,114,101,97,100,32,83,83,65,84,0] /* Can't read SSAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4311=allocate([67,97,110,39,116,32,114,101,97,100,32,100,105,114,101,99,116,111,114,121,0] /* Can't read directory */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5312=allocate([67,97,110,110,111,116,32,114,101,97,100,32,115,104,111,114,116,32,115,116,114,101,97,109,0] /* Cannot read short st */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6313=allocate([78,111,32,115,117,109,109,97,114,121,32,105,110,102,111,0] /* No summary info\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7314=allocate([67,97,110,110,111,116,32,114,101,97,100,32,115,117,109,109,97,114,121,32,105,110,102,111,0] /* Cannot read summary  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8315=allocate([67,97,110,39,116,32,101,120,112,97,110,100,32,115,117,109,109,97,114,121,95,105,110,102,111,0] /* Can't expand summary */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9316=allocate([118,110,100,46,109,115,45,111,102,102,105,99,101,0] /* vnd.ms-office\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10317=allocate([87,111,114,100,68,111,99,117,109,101,110,116,0] /* WordDocument\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11318=allocate([109,115,119,111,114,100,0] /* msword\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12319=allocate([97,112,112,108,105,99,97,116,105,111,110,47,37,115,0] /* application/%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13320=allocate([67,111,109,112,111,115,105,116,101,32,68,111,99,117,109,101,110,116,32,70,105,108,101,32,86,50,32,68,111,99,117,109,101,110,116,0] /* Composite Document F */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14321=allocate([44,32,37,115,37,115,0] /* , %s%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15322=allocate([44,32,37,115,32,69,110,100,105,97,110,0] /* , %s Endian\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16323=allocate([76,105,116,116,108,101,0] /* Little\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17324=allocate([66,105,103,0] /* Big\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18325=allocate([44,32,79,115,58,32,87,105,110,100,111,119,115,44,32,86,101,114,115,105,111,110,32,37,100,46,37,100,0] /* , Os: Windows, Versi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19326=allocate([44,32,79,115,58,32,77,97,99,79,83,44,32,86,101,114,115,105,111,110,32,37,100,46,37,100,0] /* , Os: MacOS, Version */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20327=allocate([44,32,79,115,32,37,100,44,32,86,101,114,115,105,111,110,58,32,37,100,46,37,100,0] /* , Os %d, Version: %d */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21328=allocate([44,32,37,115,58,32,37,104,100,0] /* , %s: %hd\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22329=allocate([44,32,37,115,58,32,37,100,0] /* , %s: %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23330=allocate([44,32,37,115,58,32,37,117,0] /* , %s: %u\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24331=allocate([44,32,37,115,58,32,37,103,0] /* , %s: %g\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25332=allocate([44,32,37,115,58,32,37,115,0] /* , %s: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26333=allocate([87,111,114,100,0] /* Word\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27334=allocate([69,120,99,101,108,0] /* Excel\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28335=allocate([118,110,100,46,109,115,45,101,120,99,101,108,0] /* vnd.ms-excel\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29336=allocate([80,111,119,101,114,112,111,105,110,116,0] /* Powerpoint\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30337=allocate([118,110,100,46,109,115,45,112,111,119,101,114,112,111,105,110,116,0] /* vnd.ms-powerpoint\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31338=allocate([67,114,121,115,116,97,108,32,82,101,112,111,114,116,115,0] /* Crystal Reports\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32339=allocate([120,45,114,112,116,0] /* x-rpt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid343=allocate([64,40,35,41,36,70,105,108,101,58,32,97,115,112,114,105,110,116,102,46,99,44,118,32,49,46,52,32,50,48,49,48,47,48,55,47,50,49,32,49,54,58,52,55,58,49,55,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: asprintf. */, "i8", ALLOC_STATIC);
STRING_TABLE._rcsid347=allocate([64,40,35,41,36,70,105,108,101,58,32,118,97,115,112,114,105,110,116,102,46,99,44,118,32,49,46,56,32,50,48,49,49,47,49,50,47,48,56,32,49,50,58,51,56,58,50,52,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: vasprintf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str348=allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1349=allocate([100,105,111,117,120,88,102,101,103,69,71,99,115,112,110,0] /* diouxXfegEGcspn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2350=allocate([37,105,0] /* %i\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3351=allocate([100,105,111,117,120,88,0] /* diouxX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4352=allocate([37,0] /* %\00 */, "i8", ALLOC_STATIC);
_nuls=allocate(10, "i8", ALLOC_STATIC);
STRING_TABLE.__str356=allocate([91,58,60,58,93,93,0] /* [:_:]]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1357=allocate([91,58,62,58,93,93,0] /* [:_:]]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2358=allocate([78,85,76,0] /* NUL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3359=allocate([83,79,72,0] /* SOH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4360=allocate([83,84,88,0] /* STX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5361=allocate([69,84,88,0] /* ETX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6362=allocate([69,79,84,0] /* EOT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7363=allocate([69,78,81,0] /* ENQ\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8364=allocate([65,67,75,0] /* ACK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9365=allocate([66,69,76,0] /* BEL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10366=allocate([97,108,101,114,116,0] /* alert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11367=allocate([66,83,0] /* BS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12368=allocate([98,97,99,107,115,112,97,99,101,0] /* backspace\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13369=allocate([72,84,0] /* HT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14370=allocate([116,97,98,0] /* tab\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15371=allocate([76,70,0] /* LF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16372=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17373=allocate([86,84,0] /* VT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18374=allocate([118,101,114,116,105,99,97,108,45,116,97,98,0] /* vertical-tab\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19375=allocate([70,70,0] /* FF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20376=allocate([102,111,114,109,45,102,101,101,100,0] /* form-feed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21377=allocate([67,82,0] /* CR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22378=allocate([99,97,114,114,105,97,103,101,45,114,101,116,117,114,110,0] /* carriage-return\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23379=allocate([83,79,0] /* SO\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24380=allocate([83,73,0] /* SI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25381=allocate([68,76,69,0] /* DLE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26382=allocate([68,67,49,0] /* DC1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27383=allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28384=allocate([68,67,51,0] /* DC3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29385=allocate([68,67,52,0] /* DC4\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30386=allocate([78,65,75,0] /* NAK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31387=allocate([83,89,78,0] /* SYN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32388=allocate([69,84,66,0] /* ETB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33389=allocate([67,65,78,0] /* CAN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34390=allocate([69,77,0] /* EM\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35391=allocate([83,85,66,0] /* SUB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36392=allocate([69,83,67,0] /* ESC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37393=allocate([73,83,52,0] /* IS4\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38394=allocate([70,83,0] /* FS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39395=allocate([73,83,51,0] /* IS3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40396=allocate([71,83,0] /* GS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41397=allocate([73,83,50,0] /* IS2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42398=allocate([82,83,0] /* RS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43399=allocate([73,83,49,0] /* IS1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44400=allocate([85,83,0] /* US\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45401=allocate([115,112,97,99,101,0] /* space\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46402=allocate([101,120,99,108,97,109,97,116,105,111,110,45,109,97,114,107,0] /* exclamation-mark\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47403=allocate([113,117,111,116,97,116,105,111,110,45,109,97,114,107,0] /* quotation-mark\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48404=allocate([110,117,109,98,101,114,45,115,105,103,110,0] /* number-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49405=allocate([100,111,108,108,97,114,45,115,105,103,110,0] /* dollar-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50406=allocate([112,101,114,99,101,110,116,45,115,105,103,110,0] /* percent-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51407=allocate([97,109,112,101,114,115,97,110,100,0] /* ampersand\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52408=allocate([97,112,111,115,116,114,111,112,104,101,0] /* apostrophe\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53409=allocate([108,101,102,116,45,112,97,114,101,110,116,104,101,115,105,115,0] /* left-parenthesis\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54410=allocate([114,105,103,104,116,45,112,97,114,101,110,116,104,101,115,105,115,0] /* right-parenthesis\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55411=allocate([97,115,116,101,114,105,115,107,0] /* asterisk\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56412=allocate([112,108,117,115,45,115,105,103,110,0] /* plus-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57413=allocate([99,111,109,109,97,0] /* comma\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58414=allocate([104,121,112,104,101,110,0] /* hyphen\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59415=allocate([104,121,112,104,101,110,45,109,105,110,117,115,0] /* hyphen-minus\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60416=allocate([112,101,114,105,111,100,0] /* period\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61417=allocate([102,117,108,108,45,115,116,111,112,0] /* full-stop\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62418=allocate([115,108,97,115,104,0] /* slash\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63419=allocate([115,111,108,105,100,117,115,0] /* solidus\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64420=allocate([122,101,114,111,0] /* zero\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str65421=allocate([111,110,101,0] /* one\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66422=allocate([116,119,111,0] /* two\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67423=allocate([116,104,114,101,101,0] /* three\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68424=allocate([102,111,117,114,0] /* four\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69425=allocate([102,105,118,101,0] /* five\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70426=allocate([115,105,120,0] /* six\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71427=allocate([115,101,118,101,110,0] /* seven\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72428=allocate([101,105,103,104,116,0] /* eight\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73429=allocate([110,105,110,101,0] /* nine\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74430=allocate([99,111,108,111,110,0] /* colon\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75431=allocate([115,101,109,105,99,111,108,111,110,0] /* semicolon\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76432=allocate([108,101,115,115,45,116,104,97,110,45,115,105,103,110,0] /* less-than-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str77433=allocate([101,113,117,97,108,115,45,115,105,103,110,0] /* equals-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78434=allocate([103,114,101,97,116,101,114,45,116,104,97,110,45,115,105,103,110,0] /* greater-than-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str79435=allocate([113,117,101,115,116,105,111,110,45,109,97,114,107,0] /* question-mark\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str80436=allocate([99,111,109,109,101,114,99,105,97,108,45,97,116,0] /* commercial-at\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81437=allocate([108,101,102,116,45,115,113,117,97,114,101,45,98,114,97,99,107,101,116,0] /* left-square-bracket\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str82=allocate([98,97,99,107,115,108,97,115,104,0] /* backslash\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str83=allocate([114,101,118,101,114,115,101,45,115,111,108,105,100,117,115,0] /* reverse-solidus\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str84=allocate([114,105,103,104,116,45,115,113,117,97,114,101,45,98,114,97,99,107,101,116,0] /* right-square-bracket */, "i8", ALLOC_STATIC);
STRING_TABLE.__str85=allocate([99,105,114,99,117,109,102,108,101,120,0] /* circumflex\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str86=allocate([99,105,114,99,117,109,102,108,101,120,45,97,99,99,101,110,116,0] /* circumflex-accent\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str87=allocate([117,110,100,101,114,115,99,111,114,101,0] /* underscore\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str88=allocate([108,111,119,45,108,105,110,101,0] /* low-line\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str89=allocate([103,114,97,118,101,45,97,99,99,101,110,116,0] /* grave-accent\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str90=allocate([108,101,102,116,45,98,114,97,99,101,0] /* left-brace\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91=allocate([108,101,102,116,45,99,117,114,108,121,45,98,114,97,99,107,101,116,0] /* left-curly-bracket\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str92=allocate([118,101,114,116,105,99,97,108,45,108,105,110,101,0] /* vertical-line\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str93=allocate([114,105,103,104,116,45,98,114,97,99,101,0] /* right-brace\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str94=allocate([114,105,103,104,116,45,99,117,114,108,121,45,98,114,97,99,107,101,116,0] /* right-curly-bracket\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str95=allocate([116,105,108,100,101,0] /* tilde\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str96=allocate([68,69,76,0] /* DEL\00 */, "i8", ALLOC_STATIC);
_cnames=allocate([0, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 1, undef, 0, 0, 0, 0, 0, 0, 2, undef, 0, 0, 0, 0, 0, 0, 3, undef, 0, 0, 0, 0, 0, 0, 4, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 0, 0, 0, 0, 6, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 9, undef, 0, 0, 0, 0, 0, 0, 9, undef, 0, 0, 0, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 11, undef, 0, 0, 0, 0, 0, 0, 11, undef, 0, 0, 0, 0, 0, 0, 12, undef, 0, 0, 0, 0, 0, 0, 12, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 14, undef, 0, 0, 0, 0, 0, 0, 15, undef, 0, 0, 0, 0, 0, 0, 16, undef, 0, 0, 0, 0, 0, 0, 17, undef, 0, 0, 0, 0, 0, 0, 18, undef, 0, 0, 0, 0, 0, 0, 19, undef, 0, 0, 0, 0, 0, 0, 20, undef, 0, 0, 0, 0, 0, 0, 21, undef, 0, 0, 0, 0, 0, 0, 22, undef, 0, 0, 0, 0, 0, 0, 23, undef, 0, 0, 0, 0, 0, 0, 24, undef, 0, 0, 0, 0, 0, 0, 25, undef, 0, 0, 0, 0, 0, 0, 26, undef, 0, 0, 0, 0, 0, 0, 27, undef, 0, 0, 0, 0, 0, 0, 28, undef, 0, 0, 0, 0, 0, 0, 28, undef, 0, 0, 0, 0, 0, 0, 29, undef, 0, 0, 0, 0, 0, 0, 29, undef, 0, 0, 0, 0, 0, 0, 30, undef, 0, 0, 0, 0, 0, 0, 30, undef, 0, 0, 0, 0, 0, 0, 31, undef, 0, 0, 0, 0, 0, 0, 31, undef, 0, 0, 0, 0, 0, 0, 32, undef, 0, 0, 0, 0, 0, 0, 33, undef, 0, 0, 0, 0, 0, 0, 34, undef, 0, 0, 0, 0, 0, 0, 35, undef, 0, 0, 0, 0, 0, 0, 36, undef, 0, 0, 0, 0, 0, 0, 37, undef, 0, 0, 0, 0, 0, 0, 38, undef, 0, 0, 0, 0, 0, 0, 39, undef, 0, 0, 0, 0, 0, 0, 40, undef, 0, 0, 0, 0, 0, 0, 41, undef, 0, 0, 0, 0, 0, 0, 42, undef, 0, 0, 0, 0, 0, 0, 43, undef, 0, 0, 0, 0, 0, 0, 44, undef, 0, 0, 0, 0, 0, 0, 45, undef, 0, 0, 0, 0, 0, 0, 45, undef, 0, 0, 0, 0, 0, 0, 46, undef, 0, 0, 0, 0, 0, 0, 46, undef, 0, 0, 0, 0, 0, 0, 47, undef, 0, 0, 0, 0, 0, 0, 47, undef, 0, 0, 0, 0, 0, 0, 48, undef, 0, 0, 0, 0, 0, 0, 49, undef, 0, 0, 0, 0, 0, 0, 50, undef, 0, 0, 0, 0, 0, 0, 51, undef, 0, 0, 0, 0, 0, 0, 52, undef, 0, 0, 0, 0, 0, 0, 53, undef, 0, 0, 0, 0, 0, 0, 54, undef, 0, 0, 0, 0, 0, 0, 55, undef, 0, 0, 0, 0, 0, 0, 56, undef, 0, 0, 0, 0, 0, 0, 57, undef, 0, 0, 0, 0, 0, 0, 58, undef, 0, 0, 0, 0, 0, 0, 59, undef, 0, 0, 0, 0, 0, 0, 60, undef, 0, 0, 0, 0, 0, 0, 61, undef, 0, 0, 0, 0, 0, 0, 62, undef, 0, 0, 0, 0, 0, 0, 63, undef, 0, 0, 0, 0, 0, 0, 64, undef, 0, 0, 0, 0, 0, 0, 91, undef, 0, 0, 0, 0, 0, 0, 92, undef, 0, 0, 0, 0, 0, 0, 92, undef, 0, 0, 0, 0, 0, 0, 93, undef, 0, 0, 0, 0, 0, 0, 94, undef, 0, 0, 0, 0, 0, 0, 94, undef, 0, 0, 0, 0, 0, 0, 95, undef, 0, 0, 0, 0, 0, 0, 95, undef, 0, 0, 0, 0, 0, 0, 96, undef, 0, 0, 0, 0, 0, 0, 123, undef, 0, 0, 0, 0, 0, 0, 123, undef, 0, 0, 0, 0, 0, 0, 124, undef, 0, 0, 0, 0, 0, 0, 125, undef, 0, 0, 0, 0, 0, 0, 125, undef, 0, 0, 0, 0, 0, 0, 126, undef, 0, 0, 0, 0, 0, 0, 127, undef, 0, 0, 0, 0, 0, 0, 0, undef, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8"], ALLOC_STATIC);
_cclasses=allocate(156, "i8", ALLOC_STATIC);
STRING_TABLE.__str97=allocate([97,108,110,117,109,0] /* alnum\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str98=allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_STATIC);
__str99=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str100=allocate([97,108,112,104,97,0] /* alpha\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101=allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_STATIC);
STRING_TABLE.__str102=allocate([98,108,97,110,107,0] /* blank\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str103=allocate([32,9,0] /*  \09\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str104=allocate([99,110,116,114,108,0] /* cntrl\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str105=allocate([7,8,9,10,11,12,13,1,2,3,4,5,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,0] /* \07\08\09\0A\0B\0C\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str106=allocate([100,105,103,105,116,0] /* digit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str107=allocate([48,49,50,51,52,53,54,55,56,57,0] /* 0123456789\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str108=allocate([103,114,97,112,104,0] /* graph\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str109=allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_STATIC);
STRING_TABLE.__str110=allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str111=allocate([97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* abcdefghijklmnopqrst */, "i8", ALLOC_STATIC);
STRING_TABLE.__str112438=allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str113439=allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,32,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_STATIC);
STRING_TABLE.__str114=allocate([112,117,110,99,116,0] /* punct\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str115=allocate([33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,0] /* !\22#$%&'()_+,-./:;_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str116=allocate([9,10,11,12,13,32,0] /* \09\0A\0B\0C\0D \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str117=allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str118=allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_STATIC);
STRING_TABLE.__str119=allocate([120,100,105,103,105,116,0] /* xdigit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str120=allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,97,98,99,100,101,102,0] /* 0123456789ABCDEFabcd */, "i8", ALLOC_STATIC);
_rerrs=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str442=allocate([82,69,71,95,48,120,37,120,0] /* REG_0x%x\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1443=allocate([48,0] /* 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2444=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3445=allocate([82,69,71,95,78,79,77,65,84,67,72,0] /* REG_NOMATCH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4446=allocate([108,108,118,109,95,114,101,103,101,120,101,99,40,41,32,102,97,105,108,101,100,32,116,111,32,109,97,116,99,104,0] /* llvm_regexec() faile */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5447=allocate([82,69,71,95,66,65,68,80,65,84,0] /* REG_BADPAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6448=allocate([105,110,118,97,108,105,100,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,0] /* invalid regular expr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7449=allocate([82,69,71,95,69,67,79,76,76,65,84,69,0] /* REG_ECOLLATE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8450=allocate([105,110,118,97,108,105,100,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0] /* invalid collating el */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9451=allocate([82,69,71,95,69,67,84,89,80,69,0] /* REG_ECTYPE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10452=allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0] /* invalid character cl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11453=allocate([82,69,71,95,69,69,83,67,65,80,69,0] /* REG_EESCAPE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12454=allocate([116,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,32,40,92,41,0] /* trailing backslash ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13455=allocate([82,69,71,95,69,83,85,66,82,69,71,0] /* REG_ESUBREG\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14456=allocate([105,110,118,97,108,105,100,32,98,97,99,107,114,101,102,101,114,101,110,99,101,32,110,117,109,98,101,114,0] /* invalid backreferenc */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15457=allocate([82,69,71,95,69,66,82,65,67,75,0] /* REG_EBRACK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16458=allocate([98,114,97,99,107,101,116,115,32,40,91,32,93,41,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* brackets ([ ]) not b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17459=allocate([82,69,71,95,69,80,65,82,69,78,0] /* REG_EPAREN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18460=allocate([112,97,114,101,110,116,104,101,115,101,115,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* parentheses not bala */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19461=allocate([82,69,71,95,69,66,82,65,67,69,0] /* REG_EBRACE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20462=allocate([98,114,97,99,101,115,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* braces not balanced\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21463=allocate([82,69,71,95,66,65,68,66,82,0] /* REG_BADBR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22464=allocate([105,110,118,97,108,105,100,32,114,101,112,101,116,105,116,105,111,110,32,99,111,117,110,116,40,115,41,0] /* invalid repetition c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23465=allocate([82,69,71,95,69,82,65,78,71,69,0] /* REG_ERANGE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24466=allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0] /* invalid character ra */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25467=allocate([82,69,71,95,69,83,80,65,67,69,0] /* REG_ESPACE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26468=allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0] /* out of memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27469=allocate([82,69,71,95,66,65,68,82,80,84,0] /* REG_BADRPT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28470=allocate([114,101,112,101,116,105,116,105,111,110,45,111,112,101,114,97,116,111,114,32,111,112,101,114,97,110,100,32,105,110,118,97,108,105,100,0] /* repetition-operator  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29471=allocate([82,69,71,95,69,77,80,84,89,0] /* REG_EMPTY\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30472=allocate([101,109,112,116,121,32,40,115,117,98,41,101,120,112,114,101,115,115,105,111,110,0] /* empty (sub)expressio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31473=allocate([82,69,71,95,65,83,83,69,82,84,0] /* REG_ASSERT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32474=allocate([34,99,97,110,39,116,32,104,97,112,112,101,110,34,32,45,45,32,121,111,117,32,102,111,117,110,100,32,97,32,98,117,103,0] /* \22can't happen\22 - */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33475=allocate([82,69,71,95,73,78,86,65,82,71,0] /* REG_INVARG\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34476=allocate([105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,111,32,114,101,103,101,120,32,114,111,117,116,105,110,101,0] /* invalid argument to  */, "i8", ALLOC_STATIC);
__str35477=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str36478=allocate([42,42,42,32,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,101,114,114,111,114,32,99,111,100,101,32,42,42,42,0] /* ___ unknown regexp e */, "i8", ALLOC_STATIC);
_m=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str487=allocate([46,47,109,97,103,105,99,0] /* ./magic\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1488=allocate([101,114,114,111,114,58,32,37,115,10,0] /* error: %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2489=allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_STATIC);
__gm_=allocate(468, "i8", ALLOC_STATIC);
_mparams=allocate(24, "i8", ALLOC_STATIC);
STRING_TABLE.__str490=allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1491=allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2492=allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_STATIC);
__ZSt7nothrow=allocate(1, "i8", ALLOC_STATIC);
__ZL13__new_handler=allocate(4, "i8", ALLOC_STATIC);
__ZTVSt9bad_alloc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 14, 0, 0, 0, 16, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str3493=allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_STATIC);
__ZTVSt20bad_array_new_length=allocate([0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 20, 0, 0, 0, 22, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str14494=allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* bad_array_new_length */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTSSt9bad_alloc=allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_STATIC);
__ZTISt9bad_alloc=allocate(12, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTSSt20bad_array_new_length=allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* St20bad_array_new_le */, "i8", ALLOC_STATIC);
__ZTISt20bad_array_new_length=allocate(12, "i8", ALLOC_STATIC);
HEAP32[((_llvm_used)>>2)]=((STRING_TABLE._rcsid)|0);
HEAP32[(((_llvm_used)+(4))>>2)]=((STRING_TABLE._rcsid1)|0);
HEAP32[(((_llvm_used)+(8))>>2)]=((STRING_TABLE._rcsid30)|0);
HEAP32[(((_llvm_used)+(12))>>2)]=((STRING_TABLE._rcsid111)|0);
HEAP32[(((_llvm_used)+(16))>>2)]=((STRING_TABLE._rcsid132)|0);
HEAP32[(((_llvm_used)+(20))>>2)]=((STRING_TABLE._rcsid156)|0);
HEAP32[(((_llvm_used)+(24))>>2)]=((STRING_TABLE._rcsid158)|0);
HEAP32[(((_llvm_used)+(28))>>2)]=((STRING_TABLE._rcsid186)|0);
HEAP32[(((_llvm_used)+(32))>>2)]=((STRING_TABLE._rcsid233)|0);
HEAP32[(((_llvm_used)+(36))>>2)]=((STRING_TABLE._rcsid235)|0);
HEAP32[(((_llvm_used)+(40))>>2)]=((STRING_TABLE._rcsid266)|0);
HEAP32[(((_llvm_used)+(44))>>2)]=((STRING_TABLE._rcsid274)|0);
HEAP32[(((_llvm_used)+(48))>>2)]=((STRING_TABLE._rcsid303)|0);
HEAP32[(((_llvm_used)+(52))>>2)]=((STRING_TABLE._rcsid306)|0);
HEAP32[(((_llvm_used)+(56))>>2)]=((STRING_TABLE._rcsid343)|0);
HEAP32[(((_llvm_used)+(60))>>2)]=((STRING_TABLE._rcsid347)|0);
HEAP32[((_bang)>>2)]=((STRING_TABLE.__str68)|0);
HEAP32[(((_bang)+(12))>>2)]=((STRING_TABLE.__str69)|0);
HEAP32[(((_bang)+(24))>>2)]=((STRING_TABLE.__str70)|0);
HEAP32[(((_vn)+(4))>>2)]=((STRING_TABLE.__str7282)|0);
HEAP32[(((_vn)+(12))>>2)]=((STRING_TABLE.__str8283)|0);
HEAP32[(((_vn)+(20))>>2)]=((STRING_TABLE.__str9284)|0);
HEAP32[(((_vn)+(28))>>2)]=((STRING_TABLE.__str10285)|0);
HEAP32[(((_vn)+(36))>>2)]=((STRING_TABLE.__str11286)|0);
HEAP32[(((_vn)+(44))>>2)]=((STRING_TABLE.__str12287)|0);
HEAP32[(((_vn)+(52))>>2)]=((STRING_TABLE.__str13288)|0);
HEAP32[(((_vn)+(60))>>2)]=((STRING_TABLE.__str14289)|0);
HEAP32[(((_vn)+(68))>>2)]=((STRING_TABLE.__str15290)|0);
HEAP32[(((_vn)+(76))>>2)]=((STRING_TABLE.__str16291)|0);
HEAP32[(((_vn)+(84))>>2)]=((STRING_TABLE.__str17292)|0);
HEAP32[(((_vn)+(92))>>2)]=((STRING_TABLE.__str18293)|0);
HEAP32[(((_vn)+(100))>>2)]=((STRING_TABLE.__str19294)|0);
HEAP32[(((_vn)+(108))>>2)]=((STRING_TABLE.__str20295)|0);
HEAP32[(((_vn)+(116))>>2)]=((STRING_TABLE.__str21296)|0);
HEAP32[(((_vn)+(124))>>2)]=((STRING_TABLE.__str22297)|0);
HEAP32[(((_vn)+(132))>>2)]=((STRING_TABLE.__str23298)|0);
HEAP32[(((_vn)+(140))>>2)]=((STRING_TABLE.__str24299)|0);
HEAP32[(((_vn)+(148))>>2)]=((STRING_TABLE.__str25300)|0);
HEAP32[(((_vn)+(156))>>2)]=((STRING_TABLE.__str26301)|0);
HEAP32[((_cnames)>>2)]=((STRING_TABLE.__str2358)|0);
HEAP32[(((_cnames)+(8))>>2)]=((STRING_TABLE.__str3359)|0);
HEAP32[(((_cnames)+(16))>>2)]=((STRING_TABLE.__str4360)|0);
HEAP32[(((_cnames)+(24))>>2)]=((STRING_TABLE.__str5361)|0);
HEAP32[(((_cnames)+(32))>>2)]=((STRING_TABLE.__str6362)|0);
HEAP32[(((_cnames)+(40))>>2)]=((STRING_TABLE.__str7363)|0);
HEAP32[(((_cnames)+(48))>>2)]=((STRING_TABLE.__str8364)|0);
HEAP32[(((_cnames)+(56))>>2)]=((STRING_TABLE.__str9365)|0);
HEAP32[(((_cnames)+(64))>>2)]=((STRING_TABLE.__str10366)|0);
HEAP32[(((_cnames)+(72))>>2)]=((STRING_TABLE.__str11367)|0);
HEAP32[(((_cnames)+(80))>>2)]=((STRING_TABLE.__str12368)|0);
HEAP32[(((_cnames)+(88))>>2)]=((STRING_TABLE.__str13369)|0);
HEAP32[(((_cnames)+(96))>>2)]=((STRING_TABLE.__str14370)|0);
HEAP32[(((_cnames)+(104))>>2)]=((STRING_TABLE.__str15371)|0);
HEAP32[(((_cnames)+(112))>>2)]=((STRING_TABLE.__str16372)|0);
HEAP32[(((_cnames)+(120))>>2)]=((STRING_TABLE.__str17373)|0);
HEAP32[(((_cnames)+(128))>>2)]=((STRING_TABLE.__str18374)|0);
HEAP32[(((_cnames)+(136))>>2)]=((STRING_TABLE.__str19375)|0);
HEAP32[(((_cnames)+(144))>>2)]=((STRING_TABLE.__str20376)|0);
HEAP32[(((_cnames)+(152))>>2)]=((STRING_TABLE.__str21377)|0);
HEAP32[(((_cnames)+(160))>>2)]=((STRING_TABLE.__str22378)|0);
HEAP32[(((_cnames)+(168))>>2)]=((STRING_TABLE.__str23379)|0);
HEAP32[(((_cnames)+(176))>>2)]=((STRING_TABLE.__str24380)|0);
HEAP32[(((_cnames)+(184))>>2)]=((STRING_TABLE.__str25381)|0);
HEAP32[(((_cnames)+(192))>>2)]=((STRING_TABLE.__str26382)|0);
HEAP32[(((_cnames)+(200))>>2)]=((STRING_TABLE.__str27383)|0);
HEAP32[(((_cnames)+(208))>>2)]=((STRING_TABLE.__str28384)|0);
HEAP32[(((_cnames)+(216))>>2)]=((STRING_TABLE.__str29385)|0);
HEAP32[(((_cnames)+(224))>>2)]=((STRING_TABLE.__str30386)|0);
HEAP32[(((_cnames)+(232))>>2)]=((STRING_TABLE.__str31387)|0);
HEAP32[(((_cnames)+(240))>>2)]=((STRING_TABLE.__str32388)|0);
HEAP32[(((_cnames)+(248))>>2)]=((STRING_TABLE.__str33389)|0);
HEAP32[(((_cnames)+(256))>>2)]=((STRING_TABLE.__str34390)|0);
HEAP32[(((_cnames)+(264))>>2)]=((STRING_TABLE.__str35391)|0);
HEAP32[(((_cnames)+(272))>>2)]=((STRING_TABLE.__str36392)|0);
HEAP32[(((_cnames)+(280))>>2)]=((STRING_TABLE.__str37393)|0);
HEAP32[(((_cnames)+(288))>>2)]=((STRING_TABLE.__str38394)|0);
HEAP32[(((_cnames)+(296))>>2)]=((STRING_TABLE.__str39395)|0);
HEAP32[(((_cnames)+(304))>>2)]=((STRING_TABLE.__str40396)|0);
HEAP32[(((_cnames)+(312))>>2)]=((STRING_TABLE.__str41397)|0);
HEAP32[(((_cnames)+(320))>>2)]=((STRING_TABLE.__str42398)|0);
HEAP32[(((_cnames)+(328))>>2)]=((STRING_TABLE.__str43399)|0);
HEAP32[(((_cnames)+(336))>>2)]=((STRING_TABLE.__str44400)|0);
HEAP32[(((_cnames)+(344))>>2)]=((STRING_TABLE.__str45401)|0);
HEAP32[(((_cnames)+(352))>>2)]=((STRING_TABLE.__str46402)|0);
HEAP32[(((_cnames)+(360))>>2)]=((STRING_TABLE.__str47403)|0);
HEAP32[(((_cnames)+(368))>>2)]=((STRING_TABLE.__str48404)|0);
HEAP32[(((_cnames)+(376))>>2)]=((STRING_TABLE.__str49405)|0);
HEAP32[(((_cnames)+(384))>>2)]=((STRING_TABLE.__str50406)|0);
HEAP32[(((_cnames)+(392))>>2)]=((STRING_TABLE.__str51407)|0);
HEAP32[(((_cnames)+(400))>>2)]=((STRING_TABLE.__str52408)|0);
HEAP32[(((_cnames)+(408))>>2)]=((STRING_TABLE.__str53409)|0);
HEAP32[(((_cnames)+(416))>>2)]=((STRING_TABLE.__str54410)|0);
HEAP32[(((_cnames)+(424))>>2)]=((STRING_TABLE.__str55411)|0);
HEAP32[(((_cnames)+(432))>>2)]=((STRING_TABLE.__str56412)|0);
HEAP32[(((_cnames)+(440))>>2)]=((STRING_TABLE.__str57413)|0);
HEAP32[(((_cnames)+(448))>>2)]=((STRING_TABLE.__str58414)|0);
HEAP32[(((_cnames)+(456))>>2)]=((STRING_TABLE.__str59415)|0);
HEAP32[(((_cnames)+(464))>>2)]=((STRING_TABLE.__str60416)|0);
HEAP32[(((_cnames)+(472))>>2)]=((STRING_TABLE.__str61417)|0);
HEAP32[(((_cnames)+(480))>>2)]=((STRING_TABLE.__str62418)|0);
HEAP32[(((_cnames)+(488))>>2)]=((STRING_TABLE.__str63419)|0);
HEAP32[(((_cnames)+(496))>>2)]=((STRING_TABLE.__str64420)|0);
HEAP32[(((_cnames)+(504))>>2)]=((STRING_TABLE.__str65421)|0);
HEAP32[(((_cnames)+(512))>>2)]=((STRING_TABLE.__str66422)|0);
HEAP32[(((_cnames)+(520))>>2)]=((STRING_TABLE.__str67423)|0);
HEAP32[(((_cnames)+(528))>>2)]=((STRING_TABLE.__str68424)|0);
HEAP32[(((_cnames)+(536))>>2)]=((STRING_TABLE.__str69425)|0);
HEAP32[(((_cnames)+(544))>>2)]=((STRING_TABLE.__str70426)|0);
HEAP32[(((_cnames)+(552))>>2)]=((STRING_TABLE.__str71427)|0);
HEAP32[(((_cnames)+(560))>>2)]=((STRING_TABLE.__str72428)|0);
HEAP32[(((_cnames)+(568))>>2)]=((STRING_TABLE.__str73429)|0);
HEAP32[(((_cnames)+(576))>>2)]=((STRING_TABLE.__str74430)|0);
HEAP32[(((_cnames)+(584))>>2)]=((STRING_TABLE.__str75431)|0);
HEAP32[(((_cnames)+(592))>>2)]=((STRING_TABLE.__str76432)|0);
HEAP32[(((_cnames)+(600))>>2)]=((STRING_TABLE.__str77433)|0);
HEAP32[(((_cnames)+(608))>>2)]=((STRING_TABLE.__str78434)|0);
HEAP32[(((_cnames)+(616))>>2)]=((STRING_TABLE.__str79435)|0);
HEAP32[(((_cnames)+(624))>>2)]=((STRING_TABLE.__str80436)|0);
HEAP32[(((_cnames)+(632))>>2)]=((STRING_TABLE.__str81437)|0);
HEAP32[(((_cnames)+(640))>>2)]=((STRING_TABLE.__str82)|0);
HEAP32[(((_cnames)+(648))>>2)]=((STRING_TABLE.__str83)|0);
HEAP32[(((_cnames)+(656))>>2)]=((STRING_TABLE.__str84)|0);
HEAP32[(((_cnames)+(664))>>2)]=((STRING_TABLE.__str85)|0);
HEAP32[(((_cnames)+(672))>>2)]=((STRING_TABLE.__str86)|0);
HEAP32[(((_cnames)+(680))>>2)]=((STRING_TABLE.__str87)|0);
HEAP32[(((_cnames)+(688))>>2)]=((STRING_TABLE.__str88)|0);
HEAP32[(((_cnames)+(696))>>2)]=((STRING_TABLE.__str89)|0);
HEAP32[(((_cnames)+(704))>>2)]=((STRING_TABLE.__str90)|0);
HEAP32[(((_cnames)+(712))>>2)]=((STRING_TABLE.__str91)|0);
HEAP32[(((_cnames)+(720))>>2)]=((STRING_TABLE.__str92)|0);
HEAP32[(((_cnames)+(728))>>2)]=((STRING_TABLE.__str93)|0);
HEAP32[(((_cnames)+(736))>>2)]=((STRING_TABLE.__str94)|0);
HEAP32[(((_cnames)+(744))>>2)]=((STRING_TABLE.__str95)|0);
HEAP32[(((_cnames)+(752))>>2)]=((STRING_TABLE.__str96)|0);
HEAP32[((_cclasses)>>2)]=((STRING_TABLE.__str97)|0);
HEAP32[(((_cclasses)+(4))>>2)]=((STRING_TABLE.__str98)|0);
HEAP32[(((_cclasses)+(8))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(12))>>2)]=((STRING_TABLE.__str100)|0);
HEAP32[(((_cclasses)+(16))>>2)]=((STRING_TABLE.__str101)|0);
HEAP32[(((_cclasses)+(20))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(24))>>2)]=((STRING_TABLE.__str102)|0);
HEAP32[(((_cclasses)+(28))>>2)]=((STRING_TABLE.__str103)|0);
HEAP32[(((_cclasses)+(32))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(36))>>2)]=((STRING_TABLE.__str104)|0);
HEAP32[(((_cclasses)+(40))>>2)]=((STRING_TABLE.__str105)|0);
HEAP32[(((_cclasses)+(44))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(48))>>2)]=((STRING_TABLE.__str106)|0);
HEAP32[(((_cclasses)+(52))>>2)]=((STRING_TABLE.__str107)|0);
HEAP32[(((_cclasses)+(56))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(60))>>2)]=((STRING_TABLE.__str108)|0);
HEAP32[(((_cclasses)+(64))>>2)]=((STRING_TABLE.__str109)|0);
HEAP32[(((_cclasses)+(68))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(72))>>2)]=((STRING_TABLE.__str110)|0);
HEAP32[(((_cclasses)+(76))>>2)]=((STRING_TABLE.__str111)|0);
HEAP32[(((_cclasses)+(80))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(84))>>2)]=((STRING_TABLE.__str112438)|0);
HEAP32[(((_cclasses)+(88))>>2)]=((STRING_TABLE.__str113439)|0);
HEAP32[(((_cclasses)+(92))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(96))>>2)]=((STRING_TABLE.__str114)|0);
HEAP32[(((_cclasses)+(100))>>2)]=((STRING_TABLE.__str115)|0);
HEAP32[(((_cclasses)+(104))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(108))>>2)]=((STRING_TABLE.__str45401)|0);
HEAP32[(((_cclasses)+(112))>>2)]=((STRING_TABLE.__str116)|0);
HEAP32[(((_cclasses)+(116))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(120))>>2)]=((STRING_TABLE.__str117)|0);
HEAP32[(((_cclasses)+(124))>>2)]=((STRING_TABLE.__str118)|0);
HEAP32[(((_cclasses)+(128))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(132))>>2)]=((STRING_TABLE.__str119)|0);
HEAP32[(((_cclasses)+(136))>>2)]=((STRING_TABLE.__str120)|0);
HEAP32[(((_cclasses)+(140))>>2)]=((__str99)|0);
HEAP32[(((_cclasses)+(152))>>2)]=((__str99)|0);
HEAP32[(((_rerrs)+(4))>>2)]=((STRING_TABLE.__str3445)|0);
HEAP32[(((_rerrs)+(8))>>2)]=((STRING_TABLE.__str4446)|0);
HEAP32[(((_rerrs)+(16))>>2)]=((STRING_TABLE.__str5447)|0);
HEAP32[(((_rerrs)+(20))>>2)]=((STRING_TABLE.__str6448)|0);
HEAP32[(((_rerrs)+(28))>>2)]=((STRING_TABLE.__str7449)|0);
HEAP32[(((_rerrs)+(32))>>2)]=((STRING_TABLE.__str8450)|0);
HEAP32[(((_rerrs)+(40))>>2)]=((STRING_TABLE.__str9451)|0);
HEAP32[(((_rerrs)+(44))>>2)]=((STRING_TABLE.__str10452)|0);
HEAP32[(((_rerrs)+(52))>>2)]=((STRING_TABLE.__str11453)|0);
HEAP32[(((_rerrs)+(56))>>2)]=((STRING_TABLE.__str12454)|0);
HEAP32[(((_rerrs)+(64))>>2)]=((STRING_TABLE.__str13455)|0);
HEAP32[(((_rerrs)+(68))>>2)]=((STRING_TABLE.__str14456)|0);
HEAP32[(((_rerrs)+(76))>>2)]=((STRING_TABLE.__str15457)|0);
HEAP32[(((_rerrs)+(80))>>2)]=((STRING_TABLE.__str16458)|0);
HEAP32[(((_rerrs)+(88))>>2)]=((STRING_TABLE.__str17459)|0);
HEAP32[(((_rerrs)+(92))>>2)]=((STRING_TABLE.__str18460)|0);
HEAP32[(((_rerrs)+(100))>>2)]=((STRING_TABLE.__str19461)|0);
HEAP32[(((_rerrs)+(104))>>2)]=((STRING_TABLE.__str20462)|0);
HEAP32[(((_rerrs)+(112))>>2)]=((STRING_TABLE.__str21463)|0);
HEAP32[(((_rerrs)+(116))>>2)]=((STRING_TABLE.__str22464)|0);
HEAP32[(((_rerrs)+(124))>>2)]=((STRING_TABLE.__str23465)|0);
HEAP32[(((_rerrs)+(128))>>2)]=((STRING_TABLE.__str24466)|0);
HEAP32[(((_rerrs)+(136))>>2)]=((STRING_TABLE.__str25467)|0);
HEAP32[(((_rerrs)+(140))>>2)]=((STRING_TABLE.__str26468)|0);
HEAP32[(((_rerrs)+(148))>>2)]=((STRING_TABLE.__str27469)|0);
HEAP32[(((_rerrs)+(152))>>2)]=((STRING_TABLE.__str28470)|0);
HEAP32[(((_rerrs)+(160))>>2)]=((STRING_TABLE.__str29471)|0);
HEAP32[(((_rerrs)+(164))>>2)]=((STRING_TABLE.__str30472)|0);
HEAP32[(((_rerrs)+(172))>>2)]=((STRING_TABLE.__str31473)|0);
HEAP32[(((_rerrs)+(176))>>2)]=((STRING_TABLE.__str32474)|0);
HEAP32[(((_rerrs)+(184))>>2)]=((STRING_TABLE.__str33475)|0);
HEAP32[(((_rerrs)+(188))>>2)]=((STRING_TABLE.__str34476)|0);
HEAP32[(((_rerrs)+(196))>>2)]=((__str35477)|0);
HEAP32[(((_rerrs)+(200))>>2)]=((STRING_TABLE.__str36478)|0);
HEAP32[(((__ZTVSt9bad_alloc)+(4))>>2)]=__ZTISt9bad_alloc;
HEAP32[(((__ZTVSt20bad_array_new_length)+(4))>>2)]=__ZTISt20bad_array_new_length;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([2,0,0,0], ["i8*",0,0,0], ALLOC_STATIC);
HEAP32[((__ZTISt9bad_alloc)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[(((__ZTISt9bad_alloc)+(4))>>2)]=((STRING_TABLE.__ZTSSt9bad_alloc)|0);
HEAP32[(((__ZTISt9bad_alloc)+(8))>>2)]=__ZTISt9exception;
HEAP32[((__ZTISt20bad_array_new_length)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[(((__ZTISt20bad_array_new_length)+(4))>>2)]=((STRING_TABLE.__ZTSSt20bad_array_new_length)|0);
HEAP32[(((__ZTISt20bad_array_new_length)+(8))>>2)]=__ZTISt9bad_alloc;
__ZNSt9bad_allocC1Ev = 24;
__ZNSt9bad_allocD1Ev = 26;
__ZNSt20bad_array_new_lengthC1Ev = 28;
__ZNSt20bad_array_new_lengthD1Ev = 30;
__ZNSt20bad_array_new_lengthD2Ev = 26;
FUNCTION_TABLE = [0,0,_cmpstrp,0,_apprentice_sort,0,__ZNSt9bad_allocD2Ev,0,_parse_mime,0,_parse_apple,0,_parse_strength,0,__ZNSt9bad_allocD0Ev,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt9bad_allocD2Ev,0,__ZNSt20bad_array_new_lengthD0Ev,0,__ZNKSt20bad_array_new_length4whatEv,0,__ZNSt9bad_allocC2Ev,0,__ZNSt9bad_allocD2Ev,0,__ZNSt20bad_array_new_lengthC2Ev,0,__ZNSt9bad_allocD2Ev,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = run;


(function() {


function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}

    function DataRequest() {}
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.requests[name] = this;
      },
      send: function() {}
    };
  
    var filePreload0 = new DataRequest();
    filePreload0.open('GET', 'magic.mgc', true);
    filePreload0.responseType = 'arraybuffer';
    filePreload0.onload = function() {
      var arrayBuffer = filePreload0.response;
      assert(arrayBuffer, 'Loading file magic.mgc failed.');
      var byteArray = !arrayBuffer.subarray ? new Uint8Array(arrayBuffer) : arrayBuffer;
      
      Module['FS_createPreloadedFile']('/', 'magic.mgc', byteArray, true, true, function() {
        Module['removeRunDependency']('fp magic.mgc');

      });
    };
    Module['addRunDependency']('fp magic.mgc');
    filePreload0.send(null);

    if (!Module.expectedDataFileDownloads) {
      Module.expectedDataFileDownloads = 0;
      Module.finishedDataFileDownloads = 0;
    }
    Module.expectedDataFileDownloads++;

    var dataFile = new XMLHttpRequest();
    dataFile.onprogress = function(event) {
      var url = 'webfile.data';
      if (event.loaded && event.total) {
        if (!dataFile.addedTotal) {
          dataFile.addedTotal = true;
          if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
          Module.dataFileDownloads[url] = {
            loaded: event.loaded,
            total: event.total
          };
        } else {
          Module.dataFileDownloads[url].loaded = event.loaded;
        }
        var total = 0;
        var loaded = 0;
        var num = 0;
        for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
          total += data.total;
          loaded += data.loaded;
          num++;
        }
        total = Math.ceil(total * Module.expectedDataFileDownloads/num);
        Module.setStatus('Downloading data... (' + loaded + '/' + total + ')');
      } else if (!Module.dataFileDownloads) {
        Module.setStatus('Downloading data...');
      }
    }
    dataFile.open('GET', 'webfile.data', true);
    dataFile.responseType = 'arraybuffer';
    dataFile.onload = function() {
      Module.finishedDataFileDownloads++;
      var arrayBuffer = dataFile.response;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        curr = DataRequest.prototype.requests['magic.mgc'];
        curr.response = byteArray.subarray(0,2279632);
        curr.onload();
                Module['removeRunDependency']('datafile_webfile.data');

    };
    Module['addRunDependency']('datafile_webfile.data');
    dataFile.send(null);
    if (Module['setStatus']) Module['setStatus']('Downloading...');
  

})();



if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_magic_setflags","_magic_error","_magic_errno","_magic_getpath","_get_default_magic","_magic_open","_magic_close","_free_mlist","_magic_load","_magic_compile","_magic_check","_magic_list","_magic_descriptor","_file_or_fd","_magic_file","_magic_buffer","_unreadable_info","_close_and_restore","_file_delmagic","_init_file_tables","_file_apprentice","_apprentice_1","_file_signextend","_file_showstr","_file_pstring_length_size","_file_pstring_get_length","_apprentice_load","_apprentice_compile","_swap4","_apprentice_map","_apprentice_list","_mkdbname","_byteswap","_apprentice_magic_strength","_swap2","_swap8","_bs1","_cmpstrp","_load_1","_set_test_type","_apprentice_sort","_parse","_get_op","_get_cond","_check_cond","_get_type","_eatsize","_string_modifier_check","_getvalue","_check_format","_getstr","_hextoint","_check_format_type","_parse_mime","_parse_apple","_parse_strength","_file_softmagic","_match","_strndup","_mget","_magiccheck","_handle_annotation","_print_sep","_mprint","_moffset","_check_fmt","_file_strncmp","_file_strncmp16","_mcopy","_mdebug","_cvt_8","_mconvert","_cvt_16","_cvt_32","_cvt_64","_cvt_float","_cvt_double","_trim_nuls","_file_ascmagic","_file_ascmagic_with_encoding","_encode_utf8","_looks_ascii","_file_encoding","_looks_utf8_with_BOM","_file_looks_utf8","_looks_ucs16","_looks_latin1","_looks_extended","_from_ebcdic","_file_mdump","_file_fmttime","_file_magwarn","_file_vprintf","_file_error","_file_printf","_file_error_core","_file_magerror","_file_oomem","_file_badseek","_file_badread","_file_buffer","_file_reset","_file_getbuffer","_file_check_mem","_file_printedlen","_file_replace","_file_fsmagic","_handle_mime","_bad_link","_file_is_tar","__cdf_tole2","__cdf_tole4","__cdf_tole8","_is_tar","_from_oct","_cdf_tole2","_cdf_tole4","_cdf_tole8","_cdf_swap_header","_cdf_unpack_header","_cdf_swap_dir","_cdf_swap_class","_cdf_unpack_dir","_cdf_read_header","_cdf_read","_cdf_read_sector","_cdf_read_short_sector","_cdf_read_sat","_cdf_count_chain","_cdf_read_long_sector_chain","_cdf_read_short_sector_chain","_cdf_read_sector_chain","_cdf_read_dir","_cdf_read_ssat","_cdf_read_short_stream","_cdf_read_summary_info","_cdf_namecmp","_cdf_read_property_info","_cdf_check_stream_offset","_cdf_getuint32","_cdf_timespec_to_timestamp","_cdf_getdays","_cdf_getday","_cdf_getmonth","_cdf_unpack_summary_info","_cdf_print_classid","_cdf_print_property_name","_cdf_print_elapsed_time","_cdf_timestamp_to_timespec","_cdf_ctime","_file_trycdf","_cdf_file_summary_info","_cdf_file_property_info","_asprintf","_vasprintf","_core","_realloc_buff","_dispatch","_usual_char","_getint","_print_it","_type_s","_llvm_regcomp","_doemit","_p_ere","_p_str","_pluscount","_seterr","_isinsets","_samesets","_p_bre","_categorize","_stripsnug","_findmust","_enlarge","_p_simp_re","_nonnewline","_p_bracket","_dupl","_ordinary","_doinsert","_dofwd","_p_count","_repeat","_othercase","_bothcases","_allocset","_mccase","_mcinvert","_freeset","_nch","_firstch","_p_b_term","_freezeset","_p_b_cclass","_p_b_eclass","_p_b_symbol","_p_b_coll_elem","_mcadd","_p_ere_exp","_llvm_regerror","_regatoi","_llvm_regexec","_smatcher","_lmatcher","_lfast","_lslow","_ldissect","_lbackref","_lstep","_sfast","_sslow","_sdissect","_sbackref","_sstep","_llvm_strlcpy","_llvm_regfree","_init_magic","_webfile_check","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_free","_sys_trim","_calloc","_realloc","_release_unused_segments","_memalign","_internal_memalign","_independent_calloc","_internal_realloc","_malloc_footprint","_malloc_max_footprint","_ialloc","_independent_comalloc","_valloc","_pvalloc","_malloc_trim","_mallinfo","_internal_mallinfo","_malloc_stats","_internal_malloc_stats","_mallopt","_init_mparams","_malloc_usable_size","_mmap_resize","_segment_holding","_init_top","_mmap_alloc","_init_bins","_change_mparam","_prepend_alloc","__ZNKSt9bad_alloc4whatEv","__ZSt15get_new_handlerv","__ZSt15set_new_handlerPFvvE","__ZNSt9bad_allocC2Ev","__ZdlPv","__ZdlPvRKSt9nothrow_t","__ZdaPv","__ZdaPvRKSt9nothrow_t","__ZNSt9bad_allocD0Ev","__ZNSt9bad_allocD2Ev","__ZNSt20bad_array_new_lengthC2Ev","_add_segment","__Znwj","__ZnwjRKSt9nothrow_t","__Znaj","__ZnajRKSt9nothrow_t","__ZNKSt20bad_array_new_length4whatEv","__ZNSt20bad_array_new_lengthD0Ev","__ZSt17__throw_bad_allocv"]



     

 });